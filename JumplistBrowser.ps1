<#
    --------------------------------------------------------------------------------
     Generated by:  Costas Katsavounidis Â© 2022-2024
	 https://github.com/kacos2000/Jumplist-Browser
    --------------------------------------------------------------------------------
#>


function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}


#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Jumplist_Browser = New-Object 'System.Windows.Forms.Form'
	$splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$OpenFolder = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolStripSeparator = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$Status = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$treeview1 = New-Object 'System.Windows.Forms.TreeView'
	$treeview2 = New-Object 'System.Windows.Forms.TreeView'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$CopyNode1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator6 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator7 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$Exit1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Process1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator8 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$contextmenustrip2 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$CopyNode2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CopyAll2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator9 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$Expand2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$Exit2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$Open = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$About = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Expand1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Collapse1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator5 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$ExpandAll1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CollapseAll1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Collapse2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$ExpandAll2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CollapseAll2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$SaveNodestoTxt = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$savefiledialog1 = New-Object 'System.Windows.Forms.SaveFileDialog'
	$OpenFileWith = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CopyFullFilePath = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CopyNode2Tag = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$SaveStreamToFile = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripRefresh = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$GetMRUlist = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator2 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$imagelist2 = New-Object 'System.Windows.Forms.ImageList'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$SaveLnkToJson = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator11 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$SaveStream = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$notifyicon1 = New-Object 'System.Windows.Forms.NotifyIcon'
	$contextmenustrip3 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$toolstrip3_About = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstrip3_Exit = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator12 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator13 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstrip3_GitHub = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$TreeSearch = New-Object 'System.Windows.Forms.ToolStripTextBox'
	$Tree1Search = New-Object 'System.Windows.Forms.ToolStripComboBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Add-Type -AssemblyName WindowsBase
	# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/16cb4ca1-9339-4d0c-a68d-bf1d6cc0f943
	$scriptname = (Split-Path ([System.Windows.Forms.Application]::ExecutablePath) -Leaf)
	$handle = [System.Diagnostics.Process]::GetCurrentProcess().MainWindowHandle
	function Get-DPI
	{
		[OutputType([single])]
		param
		(
			[IntPtr]$Handle = [IntPtr]::Zero
		)
		
		$g = [System.Drawing.Graphics]::FromHwnd($Handle)
		$dpi = $g.DpiX
		$g.Dispose()
		
		return $dpi
	}
	
	$Jumplist_Browser_Load = {
		$splitcontainer1.AutoScroll = $true
		if ((Get-DPI $Jumplist_Browser.Handle) -gt 96)
		{
			$treeview1.ImageList = $imagelist1 # HighDPI (24*24)
			$statusstrip1.ImageScalingSize = New-Object System.Drawing.Size (24, 24)
			$menustrip1.ImageScalingSize = New-Object System.Drawing.Size (24, 24)
			#	$richtextbox1.Font = New-Object Drawing.Font($oldFont.FontFamily, 8, [Drawing.FontStyle]::Regular)
			for ($i = 1; $i -lt 4; $i++)
			{
				(Get-Variable contextmenustrip$i -ValueOnly).ImageScalingSize = New-Object System.Drawing.Size (24, 24)
			}
		}
		else
		{
			$treeview1.ImageList = $imagelist2 # Regular (16 * 16)
			$statusstrip1.ImageScalingSize = New-Object System.Drawing.Size (16, 16)
			$menustrip1.ImageScalingSize = New-Object System.Drawing.Size (16, 16)
			#	$richtextbox1.Font = New-Object Drawing.Font($oldFont.FontFamily, 8, [Drawing.FontStyle]::Regular)
			for ($i = 1; $i -lt 4; $i++)
			{
				(Get-Variable contextmenustrip$i -ValueOnly).ImageScalingSize = New-Object System.Drawing.Size (16, 16)
			}
		}
		
		# Get current user access level & check if user is Administrator
		# $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
		# $IsAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
	}
	
	#region Control Helper Functions
	function Update-ToolStripComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ToolStripComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ToolStripComboBox control.
		
		.PARAMETER ToolStripComboBox
			The ToolStripComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ToolStripComboBox's Items collection.
		
		.PARAMETER Append
			Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
			Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
			Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ToolStripComboBox]
			$ToolStripComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ToolStripComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ToolStripComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ToolStripComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ToolStripComboBox.Items.Add($obj)
			}
			$ToolStripComboBox.EndUpdate()
		}
		else
		{
			$ToolStripComboBox.Items.Add($Items)
		}
	}
	
	function Show-NotifyIcon
	{
	<#
		.SYNOPSIS
			Displays a NotifyIcon's balloon tip message in the taskbar's notification area.
		
		.DESCRIPTION
			Displays a NotifyIcon's a balloon tip message in the taskbar's notification area.
			
		.PARAMETER NotifyIcon
	     	The NotifyIcon control that will be displayed.
		
		.PARAMETER BalloonTipText
	     	Sets the text to display in the balloon tip.
		
		.PARAMETER BalloonTipTitle
			Sets the Title to display in the balloon tip.
		
		.PARAMETER BalloonTipIcon	
			The icon to display in the ballon tip.
		
		.PARAMETER Timeout	
			The time the ToolTip Balloon will remain visible in milliseconds. 
			Default: 0 - Uses windows default.
	#>
		 param(
		  [Parameter(Mandatory = $true, Position = 0)]
		  [ValidateNotNull()]
		  [System.Windows.Forms.NotifyIcon]$NotifyIcon,
		  [Parameter(Mandatory = $true, Position = 1)]
		  [ValidateNotNullOrEmpty()]
		  [String]$BalloonTipText,
		  [Parameter(Position = 2)]
		  [String]$BalloonTipTitle = '',
		  [Parameter(Position = 3)]
		  [System.Windows.Forms.ToolTipIcon]$BalloonTipIcon = 'None',
		  [Parameter(Position = 4)]
		  [int]$Timeout = 0
	 	)
		
		if($null -eq $NotifyIcon.Icon)
		{
			#Set a Default Icon otherwise the balloon will not show
			$NotifyIcon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon([System.Windows.Forms.Application]::ExecutablePath)
		}
		
		$NotifyIcon.ShowBalloonTip($Timeout, $BalloonTipTitle, $BalloonTipText, $BalloonTipIcon)
	}
	
	# https://learn.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-7.0
	# https://learn.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants 
	# C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winnt.h
	$FileAttributesEnum = [Ordered]@{
		'1'		     = 'ReadOnly'
		'2'		     = 'Hidden'
		'4'		     = 'System'
		'16'		 = 'Directory'
		'32'		 = 'Archive'
		'64'		 = 'Device'
		'128'	     = 'Normal'
		'256'	     = 'Temporary'
		'512'	     = 'Sparse_File' # LocallyIncomplete
		'1024'	     = 'Reparse_Point'
		'2048'	     = 'Compressed'
		'4096'	     = 'Offline'
		'8192'	     = 'Not_Content_Indexed'
		'16384'	     = 'Encrypted'
		'32768'	     = 'Integrity_Stream'
		'65536'	     = 'Virtual'
		'131072'	 = 'No_Scrub_Data'
		'524288'	 = 'Pinned'
		'262144'	 = 'Recall_On_Open'
		'1048576'    = 'Unpinned'
		'4194304'    = 'Recall_On_DataAccess'
		'536870912'  = 'View_Index' # Strictly_Sequential
	}
	
	# https://learn.microsoft.com/en-us/windows/win32/shell/sfgao
	# ..Include\10.0.22621.0\um\ShObjIdl_core.h
	$SFGAOflags = [Ordered]@{
		'0x00000001' = 'Can be Copied'
		'0x00000002' = 'Can be Moved'
		'0x00000004' = 'Can be Linked'
		'0x00000008' = 'Supports BindToObject' # supports BindToObject(IID_IStorage)
		'0x00000010' = 'Can be Renamed' # Objects can be renamed
		'0x00000020' = 'Can be Deleted'
		'0x00000040' = 'Has Property Sheet'
		'0x00000100' = 'Is DropTarget'
		'0x00000177' = 'Capability Mask'
		'0x00000800' = 'Placeholder (Recall on Open/Access)' # File or folder is not fully present and recalled on open or access
		'0x00001000' = 'System Object' # System object
		'0x00002000' = 'Encrypted' # Object is encrypted
		'0x00004000' = 'Is Slow' # 'Slow' object
		'0x00008000' = 'Ghosted icon'
		'0x00010000' = 'Shortcut (link)'
		'0x00020000' = 'Shared'
		'0x00040000' = 'Read-Only' # Read-only
		'0x000FC000' = 'Display Attribute Mask'
		'0x00100000' = 'Non Enumerated' # non-enumerated object (should be hidden)
		'0x00200000' = 'New Content' # Should show bold in explorer tree
		'0x00400000' = 'Stream' # Supports BindToObject(IID_IStream)
		'0x00800000' = 'Storage Ancestor' # May contain children with SFGAO_STORAGE or SFGAO_STREAM
		'0x01000000' = 'Validate' # Invalidate cached information (may be slow)
		'0x02000000' = 'Removable'
		'0x04000000' = 'Compressed'
		'0x08000000' = 'Browsable' # Supports IShellFolder, but only implements CreateViewObject() (non-folder view)
		'0x10000000' = 'File System Ancestor' # May contain children with SFGAO_FILESYSTEM
		'0x20000000' = 'Folder' # Support BindToObject(IID_IShellFolder)
		'0x40000000' = 'File System (file/folder/root)' # Is a win32 file system object (file/folder/root)
		'0x70C50008' = 'Storage Cap Mask' # For determining storage capabilities, ie for open/save semantics
		'0x80000000' = 'ContentsMask' # mask for content attributes, at present only SFGAO_HASSUBFOLDER
		'0x81044000' = 'Pkey_SFGAO Mask' # Mask used by the PKEY_SFGAOFlags property to determine attributes that are considered to cause slow calculations or lack context
	}
	
	# Sources:
	# https://github.com/EricZimmerman/ExtensionBlocks/blob/e0cef99c81776641e68a3f436bfcde21f6807334/ExtensionBlocks/Utils.cs
	# 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\propkey.h'
	# 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\um\functiondiscoverykeys.h'
	# 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\shared\hidclass.h'
	# 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\shared\ntddser.h'
	$formatIDHashTable = [Ordered]@{
		"46588ae2-4cbc-4338-bbfc-139326986dce\4"	 = "SID"
		"DABD30ED-0043-4789-A7F8-D013A4736622\100"   = "ItemFolderPathDisplayNarrow"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\0"	 = "FindData"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\1"	 = "Network Resource"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\2"	 = "DescriptionID"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\3"	 = "Which Folder"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\4"	 = "Network Location"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\5"	 = "ComputerName"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\6"	 = "NamespaceCLSID"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\8"	 = "ItemPathDisplayNarrow"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\9"	 = "PerceivedType"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\10"    = "Computer Simple Name"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\11"    = "ItemType"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\12"    = "FileCount"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\14"    = "TotalFileSize"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\22"    = "Max Stack Count"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\23"    = "List Description"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\24"    = "ParsingName"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\25"    = "SFGAOFlags"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\26"    = "Order"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\27"    = "Computer Description"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\29"    = "ContainedItems"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\30"    = "ParsingPath"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\31"    = "Network Provider"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\32"    = "Delegate ID List"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\33"    = "IsSendToTarget"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\34"    = "Hide On Desktop"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\35"    = "Network Places Default Name"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\36"    = "Storage System Type"
		"28636AA6-953D-11D2-B5D6-00C04FD918D0\37"    = "ItemSubType"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\2"	 = "AppUserModel RelaunchCommand"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\3"	 = "AppUserModel RelaunchIconResource"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\4"	 = "AppUserModel RelaunchDisplayNameResource"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\5"	 = "AppUserModel ID"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\6"	 = "AppUserModel IsDestListSeparator"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\7"	 = "App User Model Is DestList Link"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\8"	 = "AppUserModel ExcludeFromShowInNewInstall"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\9"	 = "AppUserModel PreventPinning"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\10"    = "App User Model Best Shortcut"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\11"    = "AppUserModel IsDualMode"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\12"    = "AppUserModel StartPinOption"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\13"    = "App User Model Relevance"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\14"    = "App User Model Host Environment"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\15"    = "App User Model Package Install Path"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\16"    = "App User Model Record State"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\17"    = "App User Model Package Family Name"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\18"    = "App User Model Installed By"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\19"    = "App User Model Parent ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\20"    = "App User Model Activation Context"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\21"    = "App User Model Package Full Name"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\22"    = "App User Model Package Relative Application ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\23"    = "App User Model Excluded From Launcher"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\24"    = "App User Model AppCompat ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\25"    = "App User Model Run Flags"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\26"    = "AppUserModel ToastActivatorCLSID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\27"    = "App User Model DestList Provided Title"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\28"    = "App User Model DestList Provided Description"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\29"    = "App User Model DestList Logo Uri"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\30"    = "App User Model DestList Provided Group Name"
		"446D16B1-8DAD-4870-A748-402EA43D788C\100"   = "ThumbnailCacheId"
		"446D16B1-8DAD-4870-A748-402EA43D788C\104"   = "VolumeId"
		"446d16b1-8dad-4870-a748-402ea43d788c\105"   = "Tooltip Thumbnail Stream"
		"fb8d2d7b-90d1-4e34-bf60-6eac09922bbf\2"	 = "WinX Hash"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\3"	 = "Subject"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\4"	 = "Author"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\5"	 = "Keywords"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\6"	 = "Comment"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\7"	 = "Document Template"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\8"	 = "Document LastAuthor"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\9"	 = "Document RevisionNumber"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\10"    = "Document TotalEditingTime"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\11"    = "Document DatePrinted"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\12"    = "Document DateCreated"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\13"    = "Document DateSaved"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\14"    = "Document PageCount"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\15"    = "Document WordCount"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\16"    = "Document CharacterCount"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\17"    = "Thumbnail"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\18"    = "ApplicationName"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\19"    = "Document Security"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\24"    = "HighKeywords"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\25"    = "LowKeywords"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\26"    = "MediumKeywords"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\27"    = "ThumbnailStream"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\2"	 = "Publisher Display Name"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\3"	 = "Software Registered Owner"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\4"	 = "Software Registered Company"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\5"	 = "Software AppId"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\6"	 = "Software Support Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\7"	 = "Software Support Telephone"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\8"	 = "Software Help Link"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\9"	 = "Software Install Location"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\10"    = "Software Install Source"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\11"    = "Software Date Installed"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\12"    = "Software Support Contact Name"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\13"    = "Software ReadMe Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\14"    = "Software Update Info Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\15"    = "Software Times Used"
		"841E4F90-FF59-4D16-8947-E81BBFFAB36D\16"    = "Software DateLastUsed"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\17"    = "Software Tasks File Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\18"    = "Software Parent Name"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\19"    = "Software Product ID"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\20"    = "Software Comments"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\997"   = "Software Null Preview Total Size"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\998"   = "Software Null Preview Subtitle"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\999"   = "Software Null Preview Title"
		"86d40b4d-9069-443c-819a-2a54090dccec\2"	 = "Tile Small Image Location"
		"86d40b4d-9069-443c-819a-2a54090dccec\4"	 = "Tile Background Color"
		"86d40b4d-9069-443c-819a-2a54090dccec\5"	 = "Tile Foreground Color"
		"86d40b4d-9069-443c-819a-2a54090dccec\11"    = "Tile Display Name"
		"86d40b4d-9069-443c-819a-2a54090dccec\12"    = "Tile Image Location"
		"86d40b4d-9069-443c-819a-2a54090dccec\13"    = "Tile Wide 310x150 Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\14"    = "Tile Unknown Flags"
		"86d40b4d-9069-443c-819a-2a54090dccec\15"    = "Tile Badge Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\16"    = "Tile Suite Display Name"
		"86d40b4d-9069-443c-819a-2a54090dccec\17"    = "Tile Suite Sor tName"
		"86d40b4d-9069-443c-819a-2a54090dccec\18"    = "Tile Display Name Language"
		"86d40b4d-9069-443c-819a-2a54090dccec\19"    = "Tile Square 310x310 Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\20"    = "Tile Square 70x70 Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\21"    = "Tile Fence Post"
		"86d40b4d-9069-443c-819a-2a54090dccec\22"    = "Tile Install Progress"
		"86d40b4d-9069-443c-819a-2a54090dccec\23"    = "Tile Encoded Target Path"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\2"	 = "ItemFolderNameDisplay"
		"b725f130-47ef-101a-a5f1-02608c9eebac\3"	 = "Search ClassID"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\4"	 = "ItemTypeText"
		"b725f130-47ef-101a-a5f1-02608c9eebac\8"	 = "File Index"
		"b725f130-47ef-101a-a5f1-02608c9eebac\9"	 = "Search Last Change USN"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\10"    = "ItemNameDisplay"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\12"    = "Size"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\13"    = "FileAttributes"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\14"    = "DateModified"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\15"    = "DateCreated"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\16"    = "DateAccessed"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\18"    = "FileAllocationSize"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\19"    = "Search Contents"
		"b725f130-47ef-101a-a5f1-02608c9eebac\20"    = "Search ShortName"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\21"    = "FileFRN"
		"b725f130-47ef-101a-a5f1-02608c9eebac\22"    = "Search Scope"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\23"    = "ItemNameSortOverride"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\24"    = "ItemNameDisplayWithoutExtension"
		"B725F130-47EF-101A-A5F1-02608C9EEBAC\25"    = "FolderNameDisplay"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\2"	 = "Message BccAddress"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\3"	 = "Message BccName"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\4"	 = "Message CcAddress"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\5"	 = "Message CcName"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\6"	 = "ItemFolderPathDisplay"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\7"	 = "ItemPathDisplay"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\9"	 = "Communication AccountName"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\10"    = "IsRead"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\11"    = "Importance"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\12"    = "FlagStatus"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\13"    = "Message FromAddress"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\14"    = "Message FromName"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\15"    = "Message Store"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\16"    = "Message ToAddress"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\17"    = "Message ToName"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\18"    = "Contact WebPage"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\19"    = "Message DateSent"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\20"    = "Message DateReceived"
		"E3E0584C-B788-4A5A-BB20-7F5A44C9ACDD\21"    = "Message AttachmentNames"
		"00000000-0000-0000-0000-000000000000\0"	 = "Null"
		"000214a1-0000-0000-c000-000000000046}\9"    = "Status"
		"00BC20A3-BD48-4085-872C-A88D77F5097E\105"   = "Music ComposerSortOverride"
		"00F58A38-C54B-4C40-8696-97235980EAE1\100"   = "Calendar Resources"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\101"   = "Contact JobInfo1YomiCompanyName"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\102"   = "Contact JobInfo1CompanyName"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\103"   = "Contact JobInfo1Title"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\104"   = "Contact JobInfo1OfficeLocation"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\105"   = "Contact JobInfo1Manager"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\106"   = "Contact JobInfo1Department"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\107"   = "Contact JobInfo2YomiCompanyName"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\108"   = "Contact JobInfo2CompanyName"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\109"   = "Contact JobInfo2Title"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\110"   = "Contact JobInfo2OfficeLocation"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\112"   = "Contact JobInfo2Manager"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\113"   = "Contact JobInfo2Department"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\114"   = "Contact JobInfo3YomiCompanyName"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\115"   = "Contact JobInfo3CompanyName"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\116"   = "Contact JobInfo3Title"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\117"   = "Contact JobInfo3OfficeLocation"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\118"   = "Contact JobInfo3Manager"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\119"   = "Contact JobInfo3Department"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\120"   = "Contact JobInfo1CompanyAddress"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\121"   = "Contact JobInfo2CompanyAddress"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\123"   = "Contact JobInfo3CompanyAddress"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\124"   = "Contact Webpage2"
		"00F63DD8-22BD-4A5D-BA34-5CB0B9BDCB03\125"   = "Contact Webpage3"
		"026E516E-B814-414B-83CD-856D6FEF4822\3"	 = "Devices InterfaceEnabled"
		"026E516E-B814-414B-83CD-856D6FEF4822\4"	 = "Devices InterfaceClassGuid"
		"026E516E-B814-414B-83CD-856D6FEF4822\6"	 = "Devices RestrictedInterface"
		"029C0252-5B86-46C7-ACA0-2769FFC8E3D4\100"   = "GPS LatitudeRef"
		"02B0F689-A914-4E45-821D-1DDA452ED2C4\100"   = "GPS LongitudeNumerator"
		"03089873-8EE8-4191-BD60-D31F72B7900B\100"   = "Contact DisplayOtherPhoneNumbers"
		"0337ECEC-39FB-4581-A0BD-4C4CC51E9914\100"   = "Photo ApertureNumerator"
		"048658AD-2DB8-41A4-BBB6-AC1EF1207EB1\100"   = "ItemClassType"
		"05e932b1-7ca2-491f-bd69-99b4cb266cbb\2"	 = "Connected Search Disambiguation Text"
		"06704B0C-E830-4C81-9178-91E4E95A80A0\2"	 = "Devices NotificationStore"
		"06704B0C-E830-4C81-9178-91E4E95A80A0\3"	 = "Devices Notification"
		"084D8A0A-E6D5-40DE-BF1F-C8820E7C877C\100"   = "Task CompletionStatus"
		"08A65AA1-F4C9-43DD-9DDF-A33D8E7EAD85\100"   = "Contact HomeAddressCountry"
		"08C7CC5F-60F2-4494-AD75-55E3E0B5ADD0\100"   = "Task Owner"
		"08F6D7C2-E3F2-44FC-AF1E-5AA5C81A2D3E\100"   = "Photo MaxAperture"
		"09329b74-40a3-4c68-bf07-af9a572f607c\100"   = "Is Folder"
		"0933F3F5-4786-4F46-A8E8-D64DD37FA521\100"   = "Photo FocalPlaneXResolutionDenominator"
		"09429607-582D-437F-84C3-DE93A2B24C3C\100"   = "Calendar OptionalAttendeeNames"
		"09736039-456b-4219-ba3e-ec573b58cf97\2"	 = "Secondary Tile Is Uninstalled"
		"09EDD5B6-B301-43C5-9990-D00302EFFD46\100"   = "Media AverageLevel"
		"0A7B84EF-0C27-463F-84EF-06C5070001BE\10"    = "DeviceInterface PrinterName"
		"0abe4d16-9384-426b-b41a-eac3c8e0f147\2"	 = "Search Content Snippet"
		"0ADEF160-DB3F-4308-9A21-06237B16FA2A\100"   = "Contact HomeAddressStreet"
		"0B48F35A-BE6E-4F17-B108-3C4073D1669A\15"    = "Device PrinterURL"
		"0B63E343-9CCC-11D0-BCDB-00805FCCCE04\2"	 = "Search UrlToIndex"
		"0B63E343-9CCC-11D0-BCDB-00805FCCCE04\12"    = "Search UrlToIndexWithModificationTime"
		"0B63E343-9CCC-11D0-BCDB-00805FCCCE04\23"    = "Search IsClosedDirectory"
		"0B63E343-9CCC-11D0-BCDB-00805FCCCE04\24"    = "Search IsFullyContained"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\25"    = "Search Provider Class"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\26"    = "Search Provider Web Domain"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\27"    = "Search Provider Result Limit"
		"0B63E350-9CCC-11D0-BCDB-00805FCCCE04\5"	 = "MIMEType"
		"0B63E350-9CCC-11D0-BCDB-00805FCCCE04\8"	 = "Search GatherTime"
		"0b63e350-9ccc-11d0-bcdb-00805fccce04\9"	 = "Search Access Count"
		"0b63e350-9ccc-11d0-bcdb-00805fccce04\11"    = "Search Last Indexed Total Time"
		"0B8BB018-2725-4B44-92BA-7933AEB2DDE7\2"	 = "Contact AccountPictureDynamicVideo"
		"0B8BB018-2725-4B44-92BA-7933AEB2DDE7\3"	 = "Contact AccountPictureLarge"
		"0B8BB018-2725-4B44-92BA-7933AEB2DDE7\4"	 = "Contact AccountPictureSmall"
		"0BA7D6C3-568D-4159-AB91-781A91FB71E5\100"   = "Calendar RequiredAttendeeAddresses"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\2"	 = "Devices AepContainer Children"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\3"	 = "Devices AepContainer CanPair"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\4"	 = "Devices AepContainer IsPaired"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\6"	 = "Devices AepContainer Manufacturer"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\7"	 = "Devices AepContainer ModelName"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\8"	 = "Devices AepContainer ModelIds"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\9"	 = "Devices AepContainer Categories"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\11"    = "Devices AepContainer IsPresent"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\12"    = "Devices AepContainer ContainerId"
		"0BBA1EDE-7566-4F47-90EC-25FC567CED2A\13"    = "Devices AepContainer ProtocolIds"
		"0BE1C8E7-1981-4676-AE14-FDD78F05A6E7\100"   = "Message SenderAddress"
		"0be3fd71-3f87-40e0-aead-0294cf674635\2"	 = "Shell Is Dav Resource"
		"0C73B141-39D6-4653-A683-CAB291EAF95B\2"	 = "Supplemental AlbumID"
		"0C73B141-39D6-4653-A683-CAB291EAF95B\3"	 = "Supplemental ResourceId"
		"0C840A88-B043-466D-9766-D4B26DA3FA77\100"   = "Photo SubjectDistanceDenominator"
		"0CB2BF5A-9EE7-4A86-8222-F01E07FDADAF\100"   = "PropGroup PhotoAdvanced"
		"0CEF7D53-FA64-11D1-A203-0000F81FEDEE\3"	 = "FileDescription"
		"0CEF7D53-FA64-11D1-A203-0000F81FEDEE\4"	 = "FileVersion"
		"0CEF7D53-FA64-11D1-A203-0000F81FEDEE\5"	 = "InternalName"
		"0CEF7D53-FA64-11D1-A203-0000F81FEDEE\6"	 = "OriginalFileName"
		"0CEF7D53-FA64-11D1-A203-0000F81FEDEE\7"	 = "Software ProductName"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\8"	 = "Software Product Version"
		"0CEF7D53-FA64-11D1-A203-0000F81FEDEE\9"	 = "Trademarks"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\11"    = "Platform"
		"0CF8FB02-1837-42F1-A697-A7017AA289B9\100"   = "GPS DOP"
		"0DA41CFA-D224-4A18-AE2F-596158DB4B3A\100"   = "Message SenderName"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\2"	 = "Launcher Order"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\3"	 = "Launcher Group ID"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\6"	 = "Launcher View ID"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\7"	 = "Launcher App State"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\8"	 = "Launcher Tile Size"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\9"	 = "Launcher Group Name"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\10"    = "Launcher Splash Screen Image"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\11"    = "Launcher TileSize Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\12"    = "Launcher ItemPosition Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\13"    = "Launcher View ID Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\14"    = "Launcher Group Membership Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\15"    = "Launcher Group Name Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\16"    = "Launcher Default Tile Size"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\17"    = "Launcher Placeholder Expiry Candidate"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\18"    = "Launcher Placeholder Expiry Candidate Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\19"    = "Launcher Item Flags"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\20"    = "Launcher Group Position Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\21"    = "Launcher Store Category"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\22"    = "Launcher Win Store Category Name"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\23"    = "Launcher SubgroupID"
		"0F55CDE2-4F49-450D-92C1-DCD16301B1B7\100"   = "GPS LatitudeDecimal"
		"10984E0A-F9F2-4321-B7EF-BAF195AF4319\100"   = "ParentalRatingReason"
		"10B24595-41A2-4E20-93C2-5761C1395F32\100"   = "GPS ImgDirectionDenominator"
		"10DABE05-32AA-4C29-BF1A-63E2D220587F\100"   = "Image ImageID"
		"1173f62a-2a55-4f62-aed6-8c7112e0f7a3\5"	 = "Force Full Text"
		"11D6336B-38C4-4EC9-84D6-EB38D0B150AF\100"   = "Contact OtherEmailAddresses"
		"125491F4-818F-46B2-91B5-D537753617B2\100"   = "GPS Status"
		"12ea418f-d8cd-4cdf-9b23-457eaac7ff0d\100"   = "Communication Directory Server"
		"12fa14f5-c6fe-4545-bce2-1ed6cb6b8422\2"	 = "Connected Search Link Text"
		"13673F42-A3D6-49F6-B4DA-AE46E0C5237C\2"	 = "Devices DevObjectType"
		"13EB7FFC-EC89-4346-B19D-CCC6F1784223\101"   = "Music AlbumTitleSortOverride"
		"14977844-6B49-4AAD-A714-A4513BF60460\100"   = "Contact FirstName"
		"149C0B69-2C2D-48FC-808F-D318D78C4636\2"	 = "Volume IsMappedDrive"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\259"   = "Image Compression"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\271"   = "Photo CameraManufacturer"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\272"   = "Photo CameraModel"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\273"   = "Photo CameraSerialNumber"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\274"   = "Photo Orientation"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\305"   = "SoftwareUsed"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\18248" = "Photo Event"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\18258" = "DateImported"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\33432" = "Image Copyright"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\33434" = "Photo ExposureTime"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\33437" = "Photo FNumber"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\34850" = "Photo ExposureProgram"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\34855" = "Photo ISOSpeed"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\36867" = "Photo DateTaken"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37377" = "Photo ShutterSpeed"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37378" = "Photo Aperture"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37380" = "Photo ExposureBias"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37382" = "Photo SubjectDistance"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37383" = "Photo MeteringMode"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37384" = "Photo LightSource"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37385" = "Photo Flash"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\37386" = "Photo FocalLength"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\40096" = "Image Property Bag"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\40961" = "Image ColorSpace"
		"14B81DA1-0135-4D31-96D9-6CBFC9671A99\41483" = "Photo FlashEnergy"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\2"	 = "Devices WiFiDirect InterfaceAddress"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\3"	 = "Devices WiFiDirect InterfaceGuid"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\4"	 = "Devices WiFiDirect GroupId"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\5"	 = "Devices WiFiDirect IsConnected"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\6"	 = "Devices WiFiDirect IsVisible"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\7"	 = "Devices WiFiDirect IsLegacyDevice"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\8"	 = "Devices WiFiDirect MiracastVersion"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\9"	 = "Devices WiFiDirect IsMiracastLcpSupported"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\10"    = "Devices WiFiDirect Services"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\11"    = "Devices WiFiDirect SupportedChannelList"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\12"    = "Devices WiFiDirect InformationElements"
		"1506935D-E3E7-450F-8637-82233EBE5F6E\13"    = "Devices WiFiDirect DeviceAddress"
		"16473C91-D017-4ED9-BA4D-B6BAA55DBCF8\100"   = "GPS ImgDirection"
		"16CBB924-6500-473B-A5BE-F1599BCBE413\100"   = "Photo DigitalZoomNumerator"
		"16E634EE-2BFF-497B-BD8A-4341AD39EEB9\100"   = "GPS LatitudeDenominator"
		"16EA4042-D6F4-4BCA-8349-7C78D30FB333\100"   = "Photo ShutterSpeedNumerator"
		"176DC63C-2688-4E89-8143-A347800F25E9\6"	 = "Contact JobTitle"
		"176DC63C-2688-4E89-8143-A347800F25E9\7"	 = "Contact OfficeLocation"
		"176DC63C-2688-4E89-8143-A347800F25E9\20"    = "Contact HomeTelephone"
		"176DC63C-2688-4E89-8143-A347800F25E9\25"    = "Contact PrimaryTelephone"
		"176DC63C-2688-4E89-8143-A347800F25E9\35"    = "Contact MobileTelephone"
		"176DC63C-2688-4E89-8143-A347800F25E9\47"    = "Contact Birthday"
		"176DC63C-2688-4E89-8143-A347800F25E9\48"    = "Contact PrimaryEmailAddress"
		"176DC63C-2688-4E89-8143-A347800F25E9\65"    = "Contact HomeAddressCity"
		"176DC63C-2688-4E89-8143-A347800F25E9\69"    = "Contact PersonalTitle"
		"176dc63c-2688-4e89-8143-a347800f25e9\70"    = "Contact Given Name"
		"176DC63C-2688-4E89-8143-A347800F25E9\71"    = "Contact MiddleName"
		"176DC63C-2688-4E89-8143-A347800F25E9\73"    = "Contact Suffix"
		"176DC63C-2688-4E89-8143-A347800F25E9\74"    = "Contact NickName"
		"176DC63C-2688-4E89-8143-A347800F25E9\75"    = "Contact Prefix"
		"1804d1fb-9fa4-441d-a536-76468ac43307\100"   = "WebDav Path"
		"182C1EA6-7C1C-4083-AB4B-AC6C9F4ED128\100"   = "GPS DestLongitudeRef"
		"188C1F91-3C40-4132-9EC5-D8B03B72A8A2\100"   = "Calendar ResponseStatus"
		"18BBD425-ECFD-46EF-B612-7B4A6034EDA0\100"   = "Contact PrimaryAddressPostalCode"
		"19B51FA6-1F92-4A5C-AB48-7DF0ABD67444\100"   = "Image ResolutionUnit"
		"1A701BF6-478C-4361-83AB-3701BB053C58\100"   = "Photo Brightness"
		"1A9BA605-8E7C-4D11-AD7D-A50ADA18BA1B\2"	 = "Message Participants"
		"1B5439E7-EBA1-4AF8-BDD7-7AF1D4549493\100"   = "RecordedTV StationName"
		"1B97738A-FDFC-462F-9D93-1957E08BE90C\100"   = "Photo FNumberNumerator"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\2"	 = "Home Grouping"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\3"	 = "Home Sort Order"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\4"	 = "Home Is Pinned"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\5"	 = "Home PropList Sort"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\6"	 = "Home Item Folder Path Display"
		"3143BF7C-80A8-4854-8880-E2E40189BDD0\100"   = "Message AttachmentContents"
		"315B9C8D-80A9-4EF9-AE16-8E746DA51D70\100"   = "Calendar IsRecurring"
		"318A6B45-087F-4DC2-B8CC-05359551FC9E\100"   = "Photo RelatedSoundFile"
		"31B37743-7C5E-4005-93E6-E953F92B82E9\2"	 = "Devices WiFiDirectServices ServiceAddress"
		"31B37743-7C5E-4005-93E6-E953F92B82E9\3"	 = "Devices WiFiDirectServices ServiceName"
		"31B37743-7C5E-4005-93E6-E953F92B82E9\4"	 = "Devices WiFiDirectServices ServiceInformation"
		"31B37743-7C5E-4005-93E6-E953F92B82E9\5"	 = "Devices WiFiDirectServices AdvertisementId"
		"31B37743-7C5E-4005-93E6-E953F92B82E9\6"	 = "Devices WiFiDirectServices ServiceConfigMethods"
		"31B37743-7C5E-4005-93E6-E953F92B82E9\7"	 = "Devices WiFiDirectServices RequestServiceInformation"
		"328d8b21-7729-4bfc-954c-902b329d56b0\2"	 = "Sync Copy In"
		"32bcb03c-7f34-4e3f-bbb2-ebe63629f5e4\100"   = "Is Simple Item"
		"33DCF22B-28D5-464C-8035-1EE9EFD25278\100"   = "GPS LongitudeRef"
		"341796F1-1DF9-4B1C-A564-91BDEFA43877\100"   = "Photo PhotometricInterpretation"
		"346C8BD1-2E6A-4C45-89A4-61B78E8E700F\100"   = "IsIncomplete"
		"35DBE6FE-44C3-4400-AAAE-D2C799C407E8\100"   = "GPS TrackRef"
		"3602C812-0F3B-45F0-85AD-603468D69423\100"   = "GPS Date"
		"3633DE59-6825-4381-A49B-9F6BA13A1471\2"	 = "Devices PlaybackState"
		"3633DE59-6825-4381-A49B-9F6BA13A1471\3"	 = "Devices PlaybackTitle"
		"3633DE59-6825-4381-A49B-9F6BA13A1471\4"	 = "Devices RemainingDuration"
		"3633DE59-6825-4381-A49B-9F6BA13A1471\5"	 = "Devices PlaybackPositionPercent"
		"364028DA-D895-41FE-A584-302B1BB70A76\100"   = "Contact DisplayBusinessPhoneNumbers"
		"364B6FA9-37AB-482A-BE2B-AE02F60D4318\100"   = "Image CompressedBitsPerPixel"
		"37ebd11f-7e72-4ebc-9d4c-c790f8c277c2\2"	 = "Device Interface Spb Controller Friendly Name"
		"38965063-EDC8-4268-8491-B7723172CF29\100"   = "Contact EmailAddress2"
		"38D43380-D418-4830-84D5-46935A81C5C6\32"    = "Security AllowedEnterpriseDataProtectionIdentities"
		"39A7F922-477C-48DE-8BC8-B28441E342E3\100"   = "Project"
		"39B77F4F-A104-4863-B395-2DB2AD8F7BC1\100"   = "Contact ConnectedServiceDisplayName"
		"3A372292-7FCA-49A7-99D5-E47BB2D4E7AB\100"   = "GPS DestLatitudeDenominator"
		"3B2CE006-5E61-4FDE-BAB8-9B8AAC9B26DF\5"	 = "Devices Aep ProtocolId"
		"3B2CE006-5E61-4FDE-BAB8-9B8AAC9B26DF\8"	 = "Devices Aep AepId"
		"3C8CEE58-D4F0-4CF9-B756-4E5D24447BCD\100"   = "Contact Gender"
		"3C8CEE58-D4F0-4CF9-B756-4E5D24447BCD\101"   = "Contact GenderValue"
		"3d658d4d-bc38-464a-b555-418d554a8df8\100"   = "Fonts Description"
		"3d75e4f5-a391-4952-81f7-c7072fe53025\100"   = "File Reparse Point Tag"
		"3F08E66F-2F44-4BB9-A682-AC35D2562322\100"   = "Image CompressionText"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\2"	 = "Extensions Type"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\3"	 = "Extensions Date Last Used"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\4"	 = "Extensions Used Count"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\5"	 = "Extensions Blocked Count"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\6"	 = "Extensions CLSID"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\7"	 = "Extensions Status"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\8"	 = "Check State"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\9"	 = "Extensions Suspect"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\10"    = "Extensions File Name"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\11"    = "Extensions File Path"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\12"    = "Extensions Flags"
		"3F8472B5-E0AF-4DB2-8071-C53FE76AE7CE\100"   = "DueDate"
		"402B5934-EC5A-48C3-93E6-85E86A2D934E\100"   = "Contact BusinessAddressCity"
		"41CF5AE0-F75A-4806-BD87-59C7D9248EB9\100"   = "FileName"
		"425D69E5-48AD-4900-8D80-6EB6B8D0AC86\100"   = "GPS DestLongitudeDenominator"
		"428040AC-A177-4C8A-9760-F6F761227F9A\100"   = "Communication DateItemExpires"
		"42864DFD-9DA4-4F77-BDED-4AAD7B256735\100"   = "Photo GainControlDenominator"
		"4340A6C5-93FA-4706-972C-7B648008A5A7\8"	 = "Devices Parent"
		"4340A6C5-93FA-4706-972C-7B648008A5A7\9"	 = "Devices Children"
		"436F2667-14E2-4FEB-B30A-146C53B5B674\100"   = "Link Arguments"
		"43F8D7B7-A444-4F87-9383-52271C9B915C\100"   = "DateArchived"
		"446F787F-10C4-41CB-A6C4-4D0343551597\100"   = "Contact BusinessAddressState"
		"4530d076-b598-4a81-8813-9b11286ef6ea\2"	 = "Fonts Font Embeddability"
		"4530d076-b598-4a81-8813-9b11286ef6ea\5"	 = "Fonts Type"
		"4530d076-b598-4a81-8813-9b11286ef6ea\7"	 = "Fonts File Names"
		"4596208c-32fa-41d2-9695-af0cb9e8dcfe\100"   = "Stack Thumbnail Cache Ids"
		"45EAE747-8E2A-40AE-8CBF-CA52ABA6152A\100"   = "FlagColorText"
		"4679C1B5-844D-4590-BAF5-F322231F1B81\100"   = "GPS LongitudeDecimal"
		"467EE575-1F25-4557-AD4E-B8B58B0D9C15\100"   = "GPS Satellites"
		"4684FE97-8765-4842-9C13-F006447B178C\100"   = "RecordedTV OriginalBroadcastDate"
		"46AC629D-75EA-4515-867F-6DC4321C5844\100"   = "GPS AltitudeRef"
		"46B4E8DE-CDB2-440D-885C-1658EB65B914\100"   = "Note ColorText"
		"47166B16-364F-4AA0-9F31-E2AB3DF449C3\100"   = "GPS DOPNumerator"
		"4776CAFA-BCE4-4CB1-A23E-265E76D8EB11\100"   = "Note Color"
		"47A96261-CB4C-4807-8AD3-40B9D9DBC6BC\100"   = "GPS DestLongitude"
		"48FD6EC8-8A12-4CDF-A03E-4EC5A511EDDE\100"   = "StartDate"
		"49237325-A95A-4F67-B211-816B2D45D2E0\100"   = "Photo Saturation"
		"49691c90-7e17-101a-a91c-08002b2ecda9\2"	 = "Search Results Rank"
		"49691C90-7E17-101A-A91C-08002B2ECDA9\3"	 = "Search Rank"
		"49691C90-7E17-101A-A91C-08002B2ECDA9\4"	 = "Search HitCount"
		"49691C90-7E17-101A-A91C-08002B2ECDA9\5"	 = "Search EntryID"
		"49691c90-7e17-101a-a91c-08002b2ecda9\8"	 = "Search Reverse File Name"
		"49691C90-7E17-101A-A91C-08002B2ECDA9\9"	 = "ItemUrl"
		"49691c90-7e17-101a-a91c-08002b2ecda9\10"    = "Content Url"
		"49691c90-7e17-101a-a91c-08002b2ecda9\15"    = "Search Row Id"
		"49691C90-7E17-101A-A91C-08002B2ECDA9\21"    = "Search QueryPropertyHits"
		"49691c90-7e17-101a-a91c-08002b2ecda9\22"    = "Search Completion"
		"49691c90-7e17-101a-a91c-08002b2ecda9\28"    = "Search Result Set Aggregate Attributes"
		"49753869-849c-4323-a41f-26d73f28b53b\100"   = "Fonts Vendors"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\2"	 = "Devices SignalStrength"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\3"	 = "Devices TextMessages"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\4"	 = "Devices NewPictures"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\5"	 = "Devices MissedCalls"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\6"	 = "Devices Voicemail"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\7"	 = "Devices NetworkName"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\8"	 = "Devices NetworkType"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\9"	 = "Devices Roaming"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\10"    = "Devices BatteryLife"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\11"    = "Devices ChargingState"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\12"    = "Devices StorageCapacity"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\13"    = "Devices StorageFreeSpace"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\14"    = "Devices StorageFreeSpacePercent"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\22"    = "Devices BatteryPlusCharging"
		"49CD1F76-5626-4B17-A4E8-18B4AA1A2213\23"    = "Devices BatteryPlusChargingText"
		"49D1091F-082E-493F-B23F-D2308AA9668C\100"   = "PropList NonPersonal"
		"49eb6558-c09c-46dc-8668-1f848c290d0b\1"	 = "Shell Exclusion"
		"49eb6558-c09c-46dc-8668-1f848c290d0b\3"	 = "Shell Item Offline Status"
		"4ac903f8-e780-4e4b-b7b8-4d00a99804fc\100"   = "Home Group Sharing Status"
		"4b486401-5468-4381-9b5a-42df4cb49f53\100"   = "Fonts Category"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\100"   = "Start Menu Group"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\101"   = "Start Menu Run Command"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\102"   = "Start Menu Query"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\103"   = "Start Menu Group Item"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\104"   = "Start Menu Include In Scope"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\105"   = "Start Menu Result Source Id"
		"4C6BF15C-4C03-4AAC-91F5-64C0F852BCF4\2"	 = "DeviceInterface Serial UsbVendorId"
		"4C6BF15C-4C03-4AAC-91F5-64C0F852BCF4\3"	 = "DeviceInterface Serial UsbProductId"
		"4C6BF15C-4C03-4AAC-91F5-64C0F852BCF4\4"	 = "DeviceInterface Serial PortName"
		"4D1EBEE8-0803-4774-9842-B77DB50265E9\2"	 = "Storage Portable"
		"4D1EBEE8-0803-4774-9842-B77DB50265E9\3"	 = "Storage RemovableMedia"
		"4D1EBEE8-0803-4774-9842-B77DB50265E9\4"	 = "Storage SystemCritical"
		"4e9cfc01-5d36-406a-83cd-4e7423923604\2"	 = "Offline Sync Time"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\2"	 = "Lzh Folder Compressed Size"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\3"	 = "Lzh Folder CRC16"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\4"	 = "Lzh Folder Method"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\5"	 = "Lzh Folder Ratio"
		"4FFFE4D0-914F-4AC4-8D6F-C9C61DE169B1\100"   = "Photo FocalPlaneYResolution"
		"502CFEAB-47EB-459C-B960-E6D8728F7701\100"   = "ZoneIdentifier"
		"502CFEAB-47EB-459C-B960-E6D8728F7701\101"   = "LastWriterPackageFamilyName"
		"502CFEAB-47EB-459C-B960-E6D8728F7701\102"   = "AppZoneIdentifier"
		"5068BCDF-D697-4D85-8C53-1F1CDAB01763\100"   = "Contact DisplayHomePhoneNumbers"
		"508161FA-313B-43D5-83A1-C1ACCF68622C\100"   = "Contact OtherAddress"
		"51236583-0C4A-4FE8-B81F-166AEC13F510\100"   = "Devices AppPackageFamilyName"
		"51236583-0C4A-4FE8-B81F-166AEC13F510\123"   = "Devices GlyphIcon"
		"51EC3F47-DD50-421D-8769-334F50424B1E\100"   = "Photo SharpnessText"
		"53DA57CF-62C0-45C4-81DE-7610BCEFD7F5\100"   = "Calendar ShowTimeAsText"
		"540B947E-8B40-45BC-A8A2-6A0B894CBDA2\5"	 = "Devices Present"
		"540B947E-8B40-45BC-A8A2-6A0B894CBDA2\6"	 = "Devices DeviceHasProblem"
		"540B947E-8B40-45BC-A8A2-6A0B894CBDA2\9"	 = "Devices PhysicalDeviceLocation"
		"54b3a473-59aa-445b-aecd-77541ba8b7c9\2"	 = "User Name"
		"54b3a473-59aa-445b-aecd-77541ba8b7c9\3"	 = "User Display Name"
		"54b3a473-59aa-445b-aecd-77541ba8b7c9\5"	 = "User Profile Path"
		"5567bf77-2be2-4222-befa-d0c9c9cc4b6e\2"	 = "Velocity Feature Id"
		"55E98597-AD16-42E0-B624-21599A199838\100"   = "Photo ExposureTimeDenominator"
		"560C36C0-503A-11CF-BAA1-00004C752A9A\2"	 = "Search AutoSummary"
		"560C36C0-503A-11CF-BAA1-00004C752A9A\3"	 = "Search QueryFocusedSummary"
		"560C36C0-503A-11CF-BAA1-00004C752A9A\4"	 = "Search QueryFocusedSummaryWithFallback"
		"56310920-2491-4919-99CE-EADB06FAFDB2\100"   = "Contact BusinessHomePage"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\2"	 = "Music Artist"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\4"	 = "Music AlbumTitle"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\5"	 = "Media Year"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\7"	 = "Music TrackNumber"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\11"    = "Music Genre"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\12"    = "Music Lyrics"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\13"    = "Music AlbumArtist"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\33"    = "Music ContentGroupDescription"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\34"    = "Music InitialKey"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\35"    = "Music BeatsPerMinute"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\36"    = "Music Conductor"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\37"    = "Music PartOfSet"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\38"    = "Media SubTitle"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\39"    = "Music Mood"
		"56A3372E-CE9C-11D2-9F0E-006097C686F6\100"   = "Music AlbumID"
		"56C90E9D-9D46-4963-886F-2E1CD9A694EF\100"   = "Contact HomeEmailAddresses"
		"57086c23-86c6-478f-afb2-236188c8f47f\2"	 = "Taskbar Tab Active"
		"57086c23-86c6-478f-afb2-236188c8f47f\3"	 = "Taskbar Tab List"
		"5741cf9c-56fe-485b-8901-4786449e188d\100"   = "Fonts Designed For"
		"59569556-0A08-4212-95B9-FAE2AD6413DB\2"	 = "Devices Notifications NewVoicemail"
		"596fd41b-af9b-4ba8-9b49-33b16f16678c\100"   = "Fonts Styles"
		"59D49E61-840F-4AA9-A939-E2099B7F6399\100"   = "GPS ProcessingMethod"
		"59DDE9F2-5253-40EA-9A8B-479E96C6249A\100"   = "Photo ContrastText"
		"5ab5c75f-15e1-4d65-924a-04754567243c\2"	 = "Setting Host Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\3"	 = "Setting Setting Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\4"	 = "Setting Page Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\5"	 = "Setting Group Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\6"	 = "Setting Condition"
		"5ab5c75f-15e1-4d65-924a-04754567243c\7"	 = "Setting Glyph"
		"5ab5c75f-15e1-4d65-924a-04754567243c\8"	 = "Setting Glyph Rtl"
		"5BF396D4-5EB2-466F-BDE9-2FB3F2361D6E\100"   = "Calendar ShowTimeAs"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\1"	 = "History Url Hash"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\2"	 = "Link Target Url"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\3"	 = "Url Scheme"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\4"	 = "Url HostName"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\5"	 = "History Url Extra Info"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\6"	 = "History Code Page"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\7"	 = "History Visit Count"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\8"	 = "History Is History"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\9"	 = "History I sDownload"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\10"    = "History Download Location"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\11"    = "History Download Size"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\12"    = "History Favorite IconKey"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\13"    = "History Is Favorite"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\14"    = "History Is Offline Favorite"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\15"    = "History Is Pinned Favorite"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\16"    = "History Is Typed Url"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\17"    = "History Is Top Level"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\18"    = "History Is Feed"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\19"    = "History Keywords"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\20"    = "History User Keywords"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\21"    = "Link Description"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\22"    = "History User Description"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\23"    = "Link Date Visited"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\24"    = "History Icon Bits"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\25"    = "Icon Path"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\26"    = "Icon Index"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\27"    = "History Icon Date"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\28"    = "History Points"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\29"    = "History Sessions"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\33"    = "History Subscription Cookie"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\34"    = "History Tracking"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\35"    = "Link Working Folder Path"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\36"    = "Link Hot Key"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\37"    = "Link Show Cmd"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\38"    = "Link Whats New"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\39"    = "History Date Changed"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\40"    = "History Flags"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\41"    = "History Watch"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\42"    = "History Favorite Icon Hash"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\43"    = "Icon Secondary Stream Name"
		"5CDA5FC8-33EE-4FF3-9094-AE7BD8868C4D\100"   = "IsDeleted"
		"5cde9f0e-1de4-4453-96a9-56e8832efa3d\1"	 = "Computer Domain Name"
		"5cde9f0e-1de4-4453-96a9-56e8832efa3d\2"	 = "Computer Workgroup"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\2"	 = "IsPinnedToNameSpaceTree"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\3"	 = "IsDefaultSaveLocation"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\4"	 = "IsSearchOnlyItem"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\5"	 = "IsDefaultNonOwnerSaveLocation"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\6"	 = "OwnerSID"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\7"	 = "Is Default Save Location For Display"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\8"	 = "IsLocationSupported"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\9"	 = "Library Location Support Status"
		"5D76B67F-9B3D-44BB-B6AE-25DA4F638A67\10"    = "DefaultSaveLocationDisplay"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\11"    = "Default Save Location Icon Container"
		"5DA84765-E3FF-4278-86B0-A27967FBDD03\100"   = "IsFlagged"
		"5DC2253F-5E11-4ADF-9CFE-910DD01E3E70\100"   = "Contact Hobbies"
		"5F5AFF6A-37E5-4780-97EA-80C7565CF535\34"    = "Security EncryptionOwners"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\2"	 = "Devices Aep Bluetooth Cod Major"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\3"	 = "Devices Aep Bluetooth Cod Minor"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\4"	 = "Devices Aep Bluetooth Cod Services LimitedDiscovery"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\5"	 = "Devices Aep Bluetooth Cod Services Positioning"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\6"	 = "Devices Aep Bluetooth Cod Services Networking"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\7"	 = "Devices Aep Bluetooth Cod Services Rendering"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\8"	 = "Devices Aep Bluetooth Cod Services Capturing"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\9"	 = "Devices Aep Bluetooth Cod Services ObjectXfer"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\10"    = "Devices Aep Bluetooth Cod Services Audio"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\11"    = "Devices Aep Bluetooth Cod Services Telephony"
		"5FBD34CD-561A-412E-BA98-478A6B0FEF1D\12"    = "Devices Aep Bluetooth Cod Services Information"
		"61478C08-B600-4A84-BBE4-E99C45F0A072\100"   = "Photo SaturationText"
		"61872CF7-6B5E-4B4B-AC2D-59DA84459248\100"   = "PropGroup Media"
		"62d2d9ab-8b64-498d-b865-402d4796f865\3"	 = "Location Empty String"
		"6336B95E-C7A7-426D-86FD-7AE3D39C84B4\100"   = "Photo WhiteBalanceText"
		"635E9051-50A5-4BA2-B9DB-4ED056C77296\100"   = "Contact FullName"
		"63C25B20-96BE-488F-8788-C09C407AD812\100"   = "Contact PrimaryAddressStreet"
		"641064ba-9329-47e6-8f36-5fa81aa461a0\2"	 = "OneNote Page Edit History"
		"641064ba-9329-47e6-8f36-5fa81aa461a0\3"	 = "OneNote Tagged Notes"
		"641064ba-9329-47e6-8f36-5fa81aa461a0\4"	 = "OneNote Linked Note Uri"
		"6444048F-4C8B-11D1-8B70-080036B11A03\3"	 = "Image HorizontalSize"
		"6444048F-4C8B-11D1-8B70-080036B11A03\4"	 = "Image VerticalSize"
		"6444048F-4C8B-11D1-8B70-080036B11A03\5"	 = "Image HorizontalResolution"
		"6444048F-4C8B-11D1-8B70-080036B11A03\6"	 = "Image VerticalResolution"
		"6444048F-4C8B-11D1-8B70-080036B11A03\7"	 = "Image BitDepth"
		"6444048F-4C8B-11D1-8B70-080036B11A03\12"    = "Media FrameCount"
		"6444048F-4C8B-11D1-8B70-080036B11A03\13"    = "Image Dimensions"
		"64440490-4C8B-11D1-8B70-080036B11A03\2"	 = "Audio Format"
		"64440490-4C8B-11D1-8B70-080036B11A03\3"	 = "Media Duration"
		"64440490-4C8B-11D1-8B70-080036B11A03\4"	 = "Audio EncodingBitrate"
		"64440490-4C8B-11D1-8B70-080036B11A03\5"	 = "Audio SampleRate"
		"64440490-4C8B-11D1-8B70-080036B11A03\6"	 = "Audio SampleSize"
		"64440490-4C8B-11D1-8B70-080036B11A03\7"	 = "Audio ChannelCount"
		"64440490-4C8B-11D1-8B70-080036B11A03\8"	 = "Audio StreamNumber"
		"64440490-4C8B-11D1-8B70-080036B11A03\9"	 = "Audio StreamName"
		"64440490-4C8B-11D1-8B70-080036B11A03\10"    = "Audio Compression"
		"64440491-4C8B-11D1-8B70-080036B11A03\2"	 = "Video StreamName"
		"64440491-4C8B-11D1-8B70-080036B11A03\3"	 = "Video FrameWidth"
		"64440491-4C8B-11D1-8B70-080036B11A03\4"	 = "Video FrameHeight"
		"64440491-4C8B-11D1-8B70-080036B11A03\6"	 = "Video FrameRate"
		"64440491-4C8B-11D1-8B70-080036B11A03\8"	 = "Video EncodingBitrate"
		"64440491-4C8B-11D1-8B70-080036B11A03\9"	 = "Video SampleSize"
		"64440491-4C8B-11D1-8B70-080036B11A03\10"    = "Video Compression"
		"64440491-4C8B-11D1-8B70-080036B11A03\11"    = "Video StreamNumber"
		"64440491-4C8B-11D1-8B70-080036B11A03\42"    = "Video HorizontalAspectRatio"
		"64440491-4C8B-11D1-8B70-080036B11A03\43"    = "Video TotalBitrate"
		"64440491-4C8B-11D1-8B70-080036B11A03\44"    = "Video FourCC"
		"64440491-4C8B-11D1-8B70-080036B11A03\45"    = "Video VerticalAspectRatio"
		"64440491-4C8B-11D1-8B70-080036B11A03\46"    = "Video TranscodedForSync"
		"64440491-4C8B-11D1-8B70-080036B11A03\98"    = "Video IsStereo"
		"64440491-4C8B-11D1-8B70-080036B11A03\99"    = "Video Orientation"
		"64440491-4C8B-11D1-8B70-080036B11A03\100"   = "Video IsSpherical"
		"64440492-4c8b-11d1-8b70-080036b11a03\7"	 = "Media Status"
		"64440492-4C8B-11D1-8B70-080036B11A03\9"	 = "Rating"
		"64440492-4C8B-11D1-8B70-080036B11A03\11"    = "Copyright"
		"64440492-4C8B-11D1-8B70-080036B11A03\12"    = "ShareUserRating"
		"64440492-4C8B-11D1-8B70-080036B11A03\13"    = "Media ClassPrimaryID"
		"64440492-4C8B-11D1-8B70-080036B11A03\14"    = "Media ClassSecondaryID"
		"64440492-4C8B-11D1-8B70-080036B11A03\15"    = "Media DVDID"
		"64440492-4C8B-11D1-8B70-080036B11A03\16"    = "Media MCDI"
		"64440492-4C8B-11D1-8B70-080036B11A03\17"    = "Media MetadataContentProvider"
		"64440492-4C8B-11D1-8B70-080036B11A03\18"    = "Media ContentDistributor"
		"64440492-4C8B-11D1-8B70-080036B11A03\19"    = "Music Composer"
		"64440492-4C8B-11D1-8B70-080036B11A03\20"    = "Video Director"
		"64440492-4C8B-11D1-8B70-080036B11A03\21"    = "ParentalRating"
		"64440492-4C8B-11D1-8B70-080036B11A03\22"    = "Media Producer"
		"64440492-4C8B-11D1-8B70-080036B11A03\23"    = "Media Writer"
		"64440492-4C8B-11D1-8B70-080036B11A03\24"    = "Media CollectionGroupID"
		"64440492-4C8B-11D1-8B70-080036B11A03\25"    = "Media CollectionID"
		"64440492-4C8B-11D1-8B70-080036B11A03\26"    = "Media ContentID"
		"64440492-4C8B-11D1-8B70-080036B11A03\27"    = "Media CreatorApplication"
		"64440492-4C8B-11D1-8B70-080036B11A03\28"    = "Media CreatorApplicationVersion"
		"64440492-4C8B-11D1-8B70-080036B11A03\30"    = "Media Publisher"
		"64440492-4C8B-11D1-8B70-080036B11A03\31"    = "Music Period"
		"64440492-4C8B-11D1-8B70-080036B11A03\32"    = "Media AuthorUrl"
		"64440492-4C8B-11D1-8B70-080036B11A03\33"    = "Media PromotionUrl"
		"64440492-4C8B-11D1-8B70-080036B11A03\34"    = "Media UserWebUrl"
		"64440492-4C8B-11D1-8B70-080036B11A03\35"    = "Media UniqueFileIdentifier"
		"64440492-4C8B-11D1-8B70-080036B11A03\36"    = "Media EncodedBy"
		"64440492-4C8B-11D1-8B70-080036B11A03\37"    = "Media EncodingSettings"
		"64440492-4C8B-11D1-8B70-080036B11A03\38"    = "Media ProtectionType"
		"64440492-4C8B-11D1-8B70-080036B11A03\39"    = "Media ProviderRating"
		"64440492-4C8B-11D1-8B70-080036B11A03\40"    = "Media ProviderStyle"
		"64440492-4C8B-11D1-8B70-080036B11A03\41"    = "Media UserNoAutoInfo"
		"64440492-4C8B-11D1-8B70-080036B11A03\42"    = "Media SeriesName"
		"64440492-4C8B-11D1-8B70-080036B11A03\47"    = "Media ThumbnailLargePath"
		"64440492-4C8B-11D1-8B70-080036B11A03\48"    = "Media ThumbnailLargeUri"
		"64440492-4C8B-11D1-8B70-080036B11A03\49"    = "Media ThumbnailSmallPath"
		"64440492-4C8B-11D1-8B70-080036B11A03\50"    = "Media ThumbnailSmallUri"
		"64440492-4C8B-11D1-8B70-080036B11A03\100"   = "Media EpisodeNumber"
		"64440492-4C8B-11D1-8B70-080036B11A03\101"   = "Media SeasonNumber"
		"644D37B4-E1B3-4BAD-B099-7E7C04966ACA\100"   = "Contact EmailAddress3"
		"EAEE7F1D-6A33-44D1-9441-5F46DEF23198\9"	 = "Device BIOSVersion"
		"92506491-FF95-4724-A05A-5B81885A7C92\1"	 = "WSD Metadata Clean"
		"92506491-FF95-4724-A05A-5B81885A7C92\2"	 = "WSD Service Info"
		"92506491-FF95-4724-A05A-5B81885A7C92\4096"  = "WSD AddressURI"
		"92506491-FF95-4724-A05A-5B81885A7C92\4097"  = "WSD Types"
		"92506491-FF95-4724-A05A-5B81885A7C92\4098"  = "WSD Scopes"
		"92506491-FF95-4724-A05A-5B81885A7C92\4099"  = "WSD MetadataVersion"
		"92506491-FF95-4724-A05A-5B81885A7C92\4100"  = "WSD App Seq InstanceID"
		"92506491-FF95-4724-A05A-5B81885A7C92\4101"  = "WSD App Seq SessionID"
		"92506491-FF95-4724-A05A-5B81885A7C92\4102"  = "WSD App Seq Message Number"
		"92506491-FF95-4724-A05A-5B81885A7C92\8192"  = "WSD XAddrs"
		"904b03a2-471d-423c-a584-f3483238a146\1"	 = "Device Visibility Flags"
		"904b03a2-471d-423c-a584-f3483238a146\2"	 = "Device Not Present"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\36"    = "Device QueueSize"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\37"    = "Device Status"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\38"    = "Device Comment"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\39"    = "Device Model"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\51"    = "DeviceDisplay Address"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\52"    = "Devices DiscoveryMethod"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\53"    = "DeviceDisplay IsEncrypted"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\54"    = "DeviceDisplay IsAuthenticated"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\55"    = "Devices Connected"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\56"    = "Devices Paired"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\57"    = "Devices Icon"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\65"    = "DeviceDisplay Version"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\66"    = "DeviceDisplay Last_Seen"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\67"    = "DeviceDisplay Last_Connected"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\68"    = "DeviceDisplay IsShowInDisconnectedState"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\70"    = "Devices LocalMachine"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\71"    = "Devices MetadataPath"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\72"    = "DeviceDisplay IsMetadataSearchInProgress"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\73"    = "DeviceDisplay MetadataChecksum"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\74"    = "DeviceDisplay IsNotInterestingForDisplay"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\76"    = "DeviceDisplay LaunchDeviceStageOnDeviceConnect"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\77"    = "Devices LaunchDeviceStageFromExplorer"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\78"    = "DeviceDisplay BaselineExperienceId"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\79"    = "DeviceDisplay IsDeviceUniquelyIdentifiable"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\80"    = "DeviceDisplay AssociationArray"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\81"    = "Devices DeviceDescription1"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\82"    = "Devices DeviceDescription2"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\83"    = "Devices NotWorkingProperly"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\84"    = "Devices IsShared"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\85"    = "Devices IsNetworkConnected"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\86"    = "Devices IsDefault"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\87"    = "DeviceDisplay MetadataCabinet"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\88"    = "DeviceDisplay RequiresPairingElevation"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\89"    = "DeviceDisplay ExperienceId"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\90"    = "Devices CategoryIds"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\91"    = "Devices Category"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\92"    = "Devices CategoryPlural"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\93"    = "DeviceDisplay Category_Icon"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\94"    = "Devices CategoryGroup"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\95"    = "DeviceDisplay CategoryGroup_Icon"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\97"    = "DeviceDisplay PrimaryCategory"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\98"    = "DeviceDisplay UnpairUninstall"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\99"    = "DeviceDisplay RequiresUninstallElevation"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\100"   = "DeviceDisplay DeviceFunctionSubRank"
		"78C34FC8-104A-4aca-9EA4-524D52996E57\101"   = "DeviceDisplay AlwaysShowDeviceAsConnected"
		"53808008-07BB-4661-BC3C-B5953E708560\1"	 = "DeviceInterface Device Path"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\1"	 = "Devnode, PnPXDevNode"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\2"	 = "AssociationState"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\3"	 = "AssociatedInstanceId"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4"	 = "LastNotificationTime"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4096"  = "Devices GlobalIdentity"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4097"  = "Devices Types"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4098"  = "Devices Scopes"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4099"  = "Devices XAddrs"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4100"  = "Devices MetadataVersion"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4101"  = "Devices ID"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\4102"  = "Devices RootProxy/RemoteAddress"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\8192"  = "Devices Manufacturer"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\8194"  = "Devices ModelName"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\8195"  = "Devices ModelNumber"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\8198"  = "Devices PresentationUrl"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\12288" = "Devices FriendlyName"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12289" = "Devices Firmware Version"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12290" = "Devices Serial Number"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12292" = "Devices Category"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12293" = "Devices Category Description"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12294" = "Devices PhysicalAddress"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12295" = "Devices NetworkInterfaceLuid"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12296" = "Devices NetworkInterfaceGuid"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\12297" = "Devices IpAddress"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12304" = "Devices Category Descrtiption NonPlural"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\16384" = "Devices ServiceAddress"
		"656A3BB3-ECC0-43FD-8477-4AE0404A96CD\16385" = "Devices ServiceId"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\16386" = "Devices Service Types"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\16388" = "Devices Service Control Url"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\16389" = "Devices Service Desc Url"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\16390" = "Devices Service Event Sub Url"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\20480" = "Devices DomainName"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\20482" = "Devices ShareName"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\24576" = "Devices Alt Location Info"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\24577" = "Devices LifeTime"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\24578" = "Devices NetworkInterface"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\28672" = "Devices Removable"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\28688" = "Devices IP Bus Enumerated"
		"8807CAE6-7DB6-4f10-8EE4-435EAA1392BC\1"	 = "Pairing ListItemText"
		"8807CAE6-7DB6-4f10-8EE4-435EAA1392BC\2"	 = "Pairing ListItemDescription"
		"8807CAE6-7DB6-4f10-8EE4-435EAA1392BC\3"	 = "Pairing ListItemIcon"
		"8807CAE6-7DB6-4f10-8EE4-435EAA1392BC\4"	 = "Pairing ListItemDefault"
		"8807CAE6-7DB6-4f10-8EE4-435EAA1392BC\16"    = "Pairing IsWifiOnlyDevice"
		"65A98875-3C80-40AB-ABBC-EFDAF77DBEE2\100"   = "AcquisitionID"
		"660E04D6-81AB-4977-A09F-82313113AB26\100"   = "Contact HomeFaxNumber"
		"6614EF48-4EFE-4424-9EDA-C79F404EDF3E\2"	 = "Devices Notifications MissedCall"
		"668CDFA5-7A1B-4323-AE4B-E527393A1D81\100"   = "SourceItem"
		"67DF94DE-0CA7-4D6F-B792-053A3E4F03CF\100"   = "FlagColor"
		"6845CC72-1B71-48C3-AF86-B09171A19B14\3"	 = "Devices DialProtocol InstalledApplications"
		"68DD6094-7216-40F1-A029-43FE7127043F\100"   = "PropGroup Music"
		"6A15E5A0-0A1E-4CD7-BB8C-D2F1B0C929BC\100"   = "Contact BusinessTelephone"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\2"	 = "Devices AepContainer SupportsAudio"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\3"	 = "Devices AepContainer SupportsVideo"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\4"	 = "Devices AepContainer SupportsImages"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\5"	 = "Devices AepContainer SupportedUriSchemes"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\6"	 = "Devices AepContainer DialProtocol InstalledApplications"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\7"	 = "Devices AepContainer SupportsLimitedDiscovery"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\8"	 = "Devices AepContainer SupportsPositioning"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\9"	 = "Devices AepContainer SupportsNetworking"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\10"    = "Devices AepContainer SupportsRendering"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\11"    = "Devices AepContainer SupportsCapturing"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\12"    = "Devices AepContainer SupportsObjectTransfer"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\13"    = "Devices AepContainer SupportsTelephony"
		"6AF55D45-38DB-4495-ACB0-D4728A3B8314\14"    = "Devices AepContainer SupportsInformation"
		"6AFE7437-9BCD-49C7-80FE-4A5C65FA5874\104"   = "Music DiscNumber"
		"6B223B6A-162E-4AA9-B39F-05D678FC6D77\100"   = "Music SynchronizedLyrics"
		"6B8B68F6-200B-47EA-8D25-D8050F57339F\100"   = "Photo FlashText"
		"6B8DA074-3B5C-43BC-886F-0A2CDCE00B6F\100"   = "ItemName"
		"6BDD1FC6-810F-11D0-BEC7-08002BE2092F\2"	 = "Devices WiaDeviceType"
		"6ccd0131-c397-4744-b2d8-d2c13f457026\80"    = "Game Type"
		"6D217F6D-3F6A-4825-B470-5F03CA2FBE9B\100"   = "Photo ProgramMode"
		"6D24888F-4718-4BDA-AFED-EA0FB4386CD8\100"   = "OfflineStatus"
		"6D6D5D49-265D-4688-9F4E-1FDD33E7CC83\100"   = "Identity InternetSid"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\2"	 = "RecordedTV EpisodeName"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\3"	 = "RecordedTV ProgramDescription"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\4"	 = "RecordedTV Credits"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\5"	 = "RecordedTV StationCallSign"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\7"	 = "RecordedTV ChannelNumber"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\10"    = "RecordedTV Video Quality"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\12"    = "RecordedTV IsClosedCaptioningAvailable"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\13"    = "RecordedTV IsRepeatBroadcast"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\14"    = "RecordedTV IsSAP"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\15"    = "RecordedTV DateContentExpires"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\16"    = "RecordedTV IsATSCContent"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\17"    = "RecordedTV IsDTVContent"
		"6D748DE2-8D38-4CC3-AC60-F009B057C557\18"    = "RecordedTV IsHDContent"
		"6E682923-7F7B-4F0C-A337-CFCA296687BF\100"   = "Contact OtherAddressCity"
		"6EBE6946-2321-440A-90F0-C043EFD32476\100"   = "Photo BrightnessDenominator"
		"6FA20DE6-D11C-4D9D-A154-64317628C12D\100"   = "ExpandoProperties"
		"702926F4-44A6-43E1-AE71-45627116893B\100"   = "GPS TrackNumerator"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\102"   = "Structured Query Before"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\103"   = "Structured Query After"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\104"   = "Structured Query File"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\105"   = "Structured Query Custom Property Boolean"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\106"   = "Structured Query Custom Property Integer"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\107"   = "Structured Query Custom Property Floating Point"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\108"   = "Structured Query Custom Property String"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\109"   = "Structured Query Custom Property DateTime"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\110"   = "Structured Query Has"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\111"   = "Structured Query Is"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\112"   = "Structured Query Null"
		"705ccb0f-5a0d-41ea-b2ca-2c9b5cc7db41\100"   = "Verb Restrictions"
		"705d8364-7547-468c-8c88-84860bcbed4c\2"	 = "SAM Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\3"	 = "SAM Version"
		"705d8364-7547-468c-8c88-84860bcbed4c\4"	 = "SAM Date Changed"
		"705d8364-7547-468c-8c88-84860bcbed4c\5"	 = "SAM Password Last Set"
		"705d8364-7547-468c-8c88-84860bcbed4c\6"	 = "SAM Date Account Expires"
		"705d8364-7547-468c-8c88-84860bcbed4c\7"	 = "SAM Password Can Change"
		"705d8364-7547-468c-8c88-84860bcbed4c\8"	 = "SAM Password Must Change"
		"705d8364-7547-468c-8c88-84860bcbed4c\9"	 = "SAM Full Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\10"    = "SAM Home Directory"
		"705d8364-7547-468c-8c88-84860bcbed4c\11"    = "SAM Home Directory Drive"
		"705d8364-7547-468c-8c88-84860bcbed4c\12"    = "SAM Script Path"
		"705d8364-7547-468c-8c88-84860bcbed4c\13"    = "SAM Profile Path"
		"705d8364-7547-468c-8c88-84860bcbed4c\14"    = "SAM Admin Comment"
		"705d8364-7547-468c-8c88-84860bcbed4c\15"    = "SAM Workstations"
		"705d8364-7547-468c-8c88-84860bcbed4c\16"    = "SAM User Comment"
		"705d8364-7547-468c-8c88-84860bcbed4c\17"    = "SAM Password"
		"705d8364-7547-468c-8c88-84860bcbed4c\18"    = "SAM Security Id"
		"705d8364-7547-468c-8c88-84860bcbed4c\19"    = "SAM User Account Control"
		"705d8364-7547-468c-8c88-84860bcbed4c\20"    = "SAM Logon Hours"
		"705d8364-7547-468c-8c88-84860bcbed4c\21"    = "SAM Country Code"
		"705d8364-7547-468c-8c88-84860bcbed4c\22"    = "SAM Code Page"
		"705d8364-7547-468c-8c88-84860bcbed4c\23"    = "SAM Password Expired"
		"705d8364-7547-468c-8c88-84860bcbed4c\24"    = "SAM User Picture"
		"705d8364-7547-468c-8c88-84860bcbed4c\25"    = "SAM Password Hint"
		"705d8364-7547-468c-8c88-84860bcbed4c\26"    = "SAM Domain"
		"705d8364-7547-468c-8c88-84860bcbed4c\31"    = "SAM Groups"
		"705d8364-7547-468c-8c88-84860bcbed4c\32"    = "SAM Type"
		"705d8364-7547-468c-8c88-84860bcbed4c\36"    = "SAM Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\37"    = "SAM Network Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\38"    = "SAM Batch Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\39"    = "SAM Service Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\40"    = "SAM Remote Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\41"    = "SAM Deny Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\42"    = "SAM Deny Network Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\43"    = "SAM Deny Batch Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\44"    = "SAM Deny Service Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\45"    = "SAM Deny Remote Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\46"    = "SAM Dont Show In Logon UI"
		"705d8364-7547-468c-8c88-84860bcbed4c\47"    = "SAM Shell Admin Object Props"
		"705d8364-7547-468c-8c88-84860bcbed4c\50"    = "SAM Password Is Empty"
		"705d8364-7547-468c-8c88-84860bcbed4c\102"   = "SAM Group Members"
		"705d8364-7547-468c-8c88-84860bcbed4c\103"   = "SAM Residual Id"
		"705d8364-7547-468c-8c88-84860bcbed4c\200"   = "LOGON LU Id"
		"705d8364-7547-468c-8c88-84860bcbed4c\201"   = "LOGON Authentication Package"
		"705d8364-7547-468c-8c88-84860bcbed4c\202"   = "LOGON TS Session"
		"705d8364-7547-468c-8c88-84860bcbed4c\203"   = "LOGON Logon Time"
		"705d8364-7547-468c-8c88-84860bcbed4c\204"   = "LOGON Logon Server"
		"705d8364-7547-468c-8c88-84860bcbed4c\205"   = "LOGON Dns Domain Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\206"   = "LOGON UPN"
		"705d8364-7547-468c-8c88-84860bcbed4c\207"   = "LOGON Client Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\208"   = "LOGON WinS tation Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\209"   = "LOGON Status"
		"705d8364-7547-468c-8c88-84860bcbed4c\500"   = "PROFILE Path"
		"705d8364-7547-468c-8c88-84860bcbed4c\501"   = "PROFILE GUID"
		"71724756-3E74-4432-9B59-E7B2F668A593\2"	 = "Devices AepService FriendlyName"
		"71724756-3E74-4432-9B59-E7B2F668A593\3"	 = "Devices AepService ServiceClassId"
		"71724756-3E74-4432-9B59-E7B2F668A593\4"	 = "Devices AepService ContainerId"
		"71B377D6-E570-425F-A170-809FAE73E54E\100"   = "Contact OtherAddressState"
		"720eb626-dbe4-4113-835c-9315e1e2ff77\2"	 = "Actions Action Name"
		"720eb626-dbe4-4113-835c-9315e1e2ff77\3"	 = "Actions Activation Context"
		"7268AF55-1CE4-4F6E-A41F-B6E4EF10E4A9\100"   = "Contact Profession"
		"72FAB781-ACDA-43E5-B155-B2434F85E678\100"   = "DateCompleted"
		"72FC5BA4-24F9-4011-9F3F-ADD27AFAD818\100"   = "Calendar ReminderTime"
		"730FB6DD-CF7C-426B-A03F-BD166CC9EE24\100"   = "Contact BusinessAddress"
		"73389854-0b42-4ea6-bc67-847d430899fd\2"	 = "Connected Search Require Template"
		"733cb147-8b1f-4c48-9966-192fde353c75\100"   = "Music Stack Thumbnail Cache Ids"
		"738BF284-1D87-420B-92CF-5834BF6EF9ED\100"   = "Photo ExposureBiasNumerator"
		"744C8242-4DF5-456C-AB9E-014EFB9021E3\100"   = "Calendar OrganizerAddress"
		"745BAF0E-E5C1-4CFB-8A1B-D031A0A52393\100"   = "Photo DigitalZoomDenominator"
		"74A7DE49-FA11-4D3D-A006-DB7E08675916\100"   = "Identity ProviderID"
		"75ee72ae-7d5f-482f-9487-f1c46ca819c1\100"   = "Camera Roll Deduplication Id"
		"76C09943-7C33-49E3-9E7E-CDBA872CFADA\100"   = "GPS Track"
		"776B6B3B-1E3D-4B0C-9A0E-8FBAF2A8492A\100"   = "Photo FocalLengthNumerator"
		"78342DCB-E358-4145-AE9A-6BFE4E0F9F51\100"   = "GPS AltitudeDenominator"
		"78C34FC8-104A-4ACA-9EA4-524D52996E57\256"   = "Devices DeviceInstanceId"
		"79486778-4c6f-4dde-bc53-cd594311af99\2"	 = "Connected Search Local Weights"
		"79D94E82-4D79-45AA-821A-74858B4E4CA6\2"	 = "Devices AepService IoT ServiceInterfaces"
		"7a55582b-bd8c-4475-b94c-b87a388a7899\100"   = "Status Icons"
		"7A7D76F4-B630-4BD7-95FF-37CC51A975C9\2"	 = "Link TargetExtension"
		"7ABCF4F8-7C3F-4988-AC91-8D2C2E97ECA5\100"   = "GPS DestBearingDenominator"
		"7B9F6399-0A3F-4B12-89BD-4ADC51C918AF\100"   = "Contact HomeAddressPostOfficeBox"
		"7ba3535d-69aa-4525-a938-f3ec79485377\2"	 = "SAM Allowed Logon"
		"7ba3535d-69aa-4525-a938-f3ec79485377\3"	 = "SAM Dont Enumerate For Logon"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\2"	 = "Sync HandlerCollectionID"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\3"	 = "Sync HandlerID"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\4"	 = "Sync Event Description"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\5"	 = "Sync Progress"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\6"	 = "Sync ItemID"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\7"	 = "Sync Date Synchronized"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\8"	 = "Sync HandlerType"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\9"	 = "Sync HandlerTypeLabel"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\10"    = "Sync Status"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\11"    = "Sync Conflict Count"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\12"    = "Sync Error Count"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\13"    = "Sync Comments"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\14"    = "Sync Enabled"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\15"    = "Sync Hidden"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\16"    = "Sync Connected"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\17"    = "Sync Link"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\19"    = "Sync Context"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\20"    = "Sync Event Level"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\21"    = "Sync Event Flags"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\22"    = "Sync Sync Results"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\23"    = "Sync ProgressPercentage"
		"7BD5533E-AF15-44DB-B8C8-BD6624E1D032\24"    = "Sync State"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\25"    = "Sync Item State"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\26"    = "Sync Item Status Text"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\27"    = "Sync Item Status Description"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\28"    = "Sync Item Status Action"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\29"    = "Sync Global Activity Message"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\30"    = "Sync Last Synced Message"
		"7D122D5A-AE5E-4335-8841-D71E7CE72F53\100"   = "GPS SpeedDenominator"
		"7D683FC9-D155-45A8-BB1F-89D19BCB792F\100"   = "Identity DisplayName"
		"7DDAAAD1-CCC8-41AE-B750-B2CB8031AEA2\100"   = "GPS LatitudeNumerator"
		"7FD7259D-16B4-4135-9F97-7C96ECD2FA9E\100"   = "PropGroup Message"
		"7FE3AA27-2648-42F3-89B0-454E5CB150C3\100"   = "Photo ProgramModeText"
		"807B653A-9E91-43EF-8F97-11CE04EE20C5\100"   = "Communication Suffix"
		"80D81EA6-7473-4B0C-8216-EFC11A2C4C8B\2"	 = "Devices ModelId"
		"80F41EB8-AFC4-4208-AA5F-CCE21A627281\100"   = "Contact ConnectedServiceIdentities"
		"813F4124-34E6-4D17-AB3E-6B1F3C2247A1\100"   = "Photo MakerNoteOffset"
		"821437D6-9EAB-4765-A589-3B1CBBD22A61\100"   = "Photo PhotometricInterpretationText"
		"827EDB4F-5B73-44A7-891D-FDFFABEA35CA\100"   = "GPS Altitude"
		"83914d1a-c270-48bf-b00d-1c4e451b0150\100"   = "Default Group Order"
		"83A6347E-6FE4-4F40-BA9C-C4865240D1F4\100"   = "Communication FollowupIconIndex"
		"83DA6326-97A6-4088-9453-A1923F573B29\9"	 = "Devices IsSoftwareInstalling"
		"847C66DE-B8D6-4AF9-ABC3-6F4F926BC039\14"    = "DeviceInterface PrinterDriverDirectory"
		"84D8F337-981D-44B3-9615-C7596DBA17E3\100"   = "Contact EmailAddresses"
		"8589E481-6040-473D-B171-7FA89C2708ED\100"   = "Contact CompanyMainTelephone"
		"8619A4B6-9F4D-4429-8C0F-B996CA59E335\100"   = "Communication SecurityFlags"
		"86407db8-9df7-48cd-b986-f999adc19731\2"	 = "Share Target Description"
		"8727CFFF-4868-4EC6-AD5B-81B98521D1AB\100"   = "GPS Latitude"
		"880F70A2-6082-47AC-8AAB-A739D1A300C3\151"   = "Devices SharedTooltip"
		"880F70A2-6082-47AC-8AAB-A739D1A300C3\152"   = "Devices NetworkedTooltip"
		"880F70A2-6082-47AC-8AAB-A739D1A300C3\153"   = "Devices DefaultTooltip"
		"8859A284-DE7E-4642-99BA-D431D044B1EC\100"   = "PropGroup MediaAdvanced"
		"8943B373-388C-4395-B557-BC6DBAFFAFDB\2"	 = "Devices AudioDevice RawProcessingSupported"
		"8943B373-388C-4395-B557-BC6DBAFFAFDB\3"	 = "Devices AudioDevice Microphone SensitivityInDbfs"
		"8943B373-388C-4395-B557-BC6DBAFFAFDB\4"	 = "Devices AudioDevice Microphone SignalToNoiseRatioInDb"
		"8969B275-9475-4E00-A887-FF93B8B41E44\100"   = "PropGroup Description"
		"897B3694-FE9E-43E6-8066-260F590C0100\2"	 = "Contact JA CompanyNamePhonetic"
		"897B3694-FE9E-43E6-8066-260F590C0100\3"	 = "Contact JA FirstNamePhonetic"
		"897B3694-FE9E-43E6-8066-260F590C0100\4"	 = "Contact JA LastNamePhonetic"
		"8A2F99F9-3C37-465D-A8D7-69777A246D0C\2"	 = "Link FeedItemLocalId"
		"8A2F99F9-3C37-465D-A8D7-69777A246D0C\5"	 = "Link TargetUrlHostName"
		"8A2F99F9-3C37-465D-A8D7-69777A246D0C\6"	 = "Link TargetUrlPath"
		"8AF4961C-F526-43E5-AA81-DB768219178D\100"   = "Photo SubjectDistanceNumerator"
		"8AFCC170-8A46-4B53-9EEE-90BAE7151E62\100"   = "Contact HomeAddressPostalCode"
		"8B26EA41-058F-43F6-AECC-4035681CE977\100"   = "Contact OtherAddressPostOfficeBox"
		"8bf6b9f6-b4f5-482f-a2c2-44bdad2fcfa9\51"    = "SAM Account Is Disabled For Logon UI"
		"8C3B93A4-BAED-1A83-9A32-102EE313F6EB\100"   = "Identity Blob"
		"8C7ED206-3F8A-4827-B3AB-AE9E1FAEFC6C\2"	 = "Devices ContainerId"
		"8C7ED206-3F8A-4827-B3AB-AE9E1FAEFC6C\4"	 = "Devices InLocalMachineContainer"
		"8d72aca1-0716-419a-9ac1-acb07b18dc32\2"	 = "File Attributes Display"
		"8E531030-B960-4346-AE0D-66BC9A86FB94\100"   = "Communication Direction"
		"8E8ECF7C-B7B8-4EB8-A63F-0EE715C96F9E\100"   = "Photo GainControlNumerator"
		"8F167568-0AAE-4322-8ED9-6055B7B0E398\100"   = "Contact OtherAddressCountry"
		"8F367200-C270-457C-B1D4-E07C5BCD90C7\100"   = "Contact LastName"
		"8FDC6DEA-B929-412B-BA90-397A257465FE\100"   = "Contact CarTelephone"
		"900A403B-097B-4B95-8AE2-071FDAEEB118\100"   = "PropGroup Advanced"
		"90197CA7-FD8F-4E8C-9DA3-B57E1E609295\100"   = "RatingText"
		"908696C7-8F87-44F2-80ED-A8C1C6894575\2"	 = "LibraryLocationsCount"
		"908696c7-8f87-44f2-80ed-a8c1c6894575\4"	 = "Library Locations List"
		"9098F33C-9A7D-48A8-8DE5-2E1227A64E91\100"   = "Message ProofInProgress"
		"90E5E14E-648B-4826-B2AA-ACAF790E3513\10"    = "IsEncrypted"
		"916d17ac-8a97-48af-85b7-867a88fad542\2"	 = "Connected Search Auto Complete"
		"91EFF6F3-2E27-42CA-933E-7C999FBE310B\100"   = "Contact BusinessFaxNumber"
		"93112F89-C28B-492F-8A9D-4BE2062CEE8A\100"   = "Photo ExposureIndexDenominator"
		"95BEB1FC-326D-4644-B396-CD3ED90E6DDF\100"   = "Journal EntryType"
		"95C656C1-2ABF-4148-9ED3-9EC602E3B7CD\100"   = "Contact OtherAddressPostalCode"
		"95E127B5-79CC-4E83-9C9E-8422187B3E0E\2"	 = "DeviceInterface WinUsb UsbVendorId"
		"95E127B5-79CC-4E83-9C9E-8422187B3E0E\3"	 = "DeviceInterface WinUsb UsbProductId"
		"95E127B5-79CC-4E83-9C9E-8422187B3E0E\4"	 = "DeviceInterface WinUsb UsbClass"
		"95E127B5-79CC-4E83-9C9E-8422187B3E0E\5"	 = "DeviceInterface WinUsb UsbSubClass"
		"95E127B5-79CC-4E83-9C9E-8422187B3E0E\6"	 = "DeviceInterface WinUsb UsbProtocol"
		"95E127B5-79CC-4E83-9C9E-8422187B3E0E\7"	 = "DeviceInterface WinUsb DeviceInterfaceClasses"
		"9660C283-FC3A-4A08-A096-EED3AAC46DA2\100"   = "Contact DataSuppliers"
		"967B5AF8-995A-46ED-9E11-35B3C5B9782D\100"   = "Photo ExposureIndex"
		"972E333E-AC7E-49F1-8ADF-A70D07A9BCAB\100"   = "GPS AreaInformation"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\1"	 = "Devices Aep Bluetooth Issue Inquiry"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\2"	 = "Devices Aep Bluetooth Le Active Scanning"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\3"	 = "Devices Aep Bluetooth Le Scan Interval"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\4"	 = "Devices Aep Bluetooth Le Scan Window"
		"9744311E-7951-4B2E-B6F0-ECB293CAC119\5"	 = "Devices AepService Bluetooth CacheMode"
		"9744311E-7951-4B2E-B6F0-ECB293CAC119\6"	 = "Devices AepService Bluetooth TargetDevice"
		"97B0AD89-DF49-49CC-834E-660974FD755B\100"   = "Contact Label"
		"98f920d1-51e2-4722-9069-3c4b5cff5165\100"   = "Is Barricade Page"
		"98F98354-617A-46B8-8560-5B1B64BF1F89\100"   = "Contact HomeAddress"
		"995EF0B0-7EB3-4A8B-B9CE-068BB3F4AF69\1"	 = "Devices Aep Bluetooth Le Appearance"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\2"	 = "Devices Aep Bluetooth Le Advertisement"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\3"	 = "Devices Aep Bluetooth Le Scan Response"
		"995EF0B0-7EB3-4A8B-B9CE-068BB3F4AF69\4"	 = "Devices Aep Bluetooth Le AddressType"
		"995EF0B0-7EB3-4A8B-B9CE-068BB3F4AF69\5"	 = "Devices Aep Bluetooth Le Appearance Category"
		"995EF0B0-7EB3-4A8B-B9CE-068BB3F4AF69\6"	 = "Devices Aep Bluetooth Le Appearance Subcategory"
		"995EF0B0-7EB3-4A8B-B9CE-068BB3F4AF69\8"	 = "Devices Aep Bluetooth Le IsConnectable"
		"9973D2B5-BFD8-438A-BA94-5349B293181A\100"   = "PropGroup Calendar"
		"9A8EBB75-6458-4E82-BACB-35C0095B03BB\100"   = "Photo TranscodedForSync"
		"9A93244D-A7AD-4FF8-9B99-45EE4CC09AF6\100"   = "Contact AssistantTelephone"
		"9A9BC088-4F6D-469E-9919-E705412040F9\100"   = "Message IsFwdOrReply"
		"9AB84393-2A0F-4B75-BB22-7279786977CB\100"   = "GPS DestBearingRef"
		"9AD5BADB-CEA7-4470-A03D-B84E51B9949E\100"   = "Contact Anniversary"
		"9AEBAE7A-9644-487D-A92C-657585ED751A\100"   = "Media SubscriptionContentId"
		"9b174b33-40ff-11d2-a27e-00c04fc30871\2"	 = "Recycle Deleted From"
		"9b174b33-40ff-11d2-a27e-00c04fc30871\3"	 = "Recycle Date Deleted"
		"9B174B34-40FF-11D2-A27E-00C04FC30871\4"	 = "FileOwner"
		"9b174b34-40ff-11d2-a27e-00c04fc30871\8"	 = "New Menu Preferred Types"
		"9b174b34-40ff-11d2-a27e-00c04fc30871\10"    = "New Menu Allowed Types"
		"9B174B35-40FF-11D2-A27E-00C04FC30871\2"	 = "FreeSpace"
		"9B174B35-40FF-11D2-A27E-00C04FC30871\3"	 = "Capacity"
		"9B174B35-40FF-11D2-A27E-00C04FC30871\4"	 = "Volume FileSystem"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\5"	 = "Percent Full"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\7"	 = "Computer Decorated FreeSpace"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\10"    = "Volume Is Root"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\2"	 = "Wireless Profile Name"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\4"	 = "Wireless Security"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\5"	 = "Wireless Radio Type"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\9"	 = "Wireless Connection Mode"
		"9BC2C99B-AC71-4127-9D1C-2596D0D7DCB7\100"   = "GPS DestDistanceDenominator"
		"9C1FCF74-2D97-41BA-B4AE-CB2E3661A6E4\5"	 = "Priority"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\7"	 = "Communication Newsgroup Name"
		"9C1FCF74-2D97-41BA-B4AE-CB2E3661A6E4\8"	 = "Message HasAttachments"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\10"    = "SAM Account Name"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\13"    = "Message Type"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\17"    = "Message Received"
		"9CB0C358-9D7A-46B1-B466-DCC6F1A3D93D\100"   = "Contact DisplayMobilePhoneNumbers"
		"9D1D7CC5-5C39-451C-86B3-928E2D18CC47\100"   = "GPS DestLatitude"
		"9D2408B6-3167-422B-82B0-F583B7A7CFE3\100"   = "Contact SpouseName"
		"9E7D118F-B314-45A0-8CFB-D654B917C9E9\100"   = "Photo BrightnessNumerator"
		"A00742A1-CD8C-4B37-95AB-70755587767A\3"	 = "DeviceInterface PrinterEnumerationFlag"
		"A015ED5D-AAEA-4D58-8A86-3C586920EA0B\100"   = "GPS MeasureMode"
		"A06992B3-8CAF-4ED7-A547-B259E32AC9FC\100"   = "Search Store"
		"A09F084E-AD41-489F-8076-AA5BE3082BCA\100"   = "SimpleRating"
		"A0BE94C5-50BA-487B-BD35-0654BE8881ED\100"   = "GPS DOPDenominator"
		"A0E00EE1-F0C7-4D41-B8E7-26A7BD8D38B0\2"	 = "Devices Notifications StorageFull"
		"A0E00EE1-F0C7-4D41-B8E7-26A7BD8D38B0\3"	 = "Devices Notifications StorageFullLinkText"
		"A0E74609-B84D-4F49-B860-462BD9971F98\100"   = "Photo FocalLengthInFilm"
		"a11c005a-ff95-4785-8617-beaf92399c3c\100"   = "HasLeafContainers"
		"A1829EA2-27EB-459E-935D-B2FAD7B07762\2"	 = "Devices MicrophoneArray Geometry"
		"A19FB7A9-024B-4371-A8BF-4D29C3E4E9C9\100"   = "Contact ConnectedServiceSupportedActions"
		"A26F4AFC-7346-4299-BE47-EB1AE613139F\16"    = "Identity KeyProviderName"
		"A26F4AFC-7346-4299-BE47-EB1AE613139F\17"    = "Identity KeyProviderContext"
		"A26F4AFC-7346-4299-BE47-EB1AE613139F\100"   = "Identity"
		"A2E541C5-4440-4BA8-867E-75CFC06828CD\100"   = "Photo FocalPlaneYResolutionNumerator"
		"A3250282-FB6D-48D5-9A89-DBCACE75CCCF\100"   = "GPS DestLongitudeNumerator"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\3"	 = "Devices Aep ModelName"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\4"	 = "Devices Aep ModelId"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\5"	 = "Devices Aep Manufacturer"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\6"	 = "Devices Aep SignalStrength"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\7"	 = "Devices Aep IsConnected"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\9"	 = "Devices Aep IsPresent"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\12"    = "Devices Aep DeviceAddress"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\16"    = "Devices Aep IsPaired"
		"A35996AB-11CF-4935-8B61-A6761081ECDF\17"    = "Devices Aep Category"
		"A399AAC7-C265-474E-B073-FFCE57721716\2"	 = "Devices AepService Bluetooth ServiceGuid"
		"A3B29791-7713-4E1D-BB40-17DB85F01831\100"   = "ImportanceText"
		"a40294ef-d2b1-40ed-9512-dd3853b431f5\2"	 = "Connected Search Defer Image Prefetch"
		"A4108708-09DF-4377-9DFC-6D99986D5A67\100"   = "Identity IsMeIdentity"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\3"	 = "Devices HardwareIds"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\4"	 = "Devices CompatibleIds"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\10"    = "Devices ClassGuid"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\13"    = "Devices DeviceManufacturer"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\17"    = "Devices DeviceCapabilities"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\29"    = "Devices DeviceCharacteristics"
		"A45C254E-DF1C-4EFD-8020-67D146A850E0\37"    = "Devices LocationPaths"
		"a4790b72-7113-4348-97ea-292bbc1f6770\5"	 = "Visio Masters Keywords"
		"a4790b72-7113-4348-97ea-292bbc1f6770\6"	 = "Visio Masters Details"
		"A4AAA5B7-1AD0-445F-811A-0F8F6E67F6B5\100"   = "GPS ImgDirectionRef"
		"A5477F61-7A82-4ECA-9DDE-98B69B2479B3\100"   = "RecordedTV RecordingTime"
		"a63b464f-2ace-4d83-87ae-abaf011cc6ac\1720"  = "Volume BitLocker Can Change Passphrase By Proxy"
		"A6744477-C237-475B-A075-54F34498292A\100"   = "Communication TaskStatusText"
		"A6F360D2-55F9-48DE-B909-620E090A647C\100"   = "IsFlaggedComplete"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\101"   = "Contact HomeAddress1Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\102"   = "Contact HomeAddress1Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\103"   = "Contact HomeAddress1Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\104"   = "Contact HomeAddress1Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\105"   = "Contact HomeAddress1PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\106"   = "Contact HomeAddress2Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\107"   = "Contact HomeAddress2Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\108"   = "Contact HomeAddress2Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\109"   = "Contact HomeAddress2Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\110"   = "Contact HomeAddress2PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\111"   = "Contact HomeAddress3Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\112"   = "Contact HomeAddress3Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\113"   = "Contact HomeAddress3Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\114"   = "Contact HomeAddress3Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\115"   = "Contact HomeAddress3PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\116"   = "Contact BusinessAddress1Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\117"   = "Contact BusinessAddress1Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\118"   = "Contact BusinessAddress1Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\119"   = "Contact BusinessAddress1Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\120"   = "Contact BusinessAddress1PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\121"   = "Contact BusinessAddress2Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\122"   = "Contact BusinessAddress2Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\123"   = "Contact BusinessAddress2Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\124"   = "Contact BusinessAddress2Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\125"   = "Contact BusinessAddress2PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\126"   = "Contact BusinessAddress3Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\127"   = "Contact BusinessAddress3Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\128"   = "Contact BusinessAddress3Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\129"   = "Contact BusinessAddress3Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\130"   = "Contact BusinessAddress3PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\131"   = "Contact OtherAddress1Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\132"   = "Contact OtherAddress1Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\133"   = "Contact OtherAddress1Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\134"   = "Contact OtherAddress1Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\135"   = "Contact OtherAddress1PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\136"   = "Contact OtherAddress2Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\137"   = "Contact OtherAddress2Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\138"   = "Contact OtherAddress2Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\139"   = "Contact OtherAddress2Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\140"   = "Contact OtherAddress2PostalCode"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\141"   = "Contact OtherAddress3Street"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\142"   = "Contact OtherAddress3Locality"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\143"   = "Contact OtherAddress3Region"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\144"   = "Contact OtherAddress3Country"
		"A7B6F596-D678-4BC1-B05F-0203D27E8AA1\145"   = "Contact OtherAddress3PostalCode"
		"A7FE0840-1344-46F0-8D37-52ED712A4BF9\100"   = "ParentalRatingsOrganization"
		"A82D9EE7-CA67-4312-965E-226BCEA85023\100"   = "Message Flags"
		"A8A74B92-361B-4E9A-B722-7C4A7330A312\100"   = "Identity ProviderData"
		"a8a7a412-1927-4a34-b1d4-45f67cc672fb\2"	 = "Connected Search Referrer Id"
		"A93EAE04-6804-4F24-AC81-09B266452118\100"   = "GPS DestDistance"
		"A94688B6-7D9F-4570-A648-E3DFC0AB2B3F\100"   = "OfflineAvailability"
		"A9EA193C-C511-498A-A06B-58E2776DCC28\100"   = "Photo OrientationText"
		"AAA660F9-9865-458E-B484-01BC7FE3973E\100"   = "Calendar OrganizerName"
		"AABAF6C9-E0C5-4719-8585-57B103E584FE\100"   = "Photo FlashManufacturer"
		"AAF16BAC-2B55-45E6-9F6D-415EB94910DF\100"   = "Contact TTYTDDTelephone"
		"AAF4EE25-BD3B-4DD7-BFC4-47F77BB00F6D\100"   = "GPS Differential"
		"AB205E50-04B7-461C-A18C-2F233836E627\100"   = "Photo ExposureBiasDenominator"
		"ACC9CE3D-C213-4942-8B48-6D0820F21C6D\100"   = "GPS SpeedNumerator"
		"ad763ac7-f1ed-4039-9fb4-b7b84ef33cef\2"	 = "Search Provider Attributes"
		"AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED\2"	 = "DRM IsProtected"
		"AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED\3"	 = "DRM Description"
		"AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED\4"	 = "DRM PlayCount"
		"AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED\5"	 = "DRM DatePlayStarts"
		"AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED\6"	 = "DRM DatePlayExpires"
		"AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED\7"	 = "DRM IsDisabled"
		"AFC47170-14F5-498C-8F30-B0D19BE449C6\11"    = "DeviceInterface PrinterDriverName"
		"AFD97640-86A3-4210-B67C-289C41AABE55\2"	 = "Devices SafeRemovalRequired"
		"B0B87314-FCF6-4FEB-8DFF-A50DA6AF561C\100"   = "Contact BusinessAddressCountry"
		"b180ad60-ed3f-4d16-bd43-f5b4fcf325a9\2"	 = "Sync Conflict ItemS hort Location"
		"b180ad60-ed3f-4d16-bd43-f5b4fcf325a9\3"	 = "Sync Conflict Item Full Location"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\2"	 = "FilePlaceholderStatus"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\3"	 = "StorageProviderFileIdentifier"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\4"	 = "StorageProviderFileVersion"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\5"	 = "StorageProviderFileChecksum"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\6"	 = "StorageProviderFileVersionWaterline"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\7"	 = "StorageProviderCallerVersionInformation"
		"B33AF30B-F552-4584-936C-CB93E5CDA29F\100"   = "Calendar RequiredAttendeeNames"
		"B5C84C9E-5927-46B5-A3CC-933C21B78469\100"   = "Contact ConnectedServiceName"
		"b769d0fe-bc33-421a-8ce6-45add82ec756\2"	 = "Connected Search Suppress Local Hero"
		"b771b352-8692-42e6-ac33-cc7b062ad950\100"   = "Game Win SPR Recommended"
		"B7B4D61C-5A64-4187-A52E-B1539F359099\2"	 = "Devices WinPhone8CameraFlags"
		"B812F15D-C2D8-4BBF-BACD-79744346113F\100"   = "Photo TagViewAggregate"
		"B96EFF7B-35CA-4A35-8607-29E3A54C46EA\100"   = "IdentityProvider Name"
		"B9B4B3FC-2B51-4A42-B5D8-324146AFCF25\2"	 = "Link TargetParsingPath"
		"B9B4B3FC-2B51-4A42-B5D8-324146AFCF25\3"	 = "Link Status"
		"B9B4B3FC-2B51-4A42-B5D8-324146AFCF25\5"	 = "Link Comment"
		"b9b4b3fc-2b51-4a42-b5d8-324146afcf25\6"	 = "Item After"
		"B9B4B3FC-2B51-4A42-B5D8-324146AFCF25\8"	 = "Link TargetSFGAOFlags"
		"BA3B1DA9-86EE-4B5D-A2A4-A271A429F0CF\100"   = "GPS DestBearingNumerator"
		"bb44403b-1399-4650-95eb-03c53a57c2cf\60"    = "Game Int Update Status"
		"BC4E71CE-17F9-48D5-BEE9-021DF0EA5409\100"   = "Contact BusinessAddressPostOfficeBox"
		"BCCC8A3C-8CEF-42E5-9B1C-C69079398BC7\100"   = "Message ToDoTitle"
		"BCEEE283-35DF-4D53-826A-F36A3EEFC6BE\100"   = "Search ContainerHash"
		"BE1A72C6-9A1D-46B7-AFE7-AFAF8CEF4999\100"   = "Communication TaskStatus"
		"BE6E176C-4534-4D2C-ACE5-31DEDAC1606B\100"   = "GPS LongitudeDenominator"
		"BEBE0920-7671-4C54-A3EB-49FDDFC191EE\100"   = "PropGroup Video"
		"BF53D1C3-49E0-4F7F-8567-5A821D8AC542\100"   = "Contact CallbackTelephone"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\2"	 = "Devices Dnssd ServiceName"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\3"	 = "Devices Dnssd Domain"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\4"	 = "Devices Dnssd InstanceName"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\5"	 = "Devices Dnssd FullName"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\6"	 = "Devices Dnssd TextAttributes"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\7"	 = "Devices Dnssd HostName"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\8"	 = "Devices Dnssd Weight"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\9"	 = "Devices Dnssd Priority"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\10"    = "Devices Dnssd Ttl"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\11"    = "Devices Dnssd NetworkAdapterId"
		"BF79C0AB-BB74-4CEE-B070-470B5AE202EA\12"    = "Devices Dnssd PortNumber"
		"BFEE9149-E3E2-49A7-A862-C05988145CEC\100"   = "Calendar IsOnline"
		"C06238B2-0BF9-4279-A723-25856715CB9D\100"   = "Photo GainControlText"
		"C0AC206A-827E-4650-95AE-77E2BB74FCC9\100"   = "Contact MailingAddress"
		"C107E191-A459-44C5-9AE6-B952AD4B906D\100"   = "Photo MaxApertureNumerator"
		"C2EA046E-033C-4E91-BD5B-D4942F6BBE49\2"	 = "CreatorAppId"
		"C2EA046E-033C-4E91-BD5B-D4942F6BBE49\3"	 = "CreatorOpenWithUIOptions"
		"C4322503-78CA-49C6-9ACC-A68E2AFD7B6B\100"   = "Identity UserName"
		"C449D5CB-9EA4-4809-82E8-AF9D59DED6D1\100"   = "Music IsCompilation"
		"C4C07F2B-8524-4E66-AE3A-A6235F103BEB\2"	 = "Devices Notifications LowBattery"
		"C4C4DBB2-B593-466B-BBDA-D03D27D5E43A\100"   = "GPS Longitude"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\600"   = "Activity App Display Name"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\601"   = "Activity App Image Uri"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\602"   = "Activity Background Color"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\603"   = "Activity Content Image Uri"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\604"   = "Activity Content Uri"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\605"   = "Activity Description"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\606"   = "Activity Display Text"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\607"   = "Activity Tilexml"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\608"   = "Activity History Active Days"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\609"   = "Activity History Active Duration"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\610"   = "Activity History Active Hours"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\611"   = "Activity History App Activity Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\612"   = "Activity History App Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\613"   = "Activity History Device Display Name"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\614"   = "Activity History Device Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\615"   = "Activity History Display Text"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\616"   = "Activity History End Time"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\617"   = "Activity History Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\618"   = "Activity History Start Time"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\619"   = "Activity History Type"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\620"   = "Activity Activity Id"
		"c53e42a9-db3c-4bc7-b0f3-83a524adf0ec\1719"  = "Volume BitLocker Can Change Pin"
		"C554493C-C1F7-40C1-A76C-EF8C0614003E\100"   = "Contact TelexNumber"
		"c64a866e-41ae-4c8c-b3d5-dd6dbf70c9c1\100"   = "Is Group"
		"C66D4B3C-E888-47CC-B99F-9DCA3EE34DEA\100"   = "GPS DestBearing"
		"c6f039e7-f6a4-4185-ae48-07938262c274\100"   = "Hide In Grep Search"
		"C75FAA05-96FD-49E7-9CB4-9F601082D553\100"   = "EndDate"
		"C77724D4-601F-46C5-9B89-C53F93BCEB77\100"   = "Photo MaxApertureDenominator"
		"C89A23D0-7D6D-4EB8-87D4-776A82D493E5\100"   = "Contact HomeAddressState"
		"C8D1920C-01F6-40C0-AC86-2F3A4AD00770\100"   = "GPS TrackDenominator"
		"C8EA94F0-A9E3-4969-A94B-9C62A95324E0\100"   = "Contact PrimaryAddressCity"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\2"	 = "PropList FullDetails"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\3"	 = "PropList TileInfo"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\4"	 = "PropList InfoTip"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\5"	 = "PropList QuickTip"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\6"	 = "PropList PreviewTitle"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\8"	 = "PropList PreviewDetails"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\9"	 = "PropList ExtendedTileInfo"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\10"    = "PropList FileOperationPrompt"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\11"    = "PropList ConflictPrompt"
		"c9944a21-a406-48fe-8225-aec7e24c211b\12"    = "PropList Set Defaults For"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\13"    = "PropList ContentViewModeForBrowse"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\14"    = "PropList ContentViewModeForSearch"
		"c9944a21-a406-48fe-8225-aec7e24c211b\16"    = "PropList Status Icons"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\17"    = "InfoTipText"
		"c9944a21-a406-48fe-8225-aec7e24c211b\18"    = "PropList Status Icons Display Flag"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\500"   = "LayoutPattern ContentViewModeForBrowse"
		"C9944A21-A406-48FE-8225-AEC7E24C211B\501"   = "LayoutPattern ContentViewModeForSearch"
		"c9944a21-a406-48fe-8225-aec7e24c211b\502"   = "Layout Pattern Place Holder"
		"c9944a21-a406-48fe-8225-aec7e24c211b\503"   = "Layout Pattern Tiles View Mode"
		"c9944a21-a406-48fe-8225-aec7e24c211b\504"   = "Layout Pattern Group"
		"c9944a21-a406-48fe-8225-aec7e24c211b\510"   = "PropList Details Pane Null Select"
		"c9944a21-a406-48fe-8225-aec7e24c211b\511"   = "PropList Details Pane Null Select Title"
		"c9b88dba-04db-4887-a200-cf0d3afe1146\99"    = "Game Update Status"
		"C9C141A9-1B4C-4F17-A9D1-F298538CADB8\2"	 = "Devices AepService ServiceId"
		"C9C141A9-1B4C-4F17-A9D1-F298538CADB8\5"	 = "Devices AepService ProtocolId"
		"C9C141A9-1B4C-4F17-A9D1-F298538CADB8\6"	 = "Devices AepService AepId"
		"C9C141A9-1B4C-4F17-A9D1-F298538CADB8\7"	 = "Devices AepService ParentAepIsPaired"
		"C9C34F84-2241-4401-B607-BD20ED75AE7F\100"   = "Communication HeaderItem"
		"CBF38310-4A17-4310-A1EB-247F0B67593B\2"	 = "DeviceInterface Hid UsagePage"
		"CBF38310-4A17-4310-A1EB-247F0B67593B\3"	 = "DeviceInterface Hid UsageId"
		"CBF38310-4A17-4310-A1EB-247F0B67593B\4"	 = "DeviceInterface Hid IsReadOnly"
		"CBF38310-4A17-4310-A1EB-247F0B67593B\5"	 = "DeviceInterface Hid VendorId"
		"CBF38310-4A17-4310-A1EB-247F0B67593B\6"	 = "DeviceInterface Hid ProductId"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\7"	 = "Device Interface Hid Version Number"
		"cc158e89-6581-4311-9637-a8da9002f118\2"	 = "Connected Search Require Install"
		"CC301630-B192-4C22-B372-9F4C6D338E07\100"   = "PropGroup General"
		"CC6F4F24-6083-4BD4-8754-674D0DE87AB8\100"   = "Contact EmailName"
		"CD102C9C-5540-4A88-A6F6-64E4981C8CD1\100"   = "Contact AssistantName"
		"CD9ED458-08CE-418F-A70E-F912C7BB9C5C\103"   = "Message MessageClass"
		"CDBFC167-337E-41D8-AF7C-8C09205429C7\100"   = "ApplicationDefinedProperties"
		"CDEDCF30-8919-44DF-8F4C-4EB2FFDB8D89\100"   = "Photo ExposureIndexNumerator"
		"CE50C159-2FB8-41FD-BE68-D3E042E274BC\2"	 = "Sync HandlerName"
		"CE50C159-2FB8-41FD-BE68-D3E042E274BC\3"	 = "Sync ItemName"
		"CE50C159-2FB8-41FD-BE68-D3E042E274BC\4"	 = "Sync ConflictDescription"
		"CE50C159-2FB8-41FD-BE68-D3E042E274BC\6"	 = "Sync ConflictFirstLocation"
		"CE50C159-2FB8-41FD-BE68-D3E042E274BC\7"	 = "Sync ConflictSecondLocation"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\10"    = "Sync Conflict Unresolvable"
		"CEA820B9-CE61-4885-A128-005D9087C192\100"   = "GPS DestLatitudeRef"
		"cebf9b37-26ae-466b-9fe9-c7550c4b0ce8\100"   = "Transfer Path"
		"cf5751fd-f4b3-443d-b31c-9a34740759ec\100"   = "Search Scope"
		"CFA31B45-525D-4998-BB44-3F7D81542FA4\100"   = "Media DlnaProfileID"
		"CFC08D97-C6F7-4484-89DD-EBEF4356FE76\100"   = "Photo FocalPlaneXResolution"
		"D042D2A1-927E-40B5-A503-6EDBD42A517E\100"   = "Contact PhoneNumbersCanonical"
		"D08DD4C0-3A9E-462E-8290-7B636B2576B9\2"	 = "Devices InterfacePaths"
		"D08DD4C0-3A9E-462E-8290-7B636B2576B9\3"	 = "Devices FunctionPaths"
		"D08DD4C0-3A9E-462E-8290-7B636B2576B9\10"    = "Devices PrimaryCategory"
		"D08DD4C0-3A9E-462E-8290-7B636B2576B9\257"   = "Devices Status1"
		"D08DD4C0-3A9E-462E-8290-7B636B2576B9\258"   = "Devices Status2"
		"D08DD4C0-3A9E-462E-8290-7B636B2576B9\259"   = "Devices Status"
		"D0A04F0A-462A-48A4-BB2F-3706E88DBD7D\100"   = "ItemAuthors"
		"D0C7F054-3F72-4725-8527-129A577CB269\100"   = "SensitivityText"
		"D0DAB0BA-368A-4050-A882-6C010FD19A4F\100"   = "PropGroup Content"
		"D21A7148-D32C-4624-8900-277210F79C0F\100"   = "Image CompressedBitsPerPixelNumerator"
		"D35F743A-EB2E-47F2-A286-844132CB1427\100"   = "Photo EXIFVersion"
		"D37D52C6-261C-4303-82B3-08B926AC6F12\100"   = "Task BillingInformation"
		"D4729704-8EF1-43EF-9024-2BD381187FD5\100"   = "Contact Children"
		"D4BF61B3-442E-4ADA-882D-FA7B70C832D9\6"	 = "Devices Aep PointOfService ConnectionTypes"
		"D4D0AA16-9948-41A4-AA85-D97FF9646993\100"   = "ItemParticipants"
		"D55BAE5A-3892-417A-A649-C6AC5AAAEAB3\100"   = "Calendar OptionalAttendeeAddresses"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\1"	 = "Codepage"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\2"	 = "Category"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\3"	 = "Document PresentationFormat"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\4"	 = "Document ByteCount"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\5"	 = "Document LineCount"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\6"	 = "Document ParagraphCount"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\7"	 = "Document SlideCount"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\8"	 = "Document NoteCount"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\9"	 = "Document HiddenSlideCount"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\10"    = "Document MultimediaClipCount"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\11"    = "Scale"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\12"    = "Headingpair"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\13"    = "Document Parts"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\14"    = "Document Manager"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\15"    = "Company"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\16"    = "Document Links Dirty"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\26"    = "ContentType"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\27"    = "ContentStatus"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\28"    = "Language"
		"D5CDD502-2E9C-101B-9397-08002B2CF9AE\29"    = "Document Version"
		"D6304E01-F8F5-4F45-8B15-D024A6296789\100"   = "Contact PagerTelephone"
		"D68DBD8A-3374-4B81-9972-3EC30682DB3D\100"   = "Contact IMAddress"
		"D6942081-D53B-443D-AD47-5E059D9CD27A\2"	 = "Shell SFGAOFlagsStrings"
		"D6942081-D53B-443D-AD47-5E059D9CD27A\3"	 = "Link TargetSFGAOFlagsStrings"
		"D6B5B883-18BD-4B4D-B2EC-9E38AFFEDA82\2"	 = "Devices SmartCards ReaderKind"
		"d6cf9145-d365-471b-bcb8-f0b4a96b891c\100"   = "Fonts ActiveStatus"
		"D7313FF1-A77A-401C-8C99-3DBDD68ADD36\100"   = "ItemNamePrefix"
		"d76e7ba8-dfa6-48e7-9670-d62dfb07206b\2"	 = "Connected Search Contract Id"
		"d76e7ba8-dfa6-48e7-9670-d62dfb07206b\3"	 = "Connected Search App Min Version"
		"d76e7ba8-dfa6-48e7-9670-d62dfb07206b\4"	 = "Connected Search App Installed State"
		"D7750EE0-C6A4-48EC-B53E-B87B52E6D073\100"   = "ImageParsingName"
		"D7B61C70-6323-49CD-A5FC-C84277162C97\100"   = "Photo FlashEnergyDenominator"
		"D98BE98B-B86B-4095-BF52-9D23B2E0A752\100"   = "PriorityText"
		"d9c22960-532c-4bc6-9876-7b12b52593d7\2"	 = "Protocol Name"
		"DA520E51-F4E9-4739-AC82-02E0A95C9030\100"   = "Identity QualifiedUserName"
		"DA5D0862-6E76-4E1B-BABD-70021BD25494\100"   = "GPS Speed"
		"DC54FD2E-189D-4871-AA01-08C2F57A4ABC\100"   = "FlagStatusText"
		"DC5877C7-225F-45F7-BAC7-E81334B6130A\100"   = "GPS ImgDirectionNumerator"
		"DC8F80BD-AF1E-4289-85B6-3DFC1B493992\100"   = "Message ConversationID"
		"DC8F80BD-AF1E-4289-85B6-3DFC1B493992\101"   = "Message ConversationIndex"
		"DCCB10AF-B4E2-4B88-95F9-031B4D5AB490\100"   = "Photo FocalPlaneXResolutionNumerator"
		"dce33a78-aa18-4b3d-b1df-a6621ac8bdd2\2"	 = "Connected Search Bypass View Action"
		"dd141766-313a-4a30-90f0-056a7c968437\2"	 = "Print Status Document Count"
		"dd141766-313a-4a30-90f0-056a7c968437\3"	 = "Print Status Error Status"
		"dd141766-313a-4a30-90f0-056a7c968437\4"	 = "Print Status Location"
		"dd141766-313a-4a30-90f0-056a7c968437\5"	 = "Print Status Comment"
		"dd141766-313a-4a30-90f0-056a7c968437\6"	 = "Print Status Preferences"
		"dd141766-313a-4a30-90f0-056a7c968437\7"	 = "Print Status Warning Status"
		"dd141766-313a-4a30-90f0-056a7c968437\8"	 = "Print Status Info Status"
		"dd141766-313a-4a30-90f0-056a7c968437\9"	 = "Scan Status Profile"
		"DDD1460F-C0BF-4553-8CE4-10433C908FB0\100"   = "Contact BusinessAddressStreet"
		"DE00DE32-547E-4981-AD4B-542F2E9007D8\100"   = "PropGroup Camera"
		"DE35258C-C695-4CBC-B982-38B0AD24CED0\2"	 = "Shell OmitFromView"
		"DE41CC29-6971-4290-B472-F59F2E2F31E2\100"   = "Media DateReleased"
		"DE5EF3C7-46E1-484E-9999-62C5308394C1\100"   = "Contact PrimaryAddressPostOfficeBox"
		"DE621B8F-E125-43A3-A32D-5665446D632A\25"    = "Security EncryptionOwnersDisplay"
		"de9e220b-41d4-4690-8b6b-3d89e231eef1\100"   = "Fonts Family Name"
		"DEA7C82C-1D89-4A66-9427-A4E3DEBABCB1\100"   = "Journal Contacts"
		"debda43a-37b3-4383-91e7-4498da2995ab\1"	 = "WNET Scope"
		"debda43a-37b3-4383-91e7-4498da2995ab\2"	 = "WNET Type"
		"debda43a-37b3-4383-91e7-4498da2995ab\3"	 = "WNET DisplayType"
		"debda43a-37b3-4383-91e7-4498da2995ab\4"	 = "WNET Usage"
		"debda43a-37b3-4383-91e7-4498da2995ab\5"	 = "WNET Local Name"
		"debda43a-37b3-4383-91e7-4498da2995ab\6"	 = "WNET Remote Name"
		"debda43a-37b3-4383-91e7-4498da2995ab\7"	 = "WNET Comment"
		"debda43a-37b3-4383-91e7-4498da2995ab\8"	 = "WNET Provider"
		"DEEB2DB5-0696-4CE0-94FE-A01F77A45FB5\102"   = "Music ArtistSortOverride"
		"DF975FD3-250A-4004-858F-34E29A3E37AA\100"   = "PropGroup Contact"
		"DFB9A04D-362F-4CA3-B30B-0254B17B5B84\100"   = "ParsingBindContext"
		"E08805C8-E395-40DF-80D2-54F0D6C43154\100"   = "Document DocumentID"
		"E1277516-2B5F-4869-89B1-2E585BD38B7A\100"   = "Photo LensModel"
		"E13D8975-81C7-4948-AE3F-37CAE11E8FF7\100"   = "Photo ShutterSpeedDenominator"
		"E1A9A38B-6685-46BD-875E-570DC7AD7320\100"   = "Photo ApertureDenominator"
		"e1ad4953-a752-443c-93bf-80c7525566c2\2"	 = "Connected Search Type"
		"e1ad4953-a752-443c-93bf-80c7525566c2\3"	 = "Connected Search Rendering Template"
		"e1ad4953-a752-443c-93bf-80c7525566c2\4"	 = "Connected Search Fallback Template"
		"e1ad4953-a752-443c-93bf-80c7525566c2\5"	 = "Connected Search Telemetry Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\6"	 = "Connected Search Impression Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\7"	 = "Connected Search Is Visibility Tracked"
		"e1ad4953-a752-443c-93bf-80c7525566c2\8"	 = "Connected Search Telemetry Data"
		"e1ad4953-a752-443c-93bf-80c7525566c2\9"	 = "Connected Search Application Search Scope"
		"e1ad4953-a752-443c-93bf-80c7525566c2\10"    = "Connected Search Parent Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\11"    = "Connected Search Child Count"
		"e1ad4953-a752-443c-93bf-80c7525566c2\12"    = "Connected Search Top Level Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\13"    = "Connected Search Is Visible By Default"
		"e1ad4953-a752-443c-93bf-80c7525566c2\14"    = "Connected Search Is Activatable"
		"e1ad4953-a752-443c-93bf-80c7525566c2\15"    = "Connected Search Suggestion Context"
		"e1ad4953-a752-443c-93bf-80c7525566c2\16"    = "Connected Search Region Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\17"    = "Connected Search Item Source"
		"e1ad4953-a752-443c-93bf-80c7525566c2\18"    = "Connected Search Activation Command"
		"e1ad4953-a752-443c-93bf-80c7525566c2\19"    = "Connected Search Is History Item"
		"e1ad4953-a752-443c-93bf-80c7525566c2\20"    = "Connected Search Is App Available"
		"e1ad4953-a752-443c-93bf-80c7525566c2\21"    = "Connected Search History Title"
		"e1ad4953-a752-443c-93bf-80c7525566c2\22"    = "Connected Search History Description"
		"e1ad4953-a752-443c-93bf-80c7525566c2\23"    = "Connected Search History Glyph"
		"e1ad4953-a752-443c-93bf-80c7525566c2\27"    = "Connected Search Requires Consent"
		"e1ad4953-a752-443c-93bf-80c7525566c2\28"    = "Connected Search Copy Text"
		"e1ad4953-a752-443c-93bf-80c7525566c2\29"    = "Connected Search Add Open In Browser Command"
		"e1ad4953-a752-443c-93bf-80c7525566c2\30"    = "Connected Search Image Url"
		"e1ad4953-a752-443c-93bf-80c7525566c2\31"    = "Connected Search Image Prefetch Stage"
		"e1ad4953-a752-443c-93bf-80c7525566c2\32"    = "Connected Search Is Local Item"
		"E1D4A09E-D758-4CD1-B6EC-34A8B5A73F80\100"   = "Contact BusinessAddressPostalCode"
		"e2d40928-632c-4280-a202-e0c2ad1ea0f4\2"	 = "Connected Search Qs Code"
		"e2d40928-632c-4280-a202-e0c2ad1ea0f4\3"	 = "Connected Search Jump List"
		"e2d40928-632c-4280-a202-e0c2ad1ea0f4\4"	 = "Connected Search Voice Command Examples"
		"e32596b0-1163-4e02-867a-12132db4ba06\2"	 = "IE FeedItem Local Id"
		"E3690A87-0FA8-4A2A-9A9F-FCE8827055AC\100"   = "PropGroup Image"
		"E3A7D2C1-80FC-4B40-8F34-30EA111BDC2E\100"   = "PropGroup FileSystem"
		"E4F10A3C-49E6-405D-8288-A23BD4EEAA6C\100"   = "FileExtension"
		"E53D799D-0F3F-466E-B2FF-74634A3CB7A4\100"   = "Contact PrimaryAddressCountry"
		"e5473742-4611-4aaf-9c49-a3417748cbc8\100"   = "Invalid Path Value"
		"E55FC3B0-2B60-4220-918E-B21E8BF16016\100"   = "Identity UniqueID"
		"E6822FEE-8C17-4D62-823C-8E9CFCBD1D5C\100"   = "Audio IsVariableBitRate"
		"e6c3d9ad-7b32-4efe-a167-0a868ffdf3af\100"   = "Game WinSPR Minimum"
		"E6DDCAF7-29C5-4F0A-9A68-D19412EC7090\100"   = "Photo LensManufacturer"
		"e77e90df-6271-4f5b-834f-2dd1f245dda4\2"	 = "Storage Provider UI Status"
		"e77e90df-6271-4f5b-834f-2dd1f245dda4\3"	 = "Storage Provider State"
		"e77e90df-6271-4f5b-834f-2dd1f245dda4\4"	 = "Storage Provider Transfer Progress"
		"E7B33238-6584-4170-A5C0-AC25EFD9DA56\100"   = "PropGroup RecordedTV"
		"E7C3FB29-CAA7-4F47-8C8B-BE59B330D4C5\2"	 = "Devices Aep ContainerId"
		"E7C3FB29-CAA7-4F47-8C8B-BE59B330D4C5\3"	 = "Devices Aep CanPair"
		"E8309B6E-084C-49B4-B1FC-90A80331B638\100"   = "Photo PeopleNames"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\2"	 = "Zip Folder Encrypted"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\3"	 = "Zip Folder Method"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\4"	 = "Zip Folder Ratio"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\5"	 = "Zip Folder CRC32"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\6"	 = "Zip Folder Compressed Size"
		"E92A2496-223B-4463-A4E3-30EABBA79D80\100"   = "Photo FNumberDenominator"
		"e9641eff-af25-4db7-947b-4128929f8ef5\2"	 = "Connected Search Suggestion Detail Text"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\102"   = "Structured Query Virtual Bcc"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\103"   = "Structured Query Virtual Cc"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\104"   = "Structured Query Virtual From"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\105"   = "Structured Query Virtual To"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\106"   = "Structured Query Virtual Organizer"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\107"   = "Structured Query Virtual Required Attendees"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\108"   = "Structured Query Virtual Optional Attendees"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\109"   = "Structured Query Virtual Resources"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\110"   = "Structured Query Virtual Date Created"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\111"   = "Structured Query Virtual Phone"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\112"   = "Structured Query Virtual Message Size"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\113"   = "Structured Query Virtual About"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\114"   = "Structured Query Virtual Is Read"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\115"   = "Structured Query Virtual Journal Duration"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\116"   = "Structured Query Virtual Is Encrypted"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\117"   = "Structured Query Virtual Type"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\118"   = "Structured Query Virtual Artist"
		"ea810849-87ff-4b54-abd6-5b71adf466f8\1"	 = "Dui Control Resource"
		"EC0B4191-AB0B-4C66-90B6-C6637CDEBBAB\100"   = "Communication PolicyTag"
		"ECF4B6F6-D5A6-433C-BB92-4076650FC890\100"   = "GPS DestLatitudeNumerator"
		"ECF7F4C9-544F-4D6D-9D98-8AD79ADAF453\100"   = "GPS SpeedRef"
		"ED4DF2D3-8695-450B-856F-F5C1C53ACB66\100"   = "GPS DestDistanceRef"
		"ee31306c-fb9b-4d62-8621-3575d972a9f9\1718"  = "Volume BitLocker Requires Admin"
		"EE3D3D8A-5381-4CFA-B13B-AAF66B5F4EC9\100"   = "Photo WhiteBalance"
		"EEC7B761-6F94-41B1-949F-C729720DD13C\12"    = "DeviceInterface PrinterPortName"
		"EF1167EB-CBFC-4341-A568-A7C91A68982C\2"	 = "Devices WiFi InterfaceGuid"
		"EF884C5B-2BFE-41BB-AAE5-76EEDF4F9902\100"   = "IsShared"
		"EF884C5B-2BFE-41BB-AAE5-76EEDF4F9902\200"   = "SharedWith"
		"EF884C5B-2BFE-41BB-AAE5-76EEDF4F9902\300"   = "SharingStatus"
		"ef884c5b-2bfe-41bb-aae5-76eedf4f9902\400"   = "Share Scope"
		"F04BEF95-C585-4197-A2B7-DF46FDC9EE6D\100"   = "KindText"
		"F0F7984D-222E-4AD2-82AB-1DD8EA40E57E\300"   = "TitleSortOverride"
		"F1176DFE-7138-4640-8B4C-AE375DC70A6D\100"   = "Contact PrimaryAddressState"
		"F18DEDF3-337F-42C0-9E03-CEE08708A8C3\100"   = "Identity LogonStatusString"
		"F1A24AA7-9CA7-40F6-89EC-97DEF9FFE8DB\100"   = "Contact FileAsName"
		"F1FDB4AF-F78C-466C-BB05-56E92DB0B8EC\103"   = "Music AlbumArtistSortOverride"
		"F21D9941-81F0-471A-ADEE-4E74B49217ED\100"   = "ProviderItemID"
		"F2275480-F782-4291-BD94-F13693513AEC\0"	 = "PropList XPDetailsPanel"
		"F23F425C-71A1-4FA8-922F-678EA4A60408\100"   = "IsAttachment"
		"F271C659-7E5E-471F-BA25-7F77B286F836\100"   = "Contact BusinessEmailAddresses"
		"f27abe3a-7111-4dda-8cb2-29222ae23566\2"	 = "Connected Search Disambiguation Id"
		"F334115E-DA1B-4509-9B3D-119504DC7ABB\100"   = "Document Contributor"
		"F3713ADA-90E3-4E11-AAE5-FDC17685B9BE\100"   = "PropGroup GPS"
		"f3aecac4-5b8d-436a-ad0c-64ab194fdaf3\100"   = "Fonts Collection Name"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\2"	 = "App Contract Pinned"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\3"	 = "App Contract Hidden"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\4"	 = "App Contract Pinned Order"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\5"	 = "App Contract Relevance"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\6"	 = "App Contract Category"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\7"	 = "App Contract Supported File Types"
		"F3D8F40D-50CB-44A2-9718-40CB9119495D\100"   = "Contact Initials"
		"f50d2f5d-dda0-48d4-8d2b-e83729fb69a4\100"   = "Item Query Condition"
		"F6272D18-CECC-40B1-B26A-3911717AA7BD\100"   = "Calendar Location"
		"F628FD8C-7BA8-465A-A65B-C5AA79263A9E\100"   = "Photo MeteringModeText"
		"F7DB74B4-4287-4103-AFBA-F1B13DCD75CF\100"   = "ItemDate"
		"f8245476-2ec6-44be-b2f7-82ec2537fa2e\100"   = "Condition"
		"f8245476-2ec6-44be-b2f7-82ec2537fa2e\101"   = "Condition Key"
		"F85BF840-A925-4BC2-B0C4-8E36B598679E\100"   = "Photo DigitalZoom"
		"F8D3F6AC-4874-42CB-BE59-AB454B30716A\100"   = "Sensitivity"
		"F8FA7FA3-D12B-4785-8A4E-691A94F7A3E7\100"   = "Contact EmailAddress"
		"FA303353-B659-4052-85E9-BCAC79549B84\100"   = "Photo MakerNote"
		"FA304789-00C7-4D80-904A-1E4DCC7265AA\100"   = "Photo GainControl"
		"FB1DE864-E06D-47F4-82A6-8A0AEF44493C\2"	 = "Devices AudioDevice SpeechProcessingSupported"
		"FB3842CD-9E2A-4F83-8FCC-4B0761139AE9\2"	 = "DeviceInterface Proximity SupportsNfc"
		"FC6976DB-8349-4970-AE97-B3C5316A08F0\100"   = "Photo Sharpness"
		"FC9F7306-FF8F-4D49-9FB6-3FFE5C0951EC\100"   = "Contact Department"
		"FCAD3D3D-0858-400F-AAA3-2F66CCE2A6BC\100"   = "Photo FlashEnergyNumerator"
		"FCC16823-BAED-4F24-9B32-A0982117F7FA\100"   = "Identity PrimaryEmailAddress"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\100"   = "FileOfflineAvailabilityStatus"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\101"   = "FolderKind"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\103"   = "SyncTransferStatus"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\104"   = "TransferPosition"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\105"   = "TransferSize"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\106"   = "TransferOrder"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\107"   = "LastSyncError"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\108"   = "StorageProviderId"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\109"   = "StorageProviderError"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\110"   = "StorageProviderStatus"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\111"   = "StorageProviderShareStatuses"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\112"   = "StorageProviderFileRemoteUri"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\113"   = "CachedFileUpdaterContentIdForStream"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\114"   = "CachedFileUpdaterContentIdForConflictResolution"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\115"   = "RemoteConflictingFile"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\116"   = "Storage Provider Thumbnail Dimensions"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\117"   = "StorageProviderSharingStatus"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\118"   = "Storage Provider Descendant Sharing Status"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\119"   = "Storage Provider Fully Qualified Id"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\120"   = "Storage Provider Custom States"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\121"   = "Item Custom State State List"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\122"   = "Item Custom State Values"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\123"   = "Item Custom State Icon References"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\124"   = "Storage Provider Aggregated Custom States"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\125"   = "Storage Provider Network Connected"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\126"   = "Storage Provider Warning Error State"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\127"   = "Storage Provider Protection Mode"
		"fcfb52aa-c1e5-4cd8-88bc-f80fd7390f20\100"   = "Not User Content"
		"FD122953-FA93-4EF7-92C3-04C946B2F7C8\100"   = "Music DisplayArtist"
		"fd9d9fc7-38ec-436d-8fc6-ec39bad301e6\100"   = "Computer Processor"
		"fd9d9fc7-38ec-436d-8fc6-ec39bad301e6\101"   = "Computer Memory"
		"FDF84370-031A-4ADD-9E91-0D775F1C6605\100"   = "MileageInformation"
		"FE83BB35-4D1A-42E2-916B-06F3E1AF719E\100"   = "Photo FlashModel"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\3"	 = "Printer Default"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\4"	 = "Printer Location"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\5"	 = "Printer Model"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\6"	 = "Printer Queue Size"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\7"	 = "Printer Status"
		"FEC690B7-5F30-4646-AE47-4CAAFBA884A3\100"   = "Photo ExposureProgramText"
		"fec7952b-4bf0-4c03-b6e1-2796818b7ca9\100"   = "Fonts Version"
		"FF1167EB-CBFC-4341-A568-A7C91A68982C\2"	 = "Devices Wwan InterfaceGuid"
		"FF962609-B7D6-4999-862D-95180D529AEA\100"   = "Contact OtherAddressStreet"
		"FFAE9DB7-1C8D-43FF-818C-84403AA3732D\100"   = "SourcePackageFamilyName"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\2"	 = "System FilterInfo"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\3"	 = "Kind"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\5"	 = "System WordWheel"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\6"	 = "FullText"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\7"	 = "System ItemsInStack"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\8"	 = "System ItemId"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\9"	 = "System DelegationFlags"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\10"    = "System ItemSourceCLSID"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\11"    = "System DelegateSourceId"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\12"    = "System Generic_String"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\13"    = "System Generic_Integer"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\14"    = "System Generic_DateTime"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\15"    = "System Generic_Boolean"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\16"    = "System Generic_FloatingPoint"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\17"    = "System ResultSourceId"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\19"    = "System ChapterId"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\20"    = "System ResultType"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\23"    = "System WebPreviewUrl"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\24"    = "System ThumbnailCacheIdParts"
		"1E3EE840-BC2B-476C-8237-2ACD1A839B22\25"    = "System ItemContext"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\5"	 = "DeviceInterface Bluetooth ModelNumber"
		"2DAD1EB7-816D-40D3-9EC3-C9773BE2AADE\100"   = "GPS AltitudeNumerator"
		"2CBAA8F5-D81F-47CA-B17A-F8D822300131\100"   = "DateAcquired"
		"2BDA47DA-08C6-4FE1-80BC-A72FC517C5D0\100"   = "GPS DestDistanceNumerator"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\9"	 = "StorageProviderFileHasConflict"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\4"	 = "DeviceInterface Bluetooth Manufacturer"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\6"	 = "Hardware Manufacturer"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\1"	 = "DeviceInterface Bluetooth DeviceAddress"
		"2BE9260A-2012-4742-A555-F41B638B7DCB\2"	 = "Devices Notifications NewMessage"
		"C07B4199-E1DF-4493-B1E1-DE5946FB58F8\100"   = "Address Country"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\37"    = "AppUserModel UninstallCommand"
		"9B174B35-40FF-11D2-A27E-00C04FC30871\7 "    = "Computer DecoratedFreeSpace"
		"F29F85E0-4FF9-1068-AB91-08002B27B3D9\2"	 = "Title"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\12"    = "Devices Aep Bluetooth LastSeenTime"
		"26DC287C-6E3D-4BD3-B2B0-6A26BA2E346D\3"	 = "StatusBarSelectedItemCount"
		"2425166F-5642-4864-992F-98FD98F294C3\100"   = "IdentityProvider Picture"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\9"	 = "Hardware DriverVersion"
		"1D6179A6-A876-4031-B013-3347B2B64DC8\100"   = "Photo FocalPlaneYResolutionDenominator"
		"5CBF2787-48CF-4208-B90E-EE5E5D420294\2 "    = "Link TargetUrl"
		"22704DA4-C6B2-4A99-8E56-F16DF8C92599\100"   = "GPS VersionID"
		"000214A1-0000-0000-C000-000000000046\9"	 = "Status"
		"276D7BB0-5B34-4FB0-AA4B-158ED12A1809\100"   = "Document ClientID"
		"8943B373-388C-4395-B557-BC6DBAFFAFDB\6"	 = "Devices AudioDevice Microphone IsFarField"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\8"	 = "DeviceInterface Bluetooth ProductId"
		"2598D2FB-5569-4367-95DF-5CD3A177E1A5\100"   = "PropGroup Origin"
		"0C73B141-39D6-4653-A683-CAB291EAF95B\6"	 = "Supplemental Album"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\10"    = "Hardware DriverProvider"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\11"    = "Hardware DriverDate"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\2"	 = "Hardware Name"
		"8DBC9C86-97A9-4BFF-9BC6-BFE95D3E6DAD\2"	 = "Devices Panel PanelId"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\4096"  = "Hardware Status"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\4098"  = "Hardware Image"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\4099"  = "Hardware Function"
		"2B1B801E-C0C1-4987-9EC5-72FA89814787\100"   = "Identity PrimarySid"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\128"   = "LastSyncWarning"
		"9B174B35-40FF-11D2-A27E-00C04FC30871\5 "    = "PercentFull"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\11"    = "DeviceInterface Bluetooth LastConnectedTime"
		"C07B4199-E1DF-4493-B1E1-DE5946FB58F8\101"   = "Address CountryCode"
		"2A785BA9-8D23-4DED-82E6-60A350C86A10\100"   = "Photo Contrast"
		"2579E5D0-1116-4084-BD9A-9B4F7CB4DF5E\100"   = "Audio PeakValue"
		"32CE38B2-2C9A-41B1-9BC5-B3784394AA44\2"	 = "EdgeGesture DisableTouchWhenFullscreen"
		"5CBF2787-48CF-4208-B90E-EE5E5D420294\21 "   = "Link Description"
		"5CBF2787-48CF-4208-B90E-EE5E5D420294\23 "   = "Link DateVisited"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\6"	 = "DeviceInterface Bluetooth VendorIdSource"
		"AECF2FE8-1D00-4FEE-8A6D-A70D719B772B\2"	 = "Devices PhoneLineTransportDevice Connected"
		"0774315E-B714-48EC-8DE8-8125C077AC11\2"	 = "Devices ChallengeAep"
		"CBF38310-4A17-4310-A1EB-247F0B67593B\9"	 = "DeviceInterface Hid VersionNumber"
		"257E44E2-9031-4323-AC38-85C552871B2E\100"   = "Photo ExposureTimeNumerator"
		"2C53C813-FB63-4E22-A1AB-0B331CA1E273\100"   = "RecordedTV NetworkAffiliation"
		"9B174B35-40FF-11D2-A27E-00C04FC30871\10 "   = "Volume IsRoot"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\5"	 = "Hardware DisplayAttribute"
		"7B03B546-FA4F-4A52-A2FE-03D5311E5865\100"   = "Search ExtendedProperties"
		"1CE0D6BC-536C-4600-B0DD-7E0C66B350D5\8"	 = "History SelectionCount"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\2"	 = "DeviceInterface Bluetooth ServiceGuid"
		"C07B4199-E1DF-4493-B1E1-DE5946FB58F8\102"   = "Address Region"
		"0C73B141-39D6-4653-A683-CAB291EAF95B\7"	 = "Supplemental Person"
		"1CE0D6BC-536C-4600-B0DD-7E0C66B350D5\9"	 = "History TargetUrlHostName"
		"026E516E-B814-414B-83CD-856D6FEF4822\9"	 = "Devices SchematicName"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\31"    = "AppUserModel VisualElementsManifestHintPath"
		"2CA2DAE6-EDDC-407D-BEF1-773942ABFA95\100"   = "GPS MapDatum"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\3"	 = "Hardware Icon"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\131"   = "ContentUri"
		"2E4B640D-5019-46D8-8881-55414CC5CAA0\100"   = "Media DateEncoded"
		"305BC615-DCA1-44A5-9FD4-10C0BA79412E\100"   = "Photo FocalLengthDenominator"
		"B2F9B9D6-FEC4-4DD5-94D7-8957488C807B\8"	 = "StorageProviderFileFlags"
		"293CA35A-09AA-4DD2-B180-1FE245728A52\100"   = "Calendar Duration"
		"8DBC9C86-97A9-4BFF-9BC6-BFE95D3E6DAD\3"	 = "Devices Panel PanelGroup"
		"8943B373-388C-4395-B557-BC6DBAFFAFDB\5"	 = "Devices AudioDevice Microphone SensitivityInDbfs2"
		"1E81A3F8-A30F-4247-B9EE-1D0368A9425C\2"	 = "DataObjectFormat"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\7"	 = "DeviceInterface Bluetooth VendorId"
		"0C73B141-39D6-4653-A683-CAB291EAF95B\5"	 = "Supplemental Location"
		"FCEFF153-E839-4CF3-A9E7-EA22832094B8\132"   = "ContentId"
		"26DC287C-6E3D-4BD3-B2B0-6A26BA2E346D\2"	 = "StatusBarViewItemCount"
		"1F8844E1-24AD-4508-9DFD-5326A415CE02\100"   = "Image CompressedBitsPerPixelDenominator"
		"9F4C2855-9F79-4B39-A8D0-E1D42DE1D5F3\38"    = "AppUserModel SettingsCommand"
		"C07B4199-E1DF-4493-B1E1-DE5946FB58F8\103"   = "Address RegionCode"
		"1E005EE6-BF27-428B-B01C-79676ACD2870\100"   = "Document Division"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\9"	 = "DeviceInterface Bluetooth ProductVersion"
		"2BD67D8B-8BEB-48D5-87E0-6CDA3428040A\3"	 = "DeviceInterface Bluetooth Flags"
		"C07B4199-E1DF-4493-B1E1-DE5946FB58F8\104"   = "Address Town"
		"1F856A9F-6900-4ABA-9505-2D5F1B4D66CB\100"   = "Message ToDoFlags"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\4100"  = "Hardware ShellAttributes"
		"2804D469-788F-48AA-8570-71B9C187E138\100"   = "PropGroup Audio"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\8"	 = "Hardware SerialNumber"
		"0C73B141-39D6-4653-A683-CAB291EAF95B\4"	 = "Supplemental Tag"
		"5EAF3EF2-E0CA-4598-BF06-71ED1D9DD953\7"	 = "Hardware Model"
		"5CBF2787-48CF-4208-B90E-EE5E5D420294\7 "    = "History VisitCount"
	}
	
	# This also the Filename offset 
	$Host_OS = [Ordered]@{
		'46' = 'Windows 8.1/10/11'
		'42' = 'Windows 2000/7/8'
		'38' = 'Windows Vista'
		'20' = 'Windows XP/2003'
	}
	
	$CPitems = [ordered]@{
		"00" = "All Control Panel Items"
		"01" = "Appearance and Personalization"
		"02" = "Hardware and Sound"
		"03" = "Network and Internet"
		"04" = "Sound, Speech and Audio Devices"
		"05" = "System and Security"
		"06" = "Clock, Language, and Region"
		"07" = "Ease of Access"
		"08" = "Programs"
		"09" = "User Accounts"
		"10" = "Security Center"
		"11" = "Mobile PC"
	}
	
	# ..\10.0.22621.0\um\shellapi.h
	$StockIconIDs = [ordered]@{
		'-1'  = "Invalid SHSTOCKICONID "
		'0'   = 'Document with no associated application'
		'1'   = 'Document with an associated application'
		'2'   = 'Generic application'
		'3'   = 'Generic Folder'
		'4'   = 'Folder (open)'
		'5'   = '5.25-inch disk drive'
		'6'   = '3.5-inch disk drive'
		'7'   = 'Removable drive'
		'8'   = 'Fixed drive (hard disk)'
		'9'   = 'Network drive (connected)'
		'10'  = 'Network drive (disconnected)'
		'11'  = 'CD drive'
		'12'  = 'RAM disk drive'
		'13'  = 'The entire network'
		'15'  = 'A computer on the network'
		'16'  = 'A local printer or print destination'
		'17'  = 'The Network virtual folder'
		'22'  = 'The Search feature'
		'23'  = 'The Help and Support feature'
		'27'  = 'Power-Off icon'
		'28'  = 'Overlay for a shared item'
		'29'  = 'Overlay for a shortcut'
		'30'  = 'Overlay for items that are expected to be slow to access'
		'31'  = 'The Recycle Bin (empty)'
		'32'  = 'The Recycle Bin (not empty)'
		'40'  = 'Audio CD media'
		'47'  = 'Security lock'
		'49'  = '(Autolist) A virtual folder that contains the results of a search'
		'50'  = 'A network printer'
		'51'  = 'A server shared on a network'
		'52'  = 'A local fax printer'
		'53'  = 'A network fax printer'
		'54'  = 'A file that receives the output of a Print to file operation'
		'55'  = 'A category that results from a Stack by command to organize the contents of a folder'
		'56'  = 'Super Video CD (SVCD) media'
		'57'  = 'A folder that contains only subfolders as child items'
		'58'  = 'Unknown drive type'
		'59'  = 'DVD drive'
		'60'  = 'DVD media'
		'61'  = 'DVD-RAM media'
		'62'  = 'DVD-RW media'
		'63'  = 'DVD-R media'
		'64'  = 'DVD-ROM media'
		'65'  = 'CD+ (enhanced audio CD) media'
		'66'  = 'CD-RW media'
		'67'  = 'CD-R media'
		'68'  = 'A writable CD in the process of being burned'
		'69'  = 'Blank writable CD media'
		'70'  = 'CD-ROM media'
		'71'  = 'An audio file'
		'72'  = 'An image file'
		'73'  = 'A video file'
		'74'  = 'A mixed file'
		'75'  = 'Folder back'
		'76'  = 'Folder front'
		'77'  = 'Security shield (UAC)'
		'78'  = 'Warning'
		'79'  = 'Informational'
		'80'  = 'Error'
		'81'  = 'Key'
		'82'  = 'Software'
		'83'  = 'A UI item, such as a button, that issues a rename command'
		'84'  = 'A UI item, such as a button, that issues a delete command'
		'85'  = 'Audio DVD media'
		'86'  = 'Movie DVD media'
		'87'  = 'Enhanced CD media'
		'88'  = 'Enhanced DVD media'
		'89'  = 'HD-DVD media'
		'90'  = 'Blu-ray Disc media'
		'91'  = 'Video CD (VCD) media'
		'92'  = 'DVD+R media'
		'93'  = 'DVD+RW media'
		'94'  = 'A desktop computer'
		'95'  = 'A mobile computer (laptop)'
		'96'  = 'The User Accounts Control Panel item'
		'97'  = 'Smart media'
		'98'  = 'CompactFlash media'
		'99'  = 'A cell phone'
		'100' = 'A digital camera'
		'101' = 'A digital video camera'
		'102' = 'An audio player'
		'103' = 'Connect to network'
		'104' = 'The Network and Internet Control Panel item'
		'105' = 'A compressed file with a .zip file name extension'
		'106' = 'The Additional Options Control Panel item'
		'107' = 'internal Vista RTM icon'
		'108' = 'internal Vista RTM icon'
		'109' = 'internal Vista RTM icon'
		'110' = 'internal Vista RTM icon'
		'111' = 'internal Vista RTM icon'
		'112' = 'internal Vista RTM icon'
		'113' = 'internal Vista RTM icon'
		'114' = 'internal Vista RTM icon'
		'115' = 'internal Vista RTM icon'
		'116' = 'internal Vista RTM icon'
		'117' = 'internal Vista RTM icon'
		'118' = 'internal Vista RTM icon'
		'119' = 'internal Vista RTM icon'
		'120' = 'internal Vista RTM icon'
		'121' = 'internal Vista RTM icon'
		'122' = 'internal Vista RTM icon'
		'123' = 'internal Vista RTM icon'
		'124' = 'internal Vista RTM icon'
		'125' = 'internal Vista RTM icon'
		'126' = 'internal Vista RTM icon'
		'127' = 'internal Vista RTM icon'
		'128' = 'internal Vista RTM icon'
		'129' = 'internal Vista RTM icon'
		'130' = 'internal Vista RTM icon'
		'131' = 'internal Vista RTM icon'
		'132' = 'High definition DVD drive'
		'133' = 'High definition Blu-ray drive'
		'134' = 'High definition DVD-ROM media'
		'135' = 'High definition DVD-R media'
		'136' = 'High definition DVD-RAM media'
		'137' = 'High definition DVD-ROM media'
		'138' = 'High definition write-once media'
		'139' = 'High definition Blu-ray R/W media'
		'140' = 'A cluster disk array'
		'141' = 'Internal Vista SP1 icon'
		'142' = 'Internal Vista SP1 icon'
		'143' = 'Internal Vista SP1 icon'
		'144' = 'Internal Vista SP1 icon'
		'145' = 'Internal Vista SP1 icon'
		'146' = 'Internal Vista SP1 icon'
		'147' = 'Internal Vista SP1 icon'
		'148' = 'Internal Vista SP1 icon'
		'149' = 'Internal Vista SP1 icon'
		'150' = 'Internal Vista SP1 icon'
		'151' = 'Internal Vista SP1 icon'
		'152' = 'Internal Vista SP1 icon'
		'153' = 'Internal Vista SP1 icon'
		'154' = 'Internal Vista SP1 icon'
		'155' = 'Internal Vista SP1 icon'
		'156' = 'Internal Vista SP1 icon'
		'157' = 'Internal Vista SP1 icon'
		'158' = 'Internal Vista SP1 icon'
		'159' = 'Internal Vista SP1 icon'
		'160' = 'Internal Windows 7/8/10/11 icon'
		'161' = 'Internal Windows 7/8/10/11 icon'
		'162' = 'Internal Windows 7/8/10/11 icon'
		'163' = 'Internal Windows 7/8/10/11 icon'
		'164' = 'Internal Windows 7/8/10/11 icon'
		'165' = 'Internal Windows 7/8/10/11 icon'
		'166' = 'Internal Windows 7/8/10/11 icon'
		'167' = 'Internal Windows 7/8/10/11 icon'
		'168' = 'Internal Windows 7/8/10/11 icon'
		'169' = 'Internal Windows 7/8/10/11 icon'
		'170' = 'Internal Windows 7/8/10/11 icon'
		'171' = 'Internal Windows 7/8/10/11 icon'
		'172' = 'Internal Windows 7/8/10/11 icon'
		'173' = 'Internal Windows 7/8/10/11 icon'
		'174' = 'Internal Windows 7/8/10/11 icon'
		'175' = 'Internal Windows 7/8/10/11 icon'
		'176' = 'Right Arrow (White on Green)'
		'177' = 'Internal Windows 7/8/10/11 icon'
		'178' = 'Internal Windows 7/8/10/11 icon'
		'179' = 'Internal Windows 7/8/10/11 icon'
		'180' = 'Internal Windows 7/8/10/11 icon'
		'181' = 'SIID_MAX_ICONS'
	}
	
	# https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775141(v=vs.85)
	$UriEntryTypes = [ordered]@{
		'1'  = 'Authority'
		'2'  = 'Display URI'
		'3'  = 'Domain'
		'4'  = 'Extension'
		'5'  = 'Fragment'
		'6'  = 'Host'
		'7'  = 'Password'
		'8'  = 'Path'
		'9'  = 'Path & Query'
		'10' = 'Query'
		'11' = 'Raw URI'
		'12' = 'Scheme Name'
		'13' = 'User Info'
		'14' = 'User Name'
		'15' = 'Host Type'
		'16' = 'Port'
		'17' = 'Scheme'
		'18' = 'Zone'
	}
	
	$SortOrderIndex = [Ordered]@{
		'00' = "Shell User's Folder" # ThisPCDesktopRegFolder
		#	'20' = 'Box'
		#	'29' = "ThisPCDocumentsRegFolder"
		'40' = 'System Home (MSGraphHomeFolder)'
		'42' = 'Pinned to Tree'
		'41' = "Shell User's Folder"
		'44' = 'Other Users Folder'
		'4C' = 'Public Folder'
		'48' = 'Shell Documents Folder'
		'50' = 'This PC'
		'54' = 'Users Libraries'
		'58' = 'Computers and Devices/Device Center'
		'60' = 'Recycle Bin'
		'68' = 'The Internet'
		'70' = 'Control Panel'
		#	'29' = 'Full Details'
		'77' = 'Linux'
		'78' = 'Recycle Bin'
		'80' = 'All Tasks'
		# '1000' = 'Frequent Places Folder'
	}
	
	# Replaced:
	# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/23bb5877-e3dd-4799-9f50-79f05f938537
	# with these:
	# https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_remote_protocol_info
	$Vendors = [Ordered]@{
		"00010000" = "WNNC_NET_MSNET"
		"00020000" = "WNNC_NET_LANMAN"
		"00030000" = "WNNC_NET_NETWARE"
		"00040000" = "WNNC_NET_VINES"
		"00050000" = "WNNC_NET_10NET"
		"00060000" = "WNNC_NET_LOCUS"
		"00070000" = "WNNC_NET_SUN_PC_NFS"
		"00080000" = "WNNC_NET_LANSTEP"
		"00090000" = "WNNC_NET_9TILES"
		"000A0000" = "WNNC_NET_LANTASTIC"
		"000B0000" = "WNNC_NET_AS400"
		"000C0000" = "WNNC_NET_FTP_NFS"
		"000D0000" = "WNNC_NET_PATHWORKS"
		"000E0000" = "WNNC_NET_LIFENET"
		"000F0000" = "WNNC_NET_POWERLAN"
		"00100000" = "WNNC_NET_BWNFS"
		"00110000" = "WNNC_NET_COGENT"
		"00120000" = "WNNC_NET_FARALLON"
		"00130000" = "WNNC_NET_APPLETALK"
		"00140000" = "WNNC_NET_INTERGRAPH"
		"00150000" = "WNNC_NET_SYMFONET"
		"00160000" = "WNNC_NET_CLEARCASE"
		"00170000" = "WNNC_NET_FRONTIER"
		"00180000" = "WNNC_NET_BMC"
		"00190000" = "WNNC_NET_DCE"
		"001A0000" = "WNNC_NET_AVID"
		"001B0000" = "WNNC_NET_DOCUSPACE"
		"001C0000" = "WNNC_NET_MANGOSOFT"
		"001D0000" = "WNNC_NET_SERNET"
		"001E0000" = "WNNC_NET_RIVERFRONT1"
		"001F0000" = "WNNC_NET_RIVERFRONT2"
		"00200000" = "WNNC_NET_DECORB"
		"00210000" = "WNNC_NET_PROTSTOR"
		"00220000" = "WNNC_NET_FJ_REDIR"
		"00230000" = "WNNC_NET_DISTINCT"
		"00240000" = "WNNC_NET_TWINS"
		"00250000" = "WNNC_NET_RDR2SAMPLE"
		"00260000" = "WNNC_NET_CSC"
		"00270000" = "WNNC_NET_3IN1"
		"00290000" = "WNNC_NET_EXTENDNET"
		"002A0000" = "WNNC_NET_STAC"
		"002B0000" = "WNNC_NET_FOXBAT"
		"002C0000" = "WNNC_NET_YAHOO"
		"002D0000" = "WNNC_NET_EXIFS"
		"002E0000" = "WNNC_NET_DAV"
		"002F0000" = "WNNC_NET_KNOWARE"
		"00300000" = "WNNC_NET_OBJECT_DIRE"
		"00310000" = "WNNC_NET_MASFAX"
		"00320000" = "WNNC_NET_HOB_NFS"
		"00330000" = "WNNC_NET_SHIVA"
		"00340000" = "WNNC_NET_IBMAL"
		"00350000" = "WNNC_NET_LOCK"
		"00360000" = "WNNC_NET_TERMSRV"
		"00370000" = "WNNC_NET_SRT"
		"00380000" = "WNNC_NET_QUINCY"
		"00390000" = "WNNC_NET_OPENAFS"
		"003A0000" = "WNNC_NET_AVID1"
		"003B0000" = "WNNC_NET_DFS"
		"003C0000" = "WNNC_NET_KWNP"
		"003D0000" = "WNNC_NET_ZENWORKS"
		"003E0000" = "WNNC_NET_DRIVEONWEB"
		"003F0000" = "WNNC_NET_VMWARE"
		"00400000" = "WNNC_NET_RSFX"
		"00410000" = "WNNC_NET_MFILES"
		"00420000" = "WNNC_NET_MS_NFS"
		"00430000" = "WNNC_NET_GOOGLE"
		"00440000" = "WNNC_NET_NDFS"
	}
	$AppIDs = @{
		"B4866339A794AFCF" = "Paint.Net"
		"39CE6EDE51235EDE" = "Notepad++"
		"9EAE1DD4F073BF2E" = "MiTeC JSON Viewer"
		"82DE7B745170A7A7" = "Microsoft.DesktopAppInstaller_1.21.3421.0_x64__8wekyb3d8bbwe"
		"6FAC1B1908485D3" = "Windows Font Viewer (fontview.exe)"
		"437ED96A251C0A4E" = "IDA Home (PC) ida64.exe"
		"187AFBEE4F000AF7" = "WinSCP"
		"B6E75277D637AF45" = "WinSCP"
		"E58F281BBBF7DB50" = "WinSCP"
		"FB5DC9A49DB30CBC" = "IDA Home (PC) ida64.exe"
		"BB0EB8DC691DC2CB" = "Meridian Audio's MConfig.exe"
		"6D86A7EB1FE36DB5" = "Corel PhotoPaint Home"
		"43DEA41143485508" = "Microsoft Clipchamp"
		"3C9CB00791B6B84C" = "Autodesk DWGTrueView"
		"19E29B56DBA3D8F1" = "FocusMagic"
		"282D650714E18E4E" = "FocusMagic"
		"D7ED28CFC8A00882" = "WindowsSubsystemForAndroid (WsaClient)"
		"D9A573AF9F133B48" = "WindowsSubsystemForAndroid (WsaClient)"
		"8B6C636E68DB7D6F" = "RoonEssentials"
		"362773986BAFAA68" = "MicrosoftTeams"
		"90E73CD9D2BF8B73" = "IsoBuster"
		"0006F647F9488D7A" = "AIM 7.5.11.9 (custom AppID + JL support)"
		"01B29F0DC90366BB" = "AIM 5.9.3857"
		"044A50E6C87BC012" = "Classic FTP Plus 2.15"
		"06059DF4B02360AF" = "Kadu 0.10.0 / 0.6.5.5"
		"0A1D19AFE5A80F80" = "FileZilla 2.2.32"
		"0A79A7CE3C45D781" = "CuteFTP 7.1 (Build 06.06.2005.1)"
		"0CFAB0EC14B6F953" = "Express NewsPictures 2.41 (Build 08.05.07.0)"
		"0EF606B196796EBB" = "HP MediaSmart Photo"
		"1A89D1BEFE8E90E3" = "Adobe Acrobat Distiller Pro XI 32-bit 11.0.0779"
		"1B29F0DC90366BB"  = "AIM 5.9.3857"
		"1CF97C38A5881255" = "MediaPortal 1.1.3"
		"1CFFBE973A437C74" = "DSPlayer 0.889 Lite"
		"1EB796D87C32EFF9" = "Firefox 5.0"
		"2D61CCCB4338DFC8" = "BitTorrent 5.0.0 / 6.0.0 / 7.2.1 (Build 25548)"
		"2DB8E25112AB4453" = "Deluge 1.3.12 / 1.3.3"
		"2FF9DC8FB7E11F39" = "I2P 0.8.8 (no window)"
		"3C93A049A30E25E6" = "J. River Media Center 16.0.149"
		"3DC02B55E44D6697" = "7-Zip 3.13 / 4.20"
		"3E9850346F375D41" = "Foxit Phantom PDF 7.2.2.929"
		"3ED70EF3495535F7" = "Gravity 3.0.4"
		"3EDF100B207E2199" = "digiKam 1.7.0 (KDE 4.4.4)"
		"4FC234E682FA0FFF" = "Fineprint  pdfFactory"
		"4A7E4F6A181D3D08" = "broolzShare"
		"4A49906D074A3AD3" = "Media Go 1.8 (Build 121)"
		"4AA2A5710DA3EFE0" = "DCSharpHub 2.0.0"
		"4AC866364817F10C" = "Microsoft Edge (Chromium)"
		"4B8A4727AA452343" = "Firefox 56.0.2"
		"4B6925EFC53A3C08" = "BCWipe Task Manager 3.02.3 / 3.06.5.5"
		"4C58CF9096EF3EFD" = "Kindle for PC 1.24.3 "
		"4CB9C5750D51C07F" = "Microsoft Movies & TV (Microsoft.ZuneVideo)"
		"4CDF7858C6673F4B" = "Bullet Proof FTP 1.26"
		"4DD48F858B1A6BA7" = "Free Download Manager 3.0 (Build 852)"
		"4FCEEC8E021AC978" = "CoffeeCup Free FTP 3.5.0.0"
		"4FD44F9938892CAA" = "CDBurnerXP"
		"5E877DB63DEC2F8"  = "JetBrains dotPeek"
		"5B186FC4A0B40504" = "Dtella 1.2.5 (Purdue network only)"
		"5BB830F67194431A" = "7-Zip 18.05 (x64)"
		"5C450709F7AE4396" = "Firefox 1.0 / 2.0 / 3.0 (32-bit)"
		"5D6F13ED567AA2DA" = "Microsoft Office Outlook 2010 x64"
		"5DA8F997FD5F9428" = "Internet Explorer x64"
		"5DF4765359170E26" = "Firefox 4.0.1"
		"6DED8E6DAA05CB0C" = "Cyberlink PhotoDirector 8"
		"6A316AA67A46820B" = "Core FTP LE 1.3c (Build 1437) / 2.2 (Build 1689)"
		"6B3A5CE7AD4AF9E4" = "IceChat 9 RC2"
		"6BB98FB8CDC26D69" = "Calculator (Windows built-in)"
		"6BC3383CB68A3E37" = "iTunes 7.6.0.29 / 8.0.0.35"
		"6E855C85DE07BC6A" = "Microsoft Office Excel 2010 x64"
		"6F647F9488D7A"    = "AIM 7.5.11.9 (custom AppID + JL support)"
		"7A4BA998575FF2A4" = "FreeCommander XE 2016 Build 715 32-bit"
		"7B7F65AAECA20A8C" = "Dropbox App 5.4.24"
		"7C2916AFD6F116A6" = "LibreOffice 5.1.0.3 Base"
		"7CB0735D45243070" = "CDisplay 1.8.1.0"
		"7DCA40FD2A5A971F" = "LibreOffice 5.1.0.3"
		"7E4DCA80246863E3" = "Windows Control Panel"
		"8A461F82E9EB4102" = "Foxit Reader 7.2.0.722"
		"8BD5C6433CA967E9" = "ACDSee Photo Manager 2009 (v11.0 Build 113)"
		"8DCCA8B24A5E822E" = "CDBurnerXP 4.5.7.6623"
		"8DEB27DFA31C5C2A" = "CoffeeCup Free FTP 4.4 (Build 1904)"
		"8F3D7202AA5D4C01" = "ImgBurn 2.5.8.0"
		"8F852307189803B8" = "Far Manager 2.0.1807"
		"8FD1364019DC2115" = "Calibre E-Book Manager 2.33"
		"9A464053CD82DE6D" = "LINE Messenger"
		"9AD1EC169BF2DA7F" = "FlylinkDC++ r405 (Build 7358)"
		"9AD84C52EFEAE190" = "1Password 4.6.0.604"
		"9C32E2313792E6E8" = "Microsoft Built-in Disk Cleanup (Win10)"
		"9CE6555426F54B46" = "HxD 1.7.7.0"
		"9D1F905CE5044AEE" = "Edge Browser"
		"9D78513A8998829C" = "Microsoft Built-in Run Dialog (Win7 + Win10)"
		"9E0B3F677A26BBC4" = "BitKinex 3.2.3"
		"9EDAFE4BA4B22CE7" = "Eclipse IDE Oxygen (4.7.3a)"
		"9FDB10E18CDD0101" = "Cisco AnyConnect Secure Mobility Client 3.1.02040"
		"13EB0E5D9A49EAEF" = "Binjet 3.0.2"
		"19E6043495A5B4DA" = "Edit Pad Pro"
		"20EF367747C22564" = "Bullet Proof FTP 2010.75.0.75"
		"22C4D315E96389E0" = "FastCopy 3.12"
		"22CEFA022402327D" = "Meca Messenger 5.3.0.52"
		"27ECECD8D89B6767" = "AIM 6.2.14.2 / 6.5.3.12 / 6.9.17.2"
		"28C8B86DEAB549A1" = "Internet Explorer 8 / 9 / 10 (32-bit)"
		"28EFB5B6D2E28389" = "EA Origin"
		"30D23723BDD5D908" = "Digsby (Build 30140) (JL support)"
		"31E8AC6B0784ED7D" = "Foxit Reader 9.4.0.16811"
		"36F6BC3EFE1D99E0" = "Alt.Binz 0.25.0 (Build 27.09.2007)"
		"44A50E6C87BC012"  = "Classic FTP Plus 2.15"
		"44A398496ACC926D" = "Adobe Premiere Pro CS5 (64-bit)"
		"49DB7ED4F2703C22" = "LogMeIn Client 1.3.1835"
		"50C5E019818564E3" = "Microsoft Excel Viewer 12.0.6219.1000"
		"59E86071B87AC1C3" = "CuteFTP 8.3 (Build 8.3.4.0007)"
		"59F56184C796CFD4" = "ACDSee Photo Manager 10 (Build 219)"
		"65F7DD884B016AB2" = "LimeChat 2.39"
		"70D9ADA92108D731" = "IrfanView 4.51 (x64)"
		"70FFD305907C983B" = "7zip 18.05"
		"73C6A317412687C2" = "Google Talk 1.0.0.104"
		"75FDACD8330BAC18" = "AnyDesk"
		"76F6F1BD18C19698" = "aMule 2.2.6"
		"78F0AFB5BD4BB278" = "Microsoft Lync 2016 64-bit (Skype for Business)"
		"83B03B46DCD30A0E" = "iTunes"
		"83DD64E7FA560BD5" = "LibreOffice 5.1.0.3 Calc"
		"84F066768A22CC4F" = "Adobe Photoshop CS5 (64-bit)"
		"89B0D939F117F75C" = "Adobe Acrobat 9 Pro Extended (32-bit)"
		"169B3BE0BC43D592" = "FastPictureViewer Professional 1.6 (Build 211)"
		"174C2C811C286C58" = "InfraRecorder 0.53.0.0 64-bit"
		"177AEB41DEB606AE" = "Adobe Photoshop CS6 (64 Bit)"
		"188F5EC9D11DED56" = "Microsoft Edge (Chromium)"
		"223BF0F360C6FEA5" = "I2P 0.8.8 (restartable)"
		"271E609288E1210A" = "Microsoft Office Access 2010 x86"
		"319F01BF9FE00F2D" = "Microsoft Access 2013/2016 x64"
		"353E9052CCCBEC5D" = "Kindle for PC 1.21.0"
		"386A2F6AA7967F36" = "EyeBrowse 2.7"
		"454EF7DCA3BB16B2" = "Exodus 0.10.0.0"
		"558C5BD9F906860A" = "BearShare Lite 5.2.5.1"
		"560D789A6A42AD5A" = "DC++ 0.261 / 0.698 / 0.782 (r2402.1)"
		"606A33F5A27B57D4" = "Microsoft Built-in Computer Management 10.0.10011.16384 (Win10)"
		"714B179E552596DF" = "Bullet Proof FTP 2.4.0 (Build 31)"
		"817E5AD5BE351574" = "Microsoft Built-in Services 10.0.10011.16384 (Win10)"
		"905C98E216107AA1" = "Microsoft Lync 2013 15.0.4753.1000"
		"930CF1DD2266E2CB" = "DB Browser for SQLite"
		"966FA7C312D9B10"  = "Eraser 6.2.0.2970"
		"977A5D147AA093F4" = "Lphant 3.51"
		"989D7545C2B2E7B2" = "IMVU 465.8.0.0"
		"1110D9896DCEDDB3" = "imgSeek 0.8.5"
		"1434D6D62D64857D" = "BitLord 1.2.0-66"
		"2417CAA1F2A881D4" = "ICQ 7.6 (Build 5617)"
		"2437D4D14B056114" = "EiskaltDC++ 2.2.3"
		"3094CDB43BF5E9C2" = "Microsoft Office OneNote 2010 x86"
		"3198E37206F28DC7" = "CuteFTP 8.3 Professional (Build 8.3.4.0007)"
		"3353B940C074FD0C" = "Microsoft Built-in Snipping Tool"
		"3917DD550D7DF9A8" = "Konvertor 4.06 (Build 10)"
		"4975D6798A8BDF66" = "7-Zip 4.65 / 9.20"
		"6059DF4B02360AF"  = "Kadu 0.10.0 / 0.6.5.5"
		"6824F4A902C78FBD" = "Firefox 64.0"
		"7010C278903C2B0F" = "Adobe Acrobat XI Pro 32-bit"
		"7111C0CE965B7246" = "Battle.net"
		"7494A606A9EEF18E" = "Crystal Player 1.98"
		"7526DE4A8B5914D9" = "Forte Agent 6.00 (Build 32.1186)"
		"8628E76FD9020E81" = "Fling File Transfer Plus 2.24"
		"8904A5FD2D98B546" = "IceChat 7.70 20101031"
		"9077B9C9CF187CC2" = "KeePass 1.36"
		"9749CEA96D411F37" = "HexChat 2.10.2 64-bit"
		"9839AEC31243A928" = "Microsoft Office Excel 2010 x86"
		"26753C97EA000ECD" = "LibreOffice 5.1.0.3 Math"
		"43886BA3395ACDCC" = "Easy Post 3.0"
		"58170C92FA4B91A1" = "MediaMonkey"
		"76689FF502A1FD9E" = "Imagine Image and Animation Viewer 1.0.7"
		"86781FE8437DB23E" = "Messenger Pro 2.66.6.3353"
		"96252DAFF039437A" = "Lphant 7.0.0.112351"
		"689319B6547CDA85" = "emesene 2.11.7"
		"1461132E553E2E6C" = "Firefox 6.0"
		"2519133D6D830F7E" = "IMatch 3.6.0.113"
		"3643905FCEAB2635" = "Cyberlink PowerDVD 16"
		"6224453D9701A612" = "BinTube 3.7.1.0 (requires VLC 10.5!)"
		"8172865A9D5185CB" = "Binreader 1.0 (Beta 1)"
		"9560577FD87CF573" = "LeechFTP 1.3 (Build 207)"
		"23646679AACCFAE0" = "Adobe Reader 9 x64"
		"26717493B25AA6E1" = "Adobe Dreamweaver CS5 (32-bit)"
		"36801066F71B73C5" = "Binbot 2.0"
		"65009083BFA6A094" = "(app launched via XPMode)"
		"728008617BC3E34B" = "eM Client 3.0.10206.0"
		"780732558F827A42" = "AutoPix 5.3.3"
		"784182360DE0C5B6" = "Kazaa Lite 1.7.1"
		"226400522157FE8B" = "FileZilla Server 0.9.39 beta"
		"BE2FD48BE71F4560" = "Autodesk DWG TrueView"
		"C88C76A215679365" = "Axialis IconWorkshop 6"
		"D1D9B843A81139C6" = "KeePass"
		"D4E1769E47FFDE26" = "Cyberlink PhotoDirector 9"
		"E4EA035065B5789A" = "MaÃ«l HÃ¶rz HxD Hex Editor 2.5"
		"E353DE90C46ECF50" = "Hex-Rays IDA Pro"
		"A1D19AFE5A80F80"  = "FileZilla 2.2.32"
		"A3E0D98F5653B539" = "Instantbird 1.0 (20110623121653) (JL support)"
		"A5DB18F617E28A51" = "ICQ 6.5 (Build 2024)"
		"A7BA40025DAC9A67" = "Microsoft Office Hub"
		"A8DF13A46D66F6B5" = "Kommute (Calypso) 0.24"
		"A31EC95FDD5F350F" = "BitComet"
		"A75B276F6E72CF2A" = "Kazaa Lite Tools K++ 2.7.0 / WinMX 3.53"
		"A79A7CE3C45D781"  = "CuteFTP 7.1 (Build 06.06.2005.1)"
		"A746F9625F7695E8" = "HeXHub 5.07"
		"A777AD264B54ABAB" = "JetVideo 8.0.2.200 Basic"
		"AC3A63B839AC9D3A" = "Azureus Vuze Bittorrent Client 4.6.0.4 / 5.7.1.0"
		"AC8920ED05001800" = "DMDirc 0.6.5 (Profile store: C:\Users\%username%\AppData\Roaming\DMDirc\)"
		"ACCCA100973EF8DC" = "Azureus 2.0.8.4"
		"ACE8715529916D31" = "40tude Dialog 2.0.15.1 (Beta 38)"
		"AE6DF75DF512BD06" = "Microsoft Groove Music (Microsoft.ZuneMusic)"
		"B7CB1D1C1991ACCF" = "FlashFXP 4.0.0 (Build 1548)"
		"B8AB77100DF80AB2" = "Microsoft Office Excel 2016 x64"
		"B8C29862D9F95832" = "Microsoft Office InfoPath 2010 x86"
		"B39C5F226977725D" = "ACDSee Pro 8.1.99"
		"B223C3FFBC0A7A42" = "Bersirc 2.2.14"
		"B0236D03C0627AC4" = "ICQ 5.1 / ICQLite Build 1068"
		"B868D9201B866D96" = "Microsoft Lync 4.0.7577.0"
		"B3016B8DA2077262" = "eMule 0.50a"
		"B3965C840BF28EF4" = "AIM 4.8.2616"
		"B7173093B23B9A6A" = "Beyond Compare 4"
		"BA3A45F7FD2583E1" = "Blubster 3.1.1"
		"BA132E702C0147EF" = "KCeasy 0.19-rc1"
		"BAEA31EACD87186B" = "BinaryBoy 1.97 (Build 55)"
		"BBA8A4896F0D26F"  = "Ares Chat Client (3.1.9.4045)"
		"BC2F88ECCD3461B4" = "Microsoft Built-in Event Viewer 1.0 (Win10)"
		"BC03160EE1A59FC1" = "Foxit PDF Reader 5.4.5"
		"BCC705F705D8132B" = "Instan-t 5.2 (Build 2824)"
		"BCD7BA75303ACBCF" = "BitLord 1.1"
		"BE4875BB3E0C158F" = "CrossFTP 1.75a"
		"BF483B423EBBD327" = "Binary Vortex 5.0"
		"BFC1D76F16FA778F" = "Ares (Galaxy) 1.8.4 / 1.9.8 / 2.1.0 / 2.1.7.3041 / 3.1.9.4045"
		"C01D68E40226892B" = "ClicksAndWhistles 2.7.146"
		"C02BAF50D02056FC" = "FotoVac 1.0"
		"C2D349A0E756411B" = "Adobe Reader 8.1.2"
		"C04F69101C131440" = "CuteFTP 5.0 (Build 50.6.10.2)"
		"C5EF839D8D1C76F4" = "LimeWire 5.2.13"
		"C6F7B5BF1B9675E4" = "BitWise IM 1.7.3a"
		"C8E4C10E5460B00C" = "iMesh 6.5.0.16898"
		"C312E260E424AE76" = "Mail.Ru Agent 5.8 (JL support)"
		"C845F3A6022D647C" = "Another File 2.03 (Build 2/7/2004)"
		"C997D2E1A0F0929"  = "BCWipe 6.08.6"
		"C8112AC53C5ED250" = "Jetico Log Viewer 1.1"
		"C634153E7F5FCE9C" = "IrfanView 3.10 / 4.30 / 4.41 32-bit"
		"C765823D986857BA" = "Adobe Illustrator CS5 (32-bit)"
		"C9374251EDB4C1A8" = "BitTornado T-0.3.17"
		"CA942805559495E9" = "aMSN 0.98.4"
		"CB5250EAEF7E3213" = "ApexDC++ 1.4.3.957"
		"CBBE886ECA4BFC2D" = "ExoSee 1.0.0"
		"CC76755E0F925CE6" = "AllPicturez 1.2"
		"CCB36FF8A8C03B4B" = "Azureus 2.5.0.4 / Vuze 3.0.5.0"
		"CCBA5A5986C77E43" = "Microsoft Edge (Chromium)"
		"CCC0FA1B9F86F7B3" = "CCleaner 5.15.5513 64-bit"
		"CD2ACD4089508507" = "AbsoluteTelnet 9.18 Lite"
		"CDF30B95C55FD785" = "Microsoft Office Excel 2007"
		"CF6379A9A987366E" = "Digibin 1.31"
		"CFAB0EC14B6F953"  = "Express NewsPictures 2.41 (Build 08.05.07.0)"
		"D2D0FC95675FB2C8" = "Microsoft Built-in Print Management (Win10)"
		"D5C3931CAAD5F793" = "Adobe Soundbooth CS5 (32-bit)"
		"D22AD6D9D20E6857" = "ALLPlayer 4.7"
		"D28EE773B2CEA9B2" = "3D-FTP 9.0 build 7"
		"D38A3EA7EC79FBED" = "LibreOffice 5.1.0.3 Writer"
		"D38ADEC6953449BA" = "Microsoft Office OneNote 2010 x64"
		"D53B52FB65BDE78C" = "Android Newsgroup Downloader 6.2"
		"D64D36B238C843A3" = "Microsoft Office InfoPath 2010 x86"
		"D97EFDF3888FE7EB" = "KeePass 2.31"
		"D838AAC097ABECE7" = "ACDSee Photo Manager 12 (Build 344)"
		"D3530C5294441522" = "HydraIRC 0.3.165"
		"D8081F151F4BD8A5" = "CuteFTP 8.3 Lite (Build 8.3.4.0007)"
		"D78150E0484A4E1D" = "Evernote 5.9.6.9494"
		"D460280B17628695" = "Java Binary"
		"DB3B8D985F0668E"  = "FreeFileSync 10.7"
		"DC64DE6C91C18300" = "Brosix Communicator 3.1.3 (Build 110719 nid 1)"
		"DD7C3B1ADB1C168B" = "Microsoft Game Bar"
		"DE48A32EDCBE79E4" = "Acrobat Reader 15.x"
		"E0F7A40340179171" = "imule 1.4.5 (rev. 749)"
		"E1D47CB031DAFB9F" = "BearShare 6.0.0.22717 / 8.1.0.70928 / 10.0.0.112380"
		"E2A593822E01AED3" = "Adobe Flash CS5 (32-bit)"
		"E6EF42224B845020" = "ALFTP 5.20.0.4"
		"E9A39DFBA105EA23" = "Faststone Image Viewer 4.6 / 5.5"
		"E31A6A8A7506F733" = "Image AXS Pro 4.1"
		"E73D9F534ED5618A" = "BitSpirit"
		"E76A4EF13FBF2BB1" = "Manolito 3.1.1"
		"E107946BB682CE47" = "Filezilla 3.5.1 / 3.16"
		"EA83017CDD24374D" = "IrfanView Thumbnails"
		"EAB25958DBDDBAA4" = "Binary News Reaper 2 (Beta 0.14.7.448)"
		"EBD8C95D87F25154" = "Carrier 2.5.5"
		"ECD1A5E2C3AF9C46" = "LibreOffice 5.1.0.3 Press"
		"ED7A5CC3CCA8D52A" = "CCleaner 1.32.345 / 1.41.544 / 2.36.1233 / 3.10.1525"
		"EDC786643819316C" = "HoneyView3 #5834"
		"EE0C103672A7A2B9" = "ManyCam 6.7.0"
		"EE462C3B81ABB6F6" = "Adobe Reader X 10.1.0"
		"EF606B196796EBB"  = "HP MediaSmart Photo"
		"EFBB2BF3C1D06466" = "Auslogics Disk Defrag 6.2.1.0"
		"F0C7BD3E0584A65A" = "InfraRecorder 0.53.0.0 32-bit"
		"F1A4C04EEBEF2906" = "[i2p] Robert 0.0.29 Preferences"
		"F001EA668C0AA916" = "Cabos 0.8.2"
		"F5E4E50707BCD215" = "Microsoft Message Analyzer 1.4"
		"F6FD5D99E2B6E178" = "LibreOffice 5.1.0.3 Draw"
		"F09B920BFB781142" = "Camfrog 4.0.47 / 5.5.0 / 6.1 (build 146) (JL support)"
		"F61B65550A84027E" = "iMesh 11.0.0.112351"
		"F91FD0C57C4FE449" = "ExpanDrive 2.1.0"
		"F214CA2DD40C59C1" = "FrostWire 4.20.9"
		"F0275E8685D95486" = "Microsoft Office Excel 2013 x86"
		"F0468CE1AE57883D" = "Adobe Reader 7.1.0"
		"F82607A219AF2999" = "Cyberduck 4.1.2 (Build 8999)"
		"F784591FF7F60F76" = "Microsoft Built-in Defragment and Optimize Drives (Win10)"
		"FA02AA2C575837A6" = "Microsoft Built-in Task Scheduler 1.0 (Win10)"
		"FA496FE13DD62EDF" = "KVIrc 3.4.2.1 / 4.0.4"
		"FA7144034D7D083D" = "Directory Opus 10.0.2.0.4269 (JL tasks supported)"
		"FAC3AA4105C6C466" = "Microsoft Built-in System Restore (Win7)"
		"FB1F39D1F230480A" = "Bopup Messenger 5.6.2.9178"
		"FC98C00F85D4CE77" = "EditPad Pro 8"
		"FE5E840511621941" = "JetAudio"
		"FF103E2CC310D0D"  = "Adobe Reader XI"
		"6274FF22C2061C60" = "Google PhotoViewer (Picasa)"
		"00098B0EF1C84088" = "fulDC 6.78"
		"03D877EC11607FE4" = "Thunderbird 6.0.2"
		"05E01ECAF82F7D8E" = "Scour Exchange 0.0.0.228"
		"070B52CF73249257" = "Sococo 1.5.0.2274"
		"0B3F13480C2785AE" = "Paint 6.1 (build 7601: SP1)"
		"0B48CE76EDA60B97" = "Shareaza 8.0.0.112300"
		"1A60B1067913516A" = "Psi 0.14"
		"1B4DD67F29CB1962" = "Windows Explorer Pinned and Recent."
		"1BC9BBBE61F14501" = "OneNote"
		"1BC392B8E104A00E" = "Remote Desktop Connection"
		"1C7A9BE1B15A03BA" = "Microsoft Snip & Sketch"
		"1C30573BDFCE4155" = "Zenmap GUI 6.49BETA4"
		"1CED32D74A95C7BC" = "Microsoft Visual Studio Code"
		"1D12F965B876DC87" = "Snagit 2021"
		"1DA3C90A72BF5527" = "Safari 4.0.5 (531.22.7) / 5.1 (7534.50)"
		"2A5A615382A84729" = "X-Chat 2 2.8.6-2"
		"2AA756186E21B320" = "RealTimeQuery 3.2"
		"2B53C4DDF69195FC" = "Zune x64"
		"2B164F512891AE37" = "NewsWolf NSListGen"
		"2B5841989B3857DA" = "RealVNC Server 5.3.0 64-bit (Chat)"
		"2CA2A1A69DC5465F" = "UltraVNC 1.2.1.0 Server Property Page"
		"2D1658D5DC3CBE2D" = "MySpaceIM 1.0.823.0 Beta"
		"2FA14C7753239E4C" = "Paint.NET 2.72 / 3.5.8.4081.24580"
		"3C355482CB54F75B" = "Microsoft.GetHelp"
		"3E4D62CF2C569BDF" = "MPC-HC (Media Player Classic - Home Cinema)"
		"3A5148BF2288A434" = "Secure FTP 2.6.1 (Build 20101209.1254)"
		"3B94415067DD2C5D" = "GOG Galaxy"
		"3BE7B307DFCCB58F" = "NiouzeFire 0.8.7.0"
		"3C0022D9DE573095" = "QuteCom 2.2"
		"3C309C17F7E8FFE1" = "GIMP 2.8.16"
		"3C3871276E149215" = "PowerShell 7"
		"3CF13D83B0BD3867" = "RevConnect 0.674p (based on DC++)"
		"3D877EC11607FE4"  = "Thunderbird 6.0.2"
		"3DF22B7648CEC4C1" = "TeamViewer 11.0.55321"
		"3F2CD46691BBEE90" = "GOIM 1.1.0"
		"3F97341A65BAC63A" = "Ozum 6.07 (Build 6070)"
		"4ACAE695C73A28C7" = "VLC 0.3.0 / 0.4.6"
		"4B632CF2CECEAC35" = "Robo-FTP Server 3.2.5"
		"4D7BDAEA55AD352"  = "PeaZip 6.0.0"
		"4D8BDACF5265A04F" = "The KMPlayer 2.9.4.1434"
		"4D72CFA1D0A67418" = "Newsgroup Image Collector"
		"4E0AC37DB19CBA15" = "Xfire 1.138 (Build 44507)"
		"4E538FDE985A3C01" = "Torch Browser 65.0.0.1614 (x86)"
		"4F24A7B84A7DE5A6" = "Palringo 2.6.3 (r45983)"
		"5E852F5F576F812C" = "MiTec JSON Viewer (JSONView.exe)"
		"5B7F3287093C1623" = "Total Commander 8.52a 64-bit"
		"5B72F67ADCCE9045" = "UltraVNC 1.2.1.0 Settings"
		"5D7B4175AFDCC260" = "Shareaza 2.0.0.0"
		"5D696D521DE238C3" = "Google Chrome"
		"5E01ECAF82F7D8E"  = "Scour Exchange 0.0.0.228"
		"5EA2A50C7979FBDC" = "TrustyFiles 3.1.0.22"
		"5F6E7BC0FB699772" = "Microsoft Office PowerPoint 2010 x64"
		"5F7B5F1E01B83767" = "Quick Access"
		"5F218922E0901EBF" = "MusicBee"
		"5FB817CD5A8CAD21" = "Google Drive"
		"5FD959F6FE6B8AE7" = "PuTTY 0.70 (x64)"
		"6DC04F5CCC522861" = "Microsoft.Windows.ShellExperienceHost"
		"6A8B377D0F5CB666" = "WinSCP 2.3.0 (Build 146)"
		"6AA18A60024620AE" = "GCN 2.9.1"
		"6BB54D82FA42128D" = "WinSCP 4.3.4 (Build 1428)"
		"6D2BAC8F1EDF6668" = "Microsoft Outlook 2013/2016/365"
		"6E9A79992DA9EA2"  = "Nokia PC Suite 7.1"
		"6E9D40A4C63BB562" = "Real Player Alternative 1.25 (Media Player Classic 6.4.8.2 / 6.4.9.0)"
		"6FEE01BD55A634FE" = "Smuxi 0.8.0.0"
		"7A7C60EFD66817A2" = "Spotnet 1.7.4"
		"7A8DB574299C8568" = "Windows Movie Maker 2012 (build 16.4.3528.0331)"
		"7B2B4F995B54387D" = "News Reactor 20100224.16"
		"7B4D500E147E4391" = "Tor Browser 8.0.4 (x64)"
		"7FD04185AF357BD5" = "UltraLeeacher 1.7.0.2969 / 1.8 Beta (Build 3490)"
		"8F4AE1DF7D39F816" = "X-Ways WinHex x64"
		"8A1C1C7C389A5320" = "Safari 3.2.3 (525.29)"
		"8B87640A40EC9FC"  = "Snagit 2020"
		"8BCE06A9E923E1F9" = "Slack 4.10.3"
		"8C816C711D66A6B5" = "MSN Messenger 6.2.0137 / 7.0.0820"
		"8E4E81D9ADC545B8" = "Microsoft Your Phone"
		"8EAFBD04EC8631CE" = "VMware Workstation 9/11 x64"
		"8FB5CE5E2B049CE"  = "Windows Defender (Win10 built-in)"
		"8FDB062F1E486CAC" = "Microsoft Powerpoint 2013 32-bit"
		"9A3BDAE86D5576EE" = "WinSCP 3.2.1 (Build 174) / 3.8.0 (Build 312)"
		"9A165F62EDBFA161" = "Microsoft Store"
		"9C7CC110FF56D1BD" = "Microsoft Office PowerPoint 2010 x86"
		"9C08AD74AD8708DF" = "Microsoft Publisher 2016 64-bit"
		"9D91276B0BE3E46B" = "Windows Help and Support (Built-in) Win7"
		"9DACEBAA9AC8CA4E" = "TLNews Newsreader 2.2.0 (Build 2430)"
		"9EFF0B23D51FE003" = "XMind 201807140020"
		"9F03AE476AD461FA" = "GroupsAloud 1.0"
		"9F5C7755804B850A" = "Windows Script Host - wscript.exe (64-bit)"
		"9FDA41B86DDCF1DB" = "VLC Media Player"
		"10F5A20C21466E85" = "FTP Voyager 15.2.0.17"
		"12DC1EA8E34B5A6"  = "Microsoft Paint"
		"13D1F3EA8D0E7308" = "Tracker Software PDF-Xchange Viewer"
		"16D71406474462B5" = "Snagit Editor 12.4.1"
		"16EC093B8F51508F" = "Opera 8.54 build 7730 / 9.64 build 10487 / 11.50 build 1074"
		"16F2F0042DDBE0E8" = "Windows Terminal"
		"17D3EB086439F0D7" = "TrueCrypt 7 x64"
		"19CCEE0274976DA8" = "mIRC 4.72 / 5.61"
		"23EF200CA6364EFF" = "Oracle VM VirtualBox 5.0.16"
		"23F08DAB0F6AAF30" = "SoMud 1.3.3"
		"27DA120D7E75CF1F" = "pbFTPClient 6.1"
		"36C36598B08891BF" = "Vovox 2.5.3.4250"
		"40F2ACA05D8A33F2" = "Minitab 16"
		"44A3621B32122D64" = "Microsoft Office Word 2010 x64"
		"46E77B87767B92"   = "Opera Browser 75"
		"46F433176BC0B3D2" = "WinRAR 64-bit"
		"49B5EDBD92D8CD58" = "FTP Commander 8.02"
		"51DCEBA79099D8D2" = "Sapien PowerShell Studio"
		"54C803DFC87B52BA" = "Nettalk 6.7.12"
		"56C5204009D2B915" = "uTorrent 3.5.5"
		"62BFF50B969C2575" = "Quintessential Media Player 5.0"
		"62DBA7FB39BB0ADC" = "Yahoo Messenger"
		"70B52CF73249257"  = "Sococo 1.5.0.2274"
		"73CE3745A843C0A4" = "FrostWire 5.1.4"
		"74D7F43C1561FC1E" = "Windows Media Player 12"
		"74EA779831912E30" = "Skype 7"
		"86B804F7A28A3C17" = "Miranda IM 0.6.8 / 0.7.6 / 0.8.27 / 0.9.9 / 0.9.29"
		"90E5E8B21D7E7924" = "Winamp 3.0d (Build 488)"
		"92F1D5DB021CD876" = "NewsLeecher 4.0 / 5.0 Beta 6"
		"93B18ADF1D948FA3" = "qutIM 0.2"
		"98AAEA517363A6FA" = "Microsoft.DiagnosticDataViewer"
		"98B0EF1C84088"    = "fulDC 6.78"
		"99C15CF3E6D52B61" = "mldonkey 3.1.0"
		"135DF2A440ABE9BB" = "SoulSeek 156c"
		"186B5CCADA1D986B" = "NewsGrabber 3.0.36"
		"292A746334889A7E" = "SQLiteSpy 1.9.13"
		"315E29A36E961336" = "Roboform 7.8"
		"337ED59AF273C758" = "Microsoft Sticky Notes"
		"352FD027C0E8F0E5" = "Zoom"
		"387D72EB9C9AA960" = "UltraVNC 1.2.1.0 Launcher"
		"409B67100697BCC0" = "Revo Uninstaller Pro 3.1.5"
		"431A5B43435CC60B" = "Python (.pyc)"
		"435A2F986B404EB7" = "SmartFTP 4.0.1214.0 / 7.0.2200.0"
		"447E6AA2BBDFBC8A" = "Slack 4.11.3"
		"466D339D8F21CFBF" = "Microsoft Snip & Sketch"
		"469E4A7982CEA4D4" = "Microsoft Windows Wordpad"
		"490C000889535727" = "WinMX 4.9.3.0"
		"497F749B9F1A5D16" = "Microsoft.GamingApp"
		"497B42680F564128" = "Zoner PhotoStudio 13 (Build 7)"
		"500B8C1D5302FC9C" = "Python (.pyw)"
		"521A29E5D22C13B4" = "Skype"
		"550ABC1CB58EB92C" = "VeraCrypt 1.16 / 1.19 x64"
		"590AEE7BDD69B59B" = "Windows Powershell 5.0 x64"
		"624C8EB4922C2308" = "Modern CSV"
		"770ECEBB12DFF1CA" = "Microsoft.Windows.CloudExperienceHost"
		"776BEB1FCFC6DFA5" = "Thunderbird 1.0.6 (20050716) / 3.0.2"
		"817BB211C92FD254" = "GOM Player 2.0.12.3375 / 2.1.28.5039"
		"884FD37E05659F3A" = "VZOchat 6.3.5"
		"888F2FA044591EDA" = "Twitter - Trusted Microsoft Store App (Win10)"
		"918E0ECB43D17E23" = "Notepad (32-bit)"
		"939C10C2C101C1B0" = "Stickies 9.0d"
		"954EA5F70258B502" = "Windows Script Host - wscript.exe (32-bit)"
		"971CC6AD207F36CB" = "PaintShopPro (X9)"
		"2544FF74641B639D" = "WiseFTP 6.1.5"
		"3168CC975B354A01" = "Slypheed 3.1.2 (Build 1120)"
		"3461E4D1EB393C9C" = "WTW 0.8.18.2852 / 0.8.19.2940"
		"3594AAB44BCA414B" = "Windows Photo Viewer"
		"3866FF352D7719E1" = "Paint.NET 4.0.9"
		"4278D3DC044FC88A" = "Gaim 1.5.0"
		"4700FF5AE80A6713" = "PDFCreator 2.2"
		"6728DD69A3088F97" = "Windows Command Processor - cmd.exe (64-bit)"
		"7192F2DE78FD9E96" = "TIFNY 5.0.3"
		"7593AF37134FD767" = "RealPlayer 6.0.6.99 / 7 / 8 / 10.5"
		"7937DF3C65790919" = "FTP Explorer 10.5.19 (Build 001)"
		"9027FE24326910D2" = "Thunderbird 38.6.0"
		"9149D0F5EBF7F710" = "Microsoft Outlook (15)"
		"9390EE5B658E96E"  = "PuTTY 0.72 / 0.73"
		"14354E216395983A" = "Remote Desktop Manager 2.1.0.0 FREE"
		"18434D518C3A61EB" = "Minitab 17"
		"20513CDF29D09C0E" = "Hex Editor Neo"
		"23709F6439B9F03D" = "Hex Editor Neo 5.14"
		"28493D9D08E13AA6" = "UltraVNC Viewer 1.2.1.0"
		"50620FE75EE0093"  = "VMware Player"
		"67730E20CF5D43F7" = "MiTec JSON Viewer (JSONView.exe)"
		"69639DF789022856" = "Google Chrome 86.0.4240.111"
		"79370F660AB51725" = "UploadFTP 2.0.1.0"
		"411447F7DE177C68" = "Windows DVD Maker 64-bit (Win7)"
		"669967F27AFDEBEC" = "NirSoft PstPassword 1.20 (x86)"
		"777483D3CDAC1727" = "Gajim 0.14.4"
		"792699A1373F1386" = "Piolet 3.1.1"
		"959668A81D4F220E" = "Sublime Text 3.2.1 (Build 3207)"
		"969252CE11249FDD" = "Mozilla Firefox 40.0 / 44.0.2"
		"7904145AF324576E" = "Total Commander 7.56a (Build 16.12.2010) / 8.52a 32-bit"
		"8211531A7918B389" = "Newsbin Pro 6.00 (Build 1019) (JL support)"
		"43578521D78096C6" = "Windows Media Player Classic Home Cinema 1.3 (32-bit)"
		"573770283DC3D854" = "Microsoft Windows SecHealthUI (Defender)"
		"37392221756DE927" = "RealPlayer SP 12"
		"134620458666CCB0" = "TeraCopy 2.3 64-bit"
		"290532160612E071" = "WinRAR 2.90 / 3.60 / 4.01 x64"
		"A61657A5E5DFBDC"  = "Microsoft.WindowsNotepad"
		"CF02284227526D80" = "Powershell ISE"
		"DFE3790E91D3A22F" = "Tracker Software PDF-XChange Editor"
		"F1DFE90245A04467" = "MPC-BE 64 (Media Player Classic - Black Edition)"
		"F7699CF2EED599AC" = "Microsoft.SecHealthUI"
		"F039446000B1B829" = "SweetScape 010 Editor"
		"FBB3E7490BA71A30" = "SQLite Expert"
		"A0D6B1B874C6E9D2" = "TOR Browser 6.0.2"
		"A2B95CA27B6C33D9" = "Windows Live Photo Gallery"
		"A2C73C383525F1BB" = "RealVNC Viewer 5.3.0 64-bit"
		"A4A5324453625195" = "Microsoft Office Word 2013 x86"
		"A4DEF57EE99D77E9" = "Nomad News 1.43"
		"A6D4DFEC09C69409" = "Microsoft Word Viewer 11.8169.8172"
		"A7BD71699CD38D1C" = "Microsoft Office Word 2010 x86"
		"A8C43EF36DA523B1" = "Microsoft Office Word 2003 Pinned and Recent."
		"A10B45ADB36C1D27" = "PST Walker 5.54"
		"A18DF73203B0340E" = "Microsoft Word 2016"
		"A028C9DB28AA15A3" = "Piriform Defraggler 2.20.989 64-bit"
		"A52B0784BD667468" = "Microsoft.Windows.Photos"
		"A55ED4FBB973AEFB" = "Microsoft Teams"
		"A581B8002A6EB671" = "WiseFTP 5.5.9"
		"AA11F575087B3BDC" = "Unzbin 2.6.8"
		"AD57BD0F4825CCE"  = "WinRAR 6.01 Russian 64 bit"
		"ADECFB853D77462A" = "Microsoft Office Word 2007 Pinned and Recent."
		"AE3F2ACD395B622E" = "QuickTime Player 6.5.1 / 7.0.3 / 7.5.5 (Build 249.13)"
		"AE069D21DF1C57DF" = "mIRC 6.35 / 7.19"
		"AEDD2DE3901A77F4" = "Pidgin 2.0.0 / 2.10.0 / 2.7.3"
		"AF0FDD562E3F275B" = "Snagit 2020"
		"B3F13480C2785AE"  = "Paint 6.1 (build 7601: SP1)"
		"B06A975B62567622" = "Windows Live Messenger 8.5.1235.0517 BETA"
		"B8C13A5DD8C455A2" = "Titan FTP Server 8.40 (Build 1338)"
		"B17D3D0C9CA7E29"  = "Google Picasa 3.8 / 3.9"
		"B39BC6B590F53961" = "HexChat 2.10.2 32-bit"
		"B48CE76EDA60B97"  = "Shareaza 8.0.0.112300"
		"B50EE40805BD280F" = "QuickTime Alternative 1.9.5 (Media Player Classic 6.4.9.1)"
		"B77EF7F3FC946302" = "Pale Moon Browser 26.1.1 (32-bit)"
		"B0459DE4674AAB56" = "Windows Virtual PC - vmwindow.exe (32- and 64-bit)"
		"B6267F3FCB700B60" = "WiseFTP 4.1.0"
		"B08971C77377BDE3" = "Microsoft Visual Studio Community/Enterprise 2015"
		"B74736C2BD8CC8A5" = "WinZip 15.5"
		"B91050D8B077A4E8" = "Windows Media Center"
		"BAACB5294867B833" = "Notepad++ 7.8.6"
		"BAC8A6B507360131" = "Remote Desktop Connection Manager 2.2"
		"BC0C37E84E063727" = "Windows Command Processor - cmd.exe (32-bit)"
		"BD050AC447F6CD65" = "Microsoft Xbox App"
		"BD249197A6FAEFF2" = "Windows Live Messenger 2011"
		"BE71009FF8BB02A2" = "Microsoft Office Outlook x86"
		"BEC10D3AAF939FFA" = "Pale Moon Browser 26.1.1 (64-bit)"
		"BF9AE1F46BD9C491" = "Nimbuzz 2.0.0 (rev 6266)"
		"BFE841F4D35C92B1" = "QuadSucker/News 5.0"
		"C1EECE5026414C64" = "Recuva 1.52.1086 (64-bit)"
		"C5C24A503B1727DF" = "XnView 1.98.2 Small / 1.98.2 Standard / 2.35"
		"C7A4093872176C74" = "Paint Shop Pro Pinned and Recent."
		"C8AA3EAEE3D4343D" = "Trillian 0.74 / 3.1 / 4.2.0.25 / 5.0.0.35 (JL support)"
		"C31B3D36438B5E2C" = "Visual Studio Enterprise 2017 Version 15.9.10"
		"C54B96F328BDC28D" = "WiseFTP 7.3.0"
		"C71EF2C372D322D7" = "PGP Desktop 10"
		"C91D08DCFC39A506" = "SM Player 0.6.9 r3447"
		"C98AB5CCF25DDA79" = "NewsShark 2.0"
		"C99DDDE925D26DF3" = "Robo-FTP 3.7.9 CronMaker"
		"C01827D56FF89056" = "Microsoft Sticky Notes"
		"C5236FD5824C9545" = "PLAYXPERT 1.0.140.2822"
		"C9950C443027C765" = "WinZip 9.0 SR-1 (6224) / 10.0 (6667)"
		"CA1EB46544793057" = "RetroShare 0.5.2a (Build 4550)"
		"CAEA34D2E74F5C8"  = "uTorrent 3.4.7"
		"CB1D97ACA3FB7E6B" = "Newz Crawler 1.9.0 (Build 4100)"
		"CB984E3BC7FAF234" = "NewsRover 17.0 (Rev.0)"
		"CB996A858D7F15C"  = "PDF Architect 4.0.09.25450 64-bit"
		"CBEB786F0132005D" = "VLC 0.7.2"
		"CC4B36FBFB69A757" = "gtk-gnutella 0.97"
		"CCA6383A507BAC64" = "Gadu-Gadu 10.5.2.13164"
		"CD8CAFB0FB6AFDAB" = "uTorrent 1.7.7 / 1.8.5 / 2.0 / 2.21 / 3.0"
		"CD40EAD0B1EB15AB" = "NNTPGrab 0.6.2"
		"CDB6F0C373F2DA0F" = "stunnel 5.31"
		"CFB56C56FA0F0A54" = "Mozilla 0.9.9"
		"D1FC019238236806" = "Newsgroup Commander Pro 9.05"
		"D3C5CF21E86B28AF" = "SeaMonkey 2.3.3"
		"D4A589CAB4F573F7" = "Microsoft Project 2010 x86"
		"D5C02FC7AFBB3FD4" = "NNTPGrab 0.6.2 Server"
		"D7D647C92CD5D1E6" = "uTalk 2.6.4 r47692"
		"D7DB75DB9CDD7C5D" = "Xnews 5.04.25"
		"D33ECF70F0B74A77" = "Google Picasa 2.2.0"
		"D93F411851D7C929" = "Windows Powershell 5.0 32-bit"
		"D249D9DDD424B688" = "Google Chrome 81.0.4044.138"
		"D0261ED6E16B200B" = "News File Grabber 4.6.0.4"
		"D00655D2AA12FF6D" = "Microsoft Office PowerPoint 2016 x64"
		"D7666C416CBA240C" = "NewsMan Pro 3.0.5.2"
		"D8671C1ED93C75C8" = "Tor Browser 5.5.2"
		"D41746B133D17456" = "Tkabber 0.11.1"
		"D356105FAC5527EF" = "Steam 1/22/2021"
		"D7528034B5BD6F28" = "Windows Live Mail Pinned and Recent."
		"DA7E8DE5B8273A0F" = "Yahoo Messenger 5.0.0.1226 / 6.0.0.1922"
		"DBA909A61476CCEC" = "NewsWolf 1.41"
		"DD658A07478B46C2" = "PIRCH98 1.0.1.1190"
		"DE76415E0060CE13" = "Noworyta News Reader 2.9"
		"DEE18F19C7E3A2EC" = "PopNote 5.21"
		"E4BD2558BFAB368D" = "UltraDefrag 7.0.0"
		"E6EA77A1D4553872" = "Gnucleus 1.8.6.0"
		"E6EE34AC9913C0A9" = "VLC 0.6.2"
		"E26F61AFB0824F2E" = "Photoshop CC 2015"
		"E30BBEA3E1642660" = "Neebly 1.0.4"
		"E36BFC8972E5AB1D" = "XPS Viewer"
		"E40CB5A291AD1A5B" = "Songbird 1.9.3 (Build 1959)"
		"E42A8E0F4D9B8DCF" = "Sysax FTP Automation 5.15"
		"E57CFC995BDC1D98" = "Snagit 11"
		"E70D383B15687E37" = "Notepad++ 5.6.8 / 6.6.7"
		"E93DBDCEDE8623F2" = "Pandion 2.6.106"
		"E0532B20AA26A0C9" = "QQ International 1.1 (2042)"
		"E0246018261A9CCC" = "qutIM 0.2.80.0"
		"EB7E629258D326A1" = "WindowWasher 6.6.1.18"
		"EB3300E672136BC7" = "Stream Reactor 1.0 Beta 9 (uses VLC!)"
		"EC3E36AF0CDCB3E1" = "Steam build 2/4/2016"
		"ECD21B58C2F65A2F" = "StealthNet 0.8.7.9"
		"ECDD9154E84D5544" = "Wickr Top Secret Messenger Desktop 2.3.5"
		"ED49E1E6CCDBA2F5" = "GNUnet 0.8.1a"
		"EF473FAB8120B354" = "uTorrent 3.5.5"
		"EFB08D4E11E21ECE" = "Paltalk Messenger 10.0 (Build 409)"
		"F01B4D95CF55D32A" = "Microsoft Windows Explorer"
		"F2CB1C38AB948F58" = "X-Chat 1.8.10 / 2.6.9 / 2.8.9"
		"F5AC5390B9115FDB" = "Microsoft Office PowerPoint 2007"
		"F64DE962764B9B0F" = "FTPRush 1.1.3 / 2.15"
		"F92E607F9DE02413" = "RealPlayer 14.0.6.666"
		"F674C3A77CFE39D0" = "Winamp 2.95 / 5.1 / 5.621 / 5.666"
		"F18460FDED109990" = "Windows Windows ms-settings"
		"F920768FE275F7F4" = "Grabit 1.5.3 / 1.6.2 / 1.7.2"
		"FAEF7DEF55A1D4B"  = "VLC 2.2.6"
		"FB3B0DBFEE58FAC8" = "Microsoft Office Word 2016/365 x64"
		"FB7CA8059B8F2123" = "ooVoo 3.0.7.21"
		"FB230A9FE81E71A8" = "Yahoo Messenger 11.0.0.2014-us"
		"FC999F29BC5C3560" = "Robo-FTP 3.7.9"
		"FD1AD55E472F20E0" = "Google Earth Pro 7.3.2.5491"
		"FDBACA0A1FCE6055" = "MozBackup 1.5.1"
		"FDBD48D45512DFFC" = "Photoshop 7"
		"FE8BB4692DE7B989" = "Smart Defrag 4.3.0.847"
		"FE9E0F7260000A12" = "RealVNC Server 5.3.0 64-bit (Connect+File Transfer)"
		"FE57F5DF17B45FE"  = "Wireshark 2.6.3"
		"FF99BA2FB2E34B73" = "Microsoft Windows Calculator"
		"FF224628F0E8103C" = "Morpheus 3.0.3.6"
		"14A48FBE3D43239A" = "Windows System Information(msinfo32.exe)"
		"9B9CDC69C1C24E2B" = "Windows Notepad x64 (Notepad.exe)"
		"47592B67DD97A119" = "Windows Notepad x32 (Notepad.exe)"
		"122C907C4DC5911F" = "Mozilla Firefox x32"
		"18FA158A64C9508A" = "Mozilla Firefox x32"
		"33A00252C0FA56DE" = "Mozilla Firefox x32"
		"6B8904E2B6864F0F" = "Mozilla Firefox x32"
		"31B6EBFFF794EF0D" = "Opera Browser (Opera.exe)"
		"A712C324879904B1" = "Malwarebytes (assistant.exe)"
		"B916037C1E115FE0" = "Microsoft Skype (Microsoft.SkypeApp_15)"
		"647853318C96DFA5" = "Microsoft.Windows.Cortana"
		"4B5F45DE9912DE53" = "Microsoft.Office.Desktop.Access_16xxx"
		"1F1F846F76251EA8" = "Microsoft.Office.Desktop.Word_16xxx"
		"3FE28476179FF940" = "Turnipsoft Freda (ebook reader)"
		"40371339AD31A7E6" = "Mozilla Firefox x64"
		"58BEE77C49899591" = "Apple iTunes 12xxx x64"
		"59FE1486D27AA9D0" = "Electronic Arts Origin"
		"607258D66273FF4D" = "Microsoft Edge"
		"6DA48F37C95D6E1"  = "Google Chrome"
		"6F4D358E50595AC1" = "Emsisoft Anti-Malware (a2start.exe)"
		"95962CD8E90977CA" = "Emsisoft Anti-Malware (a2start.exe)"
		"78AA210563284496" = "Windows Performance Toolkit (wpa.exe)"
		"8DE2636CECD37184" = "MusicBee"
		"D014C0BE50851F63" = "MusicBee 3.4.2.0 x86"
		"C08DDE8C94C16B10" = "Cyberlink PowerDVD 18"
		"D788E8BC973B89E9" = "PKWARE PKZIP for Windows 14"
		"EA64CE14E5470C33" = "Microsoft.PowerShell_7.2.1.0 x64"
		"F2D2624B34821C85" = "Opera Browser (Opera.exe)"
		"69BACC0499D41C4"  = "Microsoft Excel 12"
		"B50F4A1D866B4B05" = "Microsoft.Office.Word 16xxx x64"
		"CE0E7345DE1F1E26" = "Microsoft.Windows.PrintQueueActionCenter 1.0.1.0"
		"CF0C5B2C9773BFA4" = "IDA Pro x64"
		"DFC4675A96730EDE" = "Microsoft.WindowsFeedbackHub x64"
		"399FB4899502F372" = "Mozilla Firefox"
		"3476342AAB319002" = "Mozilla Firefox"
		"4D202CABC6786CF7" = "Opera Browser"
		"2A64B26BD99F0D16" = "Shareaza"
		"A850D8ED37504C7C" = "Microsoft.Windows.Cortana"
		"B2A0DF3F22CEC7E0" = "Microsoft.People_10"
		"A97085EBDC30067F" = "microsoft.windowscommunicationsapps"
		"4DDE7D7A7DFC5F29" = "VSCodium"
		"F8F05350C84C9D76" = "Mozilla Thunderbird"
		"4D939776340F1D18" = "LibreOffice Writer"
		"E7F34DEE82980C52" = "LibreOffice Calc"
		"14A989D191548BBC" = "Cyberlink PowerDVD16"
		"2BCEF060ACE5A6DB" = "NordVPN"
		"B8A48BFB1F2F0C8D" = "NordVPN"
		"9E312F4ADEE9107"  = "Opera Browser"
		"43929AE4535C8DEA" = "Microsoft.SkypeApp 15 x86"
		"69D97CDC8D4D5043" = "Microsoft.windowscommunicationsapps"
		"34B9A7AD69FF9C1B" = "Microsoft Access"
		"436EB6EB1BD9F03F" = "Microsoft Visio 15"
		"53F58609D680CDBC" = "Isobuster"
		"58A5AF636F485FF2" = "RegistryExplorer"
		"603EAABE372FB7EE" = "CorelDraw 17"
		"60536F49B49E4689" = "Microsoft XmlNotepad 2007"
		"D992BCC31B3E5727" = "Opera Browser"
		"22E699DDC3928886" = "Fineprint PdfFactory"
		"3EBCDFA8943CC8B8" = "SAPIEN SnippetEditor"
		"DAA1194A2BD88BD7" = "SAPIEN Packager"
		"92A0E470EECC63D3" = "RegistryExplorer"
		"A968ADCD5F3991CD" = "CorelDraw Home 20"
		"6518D6AE55CB5B8E" = "CorelDraw Home 20"
		"EA5AF8CE5AEB5617" = "Notepad++"
		"3FCB7925BE48C6D4" = "JSONBuddyApp"
		"6B81D0477F64E02F" = "JSONBuddyApp"
		"1AB724316049531"  = "NordVPN"
		"72B0317636C8DBC0" = "FSPro Event Log Explorer"
		"75FDABDC3F4B24FC" = "Microsoft Windows Event Viewer (eventvwr.exe)"
		"9303DE56D0685AF1" = "plist Editor Pro for Windows"
		"56BD4EFC8F2E1F9C" = "XnSoft XnViewMP"
		"70A4C8CFD9C64000" = "Programmer's Notepad (pn.exe)"
		"ACB8CD11364E2DE8" = "VisualStudio"
		"C343543D4EE31DE7" = "Microsoft Access"
		"5E4713EB935BE0B1" = "foobar2000"
		"254995F62CC3531A" = "Sanderson Forensics BPLister"
		"68A0DBFB7D0781D5" = "Corel Photo Paint Home"
		"24728462B60C215D" = "Microsoft.WindowsMaps x64"
		"70202C58F1BC64FE" = "JeticoSoftware BCArchive"
		"BD6F833ECE9F9890" = "Microsoft Sticky Notes"
		"6F39A16F693777F6" = "Microsoft.MSPaint_8wekyb3d8bbwe"
		"556353BEBA95157C" = "7Z"
		"C45108AA42339506" = "PowerPoint Show 8"
		"25CFC5224E58D5D9" = "Corel Photo Paint Home"
		"F2A9149D1C88D093" = "Tor Browser (Firefox)"
		"7C8ADB9F2028B7D4" = "SAPIEN Packager"
		"B37A182B9A7A8098" = "SAPIEN.Packager"
		"D1CC3F047E70A200" = "SAPIEN SnippetEditor"
		"A6744F520B56975C" = "SAPIEN SnippetEditor"
		"B06BC47EDD036329" = "SAPIEN PowerShell Studio"
		"7FA8BDD163836F0C" = "WinRAR"
		"D57380F96FCFDE2F" = "RegistryExplorer"
		"F065AC336ABCAA3E" = "Adobe Acrobat DC"
		"9501E18D7C2AB92E" = "Google Chrome"
		"6DCAD003123A22FE" = "Android Studio"
		"F203793BF9D14FF"  = "Razer Central"
		"21982DADE69F78D8" = "Opera Browser"
		"7FF0B18F1611DAA4" = "Opera Browser"
		"EE6D1F704CDEB7F9" = "Opera Browser"
		"9645F58513B1A821" = "Windows Live Mail (wlmail.exe)"
		"D27FF2AECE1FD1BF" = "Epic Privacy Browser"
		"18AE7CDA503D746E" = "Advanced System Optimizer 3"
		"265142389B98FCB1" = "DVDFab 9 x86"
		"5E86FBBFFAE5937B" = "Waterfox Browser"
		"A7500EE83F4868AB" = "DVBViewer"
		# DestList & DestListPropertyStore streams have Serialized Property Store (1SPS ) extensions
		"5A2098E080CF7AC4" = "OneDrive (??) (ClassicMru)"
		"95597E2F40DBD9AA" = "PotPlayerMini64 (potplayer.daum.net)"
		"CB83010E2BF88AD0" = "PowerShell ISE x64"
		"5433B9CEC1DF1B"   = "WsaClient.exe (Windows Subsystem For Android)"
		"F5096E40DCC7BFAF" = "Microsoft Windows Subsystem For Android"
		"FD36C431D6130A56" = "Roon"
		"339621474FE0442E" = "MicrosoftWindows.Client.CBS_cw5n1h2txyewy (ncpa.cpl)"
		"42F16A31D9A2EC4"  = "Diagnostic.Cabinet"
		"58FBE05CDDD02D66" = "MicrosoftWindows.Client.CBS_1000.22662.1000.0_x64__cw5n1h2txyewy"
		"7A8FBED55E9C2E1"  = "REW (Room Eq Wizard)"
		"7E7199497E7A9AD7" = "iliumsoft eWallet"
		"8161663B649F159A" = "MS Windows Remote Assistance"
		"96863E64B7418EB6" = "MS Visual Studio"
		"98789845387A0EF0" = "Dropbox Vault"
		"A4CE39A7CAC7D8DF" = "MS Windows Sandbox"
	}
	$versions = [Ordered]@{
		"1" = "Windows 7/8"
		"3" = "Windows 10"
		"4" = "Windows 10"
		"5" = "Windows 10"
		"6" = "Windows 11"
	}
	$lengths = [Ordered]@{
		"1" = "114"
		"3" = "130"
		"4" = "130"
		"5" = "130"
		"6" = "130"
	}
	$LinkFlagsTT = [Ordered]@{
		"HasLinkTargetIDList"		  = "ShellLinkHeader is followed by a LinkTargetIDList structure"
		"HasLinkInfo"				  = "LinkInfo in file"
		"HasName"					  = "NAME_String in file"
		"HasRelativePath"			  = "RELATIVE_PATH in file"
		"HasWorkingDir"			      = "WORKING_DIR in file"
		"HasArguments"			      = "COMMAND_LINE_ARGUMENTS"
		"HasIconLocation"			  = "ICON_LOCATION"
		"IsUnicode"				      = "Strings are in unicode"
		"ForceNoLinkInfo"			  = "LinkInfo is ignored"
		"HasExpString"			      = "The shell link is saved with an EnvironmentVariableDataBlock"
		"RunInSeparateProcess"	      = "Target runs in a 16-bit virtual machine"
		"HasDarwinID"				  = "The shell link is saved with a DarwinDataBlock"
		"RunAsUser"				      = "The application is run as a different user when the target of the shell link is activated"
		"HasExpIcon"				  = "The shell link is saved with an IconEnvironmentDataBlock"
		"NoPidlAlias"				  = "The file system location is represented in the shell namespace when the path to an item is parsed into an IDList"
		"RunWithShimLayer"		      = "The shell link is saved with a ShimDataBlock"
		"ForceNoLinkTrack"		      = "The TrackerDataBlock is ignored"
		"EnableTargetMetadata"	      = "The shell link attempts to collect target properties and store them in the PropertyStoreDataBlock when the link target is set"
		"DisableLinkPathTracking"	  = "The EnvironmentVariableDataBlock is ignored"
		"DisableKnownFolderTracking"  = "The SpecialFolderDataBlock and the KnownFolderDataBlock are ignored when loading the shell link"
		"DisableKnownFolderAlias"	  = "If the link has a KnownFolderDataBlock, the unaliased form of the known folder IDList SHOULD be used when translating the target IDList at the time that the link is loaded"
		"AllowLinkToLink"			  = "Creating a link that references another link is enabled"
		"UnaliasOnSave"			      = "When saving a link for which the target IDList is under a known folder, either the unaliased form of that known folder or the target IDList SHOULD be used"
		"PreferEnvironmentPath"	      = "The target IDList SHOULD NOT be stored; instead, the path specified in the EnvironmentVariableDataBlock SHOULD be used to refer to the target"
		"KeepLocalIDListForUNCTarget" = "When the target is a UNC name that refers to a location on a local machine, the local path IDList in the PropertyStoreDataBlock SHOULD be stored, so it can be used when the link is loaded on the local machine"
	}
	$DriveTypes = [Ordered]@{
		"UNKNOWN"	  = "The drive type cannot be determined."
		"NO_ROOT_DIR" = "The root path is invalid; for example, there is no volume mounted at the path"
		"REMOVABLE"   = "The drive has removable media, such as a floppy drive, thumb drive, or flash card reader."
		"FIXED"	      = "The drive has fixed media, such as a hard drive or flash drive."
		"REMOTE"	  = "The drive is a remote (network) drive."
		"CDROM"	      = "The drive is a CD-ROM drive."
		"RAMDISK"	  = "The drive is a RAM disk."
	}
	# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow
	$ShowCommands = [Ordered]@{
		'0'  = '[SW_HIDE] Hides the window and activates another window.'
		'1'  = '[SW_SHOWNORMAL] Window is activated and restored to its original size and position.'
		'2'  = '[SW_SHOWMINIMIZED] Window is minimized and activated.'
		'3'  = '[SW_SHOWMAXIMIZED] Window is maximized and activated.'
		'4'  = '[SW_SHOWNOACTIVATE] Window in its most recent size and position. The window is NOT activated.'
		'5'  = '[SW_SHOW] Activates the window and displays it in its current size and position.'
		'6'  = '[SW_MINIMIZE] Minimizes the specified window and activates the next top-level window in the Z order'
		'7'  = '[SW_SHOWMINNOACTIVE] Window is minimized and NOT activated.'
		'8'  = '[SW_SHOWNA] Displays the window in its current size and position. The window is NOT activated.'
		'9'  = '[SW_RESTORE] Displays the window in its current size and position. The window is activated.'
		'10' = '[SW_SHOWDEFAULT] Sets the show state to the default used by the program that started the application.'
		'11' = '[SW_FORCEMINIMIZE] Minimizes a window, even if the thread that owns the window is not responding.'
	}
	
	$reparsefilter = [Ordered]@{
		"00000000" = "IO_REPARSE_TAG_RESERVED_ZERO"
		"00000001" = "IO_REPARSE_TAG_RESERVED_ONE"
		"00000002" = "IO_REPARSE_TAG_RESERVED_TWO"
		"80000005" = "IO_REPARSE_TAG_DRIVE_EXTENDER"
		"80000006" = "IO_REPARSE_TAG_HSM2"
		"80000007" = "IO_REPARSE_TAG_SIS"
		"80000008" = "IO_REPARSE_TAG_WIM"
		"80000009" = "IO_REPARSE_TAG_CSV"
		"8000000A" = "IO_REPARSE_TAG_DFS"
		"8000000B" = "IO_REPARSE_TAG_FILTER_MANAGER"
		"80000012" = "IO_REPARSE_TAG_DFSR"
		"80000013" = "IO_REPARSE_TAG_DEDUP"
		"80000014" = "IO_REPARSE_TAG_NFS"
		"80000015" = "IO_REPARSE_TAG_FILE_PLACEHOLDER"
		"80000016" = "IO_REPARSE_TAG_DFM"
		"80000017" = "IO_REPARSE_TAG_WOF"
		"80000018" = "IO_REPARSE_TAG_WCI"
		"8000001B" = "IO_REPARSE_TAG_APPEXECLINK"
		"8000001E" = "IO_REPARSE_TAG_STORAGE_SYNC"
		"80000020" = "IO_REPARSE_TAG_UNHANDLED"
		"80000021" = "IO_REPARSE_TAG_ONEDRIVE"
		"80000023" = "IO_REPARSE_TAG_AF_UNIX"
		# Windows Subsystem for Linux
		"80000024" = "IO_REPARSE_TAG_LX_FIFO"
		"80000025" = "IO_REPARSE_TAG_LX_CHR"
		"80000026" = "IO_REPARSE_TAG_LX_BLK"
		#
		"9000001C" = "IO_REPARSE_TAG_PROJFS"
		"90001018" = "IO_REPARSE_TAG_WCI_1" # Used by the Windows Container Isolation filter
		"9000101A" = "IO_REPARSE_TAG_CLOUD_1"
		"9000201A" = "IO_REPARSE_TAG_CLOUD_2"
		"9000301A" = "IO_REPARSE_TAG_CLOUD_3"
		"9000401A" = "IO_REPARSE_TAG_CLOUD_4"
		"9000501A" = "IO_REPARSE_TAG_CLOUD_5"
		"9000601A" = "IO_REPARSE_TAG_CLOUD_6"
		"9000701A" = "IO_REPARSE_TAG_CLOUD_7"
		"9000801A" = "IO_REPARSE_TAG_CLOUD_8"
		"9000901A" = "IO_REPARSE_TAG_CLOUD_9"
		"9000A01A" = "IO_REPARSE_TAG_CLOUD_A"
		"9000B01A" = "IO_REPARSE_TAG_CLOUD_B"
		"9000C01A" = "IO_REPARSE_TAG_CLOUD_C"
		"9000D01A" = "IO_REPARSE_TAG_CLOUD_D"
		"9000E01A" = "IO_REPARSE_TAG_CLOUD_E"
		"9000F01A" = "IO_REPARSE_TAG_CLOUD_F"
		"0000F000" = "IO_REPARSE_TAG_CLOUD_MASK" # https://www.codemachine.com/downloads/win10.1803/winnt.h
		"A0000003" = "IO_REPARSE_TAG_MOUNT_POINT"
		"A000000C" = "IO_REPARSE_TAG_SYMLINK"
		"A0000010" = "IO_REPARSE_TAG_IIS_CACHE"
		"A0000019" = "IO_REPARSE_TAG_GLOBAL_REPARSE"
		"A000001D" = "IO_REPARSE_TAG_LX_SYMLINK"
		"A000001F" = "IO_REPARSE_TAG_WCI_TOMBSTONE"
		"A0000022" = "IO_REPARSE_TAG_PROJFS_TOMBSTONE"
		"A0000027" = "IO_REPARSE_TAG_WCI_LINK"
		"A0001027" = "IO_REPARSE_TAG_WCI_LINK_1"
		"C0000004" = "IO_REPARSE_TAG_HSM"
		"C0000014" = "IO_REPARSE_TAG_APPXSTRM"
	}
	
	function Show-ErrorMessage
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$ErrorMessage
		)
		[void][System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "$($ErrorMessage)", "LNK & Jumplist Browser", "OK", "Error")
	}
	
	function Show-InfoMessage
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$InfoMessage
		)
		[void][System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "$($InfoMessage)", "LNK & Jumplist Browser", "OK", "Information")
	}
	
	function Show-WarningMessage
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$WarningMessage
		)
		[void][System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "$($WarningMessage)", "LNK & Jumplist Browser", "OK", "Warning")
	}
	
	function Get-ShellFolders
	{
		try
		{
			$ShellFolders = @(
				"HKCU:Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" # User/Roaming
				"HKCU:Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" # User
				"HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" # Public
				"HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" # Public/Common
			)
			
			$shellf = @{ }
			Foreach ($ShellFolder in $ShellFolders)
			{
				
				$folders = Get-Item -Path $ShellFolder
				Foreach ($s in ($folders.GetValueNames() | sort))
				{
					if ($s -eq "!Do not use this registry key") { continue }
					$name = if ($s.StartsWith('{') -and ($s -in $Special.guid)) { $Special.where{ $_.guid -eq $s }.name }
					else { $s }
					
					$shellf[$Name] = "$($Folders.GetValue($s))"
				}
			}
			$knownFolders = [enum]::GetNames([System.Environment+SpecialFolder])
			foreach ($knownfolder in $knownFolders)
			{
				if (![String]::IsNullOrEmpty([environment]::getfolderpath($knownfolder)))
				{
					$shellf[$knownfolder] = "$([environment]::getfolderpath($knownfolder))"
				}
			}
			
			$shellf.GetEnumerator() | sort -Property Value -Descending -Unique
		}
		catch
		{
			$shellf = @{ }
			$knownFolders = [enum]::GetNames([System.Environment+SpecialFolder])
			foreach ($knownfolder in $knownFolders)
			{
				if (![String]::IsNullOrEmpty([environment]::getfolderpath($knownfolder)))
				{
					$shellf[$knownfolder] = "$([environment]::getfolderpath($knownfolder))"
				}
			}
			
			$shellf.GetEnumerator() | sort -Property Value -Descending -Unique
		}
	}
	
	function Get-KnownFolderProperties
	{
		try
		{
			$ShellFolders = @(
				"HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions"
				"HKLM:SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\"
			)
			
			$shellf = @{ }
			$FolderProps = Foreach ($ShellFolder in $ShellFolders)
			{
				
				$folders = Get-ChildItem -Path $ShellFolder
				Foreach ($folder in $folders)
				{
					if ($folder.SubKeyCount -gt 1 -or $folder.ValueCount -lt 2) { continue }
					$GUID = split-path $folder -leaf
					$folderproperties = Get-ItemProperty "$((split-path $folder.Name -NoQualifier).replace('HKEY_LOCAL_MACHINE', 'HKLM:'))"
					
					[PsCustomObject]@{
						'GUID'		   = $GUID
						'Name'		   = $folderproperties.Name
						'ParentFolder' = if (!!$folderproperties.ParentFolder) { $folderproperties.ParentFolder }else{ $null }
						'RelativePath' = if (!!$folderproperties.RelativePath) { $folderproperties.RelativePath }else{ $null }
					}
				}
			}
			$FolderProps = ($FolderProps | sort -Property GUID -Unique)
			
			$knownFolders = foreach ($prop in $FolderProps)
			{
				
				$parent = if ($prop.ParentFolder -in $FolderProps.GUID)
				{
					$FolderProps.Where{ $_.GUID -eq $prop.ParentFolder }.Name
				}
				else { $null }
				
				[PsCustomObject]@{
					'GUID'		   = $prop.GUID
					'Name'		   = $prop.Name
					# 'ParentFolder' = $prop.ParentFolder
					'Parent'	   = $parent
					'RelativePath' = $prop.RelativePath
				}
			}
			return $knownFolders
		}
		catch {$null}
	}
	
	function Get-KnownFolders
	{
		try
		{
			$knownFolders = Get-KnownFolderProperties
			
			$ShellFolders = Get-ShellFolders
			$CompleteShell = @{ }
			
			foreach ($shell in $ShellFolders.GetEnumerator())
			{
				
				if ($shell.key -in $knownFolders.GUID)
				{
					$CompleteShell["$($knownFolders.Where{ $_.GUID -eq $shell.key }.Name)"] = "$($shell.Value)"
				}
				else { $CompleteShell[$shell.key] = "$($shell.Value)" }
			}
			$CompleteShell.GetEnumerator() | sort -Property Value -Descending -Unique
		}
		catch
		{
			$ShellFolders
		}
	}
	
	function Get-Attributes
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[Byte[]]$Bytes,
			[switch]$NoNumber
		)
		
		$attr = [System.Collections.ArrayList]::new()
		$attrINt = if ($bytes.Count -eq 2) { [System.BitConverter]::ToUInt16($Bytes, 0) }
		elseif ($bytes.Count -eq 4) { [System.BitConverter]::ToUInt32($Bytes, 0) }
		else { return }
		$FileAttributesEnum.GetEnumerator().foreach{ if (($attrINt -band $_.key) -eq $_.key) { $null = $attr.Add($FileAttributesEnum[$_.key]) } }
		if (!$NoNumber)
		{
			[System.Array]::Reverse($bytes)
			$attrhx = "0x$([System.BitConverter]::ToString($Bytes) -replace '-', '')"
			Return "$($attr -join ', ') ($($attrhx<#$attrINt#>))"
		}
		else
		{
			Return "$($attr -join ', ')"
		}
	} # End Get-Attributes
	
	function Get-SFGAOflags
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$Flags,
			[System.Boolean]$Simgle = $False
		)
		
		$SFGAO = [System.Collections.Hashtable]@{ }
		$SFGAOflags.GetEnumerator().foreach{ if (($Flags -band $_.key) -eq $_.key) { $SFGAO[$_.key] = $SFGAOflags[$_.key] } }
		
		$SFGAO = [System.Collections.ArrayList]::new()
		$SFGAOflags.GetEnumerator().foreach{ if (($Flags -band $_.key) -eq $_.key) { $null = $SFGAO.Add($SFGAOflags[$_.key]) } }
		if (!!$Simgle)
		{
			Return "$($SFGAO -join ', ') ($($Flags))" # Single Line 
		}
		else
		{
			return $SFGAO
		}
	} # End Get-SFGAOflags
	
	# Guid database
	# https://uuid.pirate-server.com
	function Get-CLSID
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.String]$CLSIDstring
		)
		
		if (!$CLSIDstring -or $CLSIDstring.Length -ne 36)
		{
			return $null
		}
		$Name = $null
		try
		{
			if ($CLSIDstring -eq 'B4FB3F98-C1EA-428D-A78A-D1F5659CBA93')
			{
				$Name = "Microsoft.NetworkAndSharingCenter /ShareMedia [$($CLSIDstring)]"
			}
			elseif ($CLSIDstring -eq '018D5C66-4533-4307-9B53-224DE2ED1FE6')
			{
				$Name = "CLSID_OneDrivePersonal [$($CLSIDstring)]"
			}
			elseif ($CLSIDstring -eq '184E877F-522E-4F52-B483-7681678F1722') # In SyncRootManager
			{
				$Name = "Dropbox [$($CLSIDstring)]"
			}
			else
			{
				$RegistryKeys = @(
					'Software\Classes\CLSID'
					'Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace'
					'Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\DelegateFolders'
					'Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace'
					'Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders'
					'Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace_36354489'
					'Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace_36354489\DelegateFolders'
				)
				foreach ($registrykey in $RegistryKeys)
				{
					$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
					if(!$Registry.Handle.IsClosed){ $Registry.Close()}
					$registrySubkey = $Registry.OpenSubKey($registrykey)
					if (!!$registrySubkey)
					{
						$registrySubKeyNames = $registrySubkey.GetSubKeyNames()
						$registrySubkey.Close()
						$registrySubkey.Dispose()
					}
					else { continue }
					$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
					if (!!$CLSID)
					{
						$registrySubkey = $Registry.OpenSubKey("$($registrykey)\$($CLSID)")
						$Value = $registrySubkey.GetValue('')
						$registrySubkey.Close()
						$registrySubkey.Dispose()
						
						if (!!$Value)
						{
							$Name = "$($Value) [$($CLSIDstring)]"
							$registry.Close()
							$registry.Dispose()
							break
						} # End if
					} # End if
					else { continue }
				} # End Foreach
			} # End else
			
			$registry.Close()
			$registry.Dispose()
			
			if (!!$Name) { return $Name }
			else
			{
				try
				{
					$FolderDescription = Get-FolderDescription -CLSIDstring $CLSIDstring
					if ($FolderDescription -ne $CLSIDstring) { return $FolderDescription }
					else { return "[$($CLSIDstring)]" }
					
				}
				catch
				{
					return "[$($CLSIDstring)]"
				}
			}
		}
		catch
		{
			return "[$($CLSIDstring)]"
		}
	} # End Get-CLSID
	
	function Get-FolderDescription
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateLength(36, 36)]
			[System.String]$CLSIDstring
		)
		
		try
		{
			$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
			$registrykey = $Registry.OpenSubKey('Software\Microsoft\Windows\CurrentVersion\Explorer\FolderTypes')
			
			$registrySubKeyNames = $registrykey.GetSubKeyNames()
			$registrykey.Close()
			$registrykey.Dispose()
			$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
			if (!!$CLSID)
			{
				$registrykey = $Registry.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Explorer\FolderTypes\$($CLSID)")
				$Name = "$($registrykey.GetValue('CanonicalName')) [$($CLSIDstring)]"
				$registrykey.Close()
				$registrykey.Dispose()
			}
			else
			{
				$registrykey = $Registry.OpenSubKey('Software\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions')
				$registrySubKeyNames = $registrykey.GetSubKeyNames()
				$registrykey.Close()
				$registrykey.Dispose()
				$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
				
				if (!!$CLSID)
				{
					$registrykey = $Registry.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\$($CLSID)")
					$Name = "$($registrykey.GetValue('Name')) [$($CLSIDstring)]"
					$registrykey.Close()
					$registrykey.Dispose()
				}
				else
				{ $Name = $CLSIDstring }
			}
			
			return $Name
		}
		catch
		{
			$Registry.Close()
			$Registry.Dispose()
			return $CLSIDstring
		}
	} # End Get-FolderDescription
	
	function Get-XAppName
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$XAppName
		)
		
		try
		{
			$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
			$registrykey = $Registry.OpenSubKey('Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Extensions\ProgIDs')
			$registrySubKeyNames = $registrykey.GetSubKeyNames()
			$registrykey.Close()
			$registrykey.Dispose()
			$XApp = $registrySubKeyNames.Where{ $_ -eq $XAppName }
			if (!!$XApp)
			{
				$registrykey = $Registry.OpenSubKey("Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Extensions\ProgIDs\$($XApp)")
				$ValueNames = $registrykey.GetValueNames()
				$name = if ($ValueNames.count -ge 1)
				{
					"$($ValueNames[($ValueNames.count - 1)]) - [$($XAppName)]" # Get the (latest version) name string
				}
				else { "[$($XAppName)]" }
				$registrykey.Close()
				$registrykey.Dispose()
			}
			else { $Name = "[$($XAppName)]" }
		}
		catch
		{
			$Name = "[$($XAppName)]"
			$Registry.Close()
			$Registry.Dispose()
		}
		return $Name
	} # End Get-XAppName
	
	# Preload the Shell Folders
	$ShellFolders = Get-KnownFolders
	$Knownfolders = Get-KnownFolderProperties
	
	function Get-Nodes
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$nodes
		)
		
		$DefaultColor = [System.Drawing.Color]::Black
		foreach ($node in $nodes)
		{
			[System.Windows.Forms.Application]::DoEvents()
			$node.Backcolor = $DefaultColor
			$node
			Get-Nodes -nodes $node.Nodes
		}
	}
	
	#=============================================#
	# Load PropertyStore .Net lib into memory     #
	# --------------------------------------------#
	# Author => @securifybv/@yorickkoster         #
	# https://github.com/securifybv/PropertyStore #
	# --------------------------------------------#
	# .Net Framework Compat: 4.0+                 #
	#=============================================#
	try { !![System.Reflection.Assembly]::GetAssembly('PropertyStore.SerializedPropertyStore, PropertyStore, Version=0.1.0.0, Culture=neutral, PublicKeyToken=null')|Out-Null  }
	catch [System.Management.Automation.MethodException]
	{
		$EncodedCompressedFile = @'
		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
'@
		$DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile), [IO.Compression.CompressionMode]::Decompress)
		$UncompressedFileBytes = New-Object Byte[](13312)
		$null = $DeflatedStream.Read($UncompressedFileBytes, 0, 13312)
		$null = [System.Reflection.Assembly]::Load($UncompressedFileBytes)
	}
	catch {return}
	#=========================================#
	# Load ShellLink .Net lib into memory     #
	# ----------------------------------------#
	# Author => @securifybv/@yorickkoster     #
	# https://github.com/securifybv/ShellLink #
	# ----------------------------------------#
	# .Net Framework Compat: 4.0+             #
	#=========================================#
	try { !![Reflection.Assembly]::GetAssembly('ShellLink.Shortcut, ShellLink, Version=0.9.2.0, Culture=neutral, PublicKeyToken=null')|Out-Null }
	catch [System.Management.Automation.MethodException]
	{
		$EncodedCompressedFile = @'
		
'@
		$DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile), [IO.Compression.CompressionMode]::Decompress)
		$UncompressedFileBytes = New-Object Byte[](80384)
		$null = $DeflatedStream.Read($UncompressedFileBytes, 0, 80384)
		$null = [System.Reflection.Assembly]::Load($UncompressedFileBytes)
	}
	catch { return }
	
	function Get-DelegateIDlist
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray,
			[Int]$idx = 4
		)
		try
		{
			$DelegateIDListsize = [System.BitConverter]::ToUInt32($ByteArray[0 .. 3], 0)
			$DelegateIDs = [System.Collections.ArrayList]::new()
	
			while ($idx -lt ($DelegateIDListsize - 4))
			{
				$itemSize = [Bitconverter]::ToUInt16($ByteArray[($idx) .. ($idx + 1)], 0)
				if ($itemSize -eq 0 -or $itemSize -gt ($DelegateIDListsize - $idx)) { break }
				$null = $DelegateIDs.Add([ShellLink.Structures.ItemID]::FromByteArray($ByteArray[$idx .. ($idx + $itemSize - 1)]))
				$idx = $idx + $itemSize
				if ($idx -ge ($DelegateIDListsize - 4)) { break }
			}
			
			if ($DelegateIDs.Count -ge 1)
			{
				$DelegateIDList = [System.Collections.ArrayList]::new()
				foreach ($DelegateID in $DelegateIDs)
				{
					$linkItem = Get-LinkTargetIDList -ItemIdListItem $DelegateID
					$null = $DelegateIDList.Add($linkItem)
				}
			}
		}
		catch
		{
			$DelegateIDList = $null
		}
		Return $DelegateIDList
	} # End Get-DelegateIDlist
	
	function Get-EmbeddedIDList
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowNull()]
			[AllowEmptyString()]
			[System.Byte[]]$ByteArray,
			[Int]$Index = 4
		)
		
		try
		{
			$ShellinkSize = $ByteArray.Count
			$EmbeddedItemIDs = [System.Collections.ArrayList]::new()
			$idx = $Index
			while ($idx -lt $ShellinkSize)
			{
				$itemSize = [Bitconverter]::ToUInt16($ByteArray[($idx) .. ($idx + 1)], 0)
				if ($itemSize -eq 0 -or $itemSize -gt ($ShellinkSize - $idx)) { break }
				$null = $EmbeddedItemIDs.Add([ShellLink.Structures.ItemID]::FromByteArray($ByteArray[$idx .. ($idx + $itemSize - 1)]))
				$idx = $idx + $itemSize
				if ($idx -ge $ShellinkSize) { break }
			} # End while
			
			if ($EmbeddedItemIDs.Count -ge 1)
			{
				$EmbeddedIdList = [System.Collections.ArrayList]::new()
				foreach ($EmbeddedItemID in $EmbeddedItemIDs)
				{
					$linkItem = Get-LinkTargetIDList -ItemIdListItem $EmbeddedItemID
					$null = $EmbeddedIdList.Add($linkItem)
				}
			}
		}
		catch
		{
			$EmbeddedIdList = $null
		}
		Return $EmbeddedIdList
	} # End Get-EmbeddedIDList
	
	function Populate-SPS1
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$Node,
			[Parameter(Mandatory = $true)]
			$SPS1properties
		)
		try
		{
			if ($SPS1properties.Count -ge 1)
			{
				for ($ps = 0; $ps -lt $SPS1properties.Count; $ps++)
				{
					# Add Serialised Property Node
					if ($SPS1properties.Count -gt 1) # Add counter if more than 1
					{
						$SPS1Node = $Node.Nodes.Add("Entension$($ps)", "Serialized Property #$($ps)")
					}
					else # No counter
					{
						$SPS1Node = $Node.Nodes.Add("Entension$($ps)", "Serialized Property")
					}
					$SPS1Node.ForeColor = 'Gold'
					
					# Add SPS1 entry info
					$null = $SPS1Node.Nodes.Add("Storage Size", "Storage Size: $($SPS1properties[$ps].'Storage Size')")
					$null = $SPS1Node.Nodes.Add("FormatID", "Format ID: $($SPS1properties[$ps].FormatID)")
					# Add the TypedProperties
					if ($SPS1properties[$ps].TypedProperty.count -ge 1)
					{
						for ($t = 0; $t -lt $SPS1properties[$ps].TypedProperty.count; $t++)
						{
							if ($SPS1properties[$ps].TypedProperty.count -gt 1) # Add counter if more than 1
							{
								$TypedPropertyNodes = $SPS1Node.Nodes.Add("TypedProperty$($t)", "TypedProperty Entry #$($t)")
							}
							else # No counter
							{
								$TypedPropertyNodes = $SPS1Node.Nodes.Add("TypedProperty$($t)", "TypedProperty Entry")
							}
							$TypedPropertyNodes.ForeColor = 'Plum'
							# ID
							if ($null -ne $SPS1properties[$ps].TypedProperty[$t].ID)
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyTypeID$($t)", "ID: $($SPS1properties[$ps].TypedProperty[$t].ID)")
							}
							# Value Size
							$null = $TypedPropertyNodes.Nodes.Add("ValueSize$($t)", "ValueSize: $($SPS1properties[$ps].TypedProperty[$t].ValueSize)")
							# Name
							if ($SPS1properties[$ps].TypedProperty[$t].NameSize -gt 0)
							{
								$null = $TypedPropertyNodes.Nodes.Add("NameSize$($t)", "NameSize: $($SPS1properties[$ps].TypedProperty[$t].NameSize)")
								$null = $TypedPropertyNodes.Nodes.Add("Name$($t)", "Name: $($SPS1properties[$ps].TypedProperty[$t].Name)")
								$TypedPropertyNodes.Nodes["Name$($t)"].ForeColor = 'LightGreen'
								
								if (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes -and $SPS1properties[$ps].TypedProperty[$t].Name -in ('ViewItemsFolder', 'PubItemFolder.ShellItem'))
								{
									$BlobIDList = @(Get-EmbeddedIDList -ByteArray $SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes)
									if ($BlobIDList.count -ge 1)
									{
										$EmbeddedIDListNode = $TypedPropertyNodes.Nodes.Add("EmbeddedIDList$($t)", "$($SPS1properties[$ps].TypedProperty[$t].Name) ID List")
										$EmbeddedIDListNode.ForeColor = 'GreenYellow'
										Populate-ItemIdListItems -ItemIDListNode $EmbeddedIDListNode -ItemIdList @($BlobIDList)
									}
								}
								elseif (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes -and $SPS1properties[$ps].TypedProperty[$t].Name -in ('AutoList'))
								{
									$b = $SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes
									try
									{
										$StringSize = [System.BitConverter]::ToUInt32($b[4 .. 7], 0)
										$Type = [System.Text.Encoding]::Unicode.GetString($b[8 .. (8 + $StringSize - 3)])
										$embeddedItemsSize = [System.BitConverter]::ToUInt32($b[(8 + $StringSize + 2) .. (8 + $StringSize + 2 + 3)], 0)
										$CLSID = Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($b[(8 + $StringSize + 2 + 4) .. (8 + $StringSize + 2 + 4 + 15)]))"
										$GUID = Get-CLSID -CLSIDstring $CLSID
										
										if ($CLSID -eq '384EA5AE-ADE1-4E8A-8A9B-7BEA78FFF1E9') # BinaryAutoList
										{
											# skip 36 unknown bytes
											$LinkItemIDList = [ShellLink.Structures.LinkTargetIDList]::FromByteArray($b[96 .. ($b.Count - 1)])
											$EmbeddedIdList = [System.Collections.ArrayList]::new()
											foreach ($EmbeddedItemID in $LinkItemIDList.ItemIDList)
											{
												$linkItem = Get-LinkTargetIDList -ItemIdListItem $EmbeddedItemID
												$null = $EmbeddedIdList.Add($linkItem)
											}
											if ($EmbeddedIdList.count -ge 1)
											{
												$EmbeddedIDListNode = $TypedPropertyNodes.Nodes.Add("EmbeddedIDList$($t)", "$($SPS1properties[$ps].TypedProperty[$t].Name) ID List")
												$EmbeddedIDListNode.ForeColor = 'GreenYellow'
												$null = $EmbeddedIDListNode.Nodes.Add("TypeSize", "String Size: $($StringSize)")
												$null = $EmbeddedIDListNode.Nodes.Add("Type", "String Name: $($Type)")
												$EmbeddedIDListNode.Nodes["Type"].ForeColor = 'LightGreen'
												$null = $EmbeddedIDListNode.Nodes.Add("embeddedItemsSize", "$($SPS1properties[$ps].TypedProperty[$t].Name) Property Size: $($embeddedItemsSize)")
												$null = $EmbeddedIDListNode.Nodes.Add("GUID", "GUID: $($GUID)")
												$EmbeddedIDListNode.Nodes["GUID"].ForeColor = 'LightGreen'
												Populate-ItemIdListItems -ItemIDListNode $EmbeddedIDListNode -ItemIdList @($EmbeddedIdList)
											}
										}
									}
									catch { $null }
								}
							}
							# Type
							$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyType$($t)", "Type: $($SPS1properties[$ps].TypedProperty[$t].TypedProp.Type)")
							# Description
							$Description = $SPS1properties[$ps].TypedProperty[$t].Description
							if ($null -ne $Description)
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyDescription$($t)", "Description: $($Description)")
								if (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes -and $Description -eq 'Delegate ID List [28636AA6-953D-11D2-B5D6-00C04FD918D0\32]')
								{
									$DelegateIDList = Get-DelegateIDlist -ByteArray $SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes
									if ($DelegateIDList.count -ge 1)
									{
										$DelegateNode = $TypedPropertyNodes.Nodes.Add("DelegateIDList$($t)", "Delegate ID List")
										$DelegateNode.ForeColor = 'GreenYellow'
										Populate-ItemIdListItems -ItemIDListNode $DelegateNode -ItemIdList @($DelegateIDList)
									}
								}
								elseif (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes -and $Description -eq 'System FilterInfo [1E3EE840-BC2B-476C-8237-2ACD1A839B22\2]')
								{
									try
									{
										# https://www.thezdi.com/blog/2020/3/25/cve-2020-0729-remote-code-execution-through-lnk-files
										$bytes = $SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes
										$UnicodeStingLength = [System.BitConverter]::ToInt32($bytes[0..3],0)
										$UnicodeSting = [System.Text.Encoding]::Unicode.GetString($bytes[4 .. ($UnicodeStingLength - 1)]).TrimEnd()
										$extralength = [System.BitConverter]::ToInt32($bytes[(4+ $UnicodeStingLength+2) .. (4 + $UnicodeStingLength + 2+3)], 0)
										$eidx = 4 + $UnicodeStingLength + 2 + 4
										$FilterInfo = Get-Ext_SPS1 -ByteArray $bytes[$eidx..($bytes.count -1)]
										if (!!$FilterInfo)
										{
											$FilterInfoNode = $TypedPropertyNodes.Nodes.Add("FilterInfo$($t)", "FilterInfo")
											$FilterInfoNode.ForeColor = 'GreenYellow'
											$null = $FilterInfoNode.Nodes.Add("UnicodeString","Name: $($UnicodeSting)")
											$null = $FilterInfoNode.Nodes.Add("SPSdataSize", "Content Size: $($extralength)")
											$PropertyStoreEntries = [System.Collections.ArrayList]::new()
											foreach ($property in $FilterInfo)
											{
												$PropertyStoreEntry = [PSCustomObject]::new()
												$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
												$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
												$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
												$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
											}
											if (!!$PropertyStoreEntry)
											{
												Populate-SPS1 -Node $FilterInfoNode -SPS1properties @($PropertyStoreEntries)
											}
										}
									}
									catch{$null}
								}
							}
							# Raw Bytes and/or Value
							if (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.Value)
							{
								if ([System.String]$Description -eq 'SFGAOFlags [28636AA6-953D-11D2-B5D6-00C04FD918D0\25]') # $SFGAOflags
								{
									$sfflags = $SPS1properties[$ps].TypedProperty[$t].TypedProp.Value/1
									if ($null -ne $sfflags)
									{
										$sfgaovalue = Get-SFGAOflags -Flags $sfflags -Simgle $false
										$sfgaoNode = $TypedPropertyNodes.Nodes.Add("TypedPropertyValue$($t)", "Value: SFGAO Flags [0x$([System.String]$sfflags.ToString('X'))]")
										if (!!$sfgaovalue)
										{
											foreach ($sflag in $sfgaovalue.GetEnumerator())
											{
												$fkey = $SFGAOflags.GetEnumerator().where{ $_.value -eq $sflag }.key
												$null = $sfgaoNode.Nodes.Add("$($fkey)", "[$($fkey)] $($sflag)")
											}
										}
										# $null = $TypedPropertyNodes.Nodes.Add("TypedPropertyValue$($t)", "Value: $($sfgaovalue)")
									}
									
								}
								elseif ([System.String]$Description -eq 'File Attributes [B725F130-47EF-101A-A5F1-02608C9EEBAC\13]') # Attributes
								{
									$attr_bytes = [System.BitConverter]::GetBytes(($SPS1properties[$ps].TypedProperty[$t].TypedProp.Value/1))
									$FileAttributes = Get-Attributes -Bytes $attr_bytes
									$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyValue$($t)", "Value: $($FileAttributes)")
								}
								else # Value
								{
									$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyValue$($t)", "Value: $($SPS1properties[$ps].TypedProperty[$t].TypedProp.Value)")
								}
								if ([System.String]$SPS1properties[$ps].TypedProperty[$t].Name -in ('AutolistCacheTime') -or ([System.String]$SPS1properties[$ps].TypedProperty[$t].Name).Contains('Time') -or ([System.String]$SPS1properties[$ps].TypedProperty[$t].Name).Contains('timestamp'))								
								{
									$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].ForeColor = 'Cyan'
								}
								elseif (([System.String]$SPS1properties[$ps].TypedProperty[$t].Description).Contains('Date'))
								{
									$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].ForeColor = 'Cyan'
								}
								else
								{
									$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].ForeColor = 'LightGreen'
								}
							}
							if(!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.Raw)
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyRawValue$($t)", "Raw (Hex) Value")
								$TypedPropertyNodes.Nodes["TypedPropertyRawValue$($t)"].Tag = @($SPS1properties[$ps].TypedProperty[$t].TypedProp.Raw)
								$TypedPropertyNodes.Nodes["TypedPropertyRawValue$($t)"].ToolTipText = "Right click to copy the raw (Hex) data ($($SPS1properties[$ps].TypedProperty[$t].TypedProp.Raw.length))"
								$TypedPropertyNodes.Nodes["TypedPropertyRawValue$($t)"].ForeColor = 'Peru'
							}
						}
					}
					else
					{
						$null
						# Show-WarningMessage -WarningMessage ($SPS1properties[$ps]|Out-String)
					}
				} #end for each SPS entry
			}
		}
		catch {$null }
	} # end Populate-SPS1
	
	function Populate-ItemIdListItems
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$ItemIDListNode,
			[Parameter(Mandatory = $true)]
			$ItemIdList
		)
		
		if (!!$ItemIdList)
		{
			$IDListItemsNode = $ItemIDListNode.Nodes.Add("$('IDList Items')", "IDList Items")
			$IDListItemsNode.ForeColor = 'Violet'
			for ($ic = 0; $ic -lt $ItemIdList.count; $ic++)
			{
				$IDListEntry = $IDListItemsNode.Nodes.Add("IDListItem$($ic)", "IDList Entry #$($ic.ToString('D3')) [$($ItemIdList[$ic].ItemIDType)]")
				$IDListEntry.ForeColor = 'Red'
				$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Size", "ItemID Size: $($ItemIdList[$ic].ItemIDSize)")
				$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ItemIDType", "ItemID Type: $($ItemIdList[$ic].ItemIDType)")
				$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["ItemIDType"].ForeColor = 'Violet'
				if ($null -ne $ItemIdList[$ic].DisplayName)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("DisplayName", "ItemID Display Name: $($ItemIdList[$ic].DisplayName)")
				}
				if ($null -ne $ItemIdList[$ic].Signature)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Signature", "Signature: $($ItemIdList[$ic].Signature)")
				}
				if ($null -ne $ItemIdList[$ic].CPcategory)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("CPcategory", "Control Panel Category: $($ItemIdList[$ic].CPcategory)")
				}
				if ($null -ne $ItemIdList[$ic].DriveLetter)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("DriveLetter", "Drive Letter: $($ItemIdList[$ic].DriveLetter)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["DriveLetter"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Timestamp)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Timestamp", "Timestamp: $($ItemIdList[$ic].Timestamp)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Timestamp"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].Port)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Port", "Port: $($ItemIdList[$ic].Port)")
				}
				if ($null -ne $ItemIdList[$ic].UriSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("UriSize", "Uri length: $($ItemIdList[$ic].UriSize)")
				}
				if ($null -ne $ItemIdList[$ic].URI)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("URI", "URI: $($ItemIdList[$ic].URI)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["URI"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].UserSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("UserSize", "Username size: $($ItemIdList[$ic].UserSize)")
				}
				if ($null -ne $ItemIdList[$ic].Username)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Username", "Username: $($ItemIdList[$ic].Username)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Username"].ForeColor = 'GreenYellow'
				}
				if ($null -ne $ItemIdList[$ic].PassSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("PassSize", "Password size: $($ItemIdList[$ic].PassSize)")
				}
				if ($null -ne $ItemIdList[$ic].Password)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Password", "Password: $($ItemIdList[$ic].Password)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Password"].ForeColor = 'GreenYellow'
				}
				if ($null -ne $ItemIdList[$ic].'Subfolder Ansi')
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Subfolder Ansi", "Subfolder Ansi: $($ItemIdList[$ic].'Subfolder Ansi')")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Subfolder Ansi"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].'Subfolder Unicode')
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Subfolder Unicode", "Subfolder Unicode: $($ItemIdList[$ic].'Subfolder Unicode')")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Subfolder Unicode"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Flags)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Flags", "Flags: $($ItemIdList[$ic].Flags)")
				}
				if ($null -ne $ItemIdList[$ic].Path)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Path", "Path: $($ItemIdList[$ic].Path)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Path"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Name)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Name", "Name: $($ItemIdList[$ic].Name)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Name"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Description)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Description", "Description: $($ItemIdList[$ic].Description)")
				}
				if ($null -ne $ItemIdList[$ic].PathUnicode)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("PathUnicode", "Path (Unicode): $($ItemIdList[$ic].PathUnicode)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["PathUnicode"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].NameUnicode)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NameUnicode", "Name (Unicode): $($ItemIdList[$ic].NameUnicode)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["NameUnicode"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].DescriptionUnicode)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("DescriptionUnicode", "Description Unicode: $($ItemIdList[$ic].DescriptionUnicode)")
				}
				if ($null -ne $ItemIdList[$ic].NetworkProviderSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NetworkProviderSize", "Network Provider Size: $($ItemIdList[$ic].NetworkProviderSize)")
				}
				if ($null -ne $ItemIdList[$ic].NetworkProvider)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NetworkProvider", "Network Provider: $($ItemIdList[$ic].NetworkProvider)")
				}
				if (!!$ItemIdList[$ic].NetworkType -and $null -ne $ItemIdList[$ic].NetworkType)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NetworkType", "Network Type: $($ItemIdList[$ic].NetworkType)")
				}
				if (!!$ItemIdList[$ic].Device -and $null -ne $ItemIdList[$ic].Device)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Device", "Device: $($ItemIdList[$ic].Device)")
				}
				if ($null -ne $ItemIdList[$ic].'SortOrderIndex')
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("SortOrderIndex", "Sort Order Index: $($ItemIdList[$ic].'SortOrderIndex')")
				}
				if ($null -ne $ItemIdList[$ic].GUID)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("GUID", "GUID: $($ItemIdList[$ic].GUID)")
				}
				if ($null -ne $ItemIdList[$ic].CLSID)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("CLSID", "CLSID: $($ItemIdList[$ic].CLSID)")
				}
				if ($null -ne $ItemIdList[$ic].ShellName)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ShellName", "Shell Name: $($ItemIdList[$ic].ShellName)")
				}
				if ($null -ne $ItemIdList[$ic].Filesize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Filesize", "File Size: $($ItemIdList[$ic].Filesize)")
				}
				if ($null -ne $ItemIdList[$ic].Attributes)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Attributes", "Attributes: $($ItemIdList[$ic].Attributes)")
				}
				if ($null -ne $ItemIdList[$ic].TargetAttributes)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("TargetAttributes", "Target Attributes: $($ItemIdList[$ic].TargetAttributes)")
				}
				if ($null -ne $ItemIdList[$ic].Ansi_Name)
				{
					$Ansi_Name = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Ansi_Name", "Ansi Name: $($ItemIdList[$ic].Ansi_Name)")
					$Ansi_Name.ForeColor = 'PaleGreen'
				}
				if ($null -ne $ItemIdList[$ic].Ansi_8_3_Name)
				{
					$Ansi_Name.Text = "Long Name: $($ItemIdList[$ic].Ansi_Name)"
					$Short_Name = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Ansi_8_3_Name", "Short Name: $($ItemIdList[$ic].Ansi_8_3_Name)")
					$Short_Name.ForeColor = 'PaleGreen'
				}
				if ($null -ne $ItemIdList[$ic].w32Modified -and $ItemIdList[$ic].w32Modified -ne '' )
				{
					$w32Modifiednode = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("w32Modified", "Modified: $($ItemIdList[$ic].w32Modified)")
					$w32Modifiednode.ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].PropertyStoreEntries)
				{
					Populate-SPS1 -Node $IDListItemsNode.Nodes["IDListItem$($ic)"] -SPS1properties @($ItemIdList[$ic].PropertyStoreEntries)
				}
				if (!!$ItemIdList[$ic].ItemIdExtensions <#-and $ItemIdList[$ic].ItemIdExtensions.count -ge 1#>)
				{
					$x = 0
					Foreach ($extension in $ItemIdList[$ic].ItemIdExtensions)
					{
						if (!!$extension.itemIdExtType)
						{
							$extensionNode = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("itemIdExtType$($x)", "Extension #$($x) Type: [$($extension.itemIdExtType)]")
							if ($extension.NewExtension -eq $true)
							{
								$extensionNode.BackColor = 'Yellow'
								$extensionNode.ForeColor = 'Black'
							}
						}
						else
						{
							$extensionNode = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("itemIdExtType$($x)", "Extension #$($x)")
						}
						$extensionNode.ForeColor = 'Tomato'
						if ($null -ne $extension.extLength)
						{
							$null = $extensionNode.Nodes.Add("ExtentionSize", "Extension Size: $($extension.extLength)")
						}
						if ($null -ne $extension.extversion)
						{
							$null = $extensionNode.Nodes.Add("ExtentionVersion", "Extension Version: $($extension.extversion)")
						}
						if ($null -ne $extension.Host)
						{
							$fsoffsetnode = $extensionNode.Nodes.Add("HostOS", "Host OS Hint: $($extension.Host) [$($extension.os)]")
							$fsoffsetnode.ToolTipText = "This is actually the Filename string offset from the start of the extension"
						}
						if ($null -ne $extension.Filesystem)
						{
							$null = $extensionNode.Nodes.Add("Filesystem", "FS Hint: $($extension.Filesystem)")
						}
						if ($null -ne $extension.GUID)
						{
							$null = $extensionNode.Nodes.Add("GUID", "GUID: $($extension.GUID)")
						}
						if ($null -ne $extension.CLSID)
						{
							$null = $extensionNode.Nodes.Add("CLSID", "CLSID: $($extension.CLSID)")
						}
						if ($null -ne $extension.UriEntries)
						{
							foreach ($uri_entry in $extension.UriEntries.PSobject.Properties)
							{
								$null = $extensionNode.Nodes.Add("$($uri_entry.Name)", "$($uri_entry.Name): $($uri_entry.Value)")
							}
						}
						if ($null -ne $extension.TargetPath)
						{
							$null = $extensionNode.Nodes.Add("TargetPath", "Target Path: $($extension.TargetPath)")
						}
						if ($null -ne $extension.Component)
						{
							$null = $extensionNode.Nodes.Add("Component", "Component: $($extension.Component)")
						}
						if ($null -ne $extension.ComponentParameters)
						{
							$null = $extensionNode.Nodes.Add("ComponentParameters", "Component Parameters: $($extension.ComponentParameters)")
						}
						if ($null -ne $extension.ExtraPath)
						{
							$null = $extensionNode.Nodes.Add("ExtraPath", "Target Path: $($extension.ExtraPath)")
						}
						if ($null -ne $extension.UserName)
						{
							$null = $extensionNode.Nodes.Add("UserName", "UserName: $($extension.UserName)")
							$extensionNode.Nodes["UserName"].ForeColor = 'PaleTurquoise'
						}
						if ($null -ne $extension.Unicode_Name)
						{
							$Unicode_Name = $extensionNode.Nodes.Add("Unicode_Name", "Unicode Name: $($extension.Unicode_Name)")
							$Unicode_Name.ForeColor = 'PaleGreen'
						}
						if ($null -ne $extension.Localized_Name -and $extension.Localized_Name -ne '')
						{
							$Localized_Name = $extensionNode.Nodes.Add("Localized_Name", "Localized Name: $($extension.Localized_Name)")
							$Localized_Name.ForeColor = 'PaleGreen'
						}
						if ($null -ne $extension.Application)
						{
							$null = $extensionNode.Nodes.Add("Application", "Application: $($extension.Application)")
							$extensionNode.Nodes["Application"].ForeColor = 'LightGreen'
						}
						if ($null -ne $extension.DocumentType)
						{
							$null = $extensionNode.Nodes.Add("DocumentType", "Document Type: $($extension.DocumentType)")
							$extensionNode.Nodes["DocumentType"].ForeColor = 'LightGreen'
							if ($extension.itemIdExtType -eq 'BEEF001A')
							{
								$extensionNode.Nodes["DocumentType"].ToolTipText = '[SOFTWARE] Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Extensions\ProgIDs'
							}
						}
						if ($null -ne $extension.Selection)
						{
							$null = $extensionNode.Nodes.Add("Selection", "Selection: $($extension.Selection)")
							$extensionNode.Nodes["Selection"].ForeColor = 'LightGreen'
						}
						if ($null -ne $extension.Attributes)
						{
							$null = $extensionNode.Nodes.Add("Attributes", "Attributes: $($extension.Attributes)")
						}
						if ($null -ne $extension.TargetCreated)
						{
							$null = $extensionNode.Nodes.Add("TargetCreated", "Target Created: $($extension.TargetCreated)")
							$extensionNode.Nodes["TargetCreated"].ForeColor = 'Cyan'
						}
						if ($null -ne $extension.TargetAccessed)
						{
							$null = $extensionNode.Nodes.Add("TargetAccessed", "Target Accessed: $($extension.TargetAccessed)")
							$extensionNode.Nodes["TargetAccessed"].ForeColor = 'Cyan'
						}
						if ($null -ne $extension.ShortCutCreated)
						{
							$null = $extensionNode.Nodes.Add("ShortCutCreated", "LNK Created: $($extension.ShortCutCreated)")
							$extensionNode.Nodes["ShortCutCreated"].ForeColor = 'Cyan'
						}
						if ($null -ne $extension.Created)
						{
							$CreatedNode = $extensionNode.Nodes.Add("Created", "Created (UTC): $($extension.Created)")
							$CreatedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.Modified)
						{
							$ModifiedNode = $extensionNode.Nodes.Add("Modified", "Modified (UTC): $($extension.Modified)")
							$ModifiedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.Accessed)
						{
							$AccessedNode = $extensionNode.Nodes.Add("Accessed", "Accessed (UTC): $($extension.Accessed)")
							$AccessedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.w32Created)
						{
							$w32CreatedNode = $extensionNode.Nodes.Add("w32Created", "Created: $($extension.w32Created)")
							$w32CreatedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.w32Accessed)
						{
							$w32AccessedNode = $extensionNode.Nodes.Add("w32Accessed", "Accessed: $($extension.w32Accessed)")
							$w32AccessedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.MFTRecordNr)
						{
							$MFTRecordNrNode = $extensionNode.Nodes.Add("MFTRecordNr", "MFT Record Nr: $($extension.MFTRecordNr)")
							$MFTRecordNrNode.ForeColor = 'Orange'
							$MFTRecordSeqNr = $extensionNode.Nodes.Add("MFTRecordSeqNr", "MFT Record Sequence Nr: $($extension.MFTRecordSeqNr)")
							$MFTRecordSeqNr.ForeColor = 'Orange'
						}
						if ($null -ne $extension.ReparsePointTag -and $ItemIdList[$ic].Attributes -match "Reparse_Point" <#$extension.ReparsePointTag -ne '00000000'#>)
						{
							
							if (!!$reparsefilter["$($extension.ReparsePointTag)"])
							{
								$null = $extensionNode.Nodes.Add("ReparsePointTag", "Reparse Point Tag: 0x$($extension.ReparsePointTag) => $($reparsefilter[$extension.ReparsePointTag])" )
								# $null = $extensionNode.Nodes.Add("ReparseFilter", "Reparse Point Filter: $($reparsefilter["$($extension.ReparsePointTag)"])")
							}
							else { $null = $extensionNode.Nodes.Add("ReparsePointTag", "Reparse Point Tag: 0x$($extension.ReparsePointTag)") }
							$extensionNode.Nodes["ReparsePointTag"].ForeColor = 'LimeGreen'
						}
						if ($null -ne $extension.Unknown -and $extension.Unknown -notin ('0x00000000', '0x0000'))
						{
							$null = $extensionNode.Nodes.Add("Unknown", "Unknown value: $($extension.Unknown)")
						}
						elseif ($null -ne $extension.Reparse_Tag_Unknown)
						{
							$null = $extensionNode.Nodes.Add("Unknown", "Unknown value: $($extension.Reparse_Tag_Unknown)")
						}
						if ($null -ne $extension.Unknown_1 -and $extension.Unknown_1 -ne '0x00000000')
						{
							$null = $extensionNode.Nodes.Add("Unknown_1", "Unknown value #1: $($extension.Unknown_1)")
						}
						if ($null -ne $extension.fsraw -and !!$ItemIdList[$ic].RawFilesize -and $extension.itemIdExtType -eq 'BEEF0004') # get 64bit Filesize
						{
							try
							{
								$newFSraw = $ItemIdList[$ic].RawFilesize + $extension.fsraw
								$newFS = [System.BitConverter]::ToUInt64($newFSraw, 0)
								$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Filesize"].Text = "File Size: $($newFS.ToString('N0'))"
								if ($newFS -gt 4294967295) # draw attention to the size if greater than 0xFFFFFFFF
								{
									$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Filesize"].BackColor = 'DarkGreen' #'Yellow'
									$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Filesize"].ForeColor = 'Yellow' #'Black'
								#	$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Filesize"].NodeFont = New-Object Drawing.Font($treeview2.Font, [Drawing.FontStyle]::Bold)
								}
							}
							catch{}
						}
						if ($null -ne $extension.Unknown_2 -and $extension.Unknown_2 -ne '0x000000000000')
						{
							$null = $extensionNode.Nodes.Add("Unknown_2", "Unknown value #2: $($extension.Unknown_2)")
						}
						if ($null -ne $extension.Unknown_3 -and $extension.Unknown_3 -ne '0x00000000')
						{
							$null = $extensionNode.Nodes.Add("Unknown_3", "Unknown value #3: $($extension.Unknown_3)")
						}
						if ($null -ne $extension.EntryNr)
						{
							$null = $extensionNode.Nodes.Add("EntryNr", "Entry Nr: #$($extension.EntryNr)")
						}
						if ($null -ne $extension.PropertyStoreEntries)
						{
							Populate-SPS1 -Node $extensionNode -SPS1properties @($extension.PropertyStoreEntries)
						}
						if ($null -ne $extension.EmbeddedIdList)
						{
							Populate-ItemIdListItems -ItemIDListNode $extensionNode -ItemIdList @($extension.EmbeddedIdList)
						}
						if ($null -ne $extension.extData)
						{
							$rawext = $extensionNode.Nodes.Add("extData", "Extension Data")
							$rawext.Tag = @($extension.extData)
							$rawext.ToolTipText = "Right click to copy the raw (Hex) data ($($extension.extData.length))"
							$rawext.ForeColor = 'Peru'
						}
						$x++
					}
				}
				if ($null -ne $ItemIdList[$ic].EmbeddedIdList)
				{
					Populate-ItemIdListItems -ItemIDListNode $IDListItemsNode.Nodes["IDListItem$($ic)"] -ItemIdList @($ItemIdList[$ic].EmbeddedIdList)
				}
				if ($null -ne $ItemIdList[$ic].ExtType)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ExtType", "Extension Type: $($ItemIdList[$ic].ExtType)")
				}
				if ($null -ne $ItemIdList[$ic].TargetCreated)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("TargetCreated", "Target Created: $($ItemIdList[$ic].TargetCreated)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["TargetCreated"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].TargetAccessed)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("TargetAccessed", "Target Accessed: $($ItemIdList[$ic].TargetAccessed)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["TargetAccessed"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].ShortCutCreated)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ShortCutCreated", "LNK Created: $($ItemIdList[$ic].ShortCutCreated)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["ShortCutCreated"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].ZipIndex)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ZipIndex", "ZipIndex: $($ItemIdList[$ic].ZipIndex)")
				}
				if ($null -ne $ItemIdList[$ic].NameLength -and $ItemIdList[$ic].NameLength -gt 0)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NameLength", "Name Length: $($ItemIdList[$ic].NameLength)")
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Name", "Name: $($ItemIdList[$ic].Name)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Name"].ForeColor = 'Yellow'
				}
				if ($null -ne $ItemIdList[$ic].ParentLength -and $ItemIdList[$ic].ParentLength -gt 0)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ParentLength", "Parent Name Length: $($ItemIdList[$ic].ParentLength)")
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Parent", "Parent Name: $($ItemIdList[$ic].Parent)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Parent"].ForeColor = 'PaleGreen'
				}
				if (!!$ItemIdList[$ic].EmbeddedItems -and $ItemIdList[$ic].EmbeddedItems.count -ge 1)
				{
					$e = 0
					foreach ($embeddeditem in $ItemIdList[$ic].EmbeddedItems)
					{
						$embedded = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("EmbeddedItem$($e)", "Embedded Item: #$($e) Type: [$($embeddeditem.ItemIDType)]")
						$embedded.ForeColor = 'Violet'
						foreach ($embeddedproperty in $embeddeditem.psobject.Properties)
						{
							if ($embeddedproperty.Name -eq 'ItemIdExtensions')
							{
								$x = 0
								Foreach ($extension in $embeddedproperty.Value)
								{
									$extensionNode = $embedded.Nodes.Add("itemIdExtType", "Extension #$($x) Type: [$($extension.itemIdExtType)]")
									$extensionNode.ForeColor = 'Plum'
									if ($extension.NewExtension -eq $true)
									{
										$extensionNode.BackColor = 'Yellow'
										$extensionNode.ForeColor = 'Black'
									}
									$null = $extensionNode.Nodes.Add("ExtentionSize", "Extension Size: $($extension.extLength)")
									$null = $extensionNode.Nodes.Add("ExtentionVersion", "Extension Version: $($extension.extversion)")
									if ($null -ne $extension.Unicode_Name)
									{
										$Unicode_Name = $extensionNode.Nodes.Add("Unicode_Name", "Unicode Name: $($extension.Unicode_Name)")
										$Unicode_Name.ForeColor = 'PaleGreen'
									}
									if ($null -ne $extension.DocumentType)
									{
										$null = $extensionNode.Nodes.Add("DocumentType", "Document Type: $($extension.DocumentType)")
									}
									if ($null -ne $extension.w32Created)
									{
										$w32CreatedNode = $extensionNode.Nodes.Add("w32Created", "Created: $($extension.w32Created)")
										$w32CreatedNode.ForeColor = 'Cyan'
									}
									if ($null -ne $extension.w32Accessed)
									{
										$w32AccessedNode = $extensionNode.Nodes.Add("w32Accessed", "Accessed: $($extension.w32Accessed)")
										$w32AccessedNode.ForeColor = 'Cyan'
									}
									if ($null -ne $extension.MFTRecordNr)
									{
										$MFTRecordNrNode = $extensionNode.Nodes.Add("MFTRecordNr", "MFT Record Nr: $($extension.MFTRecordNr)")
										$MFTRecordNrNode.ForeColor = 'Orange'
										$MFTRecordSeqNr = $extensionNode.Nodes.Add("MFTRecordSeqNr", "MFT Record Sequence Nr: $($extension.MFTRecordSeqNr)")
										$MFTRecordSeqNr.ForeColor = 'Orange'
									}
									if ($null -ne $extension.ReparsePointTag -and !!$reparsefilter["$($extension.ReparsePointTag)"] <#$ItemIdList[$ic].Attributes -match "Reparse_Point" <#$extension.ReparsePointTag -ne '00000000'#>)
									{
										$null = $extensionNode.Nodes.Add("ReparsePointTag", "Reparse Point Tag: 0x$($extension.ReparsePointTag) => $($reparsefilter[$extension.ReparsePointTag])")
										$extensionNode.Nodes["ReparsePointTag"].ForeColor = 'LimeGreen'
									}
									if ($null -ne $extension.Unknown -and $extension.Unknown -ne '0x00000000')
									{
										$null = $extensionNode.Nodes.Add("Unknown", "Unknown value: $($extension.Unknown)")
									}
									elseif ($null -ne $extension.Reparse_Tag_Unknown)
									{
										$null = $extensionNode.Nodes.Add("Unknown", "Unknown value: $($extension.Reparse_Tag_Unknown)")
									}
									if ($null -ne $extension.Unknown_1 -and $extension.Unknown_1 -ne '0x00000000')
									{
										$null = $extensionNode.Nodes.Add("Unknown_1", "Unknown value #1: $($extension.Unknown_1)")
									}
									if ($null -ne $extension.Unknown_2 -and $extension.Unknown_2 -ne '0x000000000000')
									{
										$null = $extensionNode.Nodes.Add("Unknown_2", "Unknown value #2: $($extension.Unknown_2)")
									}
									if ($null -ne $extension.Unknown_3 -and $extension.Unknown_3 -ne '0x00000000')
									{
										$null = $extensionNode.Nodes.Add("Unknown_3", "Unknown value #3: $($extension.Unknown_3)")
									}
									$x++
								}
							}
							elseif ($embeddedproperty.Name -eq 'Timestamp')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'Cyan'
							}
							elseif ($embeddedproperty.Name -eq 'Parent')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'PaleGreen'
							}
							elseif ($embeddedproperty.Name -eq 'Name')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'Yellow'
							}
							elseif ($embeddedproperty.Name -eq 'w32Modified' -and $null -ne $embeddedproperty.Value)
							{
								$w32Modifiednode = $embedded.Nodes.Add("w32Modified", "Modified): $($embeddedproperty.Value)")
								$w32Modifiednode.ForeColor = 'Cyan'
							}
							elseif ($embeddedproperty.Name -eq 'Data')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "Embedded Item $($embeddedproperty.Name)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'Peru'
								$embedded.Nodes["$($embeddedproperty.Name)"].Tag = @($embeddedproperty.Value)
								$embedded.Nodes["$($embeddedproperty.Name)"].ToolTipText = "Right click to copy the raw (Hex) data ($($embeddedproperty.Value.length))"
							}
							elseif ($embeddedproperty.Name -eq 'Filesize' -and $embeddedproperty.Value -eq $null)
							{
								continue
							}
							else
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								if ($embeddedproperty.Name -eq 'Ansi_Name') { $embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'PaleGreen' }
							}
						}
						$e++
					}
				}
				$raw = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("RawHexData", "ItemID Data") 
				$raw.Tag = @($ItemIdList[$ic].Data)
				$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($ItemIdList[$ic].Data.length/2))"
				$raw.ForeColor = 'Peru'
			}
		}
	} # Populate-ItemIdListItems
	
	<#
		.SYNOPSIS
			Decodes an ObjectID GUID
		
		.DESCRIPTION
			Decodes an ObjectID GUID to:
			
			- Formatted ObjectID GUID
			- Version
			- Variant
			- Sequence Nr
			- Created Timestamp (UTC)
			- MAC Address
		
		.PARAMETER Hex
			A description of the Hex parameter.
		
		.EXAMPLE
			PS C:\> Get-ObjectIdFromHex
		
		.OUTPUTS
			System.Management.Automation.PSObject
		
		.NOTES
			Additional information about the function.
	#>
	function Get-ObjectIdFromHex
	{
		[CmdletBinding()]
		[OutputType([pscustomobject])]
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$Hex
		)
		
		try
		{
			# remove 0x and extra spaces
			$Hex = $Hex -replace " ", ""
			$Hex = $Hex.trim() -replace '\s', ''
			
			# check length
			if ($hex.length -ne 32) { return }
			
			# prepare output pscustomobject	
			$PS_ObjectID = [PSCustomObject]@{ }
			
			# Object ID
			$objid = $Hex -replace '(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)', '$4$3$2$1-$6$5-$8$7-$9$10-'
			$ObjectID = [System.GUID]::Parse($objid).Guid.ToUpper()
			
			# Add to pscustomobject			
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'ObjectID' -Value $ObjectID
			
			$version = [Convert]::ToUInt64("0x$($hex.Substring(14, 1))", 16)
			$vs = [convert]::ToString("0x$($objid.Substring(19, 4))", 2)
			$variant = [Convert]::ToInt16($vs.Substring(0, 2), 2)
			$Sequence = [Convert]::ToInt16($vs.Substring(2, 14), 2)
			
			# Add to pscustomobject		
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Version' -Value $version
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Variant' -Value $variant
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Sequence' -Value $Sequence
			
			# Get MAC address & Timestamp
			if ($objid.Substring(14, 1) -eq 1)
			{
				# Get the Date
				# Get the first 16 bytes 
				$tm = $hex.Substring(0, 16)
				# Replace the Version nimble (14) with 0
				$tm = $tm.Remove(14, 1).Insert(14, '0')
				# Reverse Endianess
				$tm = $tm -split "(..)" -ne ""
				[Array]::Reverse($tm)
				$tm = $tm -join ""
				# Convert to Decimal
				$timedec = [Convert]::ToUInt64("0x$($tm)", 16)
				# Get offsets from 1582 & 1601
				$1582offset = (New-Object DateTime(1582, 10, 15, 0, 0, 0)).Ticks
				$1601offset = (New-Object DateTime(1601, 1, 1, 0, 0, 0)).Ticks
				# Calculate the Date after substracting the two Date offsets
				$ObjectIdCreated = [datetime]::FromFileTimeUtc($timedec - ($1601offset - $1582offset)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
				
				# Add to pscustomobject	
				$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Created' -Value $ObjectIdCreated
				
				# Format MAC
				$mac = ($hex.Substring(20, 12) -split "(..)" -ne "") -join ":"
				
				# Add to pscustomobject	
				$PS_ObjectID | Add-Member -Type NoteProperty -Name 'MAC' -Value $mac
			}
			# output
			$PS_ObjectID
		}
		catch { $null }
	} # End Get-ObjectIdFromHex
	
	function Get-GUIDfromHexString
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$Hex
		)
		
		if ($Hex.Length -in (32,47) -and !![System.Text.RegularExpressions.Regex]::IsMatch($Hex, '[a-fA-F1-9]'))
		{
			
			try
			{
				# remove 0x and extra spaces
				$Hex = $Hex -replace " ", ""
				$Hex = $Hex.trim() -replace '\s', ''
				# Convert Hex String to GUID
				$guidhex = $Hex.Replace('-', '') -replace '(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)', '$4$3$2$1-$6$5-$8$7-$9$10-'
				$GUID = [System.GUID]::Parse($guidhex).Guid.ToUpper()
				Return $GUID
			}
			catch { return $null }
		}
		else { return $null }
	} # Get-GUIDfromHexString
	
	function DosDateTime-FromHex
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$Hex
		)
		
		$hex_time = "0x$(($hex -split "(....)")[1])"
		$hex_date = "0x$(($hex -split "(....)")[3])"
		
		$bin_t = [Convert]::ToString($hex_time, 2).padleft(16, '0')
		$bin_d = [Convert]::ToString($hex_date, 2).padleft(16, '0')
		
		$hour = $bin_t.substring(0, 5)
		$minutes = $bin_t.substring(5, 6)
		$seconds = $bin_t.substring(11, 5)
		$Time = "$([Convert]::toInt32($hour, 2)):$([Convert]::toInt32($minutes, 2)):$([Convert]::toInt32($seconds, 2) * 2)"
		
		$year = $bin_d.substring(0, 7)
		$month = $bin_d.substring(7, 4)
		$day = $bin_d.substring(11, 5)
		$Date = "$([Convert]::toInt32($day, 2))/$([Convert]::toInt32($month, 2))/$([Convert]::toInt32($year, 2) + 1980)"
		try	{ $DosDate = [System.DateTime]::Parse("$($Date) $($Time)", [System.Globalization.CultureInfo]::GetCultureInfo("el-GR"))	} #	Get-Date "$($Date) $($Time)" -Format s
		catch { $DosDate = $null }
		
		return $DosDate
	} # DosDateTime-FromHex
	
	# Type [00] Removable Storage (eg Canon Camera)
	$unknown_sigs = @(
		"48050520"
		"48050520"
		"B2020620"
		"00000500"
		"70050520"
		"C2020620"
		"7C010620"
		"56040520"
		"DC020620"
		"BC020620"
	)
	
	function Get-Ext_00 # Variants
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$ClassType = [System.BitConverter]::ToString($ByteArray[1])
		$Signature = [System.BitConverter]::ToString($ByteArray[2 .. 5]) -replace '-', ''
		
		if ($Signature -eq '47465349') # GFSI
		{
			$CLSID = if ($ByteArray -ge 22) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[6 .. 21]))" }
			else { $null }
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'CLSID'	     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
			}
		}
		elseif ($Signature -eq '1A00EEBB') # Embedded ITemID items 1 + extensions
		{
			$Attributes = Get-Attributes -Bytes $ByteArray[8 .. 11]
			$CLSID = if ($ItemIDSize -ge 28) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }	else { $null }
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'Attributes' = $Attributes
				'CLSID'	     = if ($CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else { $null }
			}
			if ($ItemIDSize -ge 38)
			{
				$idx = 30
				$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
			} # end if 
		}
		elseif ($Signature -eq '4175674D') # Embedded ITemID items 2 # AugM
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			
			if ($ItemIdListItem.ItemIDSize -ge 18)
			{
				$EmbeddedItemIDs = [System.Collections.ArrayList]::new()
				$idx = 14
				while ($idx -lt ($ItemIdListItem.ItemIDSize - 14))
				{
					$itemSize = [Bitconverter]::ToUInt16($ByteArray[($idx) .. ($idx + 1)], 0)
					if ($itemSize -eq 0) { break }
					$null = $EmbeddedItemIDs.Add([ShellLink.Structures.ItemID]::FromByteArray($ByteArray[$idx .. ($idx + $itemSize - 1)]))
					$idx = $idx + $itemSize + 2
					if ($idx -ge ($ItemIdListItem.ItemIDSize - 14)) { break }
				}
				if ($EmbeddedItemIDs.Count -ge 1)
				{
					$EmbeddedIdList = [System.Collections.ArrayList]::new()
					foreach ($EmbeddedItemID in $EmbeddedItemIDs)
					{
						$linkItem = Get-LinkTargetIDList -ItemIdListItem $EmbeddedItemID
						$null = $EmbeddedIdList.Add($linkItem)
					}
					$ItemIdListProperties| Add-Member -MemberType NoteProperty -Name 'EmbeddedIdList' -Value $EmbeddedIdList
				}
			}
			
		}
		elseif ($Signature -eq 'FFFFFFFF') # Path/Description
		{
			try
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIDSize
					'ItemIDType' = $ItemIDType
					'Signature'  = "0x$($Signature)"
				}
				$Attributes = Get-Attributes -Bytes $ByteArray[6 ..7]
				$pathSize =  [System.Bitconverter]::ToUInt16($ByteArray[8 ..9],0)
				$Path = [System.Text.Encoding]::UTF8.GetString($ByteArray[10 .. (10+ $pathSize-1)])
				$Description = [System.Text.Encoding]::UTF8.GetString($ByteArray[(10 + $pathSize) .. ($ItemIDSize - 1)])
			
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Path' -Value $Path
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Attributes' -Value $Attributes
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Description' -Value $Description
			}
			catch
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIDSize
					'ItemIDType' = $ItemIDType
					'Signature'  = "0x$($Signature)"
				}
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq '338B0123') # PropertyStore 1
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$CLSID = if ($ByteArray -ge 28) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }
			else { $null }
			$CLSID0 = if ($ByteArray -ge 43) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[28 .. 43]))" }
			else { $null }
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'GUID'	     = if ($CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else { $null }
				'CLSID'	     = if ($CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else { $null }
			}
			if ($ItemIDSize -ge 56 -and [System.Text.Encoding]::ASCII.GetString($ByteArray[52..55]) -eq '1SPS')
			{
				$ExtraData = $ByteArray[44 .. ($ItemIDSize - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -in ('81191410')) # PropertyStore 2 - may have Delegate ID List
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			if ($ItemIDSize -gt 48)
			{
				$ExtraData = $ByteArray[40 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				$TotalSPSize = $null
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					$TotalSPSize = $TotalSPSize + $property.'Storage Size'
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				
				if (($ExtraData.Count - $TotalSPSize) -ge 8)
				{
					$extData = $ExtraData[$TotalSPSize .. ($ExtraData.count - 1)]
					$idx = $extData.IndexOf($extData.Where{ $_ -ne 0 }[0])
					$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $extData -idx $idx
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
				}
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq '1F00A104') # PropertyStore 3 (Autolist)
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			
			if ($ItemIDSize -ge 27)
			{
				$ExtraData = $ByteArray[16 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				$TotalSPSize = $null
				if (!!$Items)
				{
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
						$TotalSPSize = $TotalSPSize + $property.'Storage Size'
					}
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				if (($ExtraData.Count - $TotalSPSize) -ge 8)
				{
					$extData = $ExtraData[$TotalSPSize .. ($ExtraData.count - 1)]
					$idx = $extData.IndexOf($extData.Where{ $_ -ne 0 }[0])
					$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $extData -idx $idx
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
				}
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -in ('00EEEBBE', 'BBAF933B', '26017719', '02087619', '14038719', '99671245')) # PropertyStore 4
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'Attributes' = $Attributes
			}
			
			if ($ItemIDSize -gt 23)
			{
				$ExtraData = $ByteArray[12 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -in ('14001F58')) # PropertyStore 5 + Embedded IDlist (offset 0)
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$CLSID = if ($ByteArray -ge 24) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[8 .. 23]))" }else { $null }
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'CLSID'	     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
			}
			
			if ($ItemIDSize -gt 46)
			{
				$ExtraData = $ByteArray[38 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				$1SPS_StorageSize = [int]$ByteArray[24]
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				
				if (($ByteArray.count - $1SPS_StorageSize -24) -gt 0)
				{
					$indx = 24 + $1SPS_StorageSize
					#try to add any other ItemIDs
					try
					{
						$EmbeddedIdList = @(Get-EmbeddedIDList -ByteArray $ByteArray[($indx)..($ByteArray.count - 1)] -Index 0) 
						# Add the embedded items
						if ($EmbeddedIdList.Count -ge 1)
						{
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "EmbeddedIdList" -Value $EmbeddedIdList
							$extData = [System.BitConverter]::ToString($ByteArray[($indx) .. ($ByteArray.count - 1)]) -replace '-', ''
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						} # end embedded items 
						else
						{
							$extData = [System.BitConverter]::ToString($ByteArray[($indx) .. ($ByteArray.count - 1)]) -replace '-', ''
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						}
					}
					catch { $null }
				}
			}
			
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -in ('41505053', '45740304')) # PropertyStore 6 # APPS => May have extensions
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			if ($ItemIDSize -gt 28)
			{
				$ExtraData = $ByteArray[16.. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				$TotalSPSize = $null
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					$TotalSPSize = $TotalSPSize + $property.'Storage Size'
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				
				if (($ExtraData.Count - $TotalSPSize) -ge 8)
				{
					$extData = $ExtraData[$TotalSPSize .. ($ExtraData.count - 1)]
					$idx = $extData.IndexOf($extData.Where{ $_ -ne 0 }[0])
					$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $extData -idx $idx
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
				} 
			}
			
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -in ('70190801')) # PropertyStore 7 - Control Panel 
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$Attributes = Get-Attributes -Bytes $ByteArray[12 .. 15]
			$CLSID = if ($ByteArray -ge 32) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[16 .. 31]))" }
			else { $null }
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'Attributes' = $Attributes
				'CLSID'	     = if ($CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else { $null }
			}
			if ($ItemIDSize -gt 60)
			{
				$ExtraData = $ByteArray[48 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq 'EEBBFE23' <#-and [System.BitConverter]::ToString($ByteArray[2]) -eq 26#>) # '1A'
		{
			$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }	else { $ClassType }
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
			$CLSID0 = if ($ItemIdListItem.ItemIDSize -ge 27) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }
			else { $null }
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'	 = $ItemIDSize
				'ItemIDType'	 = $ItemIDType
				'SortOrderIndex' = $Class
				'Signature'	     = "0x$($Signature)"
				'Atrributes'	 = $Attributes
				'GUID'		     = if ($CLSID0) { Get-FolderDescription -CLSIDstring $CLSID0 }else { $null }
			}
			if ($ItemIDSize -ge 38)
			{
				if ([System.BitConverter]::ToString($ByteArray[32 .. 35]) -eq '31-53-50-53') # 1SPS
				{
					$ExtraData = [System.BitConverter]::GetBytes([uint32]0) + $ByteArray[28 .. ($ItemIDSize - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					$1SPS_StorageSize = 0
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
						# Get SPS size
						$1SPS_StorageSize = $1SPS_StorageSize + $property.'Storage Size' + 6
					}
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				else
				{
					$idx = 30
					$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
				}
			} # end if 
		} # End of 0x1A
		elseif ([System.BitConverter]::ToString($ByteArray[20 .. 23]) -eq '31-53-50-53') # 1SPS
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'	 = $ItemIDSize
				'ItemIDType'	 = $ItemIDType
				'SortOrderIndex' = $Class
				'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
			}
			
			if ($ItemIDSize -gt 23)
			{
				
				$ExtraData = $ByteArray[12 .. ($ItemIDSize - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				$1SPS_StorageSize = 0
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					# Get SPS size
					$1SPS_StorageSize = $1SPS_StorageSize + $property.'Storage Size' + 6
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				
				if (($ItemIDSize - $1SPS_StorageSize) -gt 0)
				{
					$indx = $ItemIDSize - $1SPS_StorageSize -4
					
					#try to add any other ItemIDs
					try
					{
						$EmbeddedIdList = @(Get-EmbeddedIDList -ByteArray $ByteArray[($indx)..($ItemIDSize - 1)])
						
						# Add the embedded items
						if ($EmbeddedIdList.Count -ge 1)
						{
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "EmbeddedIdList" -Value $EmbeddedIdList
							$extData = [System.BitConverter]::ToString($ByteArray[($indx) .. ($ItemIDSize - 1)]) -replace '-', ''
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						} # end embedded items 
						else
						{
							$extData = [System.BitConverter]::ToString($ByteArray[($indx) .. ($ItemIDSize - 1)]) -replace '-', ''
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						}
					}
					catch { $null }
				}
				
			} # end 1SPS
		}
		elseif ($Signature -eq '00000000' -and $ByteArray[18 .. 19].Contains([byte]16)) # if Attribute => Directory
		{
			try
			{
				$type = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
				$Attributes = Get-Attributes -Bytes $ByteArray[18..21]
				$Timestamp = [System.Text.Encoding]::Unicode.GetString($ByteArray[22 .. 53])
				$ZipIndex = [System.BitConverter]::ToUInt16($ByteArray[54 .. 55], 0)
				$ParentLength = [System.BitConverter]::ToUInt16($ByteArray[62 .. 63], 0)
				$NameLength = [System.BitConverter]::ToUInt16($ByteArray[58 .. 59], 0)
				$Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[66 .. (66 + $NameLength * 2 - 1)])
				$pidx = 66 + $NameLength * 2 + 2
				$Parent = if ($ParentLength -gt 0)
				{
					[System.Text.Encoding]::Unicode.GetString($ByteArray[$pidx .. ($pidx + $ParentLength * 2 - 1)])
				}
				else { $null }
				
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize'   = $ItemIDSize
					'ItemIDType'   = $ItemIDType
					'DisplayName'  = $ItemIdListItem.DisplayName
					'Type'		   = $type
					'Attributes'   = $Attributes
					'Timestamp'    = $Timestamp
					'ZipIndex'	   = $ZipIndex
					'ParentLength' = $ParentLength
					'NameLength'   = $NameLength
					'Name'		   = $Name
					'Parent'	   = $Parent
				}
				
				$idx = $pidx + $ParentLength * 2 + 2
				if ($ByteArray.Count -gt $idx)
				{
					try
					{
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
					}
					catch { $null }
				}
			}
			catch
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIDSize
					'ItemIDType' = $ItemIDType
					'Signature'  = "0x$($Signature)"
				}
			}
			
		}
		elseif (([System.BitConverter]::ToString($ByteArray[0 .. 15]) -replace '-', '') -ne '00000000000000000000000000000000' -and $Signature -notin $unknown_sigs)
		{
			try
			{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			# Get Sizes
			$UriSize = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
			$NetworkProviderSize = [System.BitConverter]::ToUInt16($ByteArray[20 .. 21], 0)
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "UriSize" -Value $UriSize
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "NetworkProviderSize" -Value $NetworkProviderSize
			$idx = 22
			
			# Get unicode text
			if ($ItemIDSize -ge ($idx + ($UriSize * 2) + ($NetworkProviderSize * 2)))
			{
				$uri = [System.Text.Encoding]::Unicode.GetString($ByteArray[$idx .. ($idx + ($UriSize * 2) - 1)])
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "URI" -Value $uri
				$idx = 22 + ($UriSize * 2)
				
				if ($NetworkProviderSize -gt 0)
				{
					$NetworkProvider = [System.Text.Encoding]::Unicode.GetString($ByteArray[$idx .. ($idx + ($NetworkProviderSize * 2) - 1)])
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "NetworkProvider" -Value $NetworkProvider
					$idx = 22 + ($UriSize * 2) + ($NetworkProviderSize * 2)
				}
				
				if ($ItemIDSize -gt ($idx + 8))
				{
					try
					{
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
					}
					catch { $null }
				}
			}
			}
			catch
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIDSize
					'ItemIDType' = $ItemIDType
					'Signature'  = "0x$($Signature)"
				}
			}
			
		}
		else
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_00
	
	function Get-Ext_1F # GUID
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ClassType = [System.BitConverter]::ToString($ByteArray[1])
		$ItemIDSize = $ByteArray.count
		
		if ($ItemIDSize -le 18)
		{
			$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }	else { $ClassType }
			$CLSID0 = Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))"
			$CLSID = Get-CLSID -CLSIDstring "$($CLSID0)"
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'	 = $ItemIDSize
				'ItemIDType'	 = $ItemIDType
				'SortOrderIndex' = $Class
				'GUID'		     = $CLSID
			}
		}
		else
		{
			Switch ($ClassType)
			{
				'50'{
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }
					else { $ClassType }
					$CLSID = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
					else { $null }
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ItemIDSize
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
					}
				} # End of 50
				'00'{
					if ([System.BitConverter]::ToString($ByteArray[2]) -eq '2F')
					{
						$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
						$DriveLetter = [System.Text.Encoding]::UTF8.GetString($ByteArray[11 .. 13])
						$idx = 14 + 37
						$CLSID = if ($ByteArray.count -ge 66) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[$idx .. ($idx + 15)]))" }
						else { $null }
						$CLSID0 = if ($ByteArray.count -ge 83) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($idx + 16) .. ($idx + 31)]))" }
						else { $null }
						
						$ItemIdListProperties = [PSCustomObject]@{
							'ItemIDSize' = $ByteArray.Count
							'ItemIDType' = $ItemIDType
							'Class Type' = $ClassType
							'Signature'  = if ($Signature) { "0x$($Signature)" }else { $null }
							'DriveLetter' = $DriveLetter
							'GUID'	     = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else{ $null }
							'CLSID'	     = if (!!$CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else{ $null }
						}
					} # End of 0x2F
					elseif ([System.BitConverter]::ToString($ByteArray[24 .. 25]) -eq 'EF-BE')
					{
						$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }
						else { $ClassType }
						$CLSID = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
						else { $null }
						$ItemIdListProperties = [PSCustomObject]@{
							'ItemIDSize'	 = $ItemIDSize
							'ItemIDType'	 = $ItemIDType
							'SortOrderIndex' = $Class
							'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
						}
						$1stextensionlength = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
						if ($1stextensionlength -ne 0)
						{
							$idx = 18
							# Get the extension(s)
							$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
						} # End extentions
					} # End of 0x05
					elseif ([System.BitConverter]::ToString($ByteArray[20 .. 23]) -eq '31-53-50-53') # 1SPS
					{
						$ItemIdListProperties = [PSCustomObject]@{
							'ItemIDSize'	 = $ItemIDSize
							'ItemIDType'	 = $ItemIDType
							'SortOrderIndex' = $Class
						}
						
						if ($ItemIDSize -gt 23)
						{
							
							$ExtraData = $ByteArray[12 .. ($ItemIDSize - 1)]
							$PropertyStoreEntries = [System.Collections.ArrayList]::new()
							$Items = Get-Ext_SPS1 -ByteArray $ExtraData
							$TotalSPSize = -2
							foreach ($property in $items)
							{
								$PropertyStoreEntry = [PSCustomObject]::new()
								$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
								$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
								$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
								$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
								$TotalSPSize = $TotalSPSize + $property.'Storage Size'
							}
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
							
							if (($ExtraData.Count - $TotalSPSize) -ge 40)
							{
								$extData = $ExtraData[$TotalSPSize .. ($ExtraData.count - 1)]
								$CLSID = if ($ByteArray.count -ge 66) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($extData[0 .. 15]))" }
								else { $null }
								$CLSID0 = if ($ByteArray.count -ge 83) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($extData[16 .. 31]))" }
								else { $null }
								$gu = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }
								else { $null }
								$cl = if (!!$CLSID) { Get-FolderDescription -CLSIDstring $CLSID }
								else { $null }
								$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'GUID' -Value $gu
								$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'CLSID' -Value $cl
								
								$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $extData -idx 32
								#	$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
							}
						}
						
					} # end 1SPS
				} # End of 00
				{ $_ -in ('41', '42', '44', '47', '48') }{
					
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }
					else { $ClassType }
					$CLSID = if ($ByteArray.Count -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
					else { $null }
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ByteArray.count
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
					}
					$1stextensionlength = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
					if ($1stextensionlength -ne 0)
					{
						$idx = 18
						# Get the extension(s)
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
					} # End extentions
				} # End of 44/48
				default {
					try
					{
						$CLSID = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
						else { $null }
					}
					catch { $CLSID = $null }
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ItemIDSize
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
					}
				}
			} # End Switch
		} # end else
		if (!!$ItemIdExtensions)
		{
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_1F
	
	function Get-Ext_23_2E_2F # Dates
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$ClassType = [System.BitConverter]::ToString($ByteArray[1])
		
		if ($ItemIDType -eq '23') # Driveletter
		{
			try
			{
				$DriveLetter = [System.Text.Encoding]::UTF8.GetString($ByteArray[1 .. 4])
				$CLSID0 = if ($ItemIDSize -ge 20 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[5 .. 19] -join ''), '[(0){16}]')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[5 .. 19]))" }
				else { $null }
				$CLSID = if ($ItemIDSize -ge 39) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[23 .. 39]))" }
				else { $null }
				
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize'  = $ItemIDSize
					'ItemIDType'  = $ItemIDType
					'DriveLetter' = $DriveLetter
				}
				if ($null -ne $CLSID0)
				{
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'GUID' -Value (Get-FolderDescription -CLSIDstring $CLSID0)
				}
				if ($null -ne $CLSID)
				{
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'CLSID' -Value (Get-FolderDescription -CLSIDstring $CLSID)
				}
			}
			catch { $null }
		}
		elseif ($ItemIDType -eq '2F') # Driveletter + $CLSID
		{
			try
			{
				$DriveLetter = [System.Text.Encoding]::UTF8.GetString($ByteArray[1 .. 4])
				$CLSID0 = if ($ItemIDSize -ge 20 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[5 .. 19] -join ''), '[(0){16}]')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[5 .. 19]))" }	else { $null }
				$CLSID = if ($ItemIDSize -ge 39) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[23 .. 39]))" }	else { $null }
				
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize'   = $ItemIDSize
					'ItemIDType'   = $ItemIDType
					'DriveLetter'  = $DriveLetter
				}
				if ($null -ne $CLSID0)
				{
					$ItemIdListProperties| Add-Member -MemberType NoteProperty -Name 'GUID' -Value (Get-FolderDescription -CLSIDstring $CLSID0)
				}
				if ($null -ne $CLSID)
				{
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'CLSID' -Value (Get-FolderDescription -CLSIDstring $CLSID)
				}
			}
			catch { $null }
		}
		elseif ($ItemIDType -eq '2E') # CLSID etc
		{
			try
			{
				<#$Signature = [System.BitConverter]::ToString($ByteArray[4..7]) -replace '-', ''#>
				<#if ($Signature -eq '06203108') # Shell Ext Volume (Portable Volume) <============= Not Added Yet
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIDSize
						'ItemIDType' = $ItemIDType
					}
				}#>
				if ($ByteArray[1] -eq [Byte]128 -and $ItemIDSize -ge 18) # 0x80
				{
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }	else { $ClassType }
					$CLSID = Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))"
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIDSize
						'ItemIDType' = $ItemIDType
						'SortOrderIndex' = $Class
					}
					if ($null -ne $CLSID)
					{
						$CLSIDstring = Get-CLSID -CLSIDstring $CLSID
						$Description = if($CLSIDstring -ne $CLSID){ $CLSIDstring}else{ Get-CLSID -CLSIDstring $CLSID}
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'GUID' -Value $Description
					}
					if ($ItemIDSize -ge 26)
					{
						# Get the extension(s)
						$idx = 18
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value $ItemIdExtensions
					}
				}
				elseif ($ByteArray[2] -eq [byte]12) # 0x0C
				{
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }else { $ClassType }
					$CLSID0 = if ($ItemIDSize -ge 32) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[16 .. 31]))" }	else { $null }
					$CLSID = if ($ItemIDSize -ge 48) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[32 .. 47]))" } else { $null }
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'     = $ItemIDSize
						'ItemIDType'     = $ItemIDType
						'SortOrderIndex' = $Class
					}
					if ($null -ne $CLSID0)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'GUID' -Value (Get-FolderDescription -CLSIDstring $CLSID0)
					}
					if ($null -ne $CLSID)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'CLSID' -Value (Get-CLSID -CLSIDstring $CLSID)
					}
				}
				elseif ([System.BitConverter]::ToString($ByteArray[20 .. 23]) -eq '31-53-50-53') # 1SPS
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ItemIDSize
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
					}
					
					if ($ItemIDSize -gt 23)
					{
						
						$ExtraData = $ByteArray[12 .. ($ItemIDSize - 1)]
						$PropertyStoreEntries = [System.Collections.ArrayList]::new()
						$Items = Get-Ext_SPS1 -ByteArray $ExtraData
						foreach ($property in $items)
						{
							$PropertyStoreEntry = [PSCustomObject]::new()
							$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
							$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
							$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
							$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
						}
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
					}
					
				} # end 1SPS
				else
				{
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }
					else { $ClassType }
					$CLSID0 = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
					else { $null }
					$guid = if ($CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }	else { $null }
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ItemIDSize
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
					}
					
					if(!!$guid -and $guid -ne $CLSID0){$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'GUID' -Value $guid}
					
					if ($ItemIDSize -ge 25)
					{
						# Get the extension(s)
						$idx = 18
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value $ItemIdExtensions
					} # end if
				}
			}
			catch
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIDSize
					'ItemIDType' = $ItemIDType
				}
			}
		}
		else
		{
			#	$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }else { $ClassType }
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'	 = $ItemIDSize
				'ItemIDType'	 = $ItemIDType
				'SortOrderIndex' = $Class
			}
		}
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
		
	} # End Get-Ext_2
	
	function Get-Ext_B1 
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[9 .. 6]) -replace '-', '')
		if (!!$w32Modified) { $w32Modified = $w32Modified.ToString("dd-MMM-yyyy HH:mm:ss") }
		$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
		$idx = $ByteArray[12 .. (12 + $ItemIDSize - 1)].IndexOf([byte]'0')
		$Ansi_Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[12 .. ($idx + 12 - 1)])
		
		$idx = 12 + $Ansi_Name.Length + 1
		if ($ByteArray[$idx] -eq [byte]00){$idx = $idx+1}
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDType" -Value $ItemIDType
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDSize" -Value $ItemIDSize
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
		
		# Get the extension(s) if they exist
		if ([System.BitConverter]::ToString($ByteArray[($idx + 6) .. ($idx + 7)]) -eq "EF-BE")
		{
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		}
		else
		{
			# Get the 8.3 Dos Name
			if (($idx + 2) -lt $ItemIDSize)
			{
				$Ansi_8_3_Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[(12 + $Ansi_Name.Length + 1) .. ($ItemIDSize - 1)])
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_8_3_Name" -Value $Ansi_8_3_Name
			}
		}
		
		return $ItemIdListProperties
	} # End Get-Ext_B1 
	
	function Get-Ext_C3 # 3 split
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$Description = $null
		$DescriptionUnicode = $null
		
		$Flags = [System.BitConverter]::ToString($ByteArray[2])
		$TargetString = [System.Text.Encoding]::UTF8.GetString($ByteArray[3 .. ($ItemIDSize - 3)])
		$TargetString2 = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[0 .. ($ItemIDSize - 3)])
		$Extents = [System.Text.RegularExpressions.Regex]::Match($TargetString2, '(\x00\xEF\xBE)')
		$String = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')
		$Path = $String[0]
		$Name = $String[1]
		$start = 3 + $TargetString.IndexOf($String[1]) + $String[1].Length + 1
		
		if ($String.count -ge 3 -and $String[2].length -ge 1) # path, name & description in ANSI
		{
			$Description = $String[2]
			$start = 3 + $TargetString.IndexOf($String[2]) + $String[2].Length + 1
		}
		
		if ($Flags -in ('D5','C1','D1')) # path, name & description in Unicode
		{
			# Get Unicode parts
			if ($String.count -ge 4 -and ($ItemIDSize - $start) -gt 6)
			{
				if ($ByteArray[$start] -eq [byte]00) { $start = $start + 1 }
				$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[$start .. ($ItemIDSize - 3)])
				$String = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')
				
				if ($String.Count -ge 2)
				{
					$PathUnicode = $String[0]
					$NameUnicode = $String[1]
					
					if ($String.count -ge 3 -and $String[2].length -ge 1)
					{
						$DescriptionUnicode = $String[2]
					}
				}
			}
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'		 = $ItemIDSize
				'ItemIDType'		 = $ItemIDType
				'Flags'			     = $Flags
				'Path'			     = $Path
				'Name'			     = $Name
				'Description'	     = $Description
				'PathUnicode'	     = $PathUnicode
				'NameUnicode'	     = $NameUnicode
				'DescriptionUnicode' = $DescriptionUnicode
			}
		}
		else # only path & name
		#	 elseif ($Flags -in 'D1', '81') 
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'  = $ItemIDSize
				'ItemIDType'  = $ItemIDType
				'Flags'	      = $Flags
				'Path'	      = $Path
				'Name'	      = $Name
				'Description' = $Description
			}
		}
		
		if ($Extents.count -ge 1)
		{
			# Get the extension(s)
			$idx = $Extents.index[0] - 5
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			if (!!$ItemIdExtensions)
			{
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
			}
		}
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		$ItemIdListProperties
		
	} # End Get-Ext_C3
	
	function Get-Ext_46 # 2 split
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		try
		{
			$Flags = "0x$([System.BitConverter]::ToString($ByteArray[2]))"
			$TargetString = [System.Text.Encoding]::UTF8.GetString($ByteArray[3 .. ($ItemIDSize - 3)])
			$String = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')
			
			$Name = $String[0]
			$Description = $String[1]
			
			if ($String.count -ge 4 -and $String[2].length -ge 1)
			{
				$start = 3 + $TargetString.IndexOf($String[1]) + $String[1].Length + 1
				
				if (($ItemIDSize - $start) -gt 6)
				{
					$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[$start .. ($ItemIDSize - 3)])
					$String = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')
					if ($String.Count -ge 2)
					{
						$NameUnicode = $String[0]
						$DescriptionUnicode = $String[1]
					}
				}
			}
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'		 = $ItemIDSize
				'ItemIDType'		 = $ItemIDType
				'Flags'			     = $Flags
				'Name'			     = $Name
				'Description'	     = $Description
				'NameUnicode'	     = $NameUnicode
				'DescriptionUnicode' = $DescriptionUnicode
			}
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		}
		catch
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
			}
		}
		
		return $ItemIdListProperties
		
	} # End Get-Ext_46
	
	function Get-Ext_47 # 1 split
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		try
		{
			$Flags = "0x$([System.BitConverter]::ToString($ByteArray[2]))"
			$TargetString = [System.Text.Encoding]::UTF8.GetString($ByteArray[3 .. ($ItemIDSize - 3)])
			$String = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')
			
			$Name = $String[0]
			if ($String.count -ge 2 -and $String[1].length -ge 1)
			{
				$start = 3 + $TargetString.IndexOf($String[0]) + $String[0].Length + 1
				
				if (($ItemIDSize - $start) -gt 6)
				{
					$NameUnicode = [System.Text.Encoding]::Unicode.GetString($ByteArray[$start .. ($ItemIDSize - 3)])
				}
			}
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'		 = $ItemIDSize
				'ItemIDType'		 = $ItemIDType
				'Flags'			     = $Flags
				'Path'			     = $Path
				'Name'			     = $Name
				'NameUnicode'	     = $NameUnicode
			}
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		}
		catch
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
			}
		}
		
		return $ItemIdListProperties
		
	} # End Get-Ext_47
	
	function Get-Ext_31_32 # Folder / File
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$RawFilesize = $null
		if ($ItemIDType -eq '32') # File
		{
			$Filesize = [System.BitConverter]::ToUInt32($ByteArray[2 .. 5], 0).ToString('N0')
			$RawFilesize = $ByteArray[2 .. 5]
		}
		$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[9 .. 6]).Replace('-', ''))
		if(!!$w32Modified){$w32Modified = $w32Modified.ToString("dd-MMM-yyyy HH:mm:ss")}
		$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
		$idx = $ByteArray[12 .. (12 + $ByteArray.Count - 1)].IndexOf([byte]'0')
		$Ansi_Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[12 .. ($idx + 12 - 1)])
		$padding = if (($Ansi_Name.Length % 2) -eq 0) { 2 }
		else { 1 }
		
		if ($ByteArray[($idx + 12 + 1) .. ($idx + 12 + 1 + 8)][0] -ne [byte]0)
		{
			$padding = 0
			$idx = 12 + $Ansi_Name.Length + 1
		}
		else { $idx = 12 + $Ansi_Name.Length + $padding + 2 }
		
		
		<#if (!(($ByteArray[$idx .. ($idx + 15)] -join '') -match '40239190')) # Need to verify again
		{
			
			$CLSID0 = if ($ByteArray.Count -ge 47 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[$idx .. ($idx + 15)] -join ''), '(0){16}')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[$idx .. ($idx + 15)]))" }
			else { $null }
			$CLSID = if ($ByteArray.Count -ge 63 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[($idx + 16) .. ($idx + 31)] -join ''), '(0){16}')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($idx + 16) .. ($idx + 31)]))" }
			else { $null }
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "GUID" -Value "$(if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else { $null })"
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "CLSID" -Value "$(if (!!$CLSID) { Get-CLSID -CLSIDstring $CLSID }	else { $null })"
			$idx = $idx + 32
		}
		else#>if ($padding -eq 0) { $idx = $idx }
		else { $idx = $idx - 2 }
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDType" -Value $ItemIDType
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDSize" -Value $ItemIDSize
		if ($null -ne $Filesize)
		{
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Filesize" -Value $Filesize
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "RawFilesize" -Value $RawFilesize
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
		
		# Get the extension(s) if they exist
		if ([System.BitConverter]::ToString($ByteArray[($idx + 6) .. ($idx + 7)]) -eq "EF-BE")
		{
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		}
		else
		{
			# Get the 8.3 Dos Name
			if (($idx + 2) -lt $ItemIDSize)
			{
				$Ansi_8_3_Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[(12 + $Ansi_Name.Length + 1) .. ($ItemIDSize - 1)])
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_8_3_Name" -Value $Ansi_8_3_Name
			}
		}
		return $ItemIdListProperties
	} # End Get-Ext_31_32
	
	function Get-Ext_35_36  # Folder / File with Unicode ANSI name
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$RawFilesize = $null
		if ($ItemIDType -eq '36') # File
		{
			$Filesize = [System.BitConverter]::ToUInt32($ByteArray[2 .. 5], 0).ToString('N0')
			$RawFilesize = $ByteArray[2 .. 5]
		}
		$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[9 .. 6]) -replace '-', '')
		if (!!$w32Modified) { $w32Modified = $w32Modified.ToString("dd-MMM-yyyy HH:mm:ss") }
		$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
		$TargetString = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[12 .. ($ByteArray.Count - 1)])
		$idx = [System.Text.RegularExpressions.Regex]::Match($TargetString, "(\x00\xEF\xBE)").index
	
		$Ansi_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[12 .. (12+$idx -6)])
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDType" -Value $ItemIDType
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDSize" -Value $ItemIDSize
		if ($null -ne $Filesize)
		{
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Filesize" -Value $Filesize
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
		
		$idx = 12 + $idx -5
		
		# Get the extension(s)
		$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_35_36
	
	function Get-Ext_61
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$Flags = [System.BitConverter]::ToString($ByteArray[1]) -replace '-', ''
		if ($Flags -eq '80') # Unicode string
		{
			$TargetString = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[6 .. ($ByteArray.Count - 1)])
			$end = 6 + [System.Text.RegularExpressions.Regex]::Match($TargetString, "(\x00\x00\x00\x00)").index
			if ($end % 2 -eq 1)
			{
				$idx = $end + 5
			}
			else
			{
				$idx = $end + 4
				$end = $end + 1
			}
			$uri = [System.Text.Encoding]::Unicode.GetString($ByteArray[6 .. $end])
		#	$idx = $end + 5
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ByteArray.Count
				'ItemIDType' = $ItemIDType
				'URI'	     = if ($uri) { $uri }else { $null }
			}
			
			# Get the extension(s)
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		}
		elseif ($Flags -eq '03') #FTP
		{
			try { $Timestamp = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[12 .. 19], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
			catch { $Timestamp = $null }
			$Port = [System.BitConverter]::ToUInt16($ByteArray[36 .. 37], 0)
			$end = $ByteArray[44 .. ($ByteArray.Count - 1)].IndexOf([byte]'0')
			$urilength = [System.BitConverter]::ToUInt16($ByteArray[40 .. 41], 0)
			$Uri = [System.Text.Encoding]::UTF8.GetString($ByteArray[44 .. (44 + $end - 1)])
			$idx = 44 + $end + 1
			try
			{
				$userlength = [System.BitConverter]::ToUInt32($ByteArray[$idx .. ($idx + 3)], 0)
				$username = ([System.Text.Encoding]::GetEncoding(1252).GetString($ByteArray[($idx + 4) .. ($idx + 4 + $userlength - 1)]) -Split '\0')[0]
				# [System.Text.Encoding]::UTF8.GetString($ByteArray[($idx + 4) .. ($idx + 4 + $userlength - 1)])
				try
				{
					$idx = $idx + 4 + $userlength
					$passSize = [System.BitConverter]::ToUInt32($ByteArray[$idx .. ($idx + 3)], 0)
					$Password = ([System.Text.Encoding]::GetEncoding(1252).GetString($ByteArray[($idx + 4) .. ($idx + 4 + $passSize - 1)]) -Split '\0')[0]
					# [System.Text.Encoding]::UTF8.GetString($ByteArray[($idx + 4) .. ($idx + 4 + $passSize - 1)])
				}
				catch { $passSize = $Password = $null }
			}
			catch{ $userlength = $username = $null}
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ByteArray.Count
				'ItemIDType' = $ItemIDType
				'TimeStamp'  = $Timestamp
				'Port'	     = $Port
				'UriSize'    = $urilength
				'URI'	     = $Uri
				'UserSize'   = $userlength
				'Username'   = $username
				'PassSize'   = $passSize
				'Password'   = $Password
			}
		}
		else
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ByteArray.Count
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
			}
		}
		
		return $ItemIdListProperties
	} # End Get-Ext_61
	
	function Get-Ext_71 #Property Store
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		$CLSID = if ($ItemIDSize -ge 28) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }
		else { $null }
		$ItemIdListProperties = [PSCustomObject]@{
			'ItemIDSize'  = $ItemIdListItem.ItemIDSize
			'ItemIDType'  = $ItemIDType
			'CLSID'	      = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
		}
		
		if ($ItemIDSize -ge 36)
		{
			$idx = 28
			# Get the extension(s)
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		}
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
	
		
		return $ItemIdListProperties
	} # End Get-Ext_71
	
	$TypedPropertiesWithUnicodeValues = @(
		'AutolistCacheKey'
		'item_url'
		'title'
		'category'
		'substrate_id'
		'source_id' 
		'resource_id'
		'user_id'
		'web_account_id'
		'location'
		'path'
		'display_path'
		'local_path'
		'kind'
		'type'
		'file_size'
		'is_pinned_synced'
		'sync_attempt_count'
		'creation_timestamp'
		'last_accessed_timestamp'
		'extension'
		'modification_timestamp'
		'activity'  
		'activity_json'
		'app'
		'SyncRootIds'
		'Revision'
		'sharepoint_list_item_id'
		'sharepoint_list_item_unique_id'
		'sharepoint_site_id'
		'sharepoint_web_id'
		'sharepoint_site_url'
		'sharepoint_list_id'
		'onedrive_cid'
		'onedrive_drive_type'
		'onedrive_item_id'
		'onedrive_drive_id'
	)
	
	function Get-Ext_SPS1 # Serialized Property Store 
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		# Property types:
		# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-oleps/2a4589eb-9a23-4a8b-adbd-3e368233c099
		# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-propstore/3453fb82-0e4f-4c2c-bc04-64b4bd2c51ec
		try
		{
			$pc = [PropertyStore.SerializedPropertyStore]::FromByteArray($ByteArray)
			$ItemIdExtensions = [System.Collections.ArrayList]::new()
			
			# https://learn.microsoft.com/en-us/windows/win32/stg/predefined-property-set-format-identifiers
			$FormatIdentifiers = [System.Collections.Hashtable]@{
				'F29F85E0-4FF9-1068-AB91-08002B27B3D9' = 'SummaryInformation'
				'D5CDD502-2E9C-101B-9397-08002B2CF9AE' = 'DocSummaryInformation'
				'D5CDD505-2E9C-101B-9397-08002B2CF9AE' = 'UserDefinedProperties'
				'C73F6F30-97A0-4AD1-A08F-540D4E9BC7B9' = "AutoListPropertyStore"
			}
			
			if ($pc.PropertyStorage.Count -ge 1)
			{
				for ($t = 0; $t -lt $pc.PropertyStorage.Count; $t++)
				{
					$SPropertyStore = [System.Collections.ArrayList]::new()
					$formatID = if (!!$FormatIdentifiers[$pc.PropertyStorage[$t].FormatID.Guid.ToUpper()]) { "$($FormatIdentifiers[$pc.PropertyStorage[$t].FormatID.Guid.ToUpper()]) [$($pc.PropertyStorage[$t].FormatID.Guid.ToUpper())]" }
								else { $pc.PropertyStorage[$t].FormatID.Guid.ToUpper() }
					
					if ($pc.PropertyStorage[$t].PropertyStorage.Count -ge 1)
					{
						for ($p = 0; $p -lt $pc.PropertyStorage[$t].PropertyStorage.Count; $p++)
						{
							$typed = $pc.PropertyStorage[$t].PropertyStorage[$p].TypedPropertyValue
							$tpbytes = $null
							if (([System.String]$typed.Type).Contains('VT_BSTR') -and $null -ne $typed.Value )
							{
								try
								{
									$vl = [Bitconverter]::ToUInt32($typed.Value[0 .. 3], 0)
									if (($vl + 4) -le $typed.Value.length)
									{
										$tpvalue = [System.Text.Encoding]::Unicode.GetString($typed.Value[4 .. (4 + $vl - 1)])
										$tpraw = $null
									}
									else
									{
										$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										$tpraw = $null
									}
								}
								catch
								{
									$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
									$tpraw = $null
								}
							}
							elseif ((([System.String]$typed.Type).Contains('VT_VERSIONED_STREAM') -or ([System.String]$typed.Type).Contains('VT_LPWSTR, VT_VECTOR')) -and $null -ne $typed.Value)
							{
								if ($typed.Value.length -gt 8)
								{
									try
									{
										$tpvalue = ([System.Text.Encoding]::Unicode.GetString($typed.Value[8 .. ($typed.Value.length - 1)]) -Split '\0')[0]
										$tpraw = $null
									}
									catch
									{
										$tpvalue = $null
										$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
									}
								}
								else
								{
									$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
									$tpraw = $null
								}
							}
							elseif (([System.String]$typed.Type).Contains('VT_CY, VT_CLSID') -and $null -ne $typed.Value)
							{
								try
								{
									$sl = $typed.Value[4 .. 7]
									$stringlength = [System.BitConverter]::ToUInt32($sl, 0)
									if ($stringlength -gt 0 -and ($stringlength + 8) -le $typed.Value.count)
									{
										$tpvalue = [System.Text.Encoding]::Unicode.GetString($typed.Value[8 .. (8 + $stringlength - 3)])
									}
									else { $tpraw = $typed.Value }
								}
								catch { $tpraw = $typed.Value }
							}
							elseif ($typed.Value -is [System.DateTime])
							{
								try
								{
									$utc = $typed.Value.ToFileTimeUtc()
									$tpvalue = [datetime]::FromFileTimeUtc($utc).ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
								}
								catch
								{
									$tpvalue = $typed.Value
									$tpraw = $null
								}
							}
							elseif ($typed.Value -is [System.Byte[]])
							{
								$tpvalue = $null
								$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
								# Get Delegate ID List [28636AA6-953D-11D2-B5D6-00C04FD918D0\32] bytes
								if ($pc.PropertyStorage[$t].PropertyStorage[$p].ID -eq 32 -and $pc.PropertyStorage[$t].FormatID.Guid.ToUpper() -eq '28636AA6-953D-11D2-B5D6-00C04FD918D0')
								{
									$tpbytes = $typed.Value
								}
								elseif ($pc.PropertyStorage[$t].PropertyStorage[$p].ID -eq 2 -and $pc.PropertyStorage[$t].FormatID.Guid.ToUpper() -eq '1E3EE840-BC2B-476C-8237-2ACD1A839B22') # System FilterInfo
								{
									$tpbytes = $typed.Value
								}
								elseif ([System.String]$pc.PropertyStorage[$t].PropertyStorage[$p].Name -in ('AutolistCacheTime') -and $typed.Value.count -ge 8)
								{
									try
									{
										# https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/time-time32-time64?view=msvc-170
										$tpb = $typed.Value[4 .. 7]
										$tm = [System.BitConverter]::ToUInt32($tpb, 0)
										$newt = (New-Object DateTime(1970, 1, 1, 0, 0, 0)).AddSeconds($tm)
										if ($newt -is [System.DateTime] -and $newt.Year -le [System.DateTime]::Today.Year)
										{
											$tpvalue = $newt.ToString("dd/MM/yyyy HH:mm:ss")
										}
									}
									catch
									{
										$null
									}
								}
								elseif ([System.String]$pc.PropertyStorage[$t].PropertyStorage[$p].Name -in ('ViewItemsFolder', 'PubItemFolder.ShellItem', 'AutoList'))
								{
									$tpbytes = $typed.Value
								}
								elseif ([System.String]$pc.PropertyStorage[$t].PropertyStorage[$p].Name -in $TypedPropertiesWithUnicodeValues -or ([System.String]$pc.PropertyStorage[$t].PropertyStorage[$p].Name).StartsWith('Accounts') ) # Unicode string
								{
									if ($typed.Value.count -gt 8)
									{
										try
										{
											$tpvalue = [System.Text.Encoding]::Unicode.GetString($typed.Value[8 .. ($typed.Value.count - 1)])
										$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										}
										catch
										{
											$tpvalue = $null
											$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										}
									}
									else
									{
										$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										$tpraw = $null
									}
								}
								elseif (([System.String]$pc.PropertyStorage[$t].PropertyStorage[$p].Name).EndsWith('WriteWebLaunchUrl')) # Unicode string
								{
									if ($typed.Value.count -gt 8)
									{
										try
										{
											$tpvalue = [System.Text.Encoding]::Unicode.GetString($typed.Value[8 .. ($typed.Value.count - 1)])
											$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										}
										catch
										{
											$tpvalue = $null
											$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										}
									}
									else
									{
										$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										$tpraw = $null
									}
								}
							}
							elseif ($typed.Value.GetType().FullName.Contains('System.UInt'))
							{
								$tpvalue = $typed.Value
								$tpraw = $null
							}
							elseif ($typed.Value -is [System.Guid] -and $null -ne $typed.Value)
							{
								try
								{
									$tpvalue = $typed.Value.Guid.ToUpper()
									$tpraw = $null
								}
								catch
								{
									$tpvalue = $typed.Value
									$tpraw = $null
								}
							}
							else
							{
								$tpvalue = $typed.Value
								$tpraw = $null
							}
							
							# Get any other Format Identifier Descriptions
							$fmid = "$($pc.PropertyStorage[$t].FormatID.Guid.ToUpper())\$($pc.PropertyStorage[$t].PropertyStorage[$p].ID)"
							$Description = if(!!$formatIDHashTable[$fmid]){ "$($formatIDHashTable[$fmid]) [$($fmid)]"}else{$null}
							
							$TProperty = [PSCustomObject]@{
								'Type'  = "$($typed.Type) [0x$($typed.Type.value__.ToString('X4'))]"
								'Value' = $tpvalue
								'TBytes'= $tpbytes
								'Raw'   = $tpraw
							}
							$sfgoflags = if ($Description -eq 'SFGAOFlags [28636AA6-953D-11D2-B5D6-00C04FD918D0\25]')
							{Get-SFGAOflags -Flags ($tpvalue/1) -Simgle $true }else{$null}
							$DelegateIDlist = if ($Description -eq 'Delegate ID List [28636AA6-953D-11D2-B5D6-00C04FD918D0\32]' -or $pc.PropertyStorage[$t].PropertyStorage[$p].Name -in ('ViewItemsFolder', 'PubItemFolder.ShellItem', 'AutoList'))
							{Get-DelegateIDlist -ByteArray $tpbytes }else { $null }
													
							$PropertyStoreValues = [PSCustomObject]@{
								'ValueSize' = $pc.PropertyStorage[$t].PropertyStorage[$p].ValueSize
								'NameSize'  = $pc.PropertyStorage[$t].PropertyStorage[$p].NameSize
								'Name'	    = $pc.PropertyStorage[$t].PropertyStorage[$p].Name
								'ID'	    = $pc.PropertyStorage[$t].PropertyStorage[$p].ID
								'Description' = $Description
								'TypedProp'   = $TProperty
								'DelegateIDlist' = $DelegateIDlist
								'SFGOflags' = $sfgoflags
							}
							
							$null = $SPropertyStore.Add($PropertyStoreValues)
						} # End for
					} # end if
									
					$ItemIdExtension = [PSCustomObject]@{
						'Storage Size'  = $pc.PropertyStorage[$t].StorageSize
						'FormatID'	    = $formatID
						'PropertyStore' = $SPropertyStore
					}
					$null = $ItemIdExtensions.Add($ItemIdExtension)
				} # end for
			} #end if PC >= 1
			#	$ItemIdExtensions | Out-String | Out-File -FilePath "$([Environment]::GetFolderPath('Desktop'))\sps.txt" -Encoding utf8 -NoClobber -Append -ErrorAction SilentlyContinue
		}
		catch{ $ItemIdExtensions = [System.Collections.ArrayList]::new()}
		
		return $ItemIdExtensions
		
	} # Get-Ext_SPS1
	
	function Get-Compressed_w32 # Compressed 
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$type = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
		$Attributes = Get-Attributes -Bytes $ByteArray[18..21]
		$Timestamp = [System.Text.Encoding]::Unicode.GetString($ByteArray[22 .. 53])
		$ZipIndex = [System.BitConverter]::ToUInt16($ByteArray[54 .. 55], 0)
		$ParentLength = [System.BitConverter]::ToUInt16($ByteArray[56 .. 57], 0)
		$NameLength = [System.BitConverter]::ToUInt16($ByteArray[58 .. 59], 0)
		$Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[66 .. (66 + $NameLength * 2 - 1)])
		$pidx = 66 + $NameLength * 2 + 2
		$Parent = if ($ParentLength -gt 0)
		{
			[System.Text.Encoding]::Unicode.GetString($ByteArray[$pidx .. ($pidx + $ParentLength * 2 - 1)])
		}
		else { $null }
		
		$ItemIdListProperties = [PSCustomObject]@{
			'ItemIDSize'   = $ItemIDSize
			'ItemIDType'   = $ItemIDType
			'Type'		   = $type
			'Attributes'   = $Attributes
			'Timestamp'    = $Timestamp
			'ZipIndex'	   = $ZipIndex
			'ParentLength' = $ParentLength
			'NameLength'   = $NameLength
			'Name'		   = $Name
			'Parent'	   = $Parent
			'Data'		   = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
		}
		Return $ItemIdListProperties
		
	} # End Get-Compressed_w32
	
	Function Get-ItemIdExtensions
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Byte[]]$ByteArray,
			[Parameter(Mandatory = $true)]
			$idx
		)
		
		# Get the extension(s)
		$ItemIdExtensions = [System.Collections.ArrayList]::new()
		
		While ($ByteArray.Count -gt $idx)
		{
			if($idx -ge $ByteArray.Count){break}
			$extStart = $idx
			$extLength = [System.BitConverter]::ToUInt16($ByteArray[($extStart) .. ($extStart + 1)], 0)
			$extversion = [System.BitConverter]::ToUInt16($ByteArray[($extStart + 2) .. ($extStart + 3)], 0)
			$itemIdExtType = [System.BitConverter]::ToString($ByteArray[($extStart + 7) .. ($extStart + 4)]) -replace '-', ''
			
			$ItemIdExtension = [PSCustomObject]::new()
			$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extLength" -Value $extLength
			$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extversion" -Value $extversion
			$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "itemIdExtType" -Value $itemIdExtType
			
			if ($itemIdExtType -eq 'BEEF0001')
			{
				try
				{
					$Selection = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Selection" -Value $Selection
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$null
				}
			} # End BEEF0001
			elseif ($itemIdExtType -eq 'BEEF0003')
			{
				try
				{
					$CLSID0 = Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart + 8) .. ($extStart + 23)]))"
					$GUID = if ($CLSID0 -eq '0C39A5CF-1A7A-40C8-BA74-8900E6DF5FCD')
								{
									'NoPreviousVersions [0C39A5CF-1A7A-40C8-BA74-8900E6DF5FCD]'
								}
								elseif (!!$CLSID0)
								{
									Get-CLSID -CLSIDstring $CLSID0
								}else { $null }
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0003
			elseif ($itemIdExtType -eq 'BEEF0004') #File/Folder
			{
				try
				{
					$idx = $extStart + 8
					$w32Created = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[($idx + 3) .. ($idx)]) -replace '-', '')
					if (!!$w32Created) { $w32Created = $w32Created.ToString("dd-MMM-yyyy HH:mm:ss") }
					$w32AccessedDate = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[($idx + 7) .. ($idx + 4)]) -replace '-', '')
					if (!!$w32AccessedDate) { $w32Accessed = $w32AccessedDate.ToString("dd-MMM-yyyy HH:mm:ss") }
					$os = [System.BitConverter]::ToUInt16($ByteArray[($idx + 8) .. ($idx + 9)], 0)
					$OSHost = if ($Host_OS[[String]$os]) { $Host_OS[[String]$os] }
					else { "Unknown OS [$($os)]" }
					$unknown = "0x$([System.BitConverter]::ToString($ByteArray[($idx + 10) .. ($idx + 11)]) -replace '-', '')"
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "os" -Value $os
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "w32Created" -Value $w32Created
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "w32Accessed" -Value $w32Accessed
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Host" -Value $OSHost
					
					if ($extversion -ge 9)
					{
						$MFTrecordNr = [System.BitConverter]::ToUInt64(($ByteArray[($idx + 12) .. ($idx + 17)] + $ByteArray[($idx + 10) .. $($idx + 11)]), 0)
						$MFTrecordSeqNr = [System.BitConverter]::ToUInt16($ByteArray[($idx + 18) .. ($idx + 19)], 0)
						$unknown_1 = "0x$([System.BitConverter]::ToString($ByteArray[($idx + 20) .. ($idx + 23)]) -replace '-', '')" # 4 bytes => higher bytes of filesize
						$fsraw = $ByteArray[($idx + 20) .. ($idx + 23)]
						$Reparse_Tag = "$([System.BitConverter]::ToString($ByteArray[($idx + 27) .. ($idx + 24)]) -replace '-', '')" # 4 bytes
						$unknown_2 = "0x$([System.BitConverter]::ToString($ByteArray[($idx + 28) .. ($idx + 33)]) -replace '-', '')" # 6 bytes
						$unknown_3 = "0x$([System.BitConverter]::ToString($ByteArray[($idx + 34) .. ($idx + 37)]) -replace '-', '')" # 4 bytes
						#	$idx = $idx + 20 + 14 # skip null bytes
						#   $unknownyet = "0x$([System.BitConverter]::ToString($ByteArray[($idx) .. ($idx + 3)]) -replace '-', '')"
						$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extstart + 46) .. ($extstart + $extlength - 3)])
						$Unicode_Name = ($TargetString -split '\0')[0]
						$Localized_Name = ($TargetString -split '\0')[1]
					}
					elseif ($extversion -eq 7)
					{
						$MFTrecordNr = [System.BitConverter]::ToUInt64(($ByteArray[($idx + 12) .. ($idx + 17)] + $ByteArray[($idx + 10) .. $($idx + 11)]), 0)
						$MFTrecordSeqNr = [System.BitConverter]::ToUInt16($ByteArray[($idx + 18) .. ($idx + 19)], 0)
						$idx = $idx + 20 + 10 # skip null bytes
						$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($extstart + $extlength - 3)])
						$Unicode_Name = ($TargetString -split '\0')[0]
						$Localized_Name = ($TargetString -split '\0')[1]
					}
					elseif ($extversion -eq 8)
					{
						# Check if record has FAT/MFT record info
						if ($ByteArray[$extStart+20] -ne [byte]0 )
						{
							$MFTrecordNr = [System.BitConverter]::ToUInt64(($ByteArray[($idx + 12) .. ($idx + 17)] + $ByteArray[($idx + 10) .. $($idx + 11)]), 0)
							$MFTrecordSeqNr = [System.BitConverter]::ToUInt16($ByteArray[($idx + 18) .. ($idx + 19)], 0)
							$unknown_1 = "0x$([System.BitConverter]::ToString($ByteArray[($idx + 20) .. ($idx + 23)]) -replace '-', '')" # 4 bytes => higher bytes of filesize
							$fsraw = $ByteArray[($idx + 20) .. ($idx + 23)]
							$Reparse_Tag = "$([System.BitConverter]::ToString($ByteArray[($idx + 27) .. ($idx + 24)]) -replace '-', '')" # 4 bytes
							$unknown_2 = "0x$([System.BitConverter]::ToString($ByteArray[($idx + 28) .. ($idx + 33)]) -replace '-', '')" # 6 bytes
							$idx = $idx +34
						}
						else
						{
							if (($idx + 34) -ge ($idx + $extlength - 7))
							{
								$idx = $idx + 14
							}
							else{ $idx = $idx + 34}
						}
						$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($extstart + $extlength - 3)])
						$Unicode_Name = ($TargetString -split '\0')[0]
						$Localized_Name = ($TargetString -split '\0')[1]
					}
					elseif ($extversion -eq 3)
					{
						$idx = $idx + 12 # skip null bytes
						#	$Unicode_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + ($extstart + $extlength - ($idx) - 1))])
						$Unicode_Name = ([System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + ($extstart + $extlength - 1))]) -Split '\0')[0]
						$idx = $idx + ($Unicode_Name.Length * 2) + 2
						if(($extStart+$extLength-3) -gt $idx)
							{
								$TargetString = [System.Text.Encoding]::UTF8.GetString($ByteArray[($idx) .. ($extstart + $extlength - 3)])
								$Localized_Name = ($TargetString -split '\0')[0]
							}
					}
						
					# This is not accurate !!
					$FileSystem = if ($MFTrecordNr -gt 0 -and $MFTrecordSeqNr -gt 0) { 'NTFS' }
							elseif ($MFTrecordNr -gt 0 -and ($MFTrecordSeqNr -eq 0 -or $MFTrecordSeqNr -eq $null))
							{
								if (!!$w32AccessedDate)
								{
									if ($w32AccessedDate.Minute -eq 0 -and $w32AccessedDate.Second -eq 0 ) { 'FAT' }
									elseif ($w32AccessedDate.Minute -gt 0 -and $w32AccessedDate.Second -gt 0){ 'exFAT\Ext\XFS\SMB\NFS'}
									else { $null }
								}
							}
							else { $null }
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "FileSystem" -Value $FileSystem
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unknown" -Value $unknown
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "MFTrecordNr" -Value $MFTrecordNr
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "MFTrecordSeqNr" -Value $MFTrecordSeqNr
					if (!$fsraw)
					{
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unknown_1" -Value $unknown_1
					}
					else
					{
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "fsraw" -Value $fsraw
					}
					if ($Reparse_Tag -in $reparsefilter.Keys)
					{
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ReparsePointTag" -Value $Reparse_Tag
					}
					else
					{
						$Reparse_Tag_Unknown = $Reparse_Tag
						$Reparse_Tag = $null
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Reparse_Tag_Unknown" -Value $Reparse_Tag_Unknown
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unknown_2" -Value $unknown_2
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unknown_3" -Value $unknown_3
				#	$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unknown" -Value $unknownyet
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unicode_Name" -Value $Unicode_Name
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Localized_Name" -Value $Localized_Name
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0004
			elseif ($itemIdExtType -eq 'BEEF0005') # Embedded IDlist
			{
				try
				{
					$EmbeddedIdList = @(Get-EmbeddedIDList -ByteArray $ByteArray[($extStart+20)..($extStart + $extLength - 1)])
					
					# Add the embedded items
					if ($EmbeddedIdList.Count -ge 1)
					{
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "EmbeddedIdList" -Value $EmbeddedIdList
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					} # end embedded items 
					else
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				
			} # End BEEF0005
			elseif ($itemIdExtType -eq 'BEEF0006')
			{
				try
				{
					$UserName = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 8) .. ($extStart + $extLength - 3)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "UserName" -Value $UserName
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0006
			elseif ($itemIdExtType -eq 'BEEF0010')
			{
				try
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
					$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 16) .. ($extStart + $extLength - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0010
			elseif ($itemIdExtType -eq 'BEEF0014') # Uri_PROPERTY
			{
				try
				{
					$CLSID = if ($extLength -ge 23) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart + 8) .. ($extStart + 8 + 15)]))" }else { $null }
					$GUID = if (!!$CLSID) { Get-CLSID -CLSIDstring $CLSID }	else { $null }
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
					if ($extLength -ge 55)
					{
						$datalength = [System.BitConverter]::ToUInt32($ByteArray[($extStart + 24) .. ($extStart + 27)], 0)
						$NrOfEntries = [System.BitConverter]::ToUInt32($ByteArray[($extStart + 52) .. ($extStart + 55)], 0)
	
						if ((24 + $datalength) -gt $extLength -or $NrOfEntries -eq 0) { return }
						
						$UriEntries = [PSCustomObject]@{ }
						$ix = $extStart + 56
						$n = 0
						while ($n -lt $NrOfEntries )
						{
							$EntryType = [System.BitConverter]::ToUInt32($ByteArray[$ix .. ($ix + 3)], 0)
							$Type = if (!!$UriEntryTypes[[System.String]$EntryType]) { "$($UriEntryTypes[[System.String]$EntryType]) [$($EntryType)]" }	else { $EntryType }
							
							$EntryLength = [System.BitConverter]::ToUInt32($ByteArray[($ix + 4) .. ($ix + 7)], 0)
							
							if (($EntryLength -eq 0) -or (($ix + $EntryLength) -gt ($extStart + $extLength))) { break }
							
							$ix = $ix + 8
							$Entry = if ($EntryType -eq 16 -and $EntryLength -eq 4)
										{
											[System.BitConverter]::ToUInt32($ByteArray[($ix) .. ($ix + 3)], 0)
										}
										else
										{
								[System.Text.Encoding]::Unicode.GetString($ByteArray[($ix) .. ($ix + $EntryLength - 3)])
							}
							$UriEntries | Add-Member -MemberType NoteProperty -Name $Type -Value $Entry
							
							# Get the next entry
							$ix = $ix + $EntryLength
							if ($ix -gt ($extStart+$extLength)) { break }
							$n++
						} # End While 
						
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "UriEntries" -Value $UriEntries
					}
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0014
			elseif ($itemIdExtType -eq 'BEEF000A')
			{
				try
				{
					$EntryNr = [System.BitConverter]::ToInt32($ByteArray[($extStart + 8) .. ($extStart + 11)], 0)
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "EntryNr" -Value $EntryNr
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF000A
			elseif ($itemIdExtType -eq 'BEEF000B')
			{
				try
				{
					# Target Path		
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($extStart + 16) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					
					if ((($extStart + 16) .. ($extStart + 16 + $UnicodeEnd)).count % 2 -eq 0)
					{
						$TargetPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 16) .. ($extStart + 16 + $UnicodeEnd)])
						$idx = $extStart + 16 + $UnicodeEnd + 2 + 1
					}
					else
					{
						$TargetPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 16) .. ($extStart + 16 + $UnicodeEnd - 1)])
						$idx = $extStart + 16 + $UnicodeEnd + 2
					}
					$idx = $idx + 4
					
					# Component
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($idx) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					if ((($idx) .. ($idx + $UnicodeEnd)).count % 2 -eq 0)
					{
						$Component = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd)])
						$idx = $idx + $UnicodeEnd + 2 + 1
					}
					else
					{
						$Component = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd - 1)])
						$idx = $idx + $UnicodeEnd + 2
					}
					
					
					# Component Parameters
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($idx) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					if ((($idx) .. ($idx + $UnicodeEnd)).count % 2 -eq 0)
					{
						$ComponentParameters = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd)])
						$idx = $idx + $UnicodeEnd + 2 + 1
					}
					else
					{
						$ComponentParameters = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd - 1)])
						$idx = $idx + $UnicodeEnd + 2
					}
					
					try { $TargetCreated = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($idx) .. ($idx + 7)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
					catch { $TargetCreated = $null }
					try { $ShortCutCreated = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($idx + 8) .. ($idx + 15)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
					catch { $ShortCutCreated = $null }
					
					$idx = $idx + 16 + (16 - (($idx + 16) % 16))
					
					# Extra Path
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($idx) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					if ((($idx) .. ($idx + $UnicodeEnd)).count % 2 -eq 0)
					{
						$ExtraPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd)])
						$idx = $idx + $UnicodeEnd + 2 + 1
					}
					else
					{
						$ExtraPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd - 1)])
						$idx = $idx + $UnicodeEnd + 2
					}
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "TargetPath" -Value $TargetPath
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Component" -Value $Component
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ComponentParameters" -Value $ComponentParameters
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "TargetCreated" -Value $TargetCreated
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ShortCutCreated" -Value $ShortCutCreated
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ExtraPath" -Value $ExtraPath
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF000B
			elseif ($itemIdExtType -eq 'BEEF001A') # Document Type
			{
				try
				{
					$DocType = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$DocumentType = if ($DocType.StartsWith('AppX')) { Get-XAppName -XAppName $DocType }
					else { $DocType }
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "DocumentType" -Value $DocumentType
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF001A
			elseif ($itemIdExtType -eq 'BEEF001B') # Application
			{
				try
				{
					$Application = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Application" -Value $Application
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF001B
			elseif ($itemIdExtType -eq 'BEEF0013') # Attribute (and maybe guid ?)
			{
				try
				{
					if ($extLength -le 10)
					{
						$Attributes = Get-Attributes -Bytes $ByteArray[($extStart + 8) .. ($extStart + 8 + 1)]
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
					elseif ($extLength -ge 12 -and $extLength -gt 10)
					{
						$Attributes = Get-Attributes -Bytes $ByteArray[($extStart + 8) .. ($extStart + 8 + 3)]
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
					else
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF001B
			elseif ($itemIdExtType -eq 'BEEF001D') # Application Name
			{
				try
				{
					$Application = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Application" -Value $Application
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF001B
			elseif ($itemIdExtType -eq 'BEEF0019')
			{
				try
				{
					$CLSID = if ($extLength -ge 23) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart+8) .. ($extStart+8 + 15)]))" }
					else { $null }
					$CLSID0 = if ($extLength -ge 39) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart+8 + 16) .. ($extStart+8 + 31)]))" }
					else { $null }
					
					$GUID = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else { $null }
					$FolderDesc = if (!!$CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else { $null }
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "CLSID" -Value $FolderDesc
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} # End Try
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} #end catch
			} # end BEEF0019
			elseif ($itemIdExtType -eq 'BEEF0024') # Serialized Property Store
			{
				try
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
					$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 8) .. ($extStart + $extLength - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0024
			elseif ($itemIdExtType -eq 'BEEF0025') # Timestamps + Attributes
			{
				try
				{
					$eidx = $extStart + 8
					$Attributes = Get-Attributes -Bytes $ByteArray[($eidx) .. ($eidx + 3)]
					try { $Created = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($eidx + 4) .. ($eidx + 11)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
					catch { $Created = $null }
					try { $Modified = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($eidx + 12) .. ($eidx + 19)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
					catch { $Modified = $null }
					try { $Accessed = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($eidx + 20) .. ($eidx + 27)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
					catch { $Accessed = $null }
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Created" -Value $Created
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Modified" -Value $Modified
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Accessed" -Value $Accessed
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0025
			elseif ($itemIdExtType -eq 'BEEF0026') # Timestamps + Attributes + 1SPS
			{
				if ([System.Text.Encoding]::UTF8.GetString($ByteArray[($extStart + 12) .. ($extStart + 15)]) -eq '1SPS')
				{
					try
					{
						$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 8) .. ($extStart + $extLength - 1)]
						$PropertyStoreEntries = [System.Collections.ArrayList]::new()
						$Items = Get-Ext_SPS1 -ByteArray $ExtraData
						foreach ($property in $items)
						{
							$PropertyStoreEntry = [PSCustomObject]::new()
							$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
							$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
							$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
							$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
						}
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
					}
					catch
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				else
				{
					try
					{
						$eidx = $extStart + 8
						$Attributes = Get-Attributes -Bytes $ByteArray[$eidx .. ($eidx + 3)]
						try { $Created = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($eidx + 4) .. ($eidx + 11)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
						catch { $Created = $null }
						try { $Modified = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($eidx + 12) .. ($eidx + 19)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
						catch { $Modified = $null }
						try { $Accessed = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($eidx + 20) .. ($eidx + 27)], 0)).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
						catch { $Accessed = $null }
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Created" -Value $Created
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Modified" -Value $Modified
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Accessed" -Value $Accessed
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						
					} # end try
					catch
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					} #end catch
				}
				
			} # End BEEF0026
			elseif ($itemIdExtType -eq 'BEEF0027') # Serialized Property Store
			{
				try
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
					$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 8) .. ($extStart + $extLength - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0027
			elseif ($itemIdExtType -eq 'BEEF0029') # File Attributes
			{
				try
				{
					if ($extLength -le 10){
						$Attributes = Get-Attributes -Bytes $ByteArray[($extStart + 8) .. ($extStart + 8 + 1)]
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
					elseif ($extLength -ge 12 -and $extLength -gt 10 )
					{
						$Attributes = Get-Attributes -Bytes $ByteArray[($extStart + 8) .. ($extStart + 8 + 3)]
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
					else
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0029
			elseif ($itemIdExtType -eq 'BEEF000E') # Embedded IDlist
			{
				try
				{
					$EmbeddedIdList = @(Get-EmbeddedIDList -ByteArray $ByteArray[($extStart + 8)..($extStart + $extLength - 1)])
					
					# Add the embedded items
					if ($EmbeddedIdList.Count -ge 1)
					{
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "EmbeddedIdList" -Value $EmbeddedIdList
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						
					} # end embedded items 
					else
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF000E
			elseif ($itemIdExtType -eq 'BEEF0000') # Removed extension
			{
				$ItemIdExtension.itemIdExtType = "Removed Extension $($itemIdExtType)"
				try
				{
					if ($extLength -ge 28)
					{
						$CLSID = if ($extLength -ge 23) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart + 8) .. ($extStart + 8 + 15)]))" } else { $null }
						$CLSID0 = if ($extLength -ge 39) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart + 8 + 16) .. ($extStart + 8 + 31)]))" }	else { $null }
						
						$GUID = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else { $null }
						$FolderDesc = if (!!$CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else { $null }
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "CLSID" -Value $FolderDesc
					}
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} # end try
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} # end catch
			} # End BEEF0000
			else
			{
				if($itemIdExtType.StartsWith('BEEF'))
				{
					$NewExtension = $true
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "NewExtension" -Value $NewExtension
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				else
				{
					break
				}
				
			} # End Else
			
			if (!!$ItemIdExtension)
			{
				$null = $ItemIdExtensions.Add($ItemIdExtension)
			}
			if (($ByteArray.Count - ($extstart + $extLength)) -lt 4) { break }
			$idx = $extStart + $extLength
			
		} # End While
		
		return $ItemIdExtensions
	} # End Get-ItemIdExtensions
	
	function Get-LinkTargetIdList
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[ShellLink.Structures.ItemID]$ItemIdListItem
		)
		
		$ItemIDType = if ($ItemIdListItem.Data) { [System.BitConverter]::ToString($ItemIdListItem.Data[0]) }else { $null }
		
		try
		{
			if ($ItemIDType -eq '00') # Variable
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_00 -ByteArray $ItemIdListItem.Data
					
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '01') # Control Panel Category
			{
				$Signature = if ($ItemIdListItem.Data.length -ge 5) { [System.BitConverter]::ToString($ItemIdListItem.Data[2 .. 5]) -replace '-', '' }
				else { $null }
				$CP = [System.BitConverter]::ToString($ItemIdListItem.Data[6])
				$CPcategory = if (!!$CPitems[[System.String]$CP]) { "$($CPitems[[System.String]$CP]) [$0x$($CP)]" }
				else { "$0x$($CP)" }
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIdListItem.ItemIDSize
					'ItemIDType' = $ItemIDType
					'Signature'  = if ($Signature) { "0x$($Signature)" }else { $null }
					'CPcategory' = $CPcategory
					'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
				}
			}
			elseif ($ItemIDType -eq '1F') # ShellDesktop
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_1F -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType.Startswith('2')) # -in ('2E', '2F')) # Volume shell item / MyComputer
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_23_2E_2F -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq 'B1')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{}
					$Items = Get-Ext_B1 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -in ('31', '32')) # Folder / File
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{}
					$Items = Get-Ext_31_32 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -in ('35', '36')) # Folder / File with Unicode ANSI name
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{}
					$Items = Get-Ext_35_36 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '61') # CLSID_Internet - URI shell item
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_61 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '71') # GUID
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_71 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			# 0x72 	Printers
			# 0x73 	CommonPlacesFolder
			elseif ($ItemIDType -in ('74','77')) # (74 => Folder/ 77 => File) Delegate folder
			{
				$Signature = [System.BitConverter]::ToString($ItemIdListItem.Data[4 .. 7]) -replace '-', ''
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize'  = $ItemIdListItem.ItemIDSize
					'ItemIDType'  = $ItemIDType
					#	'DisplayName' = $ItemIdListItem.DisplayName
					'$Signature' = [System.Text.Encoding]::UTF8.GetString($ItemIdListItem.Data[4 .. 7])
				}
				
				if ($Signature -eq '43465346') # CFSF
				{
					try
					{
						$data = $ItemIdListItem.Data
						$Guid = $data[4 .. 19]
						$idx = $data[22 .. (22 + $data.Count - 1)].IndexOf([byte]'0')
						$RawFilesize = $null
						if ($ItemIDType -eq '77') # File
						{
							$Filesize = [System.BitConverter]::ToUInt32($data[12 .. 15], 0).ToString('N0')
							$RawFilesize = $data[12 .. 15]
						}
						$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($data[19 .. 16]) -replace '-', '')
						if (!!$w32Modified) { $w32Modified = $w32Modified.ToString("dd-MMM-yyyy HH:mm:ss") }
						$Attributes = Get-Attributes -Bytes $data[20..21]
						$Ansi_Name = [System.Text.Encoding]::UTF8.GetString($data[22 .. ($idx + 22 - 1)])
						$padding = if (($Ansi_Name.Length % 2) -eq 0) { 2 }	else { 1 }
						$idx = 22 + $Ansi_Name.Length + $padding
						
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Unknown" -Value "0x$([System.BitConverter]::ToString($data[8 .. 11]).replace('-', ''))"
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
						if ($null -ne $Filesize)
						{
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Filesize" -Value $Filesize
							$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "RawFilesize" -Value $RawFilesize
						}
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Unknown1" -Value "0x$([System.BitConverter]::ToString($data[($idx) .. ($idx + 1)]).replace('-', ''))"
						
						$GUID1 = Get-CLSID -CLSIDstring (Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($data[($idx + 2) .. ($idx + 17)]))")
						$GUID2 = Get-CLSID -CLSIDstring (Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($data[($idx + 18) .. ($idx + 18 + 15)]))")
						
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Unknown2" -Value "0x$([System.BitConverter]::ToString($data[($idx) .. ($idx + 3)]).replace('-', ''))"
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID1
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "CLSID" -Value $GUID2
						
						$idx = $idx + 34
						
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $data -idx $idx
						
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($data) -replace '-', '')"
					}
					catch
					{
						$extData = [System.BitConverter]::ToString($ItemIdListItem.Data[10 .. ($ItemIdListItem.ItemIDSize - 1)]) -replace '-', ''
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				else
				{
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Data' -Value [System.BitConverter]::ToString($ItemIdListItem.Data).replace('-', '')
				}
			}
			elseif ($ItemIDType -in ('0F', '09', '16', '52') -and $ItemIdListItem.Data[8 .. 9].Contains([byte]16))
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Compressed_w32 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -in ('00', '10', '0E', '08') -and $ItemIdListItem.Data[8 .. 9].Contains([byte]144))
			{
				try
				{
					$ByteArray = $ItemIdListItem.Data
					# Find first not null byte index after byte 8
					$bdata = $ByteArray[9 .. ($ByteArray.Count - 1)]
					$idx = $bdata.IndexOf(($bdata -ne [byte]0)[0])
					$end = $ByteArray[(9 + $idx) .. ($ByteArray.Count - 1)].IndexOf([byte]'0')
					$foldernameAnsi = [System.Text.Encoding]::UTF8.GetString($ByteArray[(9 + $idx) .. (9 + $idx + $end - 1)])
					
					$unidx = 9 + $idx + $end
					$bdata = $ByteArray[$unidx .. ($ByteArray.Count - 1)]
					$idx = $bdata.IndexOf(($bdata -ne [byte]0)[0])
					$foldernameunicode = ([System.Text.Encoding]::Unicode.GetString($ByteArray[($unidx + $idx) .. ($ByteArray.Count - 1)]) -Split '\0')[0]
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	    = $ItemIdListItem.ItemIDSize
						'ItemIDType'	    = $ItemIDType
						'Subfolder Ansi'    = $foldernameAnsi
						'Subfolder Unicode' = $foldernameunicode
						'Data'			    = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
					
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif (($ItemIDType -eq '47' -and $ItemIdListItem.Data[2] -eq [byte]02) -or # NetworkPlaces
				($ItemIDType -in ('47', '46', '41', '42') -and $ItemIdListItem.Data[2] -eq [byte]130) -or
				($ItemIDType -eq '42' -and $ItemIdListItem.Data[2] -eq [byte]194))
			{
				try
				{
					$ByteArray = $ItemIdListItem.Data
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
					
					$Items = ([System.Text.Encoding]::GetEncoding(1252).GetString($ByteArray[3 .. ($ByteArray.Count - 1)]) -Split '\0')
					
					if ($items.count -ge 1)
					{
						$Path = $items[0]
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Path' -Value $Path
					}
					if ($items.count -ge 2)
					{
						$Network = $items[1]
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'NetworkType' -Value $Network
					}
					if ($items.count -ge 3 -and $items[2] -ne [System.Text.Encoding]::UTF8.GetString([byte[]](2, 0)))
					{
						$Device = $items[2]
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Device' -Value $Device
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq 'C3')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_C3 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '46')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_46 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '47')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_47 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
		<#	elseif ($ItemIDType -eq '4C' -and $ItemIdListItem.Data[1] -eq [byte]80)
			{
				$ByteArray = $ItemIdListItem.Data
				$Namelength = [System.BitConverter]::ToUInt16($ByteArray[26 .. 27], 0)*2
				$Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[26..(24+ $Namelength-1)])
				
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIdListItem.ItemIDSize
					'ItemIDType' = $ItemIDType
					'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					'Name'       = $Name
				}
			}#>
			else
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIdListItem.ItemIDSize
					'ItemIDType' = $ItemIDType
					'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
				}
			}
		}
		catch
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIdListItem.ItemIDSize
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
			}
		}
		return $ItemIdListProperties
	} # End Get-LinkTargetIdList
	
	function Get-ShellLinkHeaderfrombyteArray
	{
		[OutputType([string])]
		param
		(
			[Parameter(Mandatory = $true)]
			[Byte[]]$ByteArray
		)
		$Error.Clear()
		# Check the Header Size
		if ($ByteArray[0] -ne '76')
		{
			# [System.Console]::Beep(500,150)
			# Show-ErrorMessage -ErrorMessage "The LNK Header Size is not 76"
			$ShortcutInfo = $null
			$Status.Text = "Invalid LNK header"
			return
		}
		
		try { $ShortcutInfo = [ShellLink.Structures.ShellLinkHeader]::FromByteArray($ByteArray[0 .. 75]) }
		catch [System.Management.Automation.MethodInvocationException]{
			# Show-ErrorMessage -ErrorMessage "[ShellLink] $($Error[0].Exception.InnerException.Message)"
			# $Status.Text = "$($Error[0].Exception.InnerException.Message)"
			$error.Clear()
			$ShortcutInfo = $null
			$Status.Text = "Invalid LNK header"
			return
		}
		catch
		{
			# [System.Console]::Beep(500, 150)
			$ShortcutInfo = $null
			$Status.Text = "Invalid LNK header"
			return
		}
		
		# Get Shotcut Flags
		$LinkFlags = $ShortcutInfo.LinkFlags.ToString()
		
		# Header - Timestamps are stored in UTC
		$fileattributes = if ($ShortcutInfo.FileAttributes -notmatch '^\d+$') { $ShortcutInfo.FileAttributes.ToString().split(',').foreach{ $_.replace('FILE_ATTRIBUTE_', '').ToLower() } }
		elseif ($ShortcutInfo.FileAttributes -match '^\d+$' -and $ShortcutInfo.FileAttributes -ne 0)
		{ (Get-Attributes -Bytes ([System.BitConverter]::GetBytes([System.UInt32]$ShortcutInfo.FileAttributes)) -NoNumber).split(',') }
		else { $null }
		$ShowCommand = if (!!$ShowCommands[[System.String]$ShortcutInfo.ShowCommand.value__]) { $ShowCommands[[System.String]$ShortcutInfo.ShowCommand.value__] }
		else { [System.String]$ShortcutInfo.ShowCommand }
		$creation = if ($ShortcutInfo.creationTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.creationTime).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
		else { $null }
		$access = if ($ShortcutInfo.AccessTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.AccessTime).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
		else { $null }
		$write = if ($ShortcutInfo.WriteTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.WriteTime).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
		else { $null }
		$HotKey = if ($ShortcutInfo.HotKey.Highbyte -eq 0 -and $ShortcutInfo.HotKey.Lowbyte -eq 0) { "----" }
		else { "$($ShortcutInfo.HotKey.Highbyte) + $($ShortcutInfo.HotKey.Lowbyte)" }
		$LnkSize = ($ShortcutInfo.ShellLinkHeader.HeaderSize +
			$ShortcutInfo.LinkInfo.LinkInfoSize +
			$ShortcutInfo.LinkTargetIDList.IDListSize +
			$ShortcutInfo.StringData.StringDataSize +
			$ShortcutInfo.ExtraData.ExtraDataSize)
		$Size = 76
		$LS = if ($ByteArray.Count -gt $Size) { $ByteArray[($Size - 1) .. $ByteArray.Count] }
		else { $null }
		$LinkSlackLength = if (!!$LS) { $ls.length }
		else { $null }
		$LinkSlack = if (!!$LS) { [System.BitConverter]::ToString($LS) -replace '-', '' }
		else { '' }
		
		
		$iconIndex = if ($null -ne $ShortcutInfo.IconIndex)
		{
			if (!!$StockIconIDs[([System.String]($ShortcutInfo.IconIndex))]) { "[$($ShortcutInfo.IconIndex)] $($StockIconIDs[([System.String]($ShortcutInfo.IconIndex))])" }
			else { $ShortcutInfo.IconIndex }
		}
		else { $null }
		
		$linktargets = [PSCustomObject]@{
			# Header
			'Shortcut Size'	       = $Size
			'Header Block Size'    = $Size
			'LinkCLSID'		       = $ShortcutInfo.LinkCLSID
			'Link_Flags'		   = $LinkFlags
			'FileAttributes'	   = $fileattributes
			'CreationTime'		   = $creation
			'AccessTime'		   = $access
			'WriteTime'		       = $write
			'Target File Size'	   = $ShortcutInfo.FileSize.ToString('N0')
			'Icon Idx'			   = $iconIndex
			'ShowCommand'		   = $ShowCommand
			'HotKey'			   = $HotKey
			'LinkSlackLength'	   = $LinkSlackLength
			'LinkSlack'		       = $LinkSlack
		}
		
		return $linktargets
	}
	
	function Get-ShellLinkfrombyteArray
	{
		[OutputType([string])]
		param
		(
			[Parameter(Mandatory = $true)]
			[Byte[]]$ByteArray
		)
		
		$Error.Clear()
		# Check the Header Size
		if ($ByteArray[0] -ne '76')
		{
			# [System.Console]::Beep(500,150)
			# Show-ErrorMessage -ErrorMessage "The LNK Header Size is not 76"
			$Status.Text = "The LNK Header Size is not 76"
			$ShortcutInfo = $null
			return
		}
		
		try
		{
			try { $ShortcutInfo = [ShellLink.Shortcut]::FromByteArray($ByteArray) }
				catch [System.Management.Automation.MethodInvocationException]{
					# Show-ErrorMessage -ErrorMessage "[ShellLink] $($Error[0].Exception.InnerException.Message)"
					# $Status.Text = "$($Error[0].Exception.InnerException.Message)"
					$ShortcutInfo = $null
					$Status.Text = "Invalid LNK"
					return
				}
				catch
				{
					# [System.Console]::Beep(500, 150)
					# Show-ErrorMessage -ErrorMessage "Invalid LNK"
					$Status.Text = "Invalid LNK"
					$ShortcutInfo = $null
					return
				}
		
			# Get Shotcut Flags
			$LinkFlags = $ShortcutInfo.LinkFlags.ToString()
			
			# Header - Timestamps are stored in UTC
			$fileattributes = if ($ShortcutInfo.FileAttributes -notmatch '^\d+$') { $ShortcutInfo.FileAttributes.ToString().split(',').foreach{ $_.replace('FILE_ATTRIBUTE_', '').ToLower() } }
			elseif ($ShortcutInfo.FileAttributes -match '^\d+$' -and $ShortcutInfo.FileAttributes -ne 0)
			{ (Get-Attributes -Bytes ([System.BitConverter]::GetBytes([System.UInt32]$ShortcutInfo.FileAttributes)) -NoNumber).split(',') }
			else { $null }
			$ShowCommand = if (!!$ShowCommands[[System.String]$ShortcutInfo.ShowCommand.value__]) { $ShowCommands[[System.String]$ShortcutInfo.ShowCommand.value__] }
			else { [System.String]$ShortcutInfo.ShowCommand }
			$creation = if ($ShortcutInfo.creationTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.creationTime).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
			else { $null }
			$access = if ($ShortcutInfo.AccessTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.AccessTime).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
			else { $null }
			$write = if ($ShortcutInfo.WriteTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.WriteTime).ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
			else { $null }
			$HotKey = if ($ShortcutInfo.HotKey.Highbyte -eq 0 -and $ShortcutInfo.HotKey.Lowbyte -eq 0) { "----" }
			else { "$($ShortcutInfo.HotKey.Highbyte) + $($ShortcutInfo.HotKey.Lowbyte)" }
			$LnkSize = ($ShortcutInfo.ShellLinkHeader.HeaderSize +
				$ShortcutInfo.LinkInfo.LinkInfoSize +
				$ShortcutInfo.LinkTargetIDList.IDListSize +
				$ShortcutInfo.StringData.StringDataSize +
				$ShortcutInfo.ExtraData.ExtraDataSize)
			$LS = if ($ByteArray.Count -gt $ShortcutInfo.Size) { $ByteArray[($ShortcutInfo.Size - 1) .. $ByteArray.Count] }
			else { $null }
			$LinkSlackLength = if (!!$LS) { $ls.length }
			else { $null }
			$LinkSlack = if (!!$LS) { [System.BitConverter]::ToString($LS) -replace '-', '' }
			else { '' }
			
			$LinkInfoData = if (!!$ShortcutInfo.LinkInfo) { $ShortcutInfo.LinkInfo.GetBytes() }
			else { $null }
			$LinkTargetIDListData = if (!!$ShortcutInfo.LinkTargetIDList) { $ShortcutInfo.LinkTargetIDList.GetBytes() }
			else { $null }
			$StringDataData = if (!!$ShortcutInfo.StringData) { $ShortcutInfo.StringData.GetBytes() }
			else { $null }
			$ExtraDataData = if (!!$ShortcutInfo.ExtraData) { $ShortcutInfo.ExtraData.GetBytes() }
			else { $null }
			
			$iconIndex = if ($null -ne $ShortcutInfo.IconIndex)
			{
				if (!!$StockIconIDs[([System.String]($ShortcutInfo.IconIndex))]) { "[$($ShortcutInfo.IconIndex)] $($StockIconIDs[([System.String]($ShortcutInfo.IconIndex))])" }
				else { $ShortcutInfo.IconIndex }
			}
			else { $null }
			
			$linktargets = [PSCustomObject]@{
				# Header
				'Shortcut Size'	       = $ShortcutInfo.Size
				'Header Block Size'    = $ShortcutInfo.ShellLinkHeader.HeaderSize
				'LinkCLSID'		       = $ShortcutInfo.LinkCLSID
				'Link_Flags'		   = $LinkFlags
				'FileAttributes'	   = $fileattributes
				'CreationTime'		   = $creation
				'AccessTime'		   = $access
				'WriteTime'		       = $write
				'Target File Size'	   = $ShortcutInfo.FileSize.ToString('N0')
				'Icon Idx'			   = $iconIndex
				'ShowCommand'		   = $ShowCommand
				'HotKey'			   = $HotKey
				'LinkSlackLength'	   = $LinkSlackLength
				'LinkSlack'		       = $LinkSlack
				'LinkInfoData'		   = $LinkInfoData
				'LinkTargetIDListData' = $LinkTargetIDListData
				'StringDataData'	   = $StringDataData
				'ExtraDataData'	       = $ExtraDataData
			}
			# ShowCommand:	
			# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow	
			
			# LinkTargetIDList
			if ($LinkFlags.contains('HasLinkTargetIDList'))
			{
				$targetidlistSize = $ShortcutInfo.LinkTargetIDList.IDListSize
				$len = $ShortcutInfo.LinkTargetIDList.Path.Length
				$dcount = $ShortcutInfo.LinkTargetIDList.ItemIDList.displayname.Count
				if ($len -eq 3 -and $dcount -eq 1)
				{
					$linkpath = $displayname = $ShortcutInfo.LinkTargetIDList.Path.ToString()
				}
				elseif ($len -gt 0 -and $dcount -ge 1)
				{
					foreach ($known in $ShellFolders)
					{
						if ($ShortcutInfo.LinkTargetIDList.Path.Contains("$($known.Value)"))
						{
							$linkpath = $ShortcutInfo.LinkTargetIDList.Path.Replace("$($known.Value)", "[$($known.Name)]")
							break
						}
						else { $linkpath = $ShortcutInfo.LinkTargetIDList.Path.ToString() }
					}
					try
					{
						$displayname = if ($dcount -gt 1)
						{
							$ShortcutInfo.LinkTargetIDList.ItemIDList.displayname[$dcount - 1]
						}
						else { $ShortcutInfo.LinkTargetIDList.ItemIDList.displayname }
					}
					catch { $displayname = $ShortcutInfo.LinkTargetIDList.ItemIDList.displayname }
				}
				else
				{
					foreach ($known in $ShellFolders)
					{
						if ($ShortcutInfo.LinkTargetIDList.Path.Contains("$($known.Value)"))
						{
							$linkpath = $ShortcutInfo.LinkTargetIDList.Path.Replace("$($known.Value)", "[$($known.Name)]")
							break
						}
						else { $linkpath = $ShortcutInfo.LinkTargetIDList.Path.ToString() }
					}
					$displayname = $ShortcutInfo.LinkTargetIDList.displayname
				}
				$linktargets | Add-Member -MemberType NoteProperty -Name "TargetID Block Size" -Value $targetidlistSize
				$linktargets | Add-Member -MemberType NoteProperty -Name "Display Name" -Value $displayname
				$linktargets | Add-Member -MemberType NoteProperty -Name "Path" -Value $linkpath
				
				# Add the raw data	
				$ItemIdListItems = [System.Collections.ArrayList]::new()
				if ($ShortcutInfo.LinkTargetIDList.ItemIDList.Count -ge 1)
				{
					foreach ($ItemIdListItem in $ShortcutInfo.LinkTargetIDList.ItemIDList)
					{
						$linkItem = Get-LinkTargetIDList -ItemIdListItem $ItemIdListItem
						$null = $ItemIdListItems.Add($linkItem)
					} # End for each#>
				} # end if count ge 1
				else { $ItemIdListItems = $null }
				$linktargets | Add-Member -MemberType NoteProperty -Name "ItemIdListItems" -Value $ItemIdListItems
			}
			else { $linkpath = $displayname = $null }
			
			# StringData:
			if (!!$ShortcutInfo.StringData)
			{
				$StringDataBlockSize = $ShortcutInfo.StringData.StringDataSize
				$linktargets | Add-Member -MemberType NoteProperty -Name "StringData Block Size" -Value $StringDataBlockSize
				$IsUnicode = $ShortcutInfo.StringData.IsUnicode
				$linktargets | Add-Member -MemberType NoteProperty -Name "StringData IsUnicode" -Value $IsUnicode
				
				#		HasName
				if ($LinkFlags.contains('HasName'))
				{
					$name = $ShortcutInfo.StringData.NameString
					$linktargets | Add-Member -MemberType NoteProperty -Name "NameString" -Value $name
				}
				# 		HasWorkingDir
				if ($LinkFlags.contains('HasWorkingDir'))
				{
					$WorkingDir = $ShortcutInfo.StringData.WorkingDir
					$linktargets | Add-Member -MemberType NoteProperty -Name "Working Dir." -Value $WorkingDir
				}
				#		HasRelativePath
				if ($LinkFlags.contains('HasRelativePath'))
				{
					$RelativePath = $ShortcutInfo.StringData.RelativePath
					$linktargets | Add-Member -MemberType NoteProperty -Name "Relative Path" -Value $RelativePath
				}
				# HasArguments
				if ($LinkFlags.contains('HasArguments'))
				{
					$CommandLineArguments = $ShortcutInfo.StringData.CommandLineArguments
					$cma_length = $ShortcutInfo.StringData.CommandLineArguments.Length
					$linktargets | Add-Member -MemberType NoteProperty -Name "Command Args Length" -Value $cma_length
					$linktargets | Add-Member -MemberType NoteProperty -Name "Command Args" -Value $CommandLineArguments.TrimStart(' ')
				}
				
				# HasIconLocation
				if ($LinkFlags.contains('HasIconLocation'))
				{
					$iconlocation = $ShortcutInfo.StringData.IconLocation
					$linktargets | Add-Member -MemberType NoteProperty -Name "Icon Location" -Value $iconlocation
				}
			}
			
			# LinkInfo
			if ($LinkFlags.contains('HasLinkInfo'))
			{
				$LinkInfoSize = $ShortcutInfo.LinkInfo.LinkInfoSize
				$LinkInfoFlags = $ShortcutInfo.LinkInfo.LinkInfoFlags.ToString()
				$linktargets | Add-Member -MemberType NoteProperty -Name "Link Info Block Size" -Value $LinkInfoSize
				$linktargets | Add-Member -MemberType NoteProperty -Name "Link Info Flags" -Value $LinkInfoFlags
				
				# VolumeID
				if ($LinkInfoFlags.contains('VolumeID'))
				{
					$DriveSerialNumber = $ShortcutInfo.LinkInfo.VolumeID.DriveSerialNumber.tostring('X3')
					$DriveType = $ShortcutInfo.LinkInfo.VolumeID.DriveType.ToString().replace('DRIVE_', '').replace(' ', '')
					$VolumeLabel = $ShortcutInfo.LinkInfo.VolumeID.VolumeLabel
					$linktargets | Add-Member -MemberType NoteProperty -Name "Drive Type" -Value $DriveType
					$linktargets | Add-Member -MemberType NoteProperty -Name "Volume Label" -Value $VolumeLabel
					$linktargets | Add-Member -MemberType NoteProperty -Name "Drive s/n" -Value $DriveSerialNumber
				}
				# LocalBasePath
				if ($LinkInfoFlags.contains('LocalBasePath'))
				{
					$LocalBasePath = $ShortcutInfo.LinkInfo.LocalBasePath
					$LocalBasePathUnicode = $ShortcutInfo.LinkInfo.LocalBasePathUnicode
					$linktargets | Add-Member -MemberType NoteProperty -Name "Local Base Path" -Value $LocalBasePath
					$linktargets | Add-Member -MemberType NoteProperty -Name "Local Base Path Unicode" -Value $LocalBasePathUnicode
				}
				# CommonPathSuffix
				if (!!$ShortcutInfo.LinkInfo.CommonPathSuffix)
				{
					$CommonPathSuffix = $ShortcutInfo.LinkInfo.CommonPathSuffix
					$CommonPathSuffixUnicode = $ShortcutInfo.LinkInfo.CommonPathSuffixUnicode
					$linktargets | Add-Member -MemberType NoteProperty -Name "CommonPathSuffix" -Value $CommonPathSuffix
					$linktargets | Add-Member -MemberType NoteProperty -Name "CommonPathSuffixUnicode" -Value $CommonPathSuffixUnicode
				}
				# CommonNetworkRelativeLink
				if ($LinkInfoFlags.contains('CommonNetworkRelativeLink'))
				{
					$CommonNetworkRelativeLinkFlags = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ToString()
					$linktargets | Add-Member -MemberType NoteProperty -Name "Common Network Relative Link Flags" -Value $CommonNetworkRelativeLinkFlags
					
					# ValidNetType
					if ($CommonNetworkRelativeLinkFlags.Contains('ValidNetType'))
					{
						$NetworkProviderType = ($ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.NetworkProviderType).ToString('X')
						$NetworkProvider = if (!!$($Vendors[$NetworkProviderType])) { "0x$($NetworkProviderType) ($($Vendors[$NetworkProviderType]))" }
						else { "0x$($NetworkProviderType)" }
						$linktargets | Add-Member -MemberType NoteProperty -Name "NetworkProviderType" -Value $NetworkProvider
					}
					$NetName = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.NetName
					$NetNameUnicode = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.NetNameUnicode
					$linktargets | Add-Member -MemberType NoteProperty -Name "NetName" -Value $NetName
					$linktargets | Add-Member -MemberType NoteProperty -Name "NetName Unicode" -Value $NetNameUnicode
					
					# ValidDevice
					if ($CommonNetworkRelativeLinkFlags.Contains('ValidDevice'))
					{
						$DeviceName = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.DeviceName
						$DeviceNameUnicode = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.DeviceNameUnicode
						$linktargets | Add-Member -MemberType NoteProperty -Name "Device Name" -Value $DeviceName
						$linktargets | Add-Member -MemberType NoteProperty -Name "Device Name Unicode" -Value $DeviceNameUnicode
					}
				}
			}
			
			# ExtraData Block
			if (!!$ShortcutInfo.Extradata)
			{
				$ExtraDataBlockSize = $ShortcutInfo.ExtraData.ExtraDataSize
				$linktargets | Add-Member -MemberType NoteProperty -Name "ExtraData Block Size" -Value $ExtraDataBlockSize
				
				# HasDarwinID
				if ($LinkFlags.contains('HasDarwinID'))
				{
					$DarwinDataAnsi = $ShortcutInfo.ExtraData.DarwinDataBlock.DarwinDataAnsi
					$DarwinDataUnicode = $ShortcutInfo.ExtraData.DarwinDataBlock.DarwinDataUnicode
					$linktargets | Add-Member -MemberType NoteProperty -Name "DarwinDataAnsi" -Value $DarwinDataAnsi
					$linktargets | Add-Member -MemberType NoteProperty -Name "DarwinDataUnicode" -Value $DarwinDataUnicode
				}
				
				# RunWithShimLayer
				if ($LinkFlags.contains('RunWithShimLayer'))
				{
					$LayerName = $ShortcutInfo.ExtraData.ShimDataBlock.LayerName
					$linktargets | Add-Member -MemberType NoteProperty -Name "ShimLayerName" -Value $LayerName
				}
				
				# EnableTargetMetadata - PropertyStore
				if (!!$ShortcutInfo.ExtraData.PropertyStoreDataBlock.PropertyStore.PropertyStorage)
				{
					# Get All PropertyStore Properties
					$propertystoredata = $ShortcutInfo.ExtraData.PropertyStoreDataBlock.GetBytes()
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray ([byte[]](0, 0, 0, 0) + $propertystoredata[8 .. ($propertystoredata.count - 1)])
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$linktargets | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				
				# KnownFolderDataBlock
				if ($ShortcutInfo.ExtraData.KnownFolderDataBlock)
				{
					$KnBlockSignature = $ShortcutInfo.ExtraData.KnownFolderDataBlock.BlockSignature
					$KnownFolderID = $ShortcutInfo.ExtraData.KnownFolderDataBlock.KnownFolderID
					
					$kfguid = $ShortcutInfo.ExtraData.KnownFolderDataBlock.KnownFolderID.Guid
					$KnownFolderDisplayName = if (!!$knownfolders.Where{ $_.GUID -eq "{$($kfguid)}" })
					{ "$($knownfolders.Where{ $_.GUID -eq "{$($kfguid)}" }.Name)" }
					else { "----" }
					$KnownFolderIDOffset = $ShortcutInfo.ExtraData.KnownFolderDataBlock.Offset
					$linktargets | Add-Member -MemberType NoteProperty -Name "Known Folder BlockSignature" -Value $KnBlockSignature
					$linktargets | Add-Member -MemberType NoteProperty -Name "Known Folder ID" -Value $KnownFolderID
					$linktargets | Add-Member -MemberType NoteProperty -Name "Known Folder DisplayName" -Value $KnownFolderDisplayName
					$linktargets | Add-Member -MemberType NoteProperty -Name "Known FolderID Offset" -Value $KnownFolderIDOffset
				}
				
				# SpecialFolderDataBlock
				if ($ShortcutInfo.ExtraData.SpecialFolderDataBlock)
				{
					$SpBlockSignature = $ShortcutInfo.ExtraData.SpecialFolderDataBlock.BlockSignature
					$SpecialFolderID = $ShortcutInfo.ExtraData.SpecialFolderDataBlock.SpecialFolderID
					$SpecialFolderIDOffset = $ShortcutInfo.ExtraData.SpecialFolderDataBlock.Offset
					$linktargets | Add-Member -MemberType NoteProperty -Name "Special Folder BlockSignature" -Value $SpBlockSignature
					$linktargets | Add-Member -MemberType NoteProperty -Name "Special Folder ID" -Value $SpecialFolderID
					$linktargets | Add-Member -MemberType NoteProperty -Name "Special Folder Offset" -Value $SpecialFolderIDOffset
				}
				
				# EnvironmentVariableDataBlock # HasExpString
				if ($LinkFlags.contains('HasExpString') -and $ShortcutInfo.ExtraData.EnvironmentVariableDataBlock)
				{
					$EnvBlockSignature = $ShortcutInfo.ExtraData.EnvironmentVariableDataBlock.BlockSignature
					
					$Bytes = $ShortcutInfo.ExtraData.EnvironmentVariableDataBlock.GetBytes()
					
					$BlockLength = [System.BitConverter]::ToUInt32($Bytes[0 .. 3], 0)
					$BlockSignature = [System.BitConverter]::ToString($Bytes[7 .. 4]) -replace '-', ''
					if ($BlockSignature -ne 'A0000001') { return }
					
					$TargetAnsi = [System.Text.Encoding]::UTF8.GetString($bytes[8 .. 267], 0, $bytes[8 .. 267].IndexOf([byte]0)) #(260 bytes)
					
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($bytes[268 .. (268 + 519)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					$TargetUnicode = [System.Text.Encoding]::Unicode.GetString($bytes[268 .. (268 + 519)], 0, $UnicodeEnd) #(520 bytes)	
					
					$linktargets | Add-Member -MemberType NoteProperty -Name "Environment Variable BlockSignature" -Value $EnvBlockSignature
					$linktargets | Add-Member -MemberType NoteProperty -Name "TargetAnsi" -Value $TargetAnsi
					$linktargets | Add-Member -MemberType NoteProperty -Name "TargetUnicode" -Value $TargetUnicode
				}
				# ConsoleDataBlock
				if ($ShortcutInfo.ExtraData.ConsoleDataBlock)
				{
					$ConsoleDataBlock = $ShortcutInfo.ExtraData.ConsoleDataBlock
					if ($ConsoleDataBlock.count -ge 1)
					{
						$ConsoleData = [PSCustomObject]@{ }
						foreach ($consoleentry in ($ConsoleDataBlock | Get-Member -MemberType Property).Name)
						{
							$Centry = if ($ConsoleDataBlock.$consoleentry.GetType().BaseType.Name -match 'Array') { $ConsoleDataBlock.$consoleentry -join ',' }
							else { ($ConsoleDataBlock.$consoleentry.ToString()).Replace('\\s+', ',') }
							$ConsoleData | Add-Member -MemberType NoteProperty -Name $consoleentry -Value $Centry
						}
					}
					$linktargets | Add-Member -MemberType NoteProperty -Name "Console Data Block" -Value $ConsoleData
				}
				
				# ConsoleFEDataBlock
				if ($ShortcutInfo.ExtraData.ConsoleFEDataBlock)
				{
					# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/63d3d639-7fd2-4afb-abbe-0d5b5551eef8
					$CodePage = $ShortcutInfo.ExtraData.ConsoleFEDataBlock.CodePage
					$linktargets | Add-Member -MemberType NoteProperty -Name "Console CodePage ID" -Value $CodePage
				}
				
				# TrackerDataBlock
				if ($ShortcutInfo.ExtraData.TrackerDataBlock)
				{
					# MachineID
					if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.MachineID)
					{
						$machineid = $ShortcutInfo.ExtraData.TrackerDataBlock.MachineID.ToUpper()
						$linktargets | Add-Member -MemberType NoteProperty -Name "Machine Id" -Value $machineid
					}
					
					# GUIDs
					if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[0])
					{
						$g1b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[0] -replace "-", '')).ToByteArray()
						$g1h = [System.BitConverter]::ToString($g1b) -replace '-', ''
						$Guid1 = Get-ObjectIdFromHex -Hex $g1h
						$linktargets | Add-Member -MemberType NoteProperty -Name "Guid 1" -Value $Guid1
					}
					if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[0])
					{
						$bg1b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[0] -replace "-", '')).ToByteArray()
						$bg1h = [System.BitConverter]::ToString($bg1b) -replace '-', ''
						$BGuid1 = Get-ObjectIdFromHex -Hex $bg1h
						$linktargets | Add-Member -MemberType NoteProperty -Name "Birth Guid 1" -Value $BGuid1
					}
					if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[1])
					{
						$g2b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[1] -replace "-", '')).ToByteArray()
						$g2h = [System.BitConverter]::ToString($g2b) -replace '-', ''
						$Guid2 = Get-ObjectIdFromHex -Hex $g2h
						$linktargets | Add-Member -MemberType NoteProperty -Name "Guid 2" -Value $Guid2
					}
					if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[1])
					{
						$bg2b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[1] -replace "-", '')).ToByteArray()
						$bg2h = [System.BitConverter]::ToString($bg2b) -replace '-', ''
						$BGuid2 = Get-ObjectIdFromHex -Hex $bg2h
						$linktargets | Add-Member -MemberType NoteProperty -Name "Birth Guid 2" -Value $BGuid2
					}
				}
				
				# ExtraData.VistaAndAboveIDListDataBlock 
				if (!!$ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock)
				{
					$VistaDisplayName = $ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.DisplayName
					$VistaPath = $ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.Path
					$linktargets | Add-Member -MemberType NoteProperty -Name "Vista_Path" -Value $VistaPath
					$linktargets | Add-Member -MemberType NoteProperty -Name "Vista_DisplayName" -Value $VistaDisplayName
					
					# Add the raw data	
					$VistaItemIdListItems = [System.Collections.ArrayList]::new()
					if ($ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.ItemIDList.Count -ge 1)
					{
						foreach ($VistaItemIdListItem in $ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.ItemIDList)
						{
							$VistalinkItem = Get-LinkTargetIDList -ItemIdListItem $VistaItemIdListItem
							$null = $VistaItemIdListItems.Add($VistalinkItem)
						} # End for each#>
					} # end if count ge 1
					else { $VistaItemIdListItems = $null }
					$linktargets | Add-Member -MemberType NoteProperty -Name "VistaItemIdListItems" -Value $VistaItemIdListItems
				}
				
				# HasExpIcon
				if ($LinkFlags.contains('HasExpIcon'))
				{
					$iconbytes = $ShortcutInfo.ExtraData.IconEnvironmentDataBlock.GetBytes()
					if ($iconbytes.count -ge 788)
					{
						$iconTargetAnsi = ([System.Text.Encoding]::GetEncoding(1252).GetString($iconbytes[8 .. 267]) -Split '\0')[0]
						$iconTargetUnicode = ([System.Text.Encoding]::Unicode.GetString($iconbytes[268 .. (268 + 520 - 1)]) -Split '\0')[0]
						$linktargets | Add-Member -MemberType NoteProperty -Name "iconTargetAnsi" -Value $iconTargetAnsi
						$linktargets | Add-Member -MemberType NoteProperty -Name "iconTargetUnicode" -Value $iconTargetUnicode
					}
					
				}
			}
			# For debug	
			# Show-InfoMessage -InfoMessage ($linktargets|Out-String)
		}
		catch
		{
			$linktargets = $null
		}
		
		return $linktargets
	} # End function Get-ShellLinkfrombyteArray
	
	function Get-SafePath
	{
		param
		(
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   Position = 0)]
			[object]$Path
		)
		
		process
		{
			$pattern = "[" + (([System.IO.Path]::GetInvalidPathChars().foreach{ "\x" + ([int]$_).ToString('X2') }) -join '') + "]+"
			[regex]::Replace($Path, $pattern, '~')
		}
	} # Get-SafePath
	
	# There is a shell API for the SHOpenWithDialog function
	Add-Type -TypeDefinition @'

    using System;
    using System.Runtime.InteropServices;

    public class ShellOpenWith {

        [DllImport("shell32.dll", EntryPoint = "SHOpenWithDialog", CharSet = CharSet.Unicode)]
        private static extern int SHOpenWithDialog(IntPtr hWndParent, ref tagOPENASINFO oOAI);

        // http://msdn.microsoft.com/en-us/library/windows/desktop/bb773363(v=vs.85).aspx
        private struct tagOPENASINFO
        {
            [MarshalAs(UnmanagedType.LPWStr)]
            public string cszFile;

            [MarshalAs(UnmanagedType.LPWStr)]
            public string cszClass;

            [MarshalAs(UnmanagedType.I4)]
            public tagOPEN_AS_INFO_FLAGS oaifInFlags;
        }

        [Flags]
        private enum tagOPEN_AS_INFO_FLAGS
        {
            OAIF_ALLOW_REGISTRATION =  0x00000001,   // Show "Always" checkbox
            OAIF_REGISTER_EXT =    0x00000002,   // Perform registration when user hits OK
            OAIF_EXEC =        0x00000004,   // Exec file after registering
            OAIF_FORCE_REGISTRATION =  0x00000008,   // Force the checkbox to be registration
            OAIF_HIDE_REGISTRATION =   0x00000020,   // Vista+: Hide the "always use this file" checkbox
            OAIF_URL_PROTOCOL =    0x00000040,   // Vista+: cszFile is actually a URI scheme; show handlers for that scheme
            OAIF_FILE_IS_URI =     0x00000080    // Win8+: The location pointed to by the pcszFile parameter is given as a URI
        }

        public static void DoOpenFileWith(string sFilename, IntPtr hwndParent = new IntPtr())
        {
            tagOPENASINFO oOAI = new tagOPENASINFO();
            oOAI.cszFile = sFilename;
            oOAI.cszClass = String.Empty;
            oOAI.oaifInFlags = tagOPEN_AS_INFO_FLAGS.OAIF_ALLOW_REGISTRATION | tagOPEN_AS_INFO_FLAGS.OAIF_EXEC;
            SHOpenWithDialog(hwndParent, ref oOAI);
        }    
    }
'@
	
	
	<#
	    .SYNOPSIS
		Retrieves the last write time of the supplied registry key
	
		.DESCRIPTION
		The Registry data that a hive stores in containers are called cells. A cell 
		can hold a key, a value, a security descriptor, a list of subkeys, or a 
		list of key values.
	
		Get-RegKeyLastWriteTime retrieves the LastWriteTime through a pointer to the
		FILETIME structure that receives the time at which the enumerated subkey was
		last written. Values do not contain a LastWriteTime property, but changes to
		child values update the parent keys lpftLastWriteTime.
		
		The LastWriteTime is updated when a key is created, modified, accessed, or
		deleted.
	
		.PARAMETER ComputerName
		Computer name to query
	
		.PARAMETER Key
		Root Key to query
	
		HKCR - Symbolic link to HKEY_LOCAL_MACHINE \SOFTWARE \Classes.
		HKCU - Symbolic link to a key under HKEY_USERS representing a user's profile
		hive.
		HKLM - Placeholder with no corresponding physical hive. This key contains
		other keys that are hives.
		HKU  - Placeholder that contains the user-profile hives of logged-on
		accounts.
		HKCC - Symbolic link to the key of the current hardware profile
	
		.PARAMETER SubKey
		Registry Key to query
	
		.EXAMPLE
		Get-RegKeyLastWriteTime -ComputerName testwks -Key HKLM -SubKey Software
	
	        .EXAMPLE
		Get-RegKeyLastWriteTime -ComputerName testwks1,testwks2 -SubKey Software
	
		.EXAMPLE
		Get-RegKeyLastWriteTime -SubKey Software\Microsoft
	
		.EXAMPLE
		"testwks1","testwks2" | Get-RegKeyLastWriteTime -SubKey Software\Microsoft `
		\Windows\CurrentVersion
	
		.NOTES
		NAME: Get-RegKeyLastWriteTime
		AUTHOR: Shaun Hess
		VERSION: 1.0
		LASTEDIT: 01JUL2011
		LICENSE: Creative Commons Attribution 3.0 Unported License
		(http://creativecommons.org/licenses/by/3.0/)
	
		.LINK
		http://www.shaunhess.com
		#>
	function Get-RegKeyLastWriteTime # Modified
	{
	 	[CmdletBinding()]
		param (
			[parameter(
					   ValueFromPipeline = $true,
					   ValueFromPipelineByPropertyName = $true)]
			[Alias("CN", "__SERVER", "Computer", "CNAME")]
			[string[]]$ComputerName = $env:ComputerName,
			[string]$Key = "HKCU",
			[string]$SubKey
		)
		
		BEGIN
		{
			switch ($Key)
			{
				"HKCR" { $searchKey = 0x80000000 } #HK Classes Root            
				"HKCU" { $searchKey = 0x80000001 } #HK Current User            
				"HKLM" { $searchKey = 0x80000002 } #HK Local Machine            
				"HKU"  { $searchKey = 0x80000003 } #HK Users            
				"HKCC" { $searchKey = 0x80000005 } #HK Current Config            
				default {
					"Invalid Key. Use one of the following options:
			HKCR, HKCU, HKLM, HKU, HKCC"
				}
			}
			
			$KEYQUERYVALUE = 0x1
			$KEYREAD = 0x19
			$KEYALLACCESS = 0x3F
		}
		PROCESS
		{
			foreach ($computer in $ComputerName)
			{
				
				$sig0 = @'
[DllImport("advapi32.dll", SetLastError = true)]
  public static extern int RegConnectRegistry(
  	string lpMachineName,
	int hkey,
	ref int phkResult);
'@
				$type0 = Add-Type -MemberDefinition $sig0 -Name Win32Utils -Namespace RegConnectRegistry -Using System.Text -PassThru
				
				$sig1 = @'
[DllImport("advapi32.dll", CharSet = CharSet.Auto)]
  public static extern int RegOpenKeyEx(
    int hKey,
    string subKey,
    int ulOptions,
    int samDesired,
    out int hkResult);
'@
				$type1 = Add-Type -MemberDefinition $sig1 -Name Win32Utils `
								  -Namespace RegOpenKeyEx -Using System.Text -PassThru
				
				$sig2 = @'
[DllImport("advapi32.dll", EntryPoint = "RegEnumKeyEx")]
extern public static int RegEnumKeyEx(
    int hkey,
    int index,
    StringBuilder lpName,
    ref int lpcbName,
    int reserved,
    int lpClass,
    int lpcbClass,
    out long lpftLastWriteTime);


'@
				$type2 = Add-Type -MemberDefinition $sig2 -Name Win32Utils `
								  -Namespace RegEnumKeyEx -Using System.Text -PassThru
				
				$sig3 = @'
[DllImport("advapi32.dll", SetLastError=true)]
public static extern int RegCloseKey(
    int hKey);
'@
				$type3 = Add-Type -MemberDefinition $sig3 -Name Win32Utils -Namespace RegCloseKey -Using System.Text -PassThru
				
				
				$hKey = new-object int
				$hKeyref = new-object int
				$searchKeyRemote = $type0::RegConnectRegistry($computer, $searchKey, [ref]$hKey)
				$result = $type1::RegOpenKeyEx($hKey, $SubKey, 0, $KEYREAD, [ref]$hKeyref)
				
				#initialize variables            
				$builder = New-Object System.Text.StringBuilder 1024
				$index = 0
				$length = [int] 1024
				$time = New-Object Long
				$Timestamps = [System.Collections.Hashtable]::new()
				#234 means more info, 0 means success. Either way, keep reading            
				while (0, 234 -contains $type2::RegEnumKeyEx($hKeyref, $index++ , $builder, [ref]$length, $null, $null, $null, [ref]$time))
				{
					#create output object            
					$o = "" | Select Key, LastWriteTime
					# Don't need the Computername
					# $o.ComputerName = "$computer"
					$o.Key = $builder.ToString() # key name 
					$o.LastWriteTime = [datetime]::FromFileTimeUtc($time).ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					$null = $Timestamps.Add($o.Key, $o.LastWriteTime)
					#reinitialize for next time through the loop            
					$length = [int] 1024
					$builder = New-Object System.Text.StringBuilder 1024
				}
				
				$result = $type3::RegCloseKey($hKey)
				return $Timestamps
			}
		}
	} # End Get-RegKeyLastWriteTime function
	
	function Get-Files
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			$Folder
		)
	
		try
		{
			$Status.Text = "Please wait ..."
			$dirFiles = [System.IO.Directory]::GetFiles("$($Folder)", "*", [System.IO.SearchOption]::AllDirectories).Where{ [System.IO.FileInfo]::new($_).Extension -in ('.lnk', '.customDestinations-ms', '.automaticDestinations-ms', '.temp') }
			# Get File Properties
			
			$Script:AppListIdx = [System.Collections.Hashtable]::New()
			$Tree1Search.Visible = $false
			$Tree1Search.Text = "Select Jumplist by App Name"
			if ($Tree1Search.Items.Count -gt 0)
			{
				$Tree1Search.Items.Clear()
			}
			$files = @(foreach ($file in $dirFiles)
				{
					[System.Windows.Forms.Application]::DoEvents()
					
					# Replace known AppID with it's Name
					$fname = Split-Path -Path $file -leaf
					$AppName = $null
					
					# Add known App Name
					foreach ($i in $AppIDs.Keys)
					{
						if ($fname -match "$($i)")
						{
							$AppName = $AppIDs[$i].ToString()
							$t = $Tree1Search.Items.Add($AppName)
							$null = $Script:AppListIdx.Add($t, $file)
							break
						}
					} # end for each Appid
					
					# Add A.D.Streams
					try
					{
						$StreamName = [System.Collections.ArrayList]::new()
						$null = $StreamName.Add((Get-Item $file -Stream * -Force -ErrorAction SilentlyContinue).Stream -ne ':$DATA')
					}
					catch { $StreamName = [System.Collections.ArrayList]::new() }
					
					[PSCustomObject][Ordered]@{
							'FileName'          = $file
							'Name'	            = $fname
							'AppName'	        = $AppName
							'Parent'            = Split-Path -Path $file -Parent
							'CreationTimeUtc'   = [system.IO.File]::GetCreationTimeUtc($file)
							'LastAccessTimeUtc' = [system.IO.File]::GetLastAccessTimeUtc($file)
							'LastWriteTimeUtc'  = [system.IO.File]::GetLastWriteTimeUtc($file)
							'Attributes'        = [system.IO.File]::GetAttributes($file)
							'Size'	   = [System.IO.FileInfo]::new($file).Length
							'ADS_Stream' = if(!!$StreamName){ $StreamName} else {$null}
						}
				
			} # end for each
	
		)
			} # end try
		catch { $files = $null }
		
		if ($files.Count -ge 1)
		{
			$Status.Text = "LNK/*-ms Files: $($files.count) "
			Add-fileNodes -Files $files -RootFolder "$($Folder)"
			
			if ($Tree1Search.Items.Count -ge 1)
			{
				$Tree1Search.Visible = $true
			}
			else
			{
				$Tree1Search.Visible = $false
			}
			return $true
		}
		else
		{
			$Status.Text = "NO LNK/*-ms Files found in $($Folder)"
			[System.Console]::Beep(500, 150)
			return $false
		}
		
	} # End get-files
	
	function Add-Directories
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$RootNode,
			[Parameter(Mandatory = $true)]
			$Directories
		)
		
		foreach ($Directory in $Directories)
		{
			$lastNode = $null
			$subPathAgg = ""
			foreach ($subPath in $Directory.split('\\'))
			{
				$subPathAgg += ($subPath + '\')
				$nodes = $RootNode.Nodes.Find($subPathAgg.TrimEnd('\'), $true)
				if ($nodes.Length -eq 0)
				{
					if ($lastNode -eq $null)
					{
						$lastNode = $RootNode.Nodes.Add($subPathAgg.TrimEnd('\'), $subPath)
						$lastNode.TooltipText = "$($subPathAgg.TrimEnd('\'))"
						$lastNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
						$lastNode.ForeColor = 'DodgerBlue'
						$lastNode.ImageIndex = 0
						$lastNode.SelectedImageIndex = 1
					}
					else
					{
						$lastNode = $lastNode.Nodes.Add($subPathAgg.TrimEnd('\'), $subPath)
						$lastNode.TooltipText = "$($subPathAgg.TrimEnd('\'))"
						$lastNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
						$lastNode.ForeColor = 'DodgerBlue'
						$lastNode.ImageIndex = 0
						$lastNode.SelectedImageIndex = 1
					}
				}
				else
				{
					$lastNode = $nodes[0]
					$lastNode.TooltipText = "$($subPathAgg.TrimEnd('\'))"
					$lastNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
					$lastNode.ForeColor = 'DodgerBlue'
					$lastNode.ImageIndex = 0
					$lastNode.SelectedImageIndex = 1
				}
			}
		}
	} # End Add-Directories
	
	function Add-fileNodes
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			$Files,
			[Parameter(Mandatory = $true)]
			$RootFolder
		)
		
		$treeview1.BeginUpdate()
		$treeview1.Nodes.Clear()
	
		$rootfoldername = Split-Path -Path $RootFolder -Leaf
		$Root = $treeview1.Nodes.Add("$($RootFolder)", "$($RootFolder)")
		$Root.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
		$Root.ForeColor = 'DarkTurquoise'
		$Root.ImageIndex = 13
		$Root.SelectedImageIndex = 13
		#	$Root.ImageIndex = 0
		
		if ($files.Count -ge 1)
		{
			# Get Directories
			$dirs = foreach ($dir in $Files.Parent <#$Files.Filename#>)
			{
				try { $dir.Replace("$(Split-Path -path $RootFolder -Parent)", '').Trimstart("\") }
				catch{continue}
			}
			$dirs | sort -Unique
			# Add Directories
			if ($dirs.count -ge 1)
			{
				Add-Directories -RootNode $Root -Directories $dirs
			}
			
			# Add Files
			$i = 1
			$files = ($files | sort -Property LastWriteTimeUtc -Descending) 
			foreach ($file in $files)
			{
				$fname = $file.Name
				$parent = $file.Parent
				try	{ $filep = $parent.Replace("$(Split-Path -path $RootFolder -Parent)", '').Trimstart("\") 	}
				catch{ $filep = $parent}
				$node = $Root.Nodes.Find("$($filep)",$true)
				if (!!$node) { $ParentNode = $node[0] }	else{ $ParentNode = $Root}
				
				# Add File
				$filenode = $ParentNode.Nodes.Add("$($file.Filename)", "$($fname)")
				$filenode.Tag = @("$($file.Filename)")
				$Status.Text = "Please wait - Populating tree with Files: $($i)/$($files.count)"
				$i++
				[System.Windows.Forms.Application]::DoEvents()
				
				# Get associated icon for the file
				try
				{
					$handle = [System.Drawing.Icon]::ExtractAssociatedIcon("$($file.Filename)").Handle
					$icon = [System.Drawing.Icon]::FromHandle($handle)
				}
				catch
				{
					Show-ErrorMessage -ErrorMessage "$($file.Filename)`n$($Error[0].Exception.InnerException.Message)"
					$Error.Clear()
				}
				if (!!$icon -and $icon.Height -ne 0 )
				{
					try
					{
						$newkey = $handle.ToString()
						if(!$treeview1.ImageList.Images.ContainsKey($newkey) )
						{
							$null = $treeview1.ImageList.Images.Add($newkey, $icon.ToBitmap())
						}
						$filenode.ImageIndex = $treeview1.ImageList.Images.IndexOfKey($newkey)
						$filenode.SelectedImageIndex = $treeview1.ImageList.Images.IndexOfKey($newkey)
					}
					catch
					{
						$filenode.ImageIndex = 10
						$filenode.SelectedImageIndex = 11
					}
				}
				else
				{
					$filenode.ImageIndex = 10
					$filenode.SelectedImageIndex = 11
				}
				if ($file.AppName -ne $null)
				{
					$filenode.ToolTipText = "$($file.AppName)"
					$filenode.ForeColor = 'LightGreen'
					$AppNameNode = $filenode.Nodes.Add("AppName", "AppName: $($file.AppName)")
					$AppNameNode.ForeColor = 'Yellow'
				}
				
				if ($file.Size -lt 76)
				{
					$filenode.ForeColor = 'DimGray'
					$filenode.Tooltiptext = "$($file.Name) is too small"
				}
				# Get FS Properties
				try
				{
					$CreationTimeUtc = $file.CreationTimeUtc.ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					$LastAccessTimeUtc = $file.LastAccessTimeUtc.ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					$LastWriteTimeUtc = $file.LastWriteTimeUtc.ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					$Attributes = $file.Attributes
					$Length = $file.Size.Tostring('N0')
					
					# Add Child Nodes
					$null = $filenode.Nodes.Add("CreationTimeUtc", "CreationTimeUtc: $($CreationTimeUtc)")
					$null = $filenode.Nodes.Add("LastAccessTimeUtc", "LastAccessTimeUtc: $($LastAccessTimeUtc)")
					$null = $filenode.Nodes.Add("LastWriteTimeUtc", "LastWriteTimeUtc: $($LastWriteTimeUtc)")
					$null = $filenode.Nodes.Add("Attributes", "Attributes: $($Attributes) ")
					$null = $filenode.Nodes.Add("Length", "File Size: $($Length)")
					$filenode.Nodes["CreationTimeUtc"].ImageIndex = 12
					$filenode.Nodes["LastAccessTimeUtc"].ImageIndex = 12
					$filenode.Nodes["LastWriteTimeUtc"].ImageIndex = 12
					$filenode.Nodes["Attributes"].ImageIndex = 12
					$filenode.Nodes["Length"].ImageIndex = 12
					
					try
					{
						if (!!$file.ADS_Stream)
						{
							foreach ($stream in $file.ADS_Stream)
							{
								$null = $filenode.Nodes.Add("Stream Name $($stream)", "Stream Name: $($stream)")
								$filenode.Nodes["Stream Name $($stream)"].ForeColor = 'Tomato'
								$filenode.Nodes["Stream Name $($stream)"].Tag = @("$($file.Filename):$($stream)")
								$filenode.Nodes["Stream Name $($stream)"].ImageIndex = 12
							}
						}
					}
					catch { $null }
				}
				catch { $null }
			}
		}
	
		$treeview1.EndUpdate()
		if (!!$treeview1.Nodes)
		{
			$treeview1.Nodes[0].Expand()
		#	Show-InfoMessage -InfoMessage "Ready`nFound: $($files.Count) files"
		}
		else
		{
			[System.Console]::Beep(500, 150)
		}
		$Status.Text = 'Ready'
	} # End Add-fileNodes
	
	function Process-Link
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$File
		)
		# Clear tree
		$treeview2.Nodes.Clear()
		$TreeSearch.Visible = $false
		
		# Get File Size
		$fname = Split-Path -Path "$($File)" -Leaf
		try
		{
			$fileinfo = [System.IO.FileInfo]::new("$($File)")
			if (<#$fileinfo.Attributes.HasFlag([System.IO.FileAttributes]::SparseFile) -or#> $fileinfo.Attributes.HasFlag([System.IO.FileAttributes]::Offline) -or $fileinfo.Attributes.HasFlag([System.IO.FileAttributes]::ReparsePoint))
			{
				$Status.Text = "$($fname) has flags:  $($fileinfo.Attributes)"
				[System.Console]::Beep(500, 150)
				return
			}
			$fs = $fileinfo.Length
		}
		catch
		{
			$Status.Text = "Can not get the File Size of $($fname)"
			[System.Console]::Beep(500, 150)
			return
		}
		
		if ($fs -lt 76) # Minimum Header Size (0x4C = 76)
		{
			$Status.Text = "$($fname) is too small"
			[System.Console]::Beep(500,150)
			return
		}
	
		$Status.Text = "Selected file: $($fname)"
	
		if ($fs -gt 536870912)
		{
			$buffersize = 4096*1024
			$list = (0 .. [math]::Ceiling($fs/$buffersize))
		}
		else
		{
			$buffersize = $fs
			$list = [int]0
		}
		
		# Read the File & search for LNKs
		$dataoffsets = New-Object System.Collections.Generic.List[uint64]
		$FileStream = New-Object IO.FileStream($File, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::ReadWrite))
		
		# Search for valid header size (0x0000004C) and LinkCLSID (00021401-0000-0000-C000-000000000046)
		# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/c3376b21-0931-45e4-b2fc-a48ac0e60d15
		[System.Text.RegularExpressions.Regex]$regex = "(\x4C\x00\x00\x00\x01\x14\x02\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46)"
		foreach ($step in $list)
		{
			[System.Windows.Forms.Application]::DoEvents()
			$Status.Text = "Please wait - searching for LNK Signatures .."
			# Set offset to read from the file
			if($step * $buffersize -gt $fs){ $buffersize = $buffersize - ($fs % $buffersize)}
			$null = $FileStream.Seek([UInt64]($step * $buffersize), [System.IO.SeekOrigin]::Begin)
			# Initialize the buffer 
			$buffer = [System.Byte[]]::new($buffersize)
			# Read offset to the buffer
			$null = $FileStream.Read($buffer, 0, $buffersize)
			# Find LNK records
			$bufferstring = [System.Text.Encoding]::GetEncoding(28591).GetString($buffer)
			
			if (!!($regex.Matches($bufferstring).success))
			{
				foreach ($match in $regex.Matches($bufferstring))
				{
					$null = $dataoffsets.Add((($step * $buffersize) + ($match.index)))
				}
			}
		}
		$FileStream.Dispose()
		$bufferstring = $null
		[System.GC]::Collect()
		
		if ($dataoffsets.count -eq 0)
		{
			[System.Console]::Beep(500, 150)
			$Status.Text = "Nothing to see in $($fname)"
			return
		}
	
		if ($dataoffsets.Count -ge 1) 
		{
			$offsets = for ($r = 0; $r -lt $dataoffsets.Count; $r++)
			{
				$length = if (($r + 1) -ge $dataoffsets.count) { $fs - $dataoffsets[$r] }
				else { $dataoffsets[$r + 1] - $dataoffsets[$r] }
				# check
				if ($length -eq 0 -or $length -gt $buffersize) { continue }
				if ($length -ge [System.Int32]::MaxValue) { $length = ([System.Int32]::MaxValue - 1) }
				
				[PSCustomObject]@{
					'Start'  = [UInt64]$dataoffsets[$r]
					'Length' = $length
				}
			}
			
			$Status.Text = "Found $($dataoffsets.Count) LNK Signature matches"
			
			# Update Tree
			$treeview2.BeginUpdate()
			# Add Root branch
			$Root2 = $treeview2.Nodes.Add("Root", "$($fname)")
			if ($fname -match '.customDestinations-ms')
			{
				$PathHash = $fname.Replace('.customDestinations-ms','')
				$appidnode = $Root2.Nodes.Add("$($PathHash)", "AppID: $($PathHash.ToUpper())")
				$appidnode.ForeColor = 'LimeGreen'
			}
			
			$o = 1
			$FileStream = New-Object IO.FileStream($File, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::ReadWrite))
			$timer = [system.Diagnostics.Stopwatch]::StartNew()
			foreach ($offset in $offsets)
			{
				# Just in case
				if(($offset.start + $offset.Length -1) -gt $fs -or !$offset.Length -or $offset.Length -ge [System.Int32]::MaxValue ){continue}
				# Get the data from the offset
				$null = $FileStream.Seek([UInt64]($offset.start), [System.IO.SeekOrigin]::Begin)
				# Initialize the buffer 
				$buffer = [System.Byte[]]::new([UInt64]$offset.Length)
				# Read offset to the buffer
				$null = $FileStream.Read($buffer, 0, [UInt64]$offset.Length)
				$data = $buffer
				
				if (!!$data)
				{
					$Status.Text = "Please wait - Processing LNK #$($o) "
					if($offsets.count -gt 1){ $Status.Text = "$($Status.Text) of #$($offsets.count)"	}
					try	{
						$timer.Start()
						for ($i = ($data.Length - 1); $i -gt 75; $i--)
						{
							[System.Windows.Forms.Application]::DoEvents()
							if (!!($LNKData = Get-ShellLinkfrombyteArray -ByteArray $data[0..$i]))
							{
								$ShellLink_data = $data[0 .. $i]
								if ($i -lt $data.Length)
								{
									$slackStart = $i + 1
								}
								else { $slackStart = $null }
								$timer.Reset()
								break
							}
							elseif ($timer.Elapsed.Seconds -ge 10 -or $i -eq 76)
							{
								$Status.Text = "Please wait - Trying to get the LNK #$($o) Header"
								if (!!($LNKData = Get-ShellLinkHeaderfrombyteArray -ByteArray $data)) # Try to get just the header
								{
									$ShellLink_data = $data[0 .. 75]
									$slackStart = 76
									$timer.Reset()
									break
								}
								else
								{
									$timer.Reset()
									$LNKData = $slackStart = $null
									break
								}
							}
						}
						$timer.Reset()
					}
					catch [System.Management.Automation.MethodInvocationException] {
					if ($offsets.count -eq 1)
					{
						Show-ErrorMessage -ErrorMessage "[ShellLink] $($Error[0].Exception.InnerException.Message)"
					}
					else
					{
						$Status.Text = "Offset: $($offset) - $($Error[0].Exception.InnerException.Message)"
						$LNKNode = $Root2.Nodes.Add("LNK #$($o)", "[$($offset.Start.ToString('D5'))] LNK #$($o.ToString('D3')) ")
						$Root2.Nodes["LNK #$($o)"].ForeColor = 'IndianRed'
						$Root2.Nodes["LNK #$($o)"].Tag = @([System.BitConverter]::ToString($data) -replace '-', '')
						# $Root2.Nodes["LNK #$($o)"].ToolTipText = "LNK Signature @ Offset: $($offset.Start) - Data Length: $($offset.Length)`n$($Error[0].Exception.InnerException.Message)"
					}
					$Error.Clear()
					$LNKData = $null
					$treeview2.EndUpdate()
					$o = $o + 1
					continue
				}
				catch
				{
						$LNKData = $null
						$Status.Text = "Error processing $($fname) as a ShellLNK"
						$treeview2.EndUpdate()
						$o = $o + 1
						continue
					}
				}
				else { $LNKData -eq $null }
				
				if (!!$LNKData)
				{
					$LNKNode = $Root2.Nodes.Add("LNK #$($o)", "[$($offset.Start.ToString('D5'))] $($fname) LNK #$($o.ToString('D3')) - $($LNKData.'Display Name')")
					$LNKNode.ForeColor = 'DarkTurquoise'
					$draw = @([System.BitConverter]::ToString($Data) -replace '-', '')
					$LNKNode.Tag = @($draw, $null, $null, $null, $LNKData)
					# Header
					$linksize = $LNKData.'Shortcut Size'
					<#if ($fileinfo.Extension -notin ('.lnk', '.customDestinations-ms', '.automaticDestinations-ms'))
					{
						$offset.length = $linksize
						$LNKData.LinkSlackLength = $null
					}#>
					$SizeNode = $LNKNode.Nodes.Add('Shortcut Size', "Shortcut Size: $($LNKData.'Shortcut Size')")
					if ($LNKData.'Shortcut Size' -eq '76')
					{
						$SizeNode.ToolTipText = "Invalid LNK - Header only"
						$SizeNode.BackColor = 'DarkRed'
						$SizeNode.ForeColor = 'White'
					}
					$null = $SizeNode.Nodes.Add('Header Block Size', "Header Block Size: $($LNKData.'Header Block Size')")
					$SizeNode.Nodes['Header Block Size'].Tag = @([System.BitConverter]::ToString($data[0 ..75]) -replace '-', '')
					$SizeNode.Nodes['Header Block Size'].ToolTipText = "Right click to copy the raw (Hex) data (76)"
					$SizeNode.Nodes['Header Block Size'].ForeColor = 'Peru'
					
					if (!!$LNKData.'Link Info Block Size')
					{
						$null = $SizeNode.Nodes.Add('Link Info Block Size', "Link Info Block Size: $($LNKData.'Link Info Block Size')")
						if ($LNKData.LinkInfoData.count -gt 0)
						{
							$SizeNode.Nodes['Link Info Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkInfoData) -replace '-', '')
							$SizeNode.Nodes['Link Info Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkInfoData.count))"
							$SizeNode.Nodes['Link Info Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'TargetID Block Size')
					{
						$null = $SizeNode.Nodes.Add('TargetID Block Size', "TargetID Block Size: $($LNKData.'TargetID Block Size' + 2)")
						if ($LNKData.LinkTargetIDListData.count -gt 0)
						{
							$SizeNode.Nodes['TargetID Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkTargetIDListData) -replace '-', '')
							$SizeNode.Nodes['TargetID Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkTargetIDListData.count + 2))"
							$SizeNode.Nodes['TargetID Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'StringData Block Size')
					{
						$null = $SizeNode.Nodes.Add('StringData Block Size', "StringData Block Size: $($LNKData.'StringData Block Size')")
						if ($LNKData.StringDataData.count -gt 0)
						{
							$SizeNode.Nodes['StringData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.StringDataData) -replace '-', '')
							$SizeNode.Nodes['StringData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.StringDataData.count))"
							$SizeNode.Nodes['StringData Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'ExtraData Block Size')
					{
						$null = $SizeNode.Nodes.Add('ExtraData Block Size', "ExtraData Block Size: $($LNKData.'ExtraData Block Size')")
						if ($LNKData.ExtraDataData.count -gt 0)
						{
							$SizeNode.Nodes['ExtraData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.ExtraDataData) -replace '-', '')
							$SizeNode.Nodes['ExtraData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.ExtraDataData.count))"
							$SizeNode.Nodes['ExtraData Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$slackStart -and ($offset.Length - $slackStart) -gt 0)
					{
						$null = $LNKNode.Nodes.Add("$('LinkSlack')", "LNK Slack: $($offset.Length - $slackStart)")
						$linkSlack = [System.BitConverter]::ToString($data[($slackStart) .. ($offset.Length - 1)]) -replace '-', ''
						$LNKNode.Nodes["$('LinkSlack')"].ForeColor = 'Red'
						$LNKNode.Nodes["$('LinkSlack')"].Tag = @($linkSlack)
						$LNKNode.Nodes["$('LinkSlack')"].ToolTipText = "Right click to copy the raw (Hex) Slack data $($linkSlack.Length)"
					}
					#	In customdestinations-ms:
					#	The Lnk CLSID '0x0114020000000000C000000000000046' precedes each LNK entry
					#	The end signature of customdestinations-ms is: '0xFBBFBA'
					
			<#		# for debugging:
					if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch 'C0000000000000464C' -and $LNKData.LinkSlack -notmatch '(ABFBBFBA)' -and $LNKData.LinkSlack -notmatch '(FBBFBA)')
					{
						$null = $LNKNode.Nodes.Add("$('LinkSlackLength')", "LNK Slack Size: $($LNKData.LinkSlackLength)")
						$LNKNode.Nodes["$('LinkSlackLength')"].ForeColor = 'Tomato'
					}#>
					
					# Header 
					$null = $LNKNode.Nodes.Add("$('LinkCLSID')", "Link CLSID: $($LNKData.'LinkCLSID')")
					$flagnodes = $LNKNode.Nodes.Add("Link_Flags", "Link Flags")
					foreach ($flag in $LNKData.Link_Flags.split(','))
					{
						$null = $flagnodes.Nodes.Add("$($flag)", "Link Flag: $($flag.Replace(' ', ''))")
						if (!!$LinkFlagsTT["$($flag.Replace(' ', ''))"]) { $flagnodes.Nodes["$($flag)"].ToolTipText = $LinkFlagsTT["$($flag.Replace(' ', ''))"] }
					}
					$AttributesNode = $LNKNode.Nodes.Add("$('FileAttributes')", "File Attributes")
					foreach ($attribute in $LNKData.'FileAttributes')
					{
						$null = $AttributesNode.Nodes.Add("$($attribute)", "Attribute: $($attribute.replace('FILE_ATTRIBUTE_', '').Replace(' ', ''))")
					}
					if ($null -ne $LNKData.CreationTime)
					{
						$CreationTime = $LNKNode.Nodes.Add("$('CreationTime')", "Creation Time (UTC): $($LNKData.CreationTime)")
						$CreationTime.ForeColor = 'Cyan'
					}
					if ($null -ne $LNKData.AccessTime)
					{
						$AccessTime = $LNKNode.Nodes.Add("$('AccessTime')", "Access   Time (UTC): $($LNKData.AccessTime)")
						$AccessTime.ForeColor = 'Cyan'
					}
					if ($null -ne $LNKData.WriteTime)
					{
						$WriteTime = $LNKNode.Nodes.Add("$('WriteTime')", "Write    Time (UTC): $($LNKData.WriteTime)")
						$WriteTime.ForeColor = 'Cyan'
					}
					if (!!$LNKData.'Target File Size')
					{
						$null = $LNKNode.Nodes.Add("$('Target File Size')", "Target File Size: $($LNKData.'Target File Size')")
						$LNKNode.Nodes['Target File Size'].ToolTipText = "If the link target file is larger than 0xFFFFFFFF, this value specifies the least significant 32 bits of the link
target file size."
					}
					$null = $LNKNode.Nodes.Add("$('Icon Idx')", "Icon Idx: $($LNKData.'Icon Idx')")
					$null = $LNKNode.Nodes.Add("$('ShowCommand')", "ShowCommand: $($LNKData.'ShowCommand')")
					$null = $LNKNode.Nodes.Add("$('HotKey')", "HotKey: $($LNKData.'HotKey')")
					
					if(!!$LNKData.Link_Flags -and $LNKData.'Shortcut Size' -gt 76){
					# LinkTargetIDList
					if ($LNKData.Link_Flags.contains('HasLinkTargetIDList'))
					{
						$null = $LNKNode.Nodes.Add("$('Display Name')", "Display Name: $($LNKData.'Display Name')")
						$null = $LNKNode.Nodes.Add("$('TargetPath')", "Target Path: $($LNKData.'Path')")
					}
					if ($LNKData.ItemIdListItems)
					{
						Populate-ItemIdListItems -ItemIDListNode $LNKNode -ItemIdList @($LNKData.ItemIdListItems)
					}
					
					# StringData - HasName
					if ($LNKData.Link_Flags.contains('HasName'))
					{
						$NameStringnode = $LNKNode.Nodes.Add("$('NameString')", "LNK Name: $($LNKData.'NameString')")
						$NameStringnode.ForeColor = 'PaleGreen'
					}
					
					# StringData - HasWorkingDir
					if ($LNKData.Link_Flags.contains('HasWorkingDir'))
					{
						$null = $LNKNode.Nodes.Add("$('Working Dir.')", "Working Dir.: $($LNKData.'Working Dir.')")
					}
					
					# StringData - HasRelativePath
					if ($LNKData.Link_Flags.contains('HasRelativePath'))
					{
						$null = $LNKNode.Nodes.Add("$('Relative Path')", "Relative Path: $($LNKData.'Relative Path')")
					}
					# StringData - HasArguments
					if ($LNKData.Link_Flags.contains('HasArguments'))
					{
						$argsnode = $LNKNode.Nodes.Add("$('Command Args')", "Command Arguments [$($LNKData.'Command Args Length')]: $($LNKData.'Command Args')")
						$argsnode.ToolTipText = [System.Text.RegularExpressions.Regex]::Replace($LNKData.'Command Args', '(.){100}', "$('$0')`n")
						$argsnode.ForeColor = 'Gold'
					}
					
					# Link Info
					if ($LNKData.Link_Flags.contains('HasLinkInfo'))
					{
						$liflagnodes = $LNKNode.Nodes.Add("$('LinkInfoFlags')", "Link Info Flags")
						if (![System.String]::IsNullOrEmpty($LNKData.'Link Info Flags'))
						{
							$liflags = @($LNKData.'Link Info Flags'.ToString().split(',').foreach{ $_ -split ("And", 2, [System.StringSplitOptions]::RemoveEmptyEntries) })
							foreach ($liflag in $liflags)
							{
								$null = $liflagnodes.Nodes.Add("$($liflag)", "Info Flag: $($liflag.Replace(' ', ''))")
							}
						}
						# VolumeID
						if ($LNKData.'Link Info Flags'.Contains('VolumeID'))
						{
							$null = $LNKNode.Nodes.Add("$('Drive Type')", "Drive Type: $($LNKData.'Drive Type')")
							if (!!$DriveTypes["$($LNKData.'Drive Type')"])
							{
								$LNKNode.Nodes["$('Drive Type')"].ToolTipText = $DriveTypes["$($LNKData.'Drive Type')"]
							}
							$null = $LNKNode.Nodes.Add("$('Drive s/n')", "Drive Serial Number: $($LNKData.'Drive s/n')")
							$null = $LNKNode.Nodes.Add("$('VolumeLabel')", "Volume Label: $($LNKData.'Volume Label')")
						}
						
						# LocalBasePath
						if ($LNKData.'Link Info Flags'.Contains('LocalBasePath'))
						{
							if ($null -ne $LNKData.'Local Base Path')
							{
								$null = $LNKNode.Nodes.Add("$('Local Base Path')", "Local Base Path: $($LNKData.'Local Base Path')")
							}
							if ($null -ne $LNKData.'Local Base Path Unicode')
							{
								$null = $LNKNode.Nodes.Add("$('Local Base Path Unicode')", "Local Base Path Unicode: $($LNKData.'Local Base Path Unicode')")
							}
						}
						# CommonPathSuffix
						if ($LNKData.'Link Info Flags'.Contains('PathSuffix'))
						{
							if ($null -ne $LNKData.CommonPathSuffix)
							{
								$null = $LNKNode.Nodes.Add("$('CommonPathSuffix')", "Common Path Suffix: $($LNKData.CommonPathSuffix)")
							}
							if ($null -ne $LNKData.CommonPathSuffixUnicode)
							{
								$null = $LNKNode.Nodes.Add("$('CommonPathSuffixUnicode')", "Common Path Suffix Unicode: $($LNKData.CommonPathSuffixUnicode)")
							}
						}
						
						# CommonNetworkRelativeLink
						if ($LNKData.'Link Info Flags'.Contains('CommonNetworkRelativeLink'))
						{
							$CommonNetworkRelativeLinkFlagsNode = $LNKNode.Nodes.Add("$('CommonNetworkRelativeLinkFlags')", "Common Network Relative Link Flags")
							if (![System.String]::IsNullOrEmpty($LNKData.'CommonNetworkRelativeLinkFlags'))
							{
								$CommonNetworkflags = @($LNKData.'Common Network Relative Link Flags'.split(',', [System.StringSplitOptions]::RemoveEmptyEntries))
								foreach ($cnflag in $CommonNetworkflags)
								{
									$null = $CommonNetworkRelativeLinkFlagsNode.Nodes.Add("$($cnflag)", "Relative Link Flag: $($cnflag.Replace(' ', ''))")
								}
							}
							# ValidNetType
							if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidNetType'))
							{
								$null = $LNKNode.Nodes.Add("$('NetworkProviderType')", "Network Provider Type: $($LNKData.NetworkProviderType)")
							}
							
							$null = $LNKNode.Nodes.Add("$('NetName')", "NetName: $($LNKData.'NetName')")
							$null = $LNKNode.Nodes.Add("$('NetName Unicode')", "NetName Unicode: $($LNKData.'NetName Unicode')")
							# ValidDevice
							if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidDevice'))
							{
								$null = $LNKNode.Nodes.Add("$('Device Name')", "Device Name: $($LNKData.'Device Name')")
								$null = $LNKNode.Nodes.Add("$('Device Name Unicode')", "Device Name Unicode: $($LNKData.'Device Name Unicode')")
							}
						}
					}
					
					# HasDarwinID
					if ($LNKData.Link_Flags.contains('HasDarwinID'))
					{
						$null = $LNKNode.Nodes.Add("$('DarwinDataAnsi')", "Darwin Data Ansi: $($LNKData.'DarwinDataAnsi')")
						$null = $LNKNode.Nodes.Add("$('DarwinDataUnicode')", "Darwin Data Unicode: $($LNKData.'DarwinDataUnicode')")
					}
					
					# RunWithShimLayer
					if ($LNKData.Link_Flags.contains('RunWithShimLayer'))
					{
						$null = $LNKNode.Nodes.Add("$('ShimLayerName')", "Shim Layer Name: $($LNKData.'ShimLayerName')")
					}
					
					# HasExpString
					if ($LNKData.Link_Flags.contains('HasExpString'))
					{
						if ($null -ne $LNKData.TargetAnsi)
						{
							$null = $LNKNode.Nodes.Add("$('TargetAnsi')", "Target Ansi: $($LNKData.'TargetAnsi')")
						}
						if ($null -ne $LNKData.TargetUnicode)
						{
							$null = $LNKNode.Nodes.Add("$('TargetUnicode')", "Target Unicode: $($LNKData.TargetUnicode)")
						}
					}
					
					# EnableTargetMetadata
					if ($LNKData.Link_Flags.contains('EnableTargetMetadata') -and !!$LNKData.PropertyStoreEntries)
					{
						$TargetMetadataNode = $LNKNode.Nodes.Add("TargetMetadata", "Target Metadata")
						$TargetMetadataNode.ForeColor = 'Violet'
						Populate-SPS1 -Node $TargetMetadataNode -SPS1properties @($LNKData.PropertyStoreEntries)
					}
					
					# 	Extradata - KnownFolderDataBlock
					if (!!$LNKData.'Known Folder BlockSignature')
					{
						$null = $LNKNode.Nodes.Add("$('KnBlockSignature')", "Known Folder BlockSignature: $($LNKData.'Known Folder BlockSignature')")
						$null = $LNKNode.Nodes.Add("$('KnownFolderID')", "Known Folder GUID: $($LNKData.'Known Folder ID')")
						$null = $LNKNode.Nodes.Add("$('KnownFolderDisplayName')", "Known Folder Display Name: $($LNKData.'Known Folder DisplayName')")
						$null = $LNKNode.Nodes.Add("$('KnownFolderIDOffset')", "Known FolderID Offset: $($LNKData.'Known FolderID Offset')")
					}
					
					# Extradata - SpecialFolderDataBlock
					if (!!$LNKData.'Special Folder BlockSignature')
					{
						$null = $LNKNode.Nodes.Add("$('SpBlockSignature')", "Special Folder BlockSignature: $($LNKData.'Special Folder BlockSignature')")
						$null = $LNKNode.Nodes.Add("$('SpecialFolderID')", "Special Folder ID: $($LNKData.'Special Folder ID')")
						$null = $LNKNode.Nodes.Add("$('SpecialFolderIDOffset')", "Special Folder Offset: $($LNKData.'Special Folder Offset')")
					}
					
					# Extradata - EnvironmentVariableDataBlock
					if (!!$LNKData.'Environment Variable BlockSignature')
					{
						$null = $LNKNode.Nodes.Add("$('EnvBlockSignature')", "Environment Variable BlockSignature: $($LNKData.'Environment Variable BlockSignature')")
						$null = $LNKNode.Nodes.Add("$('EnvTargetAnsi')", "Environment Variable TargetAnsi: $($LNKData.'Environment Variable TargetAnsi')")
						$null = $LNKNode.Nodes.Add("$('EnvTargetUnicode')", "Environment Variable TargetUnicode: $($LNKData.'Environment Variable TargetUnicode')")
					}
					
					# Extradata - ConsoleDataBlock
					if (!!$LNKData.'Console Data Block')
					{
						$consolenode = $LNKNode.Nodes.Add("ConsoleNode", "Console Properties")
						foreach ($consoleprop in ($LNKData.'Console Data Block' | Get-Member -MemberType NoteProperty).Name)
						{
							$null = $consolenode.Nodes.Add("Console$($consoleprop)", "$($consoleprop): $($LNKData.'Console Data Block'.$consoleprop)")
						}
					}
					
					# Extradata - ConsoleFEDataBlock
					if (!!$LNKData.'Console CodePage ID')
					{
						$null = $LNKNode.Nodes.Add("$('CodePage')", "Console Code Page ID: $($LNKData.'Console CodePage ID')")
						$LNKNode.Nodes['CodePage'].ToolTipText = "LCID Structure`nhttps://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/63d3d639-7fd2-4afb-abbe-0d5b5551eef8"
					}
					# Extradata - TrackerDataBlock
					# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/df8e3748-fba5-4524-968a-f72be06d71fc
					if (!!$LNKData.'Machine ID')
					{
						$null = $LNKNode.Nodes.Add("$('Machine ID')", "Machine ID: $($LNKData.'Machine ID')")
					}
					if (!!$LNKData.'Guid 1')
					{
						$Guid1Node = $LNKNode.Nodes.Add("$('Guid 1')", "Guid 1: $($LNKData.'Guid 1'.ObjectID)")
						$Null = $Guid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 1'.version)")
						$Null = $Guid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 1'.variant)")
						$Null = $Guid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 1'.Sequence)")
						if (!!$LNKData.'Guid 1'.MAC)
						{
							# Add to tree
							$Null = $Guid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 1'.Created)")
							$Guid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $Guid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 1'.MAC)")
							$Guid1Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 1'.MAC
							$Guid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Birth Guid 1')
					{
						$BGuid1Node = $LNKNode.Nodes.Add("$('Birth Guid 1')", "Birth Guid 1: $($LNKData.'Birth Guid 1'.ObjectID)")
						$Null = $BGuid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 1'.version)")
						$Null = $BGuid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 1'.variant)")
						$Null = $BGuid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 1'.Sequence)")
						if (!!$LNKData.'Birth Guid 1'.MAC)
						{
							# Add to tree
							$Null = $BGuid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 1'.Created)")
							$BGuid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $BGuid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 1'.MAC)")
							$BGuid1Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 1'.MAC
							$BGuid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Guid 2')
					{
						$Guid2Node = $LNKNode.Nodes.Add("$('Guid 2')", "Guid 2: $($LNKData.'Guid 2'.ObjectID)")
						$Null = $Guid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 2'.version)")
						$Null = $Guid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 2'.variant)")
						$Null = $Guid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 2'.Sequence)")
						if (!!$LNKData.'Guid 2'.MAC)
						{
							# Add to tree
							$Null = $Guid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 2'.Created)")
							$Guid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $Guid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 2'.MAC)")
							$Guid2Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 2'.MAC
							$Guid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Birth Guid 2')
					{
						$BGuid2Node = $LNKNode.Nodes.Add("$('Birth Guid 2')", "Birth Guid 2: $($LNKData.'Birth Guid 2'.ObjectID)")
						$Null = $BGuid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 2'.version)")
						$Null = $BGuid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 2'.variant)")
						$Null = $BGuid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 2'.Sequence)")
						if (!!$LNKData.'Guid 2'.MAC)
						{
							# Add to tree
							$Null = $BGuid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 2'.Created)")
							$BGuid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $BGuid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 2'.MAC)")
							$BGuid2Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 2'.MAC
							$BGuid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					
					# Extradata -VistaAndAboveIDListDataBlock
					if (!!$LNKData.VistaItemIdListItems)
					{
						$VistaNode = $LNKNode.Nodes.Add("VistaPath", "Vista And Above IDList Items")
						$VistaNode.ForeColor = 'Violet'
						$null = $VistaNode.Nodes.Add("VistaDisplayName", "VistaAndAbove DisplayName: $($LNKData.Vista_DisplayName)")
						$null = $VistaNode.Nodes.Add("VistaPath", "VistaAndAbove Path: $($LNKData.Vista_Path)")
						Populate-ItemIdListItems -ItemIDListNode $VistaNode -ItemIdList @($LNKData.VistaItemIdListItems)
					}
					
					# HasIconLocation
					if ($LNKData.Link_Flags.contains('HasIconLocation'))
					{
						$null = $LNKNode.Nodes.Add("$('Icon Location')", "Icon Location: $($LNKData.'Icon Location')")
					}
					# HasIconLocation
					if ($LNKData.Link_Flags.contains('HasExpIcon'))
					{
						$null = $LNKNode.Nodes.Add("$('iconTargetAnsi')", "Icon Target Ansi: $($LNKData.iconTargetAnsi)")
						$null = $LNKNode.Nodes.Add("$('iconTargetUnicode')", "Icon Target Unicode: $($LNKData.iconTargetUnicode)")
					}
				} # End if FLAGS
					
					$raw = $LNKNode.Nodes.Add("RawHexData", "LNK Data")
					if ($offsets.count -gt 1)
					{
						$raw.Tag = @([System.BitConverter]::ToString($ShellLink_data[0 .. ($LNKData.'Shortcut Size' -1)]) -replace '-', '')
						$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.'Shortcut Size'))"
					}
					else
					{
						$raw.Tag = @([System.BitConverter]::ToString($ShellLink_data) -replace '-', '')
						$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($ShellLink_data.count))"
					}
					$raw.ForeColor = 'Peru'
				
					#	In customdestinations-ms:
					#	The Lnk CLSID '0x0114020000000000C000000000000046' precedes each LNK entry
					#	The end signature of customdestinations-ms is: '0xFBBFBA'
					
					if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch 'C0000000000000464C' -and $LNKData.LinkSlack -notmatch '(ABFBBFBA)' -and $LNKData.LinkSlack -notmatch '(FBBFBA)')
					{
						$null = $LNKNode.Nodes.Add("$('Link Slack')", "Link Slack")
						$LNKNode.Nodes["$('Link Slack')"].Tag = @($LNKData.LinkSlack)
						$LNKNode.Nodes["$('Link Slack')"].ToolTipText = "Right click to copy the raw (Hex) Link Slack data"
						$LNKNode.Nodes["$('Link Slack')"].ForeColor = 'Tomato'
					}
					
					$Status.Text = $null
				}
				else
				{
					$LNKNode = $Root2.Nodes.Add("LNK #$($o)", "[$($offset.Start.ToString('D5'))] LNK #$($o.ToString('D3')) ")
					$Root2.Nodes["LNK #$($o)"].ForeColor = 'IndianRed'
					$Root2.Nodes["LNK #$($o)"].Tag = @([System.BitConverter]::ToString($data) -replace '-', '')
					# $Root2.Nodes["LNK #$($o)"].ToolTipText = "LNK Signature @ Offset: $($offset.Start) - Data Length: $($offset.Length)`n$($Error[0].Exception.InnerException.Message)"
				}
				$o = $o + 1
			}
			$FileStream.Dispose()
			$treeview2.EndUpdate()
	
			if ($treeview2.Nodes[0].Nodes.Count -ge 1)
			{
				$TreeSearch.Visible = $true
				if ($dataoffsets.count -eq 1)
				{
					$treeview2.Nodes[0].Expand()
					$treeview2.Nodes[0].FirstNode.Expand()
				}
				elseif ($dataoffsets.count -gt 1)
				{
					$treeview2.Nodes[0].Expand()
					$treeview2.Nodes[0].Nodes[1].FirstNode.Expand()
				}
				$Status.Text = "Ready"
			}
			else	
			{ $TreeSearch.Visible = $false}
		}
		else
		{
			[System.Console]::Beep(500, 150)
			$Status.Text = "Nothing to see in $($fname)"
		}
		
	} # End Process-Link
	
	function Process-Automatic
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$File
		)
		# Clear tree
		$treeview2.Nodes.Clear()
		$TreeSearch.Visible = $false
		
		$fname = Split-Path -Path "$($File)" -Leaf
		try
		{
			$fileinfo = [System.IO.FileInfo]::new("$($File)")
			if ($fileinfo.Attributes.HasFlag([System.IO.FileAttributes]::SparseFile) -or $fileinfo.Attributes.HasFlag([System.IO.FileAttributes]::Offline) -or $fileinfo.Attributes.HasFlag([System.IO.FileAttributes]::ReparsePoint))
			{
				$Status.Text = "$($fname) has flags:  $($fileinfo.Attributes)"
				[System.Console]::Beep(500, 150)
				return
			}
			#Check file size
			$fs = $fileinfo.Length
		}
		catch
		{
			[System.Console]::Beep(500, 150)
			Show-ErrorMessage -ErrorMessage "Can not Access $($fname)"
			$Error.Clear()
			[System.Console]::Beep(500, 150)
			return
		}
		if ($fs -lt 512)
		{
			$Status.Text = "$($fname) is too small"
			[System.Console]::Beep(500, 150)
			return
		}
			
		#Open file & read the Header
		$ReadHeader = [System.IO.File]::Open("$($File)", ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::ReadWrite))
		$Header = [System.Byte[]]::new([Int]8)
		$null = $ReadHeader.Read($Header, 0, 8)
		$ReadHeader.Dispose()
		
		# Check the Header if file is 'Microsoft Compound File Binary File Format, Version 4'
		$filesignature = ([System.BitConverter]::ToString($header) -replace '-', '')
		if ($filesignature -ne 'D0CF11E0A1B11AE1')
		{
			$Status.Text = "$(Split-Path -Path $File -Leaf)'s header $($filesignature) is not a MS Compound File Binary File ('D0CF11E0A1B11AE1')"
			Process-Link -File $File
			return
		}
		else
		{
			$Status.Text = "$(Split-Path -Path $File -Leaf) is a MS Compound File Binary File"
		}
		
		# Open & Read 'Microsoft Compound File Binary File Format, Version 4'
		$methodArgs = @($File, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::Read)
		$storageRootType = [System.IO.Packaging.StorageInfo].Assembly.GetType("System.IO.Packaging.StorageRoot", $true, $false)
		$result = $storageRootType.InvokeMember("Open", [System.Reflection.BindingFlags]::Static -bor [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public -bor [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::InvokeMethod, $null, $null, $methodArgs)
		
		$count = $result.GetStreams().count
		if ($count -ge 1)
		{
			$Status.Text = "$(Split-Path -Path $File -Leaf) has $($count) streams"
			$TreeSearch.Visible = $true
			# Get each Stream
			$streams = ForEach ($stream in $result.GetStreams())
			{
				$data = $null
				$reader = New-Object System.IO.BinaryReader($stream.GetStream())
				$data = $reader.ReadBytes($reader.BaseStream.Length)
				$shellLnk = if ($data.Length -ge 20 -and $stream.Name -notmatch "DestList"){Get-ShellLinkfrombyteArray -ByteArray $data }else { $null }
				
				[pscustomobject][Ordered]@{
					'Name' = split-path -path $File -Leaf
					'StreamName' = $stream.Name
					'StreamData' = $shellLnk
					'DataLength' = $data.Length
					'Data'       = $data  
				}
				$reader.Close()
			}
			$reader.Dispose()
			$treeview2.BeginUpdate()
			$treeview2.Nodes.Clear()
			$Root2 = $treeview2.Nodes.Add("Root", "$($File)")
			
			# Get Filename Path Hash and add to tree
			if ($fname -match '.automaticDestinations-ms')
			{
				$PathHash = $fname.Replace('.automaticDestinations-ms','')
				$Status.Text = "Reading automaticDestinations-ms file $($PathHash)"
				$appidnode = $Root2.Nodes.Add("$($PathHash)", "AppID: $($PathHash.ToUpper())")
				$appidnode.ForeColor = 'LimeGreen'
			}
			foreach ($streaminf in $streams)
			{
				[System.Windows.Forms.Application]::DoEvents()
				
					# Get Link Data
					$LNKData = $streaminf.StreamData
				if ($LNKData -ne $null)
				{
					$streamNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: [$($streaminf.StreamName.ToString())] $($LNKData.'Display Name')")
					$streamNode.ForeColor = 'Orange'
					#	$streamNode.Tag = @($null, $streaminf.Data)
					$data = [System.BitConverter]::ToString($streaminf.Data) -replace '-', ''
					$streamNode.Tag = @($data, $null, $null, $null, $LNKData)
					$null = $streamNode.Nodes.Add("$('Stream Data Size')", "Stream Size: $($streaminf.DataLength)")
					# Header
					$SizeNode = $streamNode.Nodes.Add("$('Shortcut Size')", "Shortcut Size: $($LNKData.'Shortcut Size')")
					$null = $SizeNode.Nodes.Add('Header Block Size', "Header Block Size: $($LNKData.'Header Block Size')")
					$SizeNode.Nodes['Header Block Size'].Tag = @([System.BitConverter]::ToString($streaminf.Data[0 .. 75]) -replace '-', '')
					$SizeNode.Nodes['Header Block Size'].ToolTipText = "Right click to copy the raw (Hex) data (76)"
					$SizeNode.Nodes['Header Block Size'].ForeColor = 'Peru'
					
					if ($LNKData.'Link Info Block Size')
					{
						$null = $SizeNode.Nodes.Add('Link Info Block Size', "Link Info Block Size: $($LNKData.'Link Info Block Size')")
						if ($LNKData.LinkInfoData.count -gt 0)
						{
							$SizeNode.Nodes['Link Info Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkInfoData) -replace '-', '')
							$SizeNode.Nodes['Link Info Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkInfoData.count))"
							$SizeNode.Nodes['Link Info Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'TargetID Block Size')
					{
						$null = $SizeNode.Nodes.Add('TargetID Block Size', "TargetID Block Size: $($LNKData.'TargetID Block Size')")
						if ($LNKData.LinkTargetIDListData.count -gt 0)
						{
							$SizeNode.Nodes['TargetID Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkTargetIDListData) -replace '-', '')
							$SizeNode.Nodes['TargetID Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkTargetIDListData.count))"
							$SizeNode.Nodes['TargetID Block Size'].ForeColor = 'Peru'
						}
					}
					if ($LNKData.'StringData Block Size')
					{
						$null = $SizeNode.Nodes.Add('StringData Block Size', "StringData Block Size: $($LNKData.'StringData Block Size')")
						if ($LNKData.StringDataData.count -gt 0)
						{
							$SizeNode.Nodes['StringData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.StringDataData) -replace '-', '')
							$SizeNode.Nodes['StringData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.StringDataData.count))"
							$SizeNode.Nodes['StringData Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'ExtraData Block Size')
					{
						$null = $SizeNode.Nodes.Add('ExtraData Block Size', "ExtraData Block Size: $($LNKData.'ExtraData Block Size')")
						if ($LNKData.ExtraDataData.count -gt 0)
						{
							$SizeNode.Nodes['ExtraData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.ExtraDataData) -replace '-', '')
							$SizeNode.Nodes['ExtraData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.ExtraDataData.count))"
							$SizeNode.Nodes['ExtraData Block Size'].ForeColor = 'Peru'
						}
					}
					
					if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch '4800000081E903DFDA31E64BAB0A85774A0BD1B4')
					{
						$null = $streamNode.Nodes.Add("$('LinkSlackLength')", "LNK Slack Size: $($LNKData.LinkSlackLength)")
						$streamNode.Nodes["$('LinkSlackLength')"].ForeColor = 'Tomato'
					}
					# Header
					$null = $streamNode.Nodes.Add("$('LinkCLSID')", "Link CLSID: $($LNKData.'LinkCLSID')")
					$flagnodes = $streamNode.Nodes.Add("Link_Flags", "Link Flags")
					foreach ($flag in $LNKData.Link_Flags.split(','))
					{
						$null = $flagnodes.Nodes.Add("$($flag)", "Link Flag: $($flag.Replace(' ', ''))")
						if (!!$LinkFlagsTT["$($flag.Replace(' ', ''))"]) { $flagnodes.Nodes["$($flag)"].ToolTipText = $LinkFlagsTT["$($flag.Replace(' ', ''))"] }
					}
					$AttributesNode = $streamNode.Nodes.Add("$('FileAttributes')", "File Attributes")
					foreach ($attribute in $LNKData.'FileAttributes')
					{
						$null = $AttributesNode.Nodes.Add("$($attribute)", "Attribute: $($attribute.replace('FILE_ATTRIBUTE_', '').Replace(' ', ''))")
					}
					if ($null -ne $LNKData.CreationTime)
					{
						$CreationTime = $streamNode.Nodes.Add("$('CreationTime')", "Creation Time (UTC): $($LNKData.CreationTime)")
						$CreationTime.ForeColor = 'Cyan'
					}
					if ($null -ne $LNKData.AccessTime)
					{
						$AccessTime = $streamNode.Nodes.Add("$('AccessTime')", "Access   Time (UTC): $($LNKData.AccessTime)")
						$AccessTime.ForeColor = 'Cyan'
					}
					if ($null -ne $LNKData.WriteTime)
					{
						$WriteTime = $streamNode.Nodes.Add("$('WriteTime')", "Write    Time (UTC): $($LNKData.WriteTime)")
						$WriteTime.ForeColor = 'Cyan'
					}
					if (!!$LNKData.'Target File Size')
					{
						$null = $streamNode.Nodes.Add("$('Target File Size')", "Target File Size: $($LNKData.'Target File Size')")
						$streamNode.Nodes['Target File Size'].ToolTipText = "If the link target file is larger than 0xFFFFFFFF, this value specifies the least significant 32 bits of the link
target file size."
					}
					$null = $streamNode.Nodes.Add("$('Icon Idx')", "Icon Idx: $($LNKData.'Icon Idx')")
					$null = $streamNode.Nodes.Add("$('ShowCommand')", "ShowCommand: $($LNKData.'ShowCommand')")
					$null = $streamNode.Nodes.Add("$('HotKey')", "HotKey: $($LNKData.'HotKey')")
					
					# LinkTargetIDList
					if ($LNKData.Link_Flags.contains('HasLinkTargetIDList') )
					{
						$null = $streamNode.Nodes.Add("$('Display Name')", "Display Name: $($LNKData.'Display Name')")
						$null = $streamNode.Nodes.Add("$('TargetPath')", "Target Path: $($LNKData.'Path')")
					}
					if ($LNKData.ItemIdListItems)
					{
						Populate-ItemIdListItems -ItemIDListNode $streamNode -ItemIdList @($LNKData.ItemIdListItems)
					}
					# StringData - HasName
					if ($LNKData.Link_Flags.contains('HasName') )
					{
						$NameStringnode = $streamNode.Nodes.Add("$('NameString')", "LNK Name: $($LNKData.'NameString')")
						$NameStringnode.ForeColor = 'PaleGreen'
					}
					
					# StringData - HasWorkingDir
					if ($LNKData.Link_Flags.contains('HasWorkingDir') )
					{
						$null = $streamNode.Nodes.Add("$('Working Dir.')", "Working Dir.: $($LNKData.'Working Dir.')")
					}
					
					# StringData - HasRelativePath
					if ($LNKData.Link_Flags.contains('HasRelativePath') )
					{
						$null = $streamNode.Nodes.Add("$('Relative Path')", "Relative Path: $($LNKData.'Relative Path')")
					}
					
					# StringData - HasArguments
					if ($LNKData.Link_Flags.Contains('HasArguments'))
					{
						$argsnode = $streamNode.Nodes.Add("$('Command Args')", "Command Arguments [$($LNKData.'Command Args Length')]: $($LNKData.'Command Args')")
						$argsnode.ToolTipText = [System.Text.RegularExpressions.Regex]::Replace($LNKData.'Command Args', '(.){100}', "$('$0')`n")
						$argsnode.ForeColor = 'Yellow'
					}
					# Link Info
					if ($LNKData.Link_Flags.Contains('HasLinkInfo'))
					{
						if (!!$LNKData.'Link Info Flags')
						{
							$liflagnodes = $streamNode.Nodes.Add("$('LinkInfoFlags')", "Link Info Flags")
							if (![System.String]::IsNullOrEmpty($LNKData.'Link Info Flags'))
							{
								$liflagSS = @($LNKData.'Link Info Flags'.ToString().split(',').foreach{ $_ -split ("And", 2, [System.StringSplitOptions]::RemoveEmptyEntries) })
								foreach ($liflag in $liflagSS)
								{
									$null = $liflagnodes.Nodes.Add("$($liflag)", "Info Flag: $($liflag.Replace(' ', ''))")
								}
							}
						}
						# VolumeID
						if ($LNKData.'Link Info Flags'.Contains('VolumeID'))
						{
							$null = $streamNode.Nodes.Add("$('Drive Type')", "Drive Type: $($LNKData.'Drive Type')")
							if (!!$DriveTypes["$($LNKData.'Drive Type')"])
							{
								$streamNode.Nodes["$('Drive Type')"].ToolTipText = $DriveTypes["$($LNKData.'Drive Type')"]
							}
							$null = $streamNode.Nodes.Add("$('Drive s/n')", "Drive Serial Number: $($LNKData.'Drive s/n')")
							$null = $streamNode.Nodes.Add("$('VolumeLabel')", "Volume Label: $($LNKData.'Volume Label')")
						}
						
						# LocalBasePath
						if ($LNKData.'Link Info Flags'.Contains('LocalBasePath'))
						{
							$null = $streamNode.Nodes.Add("$('Local Base Path')", "Local Base Path: $($LNKData.'Local Base Path')")
							$null = $streamNode.Nodes.Add("$('Local Base Path Unicode')", "Local Base Path Unicode: $($LNKData.'Local Base Path Unicode')")
						}
						# CommonPathSuffix
						if ($LNKData.'Link Info Flags'.Contains('PathSuffix'))
						{
							$null = $streamNode.Nodes.Add("$('CommonPathSuffix')", "Common Path Suffix: $($LNKData.'CommonPathSuffix')")
							$null = $streamNode.Nodes.Add("$('CommonPathSuffixUnicode')", "Common Path Suffix Unicode: $($LNKData.'CommonPathSuffixUnicode')")
						}
						
						# CommonNetworkRelativeLink
						if ($LNKData.'Link Info Flags'.Contains('CommonNetworkRelativeLink'))
						{
							$CommonNetworkRelativeLinkFlagsNode = $streamNode.Nodes.Add("$('CommonNetworkRelativeLinkFlags')", "Common Network Relative Link Flags")
							if (![System.String]::IsNullOrEmpty($LNKData.'CommonNetworkRelativeLinkFlags'))
							{
								$CommonNetworkflags = @($LNKData.'CommonNetworkRelativeLinkFlags'.split(',') )
								foreach ($cnflag in $CommonNetworkflags)
								{
									$null = $CommonNetworkRelativeLinkFlagsNode.Nodes.Add("$($cnflag)", "Relative Link Flag: $($cnflag.Replace(' ', ''))")
								}
							}
							# ValidNetType
							if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidNetType'))
							{
								$null = $streamNode.Nodes.Add("$('NetworkProviderType')", "Network Provider Type: $($LNKData.NetworkProviderType)")
							}
							
							$null = $streamNode.Nodes.Add("$('NetName')", "NetName: $($LNKData.'NetName')")
							$null = $streamNode.Nodes.Add("$('NetName Unicode')", "NetName Unicode: $($LNKData.'NetName Unicode')")
							# ValidDevice
							if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidDevice'))
							{
								$null = $streamNode.Nodes.Add("$('Device Name')", "Device Name: $($LNKData.'Device Name')")
								$null = $streamNode.Nodes.Add("$('Device Name Unicode')", "Device Name Unicode: $($LNKData.'Device Name Unicode')")
							}
						}
					}
					
					# HasDarwinID
					if ($LNKData.Link_Flags.Contains('HasDarwinID'))
					{
						$null = $streamNode.Nodes.Add("$('DarwinDataAnsi')", "Darwin Data Ansi: $($LNKData.'DarwinDataAnsi')")
						$null = $streamNode.Nodes.Add("$('DarwinDataUnicode')", "Darwin Data Unicode: $($LNKData.'DarwinDataUnicode')")
					}
					
					# RunWithShimLayer
					if ($LNKData.Link_Flags.contains('RunWithShimLayer'))
					{
						$null = $streamNode.Nodes.Add("$('ShimLayerName')", "Shim Layer Name: $($LNKData.'ShimLayerName')")
					}
					
					# HasExpString
					if ($LNKData.Link_Flags.contains('HasExpString'))
					{
						$null = $streamNode.Nodes.Add("$('TargetAnsi')", "Target Ansi: $($LNKData.'TargetAnsi')")
						$null = $streamNode.Nodes.Add("$('TargetUnicode')", "Target Unicode: $($LNKData.'TargetUnicode')")
					}
					
					# EnableTargetMetadata
					if ($LNKData.Link_Flags.Contains('EnableTargetMetadata') -and !!$LNKData.PropertyStoreEntries)
					{
						$TargetMetadataNode = $streamNode.Nodes.Add("TargetMetadata", "Target Metadata")
						$TargetMetadataNode.ForeColor = 'Violet'
						Populate-SPS1 -Node $TargetMetadataNode -SPS1properties @($LNKData.PropertyStoreEntries)
					}
					
					# 	Extradata - KnownFolderDataBlock
					if (!!$LNKData.'Known Folder BlockSignature')
					{
						$null = $streamNode.Nodes.Add("$('KnBlockSignature')", "Known Folder BlockSignature: $($LNKData.'Known Folder BlockSignature')")
						$null = $streamNode.Nodes.Add("$('KnownFolderID')", "Known Folder GUID: $($LNKData.'Known Folder ID')")
						$null = $streamNode.Nodes.Add("$('KnownFolderDisplayName')", "Known Folder Display Name: $($LNKData.'Known Folder DisplayName')")
						$null = $streamNode.Nodes.Add("$('KnownFolderIDOffset')", "Known FolderID Offset: $($LNKData.'Known FolderID Offset')")
					}
					
					# Extradata - SpecialFolderDataBlock
					if (!!$LNKData.'Special Folder BlockSignature')
					{
						$null = $streamNode.Nodes.Add("$('SpBlockSignature')", "Special Folder BlockSignature: $($LNKData.'Special Folder BlockSignature')")
						$null = $streamNode.Nodes.Add("$('SpecialFolderID')", "Special Folder ID: $($LNKData.'Special Folder ID')")
						$null = $streamNode.Nodes.Add("$('SpecialFolderIDOffset')", "Special Folder Offset: $($LNKData.'Special Folder Offset')")
					}
					
					# Extradata - EnvironmentVariableDataBlock
					if (!!$LNKData.'Environment Variable BlockSignature')
					{
						$null = $streamNode.Nodes.Add("$('EnvBlockSignature')", "Environment Variable BlockSignature: $($LNKData.'Environment Variable BlockSignature')")
						$null = $streamNode.Nodes.Add("$('EnvTargetAnsi')", "Environment Variable TargetAnsi: $($LNKData.'Environment Variable TargetAnsi')")
						$null = $streamNode.Nodes.Add("$('EnvTargetUnicode')", "Environment Variable TargetUnicode: $($LNKData.'Environment Variable TargetUnicode')")
					}
					
					# Extradata - ConsoleDataBlock
					if (!!$LNKData.'Console Data Block')
					{
						$consolenode = $streamNode.Nodes.Add("ConsoleNode", "Console Properties")
						foreach ($consoleprop in ($LNKData.'Console Data Block' | Get-Member -MemberType NoteProperty).Name)
						{
							$null = $consolenode.Nodes.Add("Console$($consoleprop)", "$($consoleprop): $($LNKData.'Console Data Block'.$consoleprop)")
						}
					}
					
					# Extradata - ConsoleFEDataBlock
					if (!!$LNKData.'Console CodePage ID')
					{
						$null = $streamNode.Nodes.Add("$('CodePage')", "Console Code Page ID: $($LNKData.'Console CodePage ID')")
						$LNKNode.Nodes['CodePage'].ToolTipText = "LCID Structure`nhttps://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/63d3d639-7fd2-4afb-abbe-0d5b5551eef8"
					}
					
					# Extradata - TrackerDataBlock
					# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/df8e3748-fba5-4524-968a-f72be06d71fc
					if (!!$LNKData.'Machine ID')
					{
						$null = $streamNode.Nodes.Add("$('Machine ID')", "Machine ID: $($LNKData.'Machine ID')")
					}
					if (!!$LNKData.'Guid 1')
					{
						$Guid1Node = $streamNode.Nodes.Add("$('Guid 1')", "Guid 1: $($LNKData.'Guid 1'.ObjectID)")
						$Null = $Guid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 1'.version)")
						$Null = $Guid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 1'.variant)")
						$Null = $Guid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 1'.Sequence)")
						if (!!$LNKData.'Guid 1'.MAC)
						{
							# Add to tree
							$Null = $Guid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 1'.Created)")
							$Guid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $Guid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 1'.MAC)")
							$Guid1Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 1'.MAC
							$Guid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Birth Guid 1')
					{
						$BGuid1Node = $streamNode.Nodes.Add("$('Birth Guid 1')", "Birth Guid 1: $($LNKData.'Birth Guid 1'.ObjectID)")
						$Null = $BGuid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 1'.version)")
						$Null = $BGuid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 1'.variant)")
						$Null = $BGuid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 1'.Sequence)")
						if (!!$LNKData.'Birth Guid 1'.MAC)
						{
							# Add to tree
							$Null = $BGuid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 1'.Created)")
							$BGuid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $BGuid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 1'.MAC)")
							$BGuid1Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 1'.MAC
							$BGuid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Guid 2')
					{
						$Guid2Node = $streamNode.Nodes.Add("$('Guid 2')", "Guid 2: $($LNKData.'Guid 2'.ObjectID)")
						$Null = $Guid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 2'.version)")
						$Null = $Guid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 2'.variant)")
						$Null = $Guid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 2'.Sequence)")
						if (!!$LNKData.'Guid 2'.MAC)
						{
							# Add to tree
							$Null = $Guid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 2'.Created)")
							$Guid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $Guid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 2'.MAC)")
							$Guid2Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 2'.MAC
							$Guid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Birth Guid 2')
					{
						$BGuid2Node = $streamNode.Nodes.Add("$('Birth Guid 2')", "Birth Guid 2: $($LNKData.'Birth Guid 2'.ObjectID)")
						$Null = $BGuid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 2'.version)")
						$Null = $BGuid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 2'.variant)")
						$Null = $BGuid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 2'.Sequence)")
						if (!!$LNKData.'Guid 2'.MAC)
						{
							# Add to tree
							$Null = $BGuid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 2'.Created)")
							$BGuid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $BGuid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 2'.MAC)")
							$BGuid2Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 2'.MAC
							$BGuid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					
					# Extradata -VistaAndAboveIDListDataBlock
					if (!!$LNKData.VistaItemIdListItems)
					{
						$VistaNode = $streamNode.Nodes.Add("VistaPath", "Vista And Above IDList Items")
						$VistaNode.ForeColor = 'Violet'
						$null = $VistaNode.Nodes.Add("VistaDisplayName", "VistaAndAbove DisplayName: $($LNKData.Vista_DisplayName)")
						$null = $VistaNode.Nodes.Add("VistaPath", "VistaAndAbove Path: $($LNKData.Vista_Path)")
						Populate-ItemIdListItems -ItemIDListNode $VistaNode -ItemIdList @($LNKData.VistaItemIdListItems)
					}
					
					# HasIconLocation
					if ($LNKData.Link_Flags.contains('HasIconLocation') )
					{
						$null = $streamNode.Nodes.Add("$('Icon Location')", "Icon Location: $($LNKData.'Icon Location')")
					}
					# HasIconLocation
					if ($LNKData.Link_Flags.contains('HasExpIcon') )
					{
						$null = $streamNode.Nodes.Add("$('iconTargetAnsi')", "Icon Target Ansi: $($LNKData.iconTargetAnsi)")
						$null = $streamNode.Nodes.Add("$('iconTargetUnicode')", "Icon Target Unicode: $($LNKData.iconTargetUnicode)")
					}
					# Add the Raw Stream (LNK) Hex Data
					if ($streaminf.Data)
					{
						$raw = $streamNode.Nodes.Add("RawHexData", "Stream Data")
						$raw.Tag = @(([System.BitConverter]::ToString($streaminf.Data) -replace '-', ''))
						$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($streaminf.Data.count))"
						$raw.ForeColor = 'Peru'
					}
					if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch '4800000081E903DFDA31E64BAB0A85774A0BD1B4')
					{
						$null = $streamNode.Nodes.Add("$('Link Slack')", "Link Slack")
						$streamNode.Nodes["$('Link Slack')"].Tag = @($LNKData.LinkSlack)
						$streamNode.Nodes["$('Link Slack')"].ToolTipText = "Right click to copy the raw (Hex) Link Slack data"
						$streamNode.Nodes["$('Link Slack')"].ForeColor = 'Tomato'
					}
				}
				# Process DestList
				elseif ($null -eq $LNKData -and ($streaminf.StreamName -eq 'DestList'))
				{
					$check = $Root2.Nodes.Find("$($streaminf.StreamName)", $true)
					if (!!$check)
						{
							$DestNode = $check[0]
						}
						else
							
						{
							$DestNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: $($streaminf.StreamName)")
						}
					$DestNode.ForeColor = 'Fuchsia'
					try
					{
						if ($streaminf.StreamName -eq "DestList")
						{
							$x = $streaminf
							if($x.Data.length -lt 32){continue}
							$header = [pscustomobject]@{
								'Version' = $versions["$([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0))"] + " ($([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0)))"
								'Current Entries' = [Bitconverter]::ToUInt32($x.Data[4 .. 7], 0)
								'Pinned Entries' = [Bitconverter]::ToUInt32($x.Data[8 .. 11], 0)
								'Counter' = [System.BitConverter]::ToString($x.Data[12 .. 15]) -replace '-', '' # [Bitconverter]::ToUInt32($x.Data[12 .. 15], 0)
								'Last Issued Nr' = [Bitconverter]::ToUInt32($x.Data[16 .. 23], 0)
								'Nr of Actions' = [Bitconverter]::ToUInt32($x.Data[24 .. 31], 0)
							}
							$totalentrysize = ($x.Data.Length - 32)
							$entrylength = $lengths["$([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0))"]/1
							
							# Add to tree
							$headernode = $DestNode.Nodes.Add("$($header)", "Header")
							$headernode.ForeColor = 'DarkTurquoise'
							$null = $headernode.Nodes.Add("Version", "Version: $($header.Version)")
							$null = $headernode.Nodes.Add("Current Entries", "Current Entries: $($header.'Current Entries')")
							$null = $headernode.Nodes.Add("Pinned Entries", "Pinned Entries: $($header.'Pinned Entries')")
							$null = $headernode.Nodes.Add("Entries Counter", "Entries Counter: 0x$($header.'Counter')") # ???
							$null = $headernode.Nodes.Add("Last Issued Nr", "Last Issued Nr: $($header.'Last Issued Nr')")
							$null = $headernode.Nodes.Add("Nr of Actions", "Nr of Actions: $($header.'Nr of Actions')")
							
							# Get Entries
							$entries = for ($start = 32; $start -lt $totalentrysize)
							{
								$lastaccessed = try { [datetime]::FromFileTimeUtc("0x$([System.BitConverter]::ToString($x.data[($start + 107) .. ($start + 100)]) -replace '-', '')").ToString("dd-MMM-yyyy HH:mm:ss.fffffff") }
								catch { [System.BitConverter]::ToString($x.data[($start + 107) .. ($start + 100)]) -replace '-', '' }
							
							if (([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0)) -eq 1) # Version 1
							{
								$stringlength = [Bitconverter]::ToUInt16($x.data[($start + 112) .. ($start + 113)], 0)
								$Hostname = if (([System.BitConverter]::ToString($x.data[($start + 72) .. ($start + 87)]) -replace '-', '') -ne '00000000000000000000000000000000') { [System.Text.Encoding]::UTF8.GetString($x.data[($start + 72) .. ($start + 87)]) }
									else { $null }
									
								[pscustomobject]@{
									'Hash' = [System.BitConverter]::ToString($x.data[$start .. ($start + 7)]) -replace '-', ''
									'Volume Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 8) .. ($start + 23)]) -replace '-', '')
									'File Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 24) .. ($start + 39)]) -replace '-', '')
									'Birth volume Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 40) .. ($start + 55)]) -replace '-', '')
									'Birth file Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 56) .. ($start + 71)]) -replace '-', '')
									'Hostname' = $Hostname
									'Entry ID' = [Bitconverter]::ToUInt64($x.data[($start + 88) .. ($start + 95)], 0)
									'Access Counter' = [Bitconverter]::ToInt32($x.data[($start + 96) .. ($start + 99)], 0)
									'Last Accessed' = $lastaccessed
									'Entry Pin Status' = if (([System.BitConverter]::ToString($x.data[($start + 108) .. ($start + 111)]) -replace '-', '') -eq 'FFFFFFFF') { 'Unpinned' } else { [Bitconverter]::ToUInt32($x.data[($start + 108) .. ($start + 111)], 0) }
									'String Data Length' = $stringlength
									'InQuickAccess' = $null
									'String' = [System.Text.Encoding]::Unicode.GetString($x.data[($start + $entrylength) .. ($start + $entrylength + $stringlength * 2 - 1)])
									'ExtensionSize' = 0
									'ExtensionData' = $null
									'RawEntryData' = [System.BitConverter]::ToString($x.data[$start .. ($start + $entrylength + $stringlength * 2 - 1)]) -replace '-', ''
								} # eND psCO
								$start = $start + $entrylength + $stringlength * 2
							}
							else
							{
								$stringlength = [Bitconverter]::ToUInt16($x.data[($start + 128) .. ($start + 129)], 0)
								$extsize = [Bitconverter]::ToInt32($x.data[($start + $entrylength + $stringlength * 2) .. ($start + $entrylength + $stringlength * 2 + 3)], 0)
								$Hostname = if(([System.BitConverter]::ToString($x.data[($start + 72) .. ($start + 87)]) -replace '-', '') -ne '00000000000000000000000000000000' )	{ [System.Text.Encoding]::UTF8.GetString($x.data[($start + 72) .. ($start + 87)])}else{$null}
									
								[pscustomobject]@{
									'Hash' = [System.BitConverter]::ToString($x.data[$start .. ($start + 7)]) -replace '-', ''
									'Volume Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 8) .. ($start + 23)]) -replace '-', '')
									'File Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 24) .. ($start + 39)]) -replace '-', '')
									'Birth volume Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 40) .. ($start + 55)]) -replace '-', '')
									'Birth file Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 56) .. ($start + 71)]) -replace '-', '')
									'Hostname' = $Hostname
									'Entry ID' = [Bitconverter]::ToUInt64($x.data[($start + 88) .. ($start + 95)], 0)
									'Access Counter' = [Bitconverter]::ToInt32($x.data[($start + 96) .. ($start + 99)], 0)
									'Last Accessed' = $lastaccessed
									'Entry Pin Status' = if (([System.BitConverter]::ToString($x.data[($start + 108) .. ($start + 111)]) -replace '-', '') -eq 'FFFFFFFF') { 'Unpinned' } else { [Bitconverter]::ToUInt32($x.data[($start + 108) .. ($start + 111)], 0) }
									'String Data Length' = $stringlength
									'InQuickAccess' = if ([Bitconverter]::ToUInt64($x.data[($start + 116) .. ($start + 123)], 0) -eq 1) { $true }else{ $false }
									'String' = [System.Text.Encoding]::Unicode.GetString($x.data[($start + $entrylength) .. ($start + $entrylength + $stringlength * 2 - 1)])
									'ExtensionSize' = $extsize
									'ExtensionData' = if ($extsize -gt 0) { $x.data[($start + $entrylength + $stringlength * 2) .. ($start + $entrylength + $stringlength * 2 + 4 + $extsize - 1)] } else { $null }
									'RawEntryData' = [System.BitConverter]::ToString($x.data[$start .. ($start + $entrylength + $stringlength * 2 + 4 + $extsize)]) -replace '-', ''
								} # eND psCO
								
								if ($extsize -eq 0)
								{
									$start = $start + $entrylength + $stringlength * 2 + 4
								}
								else
								{
									$start = $start + $entrylength + $stringlength * 2 + 4 + $extsize
								} # end else
							} # end else
						} # End entries
							
							# Add Entries
							$EntriesNodes = $DestNode.Nodes.Add("Entries", "Entries")
							$EntriesNodes.ForeColor = 'DarkTurquoise'
							$e = 0
							foreach ($entry in $entries)
							{
								$entryNode = $EntriesNodes.Nodes.Add("Entry_$($e)", "[$($streaminf.StreamName.ToString())] Entry #$($e.ToString('D3')) - $($entry.'String')")
								$entryNode.ForeColor = 'GreenYellow'
								$null = $entryNode.Nodes.Add("$($e)entry.Hash", "Hash: $($entry.'Hash')")
							
								if (!!$entry.'Volume Droid ID')
								{
									$Guid1Node = $entryNode.Nodes.Add("$('Guid 1')", "Volume Droid ID:  $($entry.'Volume Droid ID'.ObjectID)")
									$Null = $Guid1Node.Nodes.Add("version", "GUID Version: $($entry.'Volume Droid ID'.version)")
									$Null = $Guid1Node.Nodes.Add("variant", "GUID Variant: $($entry.'Volume Droid ID'.variant)")
									$Null = $Guid1Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'Volume Droid ID'.Sequence)")
									if (!!$entry.'Volume Droid ID'.MAC)
									{
										# Add to tree
										$Null = $Guid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'Volume Droid ID'.Created)")
										$Guid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
										$Null = $Guid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 1'.MAC)")
										$Guid1Node.Nodes["MAC Address"].Tag = $entry.'Volume Droid ID'.MAC
										$Guid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
									}
								}
								if (!!$entry.'File Droid ID')
								{
									$BGuid1Node = $entryNode.Nodes.Add("$('Droid Birth Guid 1')", "Droid Birth Guid 1: $($entry.'File Droid ID'.ObjectID)")
									$Null = $BGuid1Node.Nodes.Add("version", "GUID Version: $($entry.'File Droid ID'.version)")
									$Null = $BGuid1Node.Nodes.Add("variant", "GUID Variant: $($entry.'File Droid ID'.variant)")
									$Null = $BGuid1Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'File Droid ID'.Sequence)")
									if (!!$entry.'File Droid ID'.MAC)
									{
										# Add to tree
										$Null = $BGuid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'File Droid ID'.Created)")
										$BGuid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
										$Null = $BGuid1Node.Nodes.Add("MAC Address", "MAC Address: $($entry.'File Droid ID'.MAC)")
										$BGuid1Node.Nodes["MAC Address"].Tag = $entry.'File Droid ID'.MAC
										$BGuid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
									}
								}
								if (!!$entry.'Birth Volume Droid ID')
								{
									$Guid2Node = $entryNode.Nodes.Add("$('Guid 2')", "Droid Guid 2: $($entry.'Birth Volume Droid ID'.ObjectID)")
									$Null = $Guid2Node.Nodes.Add("version", "GUID Version: $($entry.'Birth volume Droid ID'.version)")
									$Null = $Guid2Node.Nodes.Add("variant", "GUID Variant: $($entry.'Birth volume Droid ID'.variant)")
									$Null = $Guid2Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'Birth volume Droid ID'.Sequence)")
									if (!!$entry.'Birth volume Droid ID'.MAC)
									{
										# Add to tree
										$Null = $Guid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'Birth Volume Droid ID'.Created)")
										$Guid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
										$Null = $Guid2Node.Nodes.Add("MAC Address", "MAC Address: $($entry.'Birth volume Droid ID'.MAC)")
										$Guid2Node.Nodes["MAC Address"].Tag = $entry.'Birth volume Droid ID'.MAC
										$Guid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
									}
								}
								if (!!$entry.'Birth file Droid ID')
								{
									$BGuid2Node = $entryNode.Nodes.Add("$('Birth Guid 2')", "Birth File Droid ID: $($entry.'Birth file Droid ID'.ObjectID)")
									$Null = $BGuid2Node.Nodes.Add("version", "GUID Version: $($entry.'Birth file Droid ID'.version)")
									$Null = $BGuid2Node.Nodes.Add("variant", "GUID Variant: $($entry.'Birth file Droid ID'.variant)")
									$Null = $BGuid2Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'Birth file Droid ID'.Sequence)")
									if (!!$entry.'Birth file Droid ID'.MAC)
									{
										# Add to tree
										$Null = $BGuid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'Birth file Droid ID'.Created)")
										$BGuid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
										$Null = $BGuid2Node.Nodes.Add("MAC Address", "MAC Address: $($entry.'Birth file Droid ID'.MAC)")
										$BGuid2Node.Nodes["MAC Address"].Tag = $entry.'Birth file Droid ID'.MAC
										$BGuid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
									}
								}
							
								$null = $entryNode.Nodes.Add("$($e)entry.Hostname", "Hostname: $($entry.'Hostname')")
								$null = $entryNode.Nodes.Add("$($e)entry.ID", "Entry ID: $($entry.'Entry ID')")
								$LastAccessed = $entryNode.Nodes.Add("$($e)Last Accessed", "Last Accessed: $($entry.'Last Accessed')")
								$LastAccessed.ForeColor = 'Cyan'
								$null = $entryNode.Nodes.Add("$($e)Entry Pin Status", "Entry Pin Status: $($entry.'Entry Pin Status')")
								$null = $entryNode.Nodes.Add("$($e)InQuickAccess", "InQuickAccess: $($entry.'InQuickAccess')")
								$null = $entryNode.Nodes.Add("$($e)String Data Length", "String Data Length: $($entry.'String Data Length')")
								$null = $entryNode.Nodes.Add("$($e)String", "String: $($entry.'String')")
							
								if ($entry.ExtensionSize -gt 0)
								{
									$null = $entryNode.Nodes.Add("$($e)ExtensionSize", "Extension Size: $($entry.ExtensionSize)")
									$items = Get-Ext_SPS1 -ByteArray ($entry.ExtensionData)
									$PropertyStoreEntries = [System.Collections.ArrayList]::new()
									foreach ($property in $items)
									{
										$PropertyStoreEntry = [PSCustomObject]::new()
										$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
										$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
										$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
										$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
									}
									if (!!$items)
									{
										Populate-SPS1 -Node $entryNode -SPS1properties @($PropertyStoreEntries)
									}
								}
							 	# Add the Raw Stream (LNK) Hex Data
								if (!!$entry.RawEntryData)
								{
									$rawstream = $entryNode.Nodes.Add("RawHexData", "Stream Data")
									$rawstream.Tag = @($entry.RawEntryData)
									$rawstream.ToolTipText = "Right click to copy the raw (Hex) data ($($entry.RawEntryData.length))"
									$rawstream.ForeColor = 'Peru'
								}
								$e = $e + 1
							}
							
							if ($null -ne $streaminf.Data)
							{
								$sdata = [System.BitConverter]::ToString($streaminf.Data) -replace '-', ''
								$null = $DestNode.Nodes.Add("DataSize", "Stream Data Size: $($streaminf.Data.count)")
								$null = $DestNode.Nodes.Add("Data", "Stream Data")
								$DestNode.Nodes["Data"].Tag = @($sdata)
								$DestNode.Nodes["Data"].ToolTipText = "Right click to copy the raw (Hex) data ($($sdata.Length))"
								$DestNode.Nodes["Data"].ForeColor = 'Peru'
							}
							
						} # endif
					} #end try
					catch
					{
						if ($null -ne $streaminf.Data)
						{
							$sdata = [System.BitConverter]::ToString($streaminf.Data) -replace '-', ''
							$null = $DestNode.Nodes.Add("DataSize", "Stream Data Size: $($streaminf.Data.count)")
							$null = $DestNode.Nodes.Add("Data", "Stream Data")
							$DestNode["Data"].Tag = @($sdata)
							$DestNode["Data"].ToolTipText = "Right click to copy the raw (Hex) data ($($sdata.Length))"
							$DestNode["Data"].ForeColor = 'Peru'
						}
						else
						{
							$null
						}
					}
				}
				elseif ($LNKData -eq $null -and ($streaminf.StreamName -eq 'DestListPropertyStore') )
				{
					$check2 = $Root2.Nodes.Find("$($streaminf.StreamName)", $true)
					if (!!$check2)
					{
						$DestNode = $check2[0]
					}
					else
					{
						$DestNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: $($streaminf.StreamName)")
					}
					$DestNode.ForeColor = 'Teal'
					if ($null -ne $streaminf.Data)
					{
						$StreamSize = [System.BitConverter]::ToInt32($streaminf.data[0 .. 3], 0)
						if($StreamSize -eq 0){continue}
						$sdata = [System.BitConverter]::ToString($streaminf.Data) -replace '-', ''
						if ($streaminf.data.count -gt 12 -and [System.BitConverter]::ToString($streaminf.data[8 .. 11]) -eq '31-53-50-53') # 1SPS
						{
							$items = Get-Ext_SPS1 -ByteArray $streaminf.Data
							$PropertyStoreEntries = [System.Collections.ArrayList]::new()
							foreach ($property in $items)
							{
								$PropertyStoreEntry = [PSCustomObject]::new()
								$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
								$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
								$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
								$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
							}
							if (!!$items)
							{
								Populate-SPS1 -Node $DestNode -SPS1properties @($PropertyStoreEntries)
								$null = $DestNode.Nodes.Add("DataSize", "Stream Data Size: $($streaminf.Data.count)")
								$null = $DestNode.Nodes.Add("Data", "Stream Data")
								$DestNode.Nodes["Data"].Tag = @($sdata)
								$DestNode.Nodes["Data"].ToolTipText = "Right click to copy the raw (Hex) data ($($sdata.Length))"
								$DestNode.Nodes["Data"].ForeColor = 'Peru'
								$DestNode.ForeColor = 'Lime'
							}
							else
							{
								$null = $DestNode.Nodes.Add("DataSize", "Stream Data Size: $($streaminf.Data.count)")
								$null = $DestNode.Nodes.Add("Data", "Stream Data")
								$DestNode.Nodes["Data"].Tag = @($sdata)
								$DestNode.Nodes["Data"].ToolTipText = "Right click to copy the raw (Hex) data ($($sdata.Length))"
								$DestNode.Nodes["Data"].ForeColor = 'Peru'
								$DestNode.ForeColor = 'Teal'
							}
						}
						else
						{
							$null = $DestNode.Nodes.Add("DataSize", "Stream Data Size: $($streaminf.Data.count)")
							$null = $DestNode.Nodes.Add("Data", "Stream Data")
							$DestNode.Nodes["Data"].Tag = @($sdata)
							$DestNode.Nodes["Data"].ToolTipText = "Right click to copy the raw (Hex) data ($($sdata.Length))"
							$DestNode.Nodes["Data"].ForeColor = 'Peru'
							$DestNode.ForeColor = 'Teal'
						}
					}
				}
				else
				{
					$check2 = $Root2.Nodes.Find("$($streaminf.StreamName)", $true)
					if (!!$check2)
					{
						$DestNode = $check2[0]
					}
					else
					{
						$DestNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: $($streaminf.StreamName)")
					}
					$DestNode.ForeColor = 'Red'
					
					if (!!$streaminf.Data)
					{
						$sdata = [System.BitConverter]::ToString($streaminf.Data) -replace '-', ''
						$null = $DestNode.Nodes.Add("DataSize", "Stream Data Size: $($sdata.length)")
						$null = $DestNode.Nodes.Add("Raw Data", "Stream Data")
						$DestNode.Nodes["Raw Data"].Tag = @($sdata)
						$DestNode.Nodes["Raw Data"].ToolTipText = "Right click to copy the raw (Hex) data ($($sdata.Length))"
						$DestNode.Nodes["Raw Data"].ForeColor = 'Peru'
					}
					else
					{
						$sdata = $null
						$null = $DestNode.Nodes.Add("DataSize", "Stream has no Data")
					}
					
					
				}
			}
			$treeview2.EndUpdate()
			$treeview2.Nodes[0].Expand()
			if ($treeview2.Nodes[0].Nodes['DestList'])
			{
				$treeview2.Nodes[0].Nodes['DestList'].Expand()
				if ($treeview2.Nodes[0].Nodes['DestList'].Nodes['Entries'])
				{
					$treeview2.Nodes[0].Nodes['DestList'].Nodes['Entries'].Expand()
				}
			}
			
			$Status.Text = "Selected file: $($fname)"
					
		}
		else
		{
			[System.Console]::Beep(500,150)
			$Status.Text = "$($fname) has no streams"
			$TreeSearch.Visible = $false
		}
		# Close Microsoft Compound File Binary File Format, Version 4'
		$result = $storageRootType.InvokeMember("Close", [System.Reflection.BindingFlags]::Static -bor [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public -bor [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::InvokeMethod, $null, $result, $null)
		[GC]::Collect()
	} # End Process-Automatic
	
	function Get-SubKeysHKCU
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$Node,
			[Parameter(Mandatory = $true)]
			$key
		)
		
		$Timestamps = Get-RegKeyLastWriteTime -SubKey $key
		$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::CurrentUser, [Microsoft.Win32.RegistryView]::Default)
		$registrykey = $Registry.OpenSubKey($key)
		$keyname = split-path $key -Leaf
		$keyparent = split-path $key -Parent
				
		$MRUList = [System.Collections.ArrayList]::new()
		$MRUListEx = $registrykey.GetValue([System.String]'MRUListEx')
		$count = $MRUListEx.count
		for ($m = 0; $m -lt $count; $m = $m + 4)
		{
			$null = $MRUList.Add([System.BitConverter]::ToUInt32($MRUListEx[$m .. ($m + 3)], 0))
		}
		
		ForEach ($sub in $MRUList <#$registrykey.GetSubKeyNames()#>)
		{
			$SubkeyValue = $registrykey.GetValue([System.String]$sub)
			$LastWriteTime = if (!!$Timestamps[[System.String]$sub]) { $Timestamps[[System.String]$sub] }	
			if ($null -ne $SubkeyValue)
			{
				try { $itemID = [ShellLink.Structures.ItemID]::FromByteArray($SubkeyValue) }
				catch { $itemID = $null }
				
				$MRUcontents = [PSCustomObject]@{
					'Key' = ($registrykey.Name -replace 'HKEY_CURRENT_USER', 'HKCU')
					'SubKey' = $sub
					'LastWriteTime' = $LastWriteTime
					'Data' = ([System.BitConverter]::ToString($SubkeyValue) -replace '-', '')
					'ItemID' = if ($itemID -is [ShellLink.Structures.ItemID]) { Get-LinkTargetIdList -ItemIdListItem $itemID } else{ $null }
				}
				
				[System.Windows.Forms.Application]::DoEvents()
				
				# Add Node
				$subkeynode = $Node.Nodes.Add("$($sub)", "$($sub)")
				$subkeynode.Tag = @($null, $null, $MRUcontents)
				if ($MRUcontents.ItemID.ItemIDType -notin ('1F','C3', '31', '32', '35', '36', 'B1', '2E', '2F','74', '77'))
				{
					$subkeynode.ImageIndex = 4
					$subkeynode.SelectedImageIndex = 5
					if (!!$MRUcontents.ItemID.GUID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.GUID)"
					}
					elseif (!!$MRUcontents.ItemID.CLSID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CLSID)"
					}
					elseif (!!$MRUcontents.ItemID.CPcategory)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CPcategory)"
					}
					elseif (!!$MRUcontents.ItemID.PropertyStoreEntries.TypedProperty)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.PropertyStoreEntries.TypedProperty.Where{ $_.Description -eq 'Item Name Display [B725F130-47EF-101A-A5F1-02608C9EEBAC\10]' }.TypedProp.Value)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -eq '1F')
				{
					$subkeynode.ImageIndex = 8
					$subkeynode.SelectedImageIndex = 9
					if (!!$MRUcontents.ItemID.DriveLetter)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.DriveLetter)"
					}
					elseif (!!$MRUcontents.ItemID.GUID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.GUID)"
					}
					elseif (!!$MRUcontents.ItemID.CLSID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CLSID)"
					}
					elseif (!!$MRUcontents.ItemID.SortOrderIndex)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.SortOrderIndex)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -in ('2E', '2F'))
				{
					$subkeynode.ImageIndex = 8
					$subkeynode.SelectedImageIndex = 9
					if (!!$MRUcontents.ItemID.DriveLetter)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.DriveLetter)"
					}
					elseif (!!$MRUcontents.ItemID.GUID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.GUID)"
					}
					elseif (!!$MRUcontents.ItemID.CLSID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CLSID)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -eq 'C3')
				{
					$subkeynode.ImageIndex = 6
					$subkeynode.SelectedImageIndex = 7
					if ($MRUcontents.ItemID.Path -ne '')
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.Path)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -in ('31', '35', 'B1','74')) # Folder
				{
					$subkeynode.ImageIndex = 0
					$subkeynode.SelectedImageIndex = 1
					if ($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name -ne '')
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name)"
					}
					else
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.Ansi_Name)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -in ('32', '36','77')) # File
				{
					$subkeynode.ImageIndex = 2
					$subkeynode.SelectedImageIndex = 3
					if ($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name -ne '')
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name)"
					}
					else
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.Ansi_Name)"
					}
				}
				Get-SubKeysHKCU -Node $subkeynode -key "$($key)\$($sub)"
			}
		}
		
		$Registry.Close()
		$Registry.Dispose()
	} # End Get-SubKeysHKCU 
	
	function Get-SubKeysClassesRoot
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$Node,
			[Parameter(Mandatory = $true)]
			$key
		)
		
		$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::ClassesRoot, [Microsoft.Win32.RegistryView]::Default)
		$registrykey = $Registry.OpenSubKey($key)
		
		$MRUList = [System.Collections.ArrayList]::new()
		$MRUListEx = $registrykey.GetValue([System.String]'MRUListEx')
		$count = $MRUListEx.count
		for ($m = 0; $m -lt $count; $m = $m + 4)
		{
			$null = $MRUList.Add([System.BitConverter]::ToUInt32($MRUListEx[$m .. ($m + 3)], 0))
		}
		
		ForEach ($sub in $MRUList<#$registrykey.GetSubKeyNames()#>)
		{
			#	$subkey = $registry.OpenSubKey("$($key)\$($sub)")
			$SubkeyValue = $registrykey.GetValue([System.String]$sub)
			if ($null -ne $SubkeyValue)
			{
				try { $itemID = [ShellLink.Structures.ItemID]::FromByteArray($SubkeyValue) }
				catch { $itemID = $null }
				
				$MRUcontents = [PSCustomObject]@{
					'Key' = ($registrykey.Name -replace 'HKEY_CURRENT_USER', 'HKCU')
					'SubKey' = $sub
					'Data' = ([System.BitConverter]::ToString($SubkeyValue) -replace '-', '')
					'ItemID' = if ($itemID -is [ShellLink.Structures.ItemID]) { Get-LinkTargetIdList -ItemIdListItem $itemID } else{ $null }
				}
				
				# Add Node
				$subkeynode = $Node.Nodes.Add("$($sub)", "$($sub)")
				$subkeynode.Tag = @($null, $null, $MRUcontents)
				if ($MRUcontents.ItemID.ItemIDType -notin ('1F', 'C3', '31', '32', '35', '36', 'B1', '2E', '2F', '74', '77'))
				{
					$subkeynode.ImageIndex = 4
					$subkeynode.SelectedImageIndex = 5
					if (!!$MRUcontents.ItemID.GUID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.GUID)"
					}
					elseif (!!$MRUcontents.ItemID.CLSID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CLSID)"
					}
					elseif (!!$MRUcontents.ItemID.CPcategory)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CPcategory)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -eq '1F')
				{
					$subkeynode.ImageIndex = 8
					$subkeynode.SelectedImageIndex = 9
					if (!!$MRUcontents.ItemID.DriveLetter)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.DriveLetter)"
					}
					elseif (!!$MRUcontents.ItemID.GUID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.GUID)"
					}
					elseif (!!$MRUcontents.ItemID.CLSID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.CLSID)"
					}
					elseif (!!$MRUcontents.ItemID.SortOrderIndex)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.SortOrderIndex)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -in ('2E', '2F'))
				{
					$subkeynode.ImageIndex = 8
					$subkeynode.SelectedImageIndex = 9
					if (!!$MRUcontents.ItemID.DriveLetter)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.DriveLetter)"
					}
					elseif (!!$MRUcontents.ItemID.GUID)
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.GUID)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -eq 'C3')
				{
					$subkeynode.ImageIndex = 6
					$subkeynode.SelectedImageIndex = 7
					if ($MRUcontents.ItemID.Name -ne '')
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.Name)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -in ('31', '35', 'B1','74')) # Folder
				{
					$subkeynode.ImageIndex = 0
					$subkeynode.SelectedImageIndex = 1
					if ($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name -ne '')
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name)"
					}
					else
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.Ansi_Name)"
					}
				}
				elseif ($MRUcontents.ItemID.ItemIDType -in ('32', '36','77')) # File
				{
					$subkeynode.ImageIndex = 2
					$subkeynode.SelectedImageIndex = 3
					if ($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name -ne '')
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.ItemIdExtensions[0].Unicode_Name)"
					}
					else
					{
						$subkeynode.Text = "$($subkeynode.Text) - $($MRUcontents.ItemID.Ansi_Name)"
					}
				}
				Get-SubKeysClassesRoot -Node $subkeynode -key "$($key)\$($sub)"
			}
		}
		
		$Registry.Close()
		$Registry.Dispose()
	} # End Get-SubKeysClassesRoot
	
	function Get-RecentDocs
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$Node,
			[Parameter(Mandatory = $true)]
			$key
		)
		$keyname = split-path $key -Leaf
		$keyparent = split-path $key -Parent
		$Timestamps = Get-RegKeyLastWriteTime -SubKey $key
		if ($Timestamps.Count -eq 0) { $Timestamps = Get-RegKeyLastWriteTime -SubKey $keyparent }
		
		$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::CurrentUser, [Microsoft.Win32.RegistryView]::Default)
		$registrykey = $Registry.OpenSubKey($key)
		if($registrykey.SubKeyCount -gt 0){
			ForEach ($subkey in $registrykey.GetSubKeyNames())
			{
				$LastWriteTime = if(!!$Timestamps[[System.String]$subkey]){ $Timestamps[[System.String]$subkey]}
				$subkeys = $registry.OpenSubKey("$($key)\$($subkey)")
				ForEach ($sub in $subkeys)
				{
					# Add Node
					$nodename = split-path $sub.Name -Leaf
					$subkeynode = $Node.Nodes.Add("$($nodename)", "$($nodename)")
					$subkeynode.ImageIndex = 0
					$subkeynode.SelectedImageIndex = 1
	
					# Get Value Names
					$SubkeyValueNames = $sub.GetValueNames()
					
					# Get MRUlist Order
					$MRUList = [System.Collections.ArrayList]::new()
					$MRUListEx = $subkeys.GetValue([System.String]'MRUListEx')
					$count = $MRUListEx.count
					for ($m = 0; $m -lt $count; $m = $m + 4)
					{
						$null = $MRUList.Add([System.BitConverter]::ToUInt32($MRUListEx[$m .. ($m + 3)], 0))
					}
					if(!$MRUList){ $MRUList = $SubkeyValueNames}
					# foreach ($name in ($SubkeyValueNames -ne 'MRUListEx'))
					foreach ($name in $MRUList)
					{
						$SubkeyValue = $subkeys.GetValue([System.String]$name)
						
						if ($null -ne $SubkeyValue)
						{
							try
							{
								$TargetString = [System.Text.Encoding]::Unicode.GetString($SubkeyValue)
								if ($keyname -in ('RecentDocs'))
								{
									$TargetName = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')[0]
									$idx = $TargetName.Length * 2 + 2
									$itemID = [ShellLink.Structures.ItemID]::FromByteArray($SubkeyValue[$idx .. ($SubkeyValue.Count - 1)])
									# Add Node
									$subkeyValuenode = $subkeynode.Nodes.Add("$($TargetName)", "[$($name)] $($TargetName)")
									$itemIDlist = if ($itemID -is [ShellLink.Structures.ItemID]) { Get-LinkTargetIdList -ItemIdListItem $itemID }
									else { $null }
								}
								elseif ($keyname -in ('OpenSavePidlMRU'))
								{
									$itemIDlist = Get-EmbeddedIDList -ByteArray $SubkeyValue -Index 0
									
									# @(Get-EmbeddedIDList -ByteArray $SubkeyValue -Index 0)
									# [ShellLink.Structures.LinkTargetIDList]::FromByteArray([System.BitConverter]::GetBytes([uint16]$SubkeyValue.Count) + $SubkeyValue).ItemIDList
									# Add Node
									$subkeyValuenode = $subkeynode.Nodes.Add("$($name)", "$($name)")
									
									if (!!$itemIDlist)
									{
										$ic = $itemIDlist.Count
										$iname = if (!!$itemIDlist[$ic - 1].ItemIdExtensions[0].Unicode_Name) { $itemIDlist[$ic - 1].ItemIdExtensions[0].Unicode_Name }
										elseif (!! $itemIDlist[$ic - 1].Ansi_Name) { $itemIDlist[$ic - 1].Ansi_Name }
										elseif (!!$itemIDlist[0].CLSID) { $itemIDlist[0].CLSID }
										elseif (!!$itemIDlist[0].GUID) { $itemIDlist[0].GUID }
										else { $null }
										$subkeyValuenode.Text = "[$($subkeyValuenode.Text)] $($iname)"
									}
								}
								elseif ($keyname -in ('Streams'))
								{
									$itemID = [ShellLink.Structures.ItemID]::FromByteArray(([System.BitConverter]::GetBytes($SubkeyValue.Count) + $SubkeyValue))
									$itemIDlist = if ($itemID -is [ShellLink.Structures.ItemID]) { Get-LinkTargetIdList -ItemIdListItem $itemID }
									else { $null }
									
									$subkeyValuenode = $subkeynode.Nodes.Add("$($name)", "$($name)")
								}
								else
								{
									$itemID = [ShellLink.Structures.ItemID]::FromByteArray($SubkeyValue)
									$itemIDlist = if ($itemID -is [ShellLink.Structures.ItemID]) { Get-LinkTargetIdList -ItemIdListItem $itemID }
									else { $null }
									
									$subkeyValuenode = $subkeynode.Nodes.Add("$($name)", "$($name)")
								}
							}
							catch { $itemIDlist = $null }
							
							$MRUcontents = [PSCustomObject]@{
								'Key' = ($subkeys.Name -replace 'HKEY_CURRENT_USER', 'HKCU')
								'SubKey' = $name
								'LastWriteTime' = $LastWriteTime
								'Data' = ([System.BitConverter]::ToString($subkeyvalue, 0).replace('-', ''))
								'TargetName' = $TargetName
								'ItemID' = $itemIDlist
							}
							
							[System.Windows.Forms.Application]::DoEvents()
							
							# Add Node
							$subkeyValuenode.Tag = @($null, $null, $MRUcontents)
							$subkeyValuenode.ImageIndex = 2
							$subkeyValuenode.SelectedImageIndex = 3
						}
					}
				}
			}
		}
		else
		{
			# Add Node
			$nodename = split-path $key -Leaf
			$subkeynode = $Node
			# Get Value Names
			$SubkeyValueNames = $registrykey.GetValueNames()
			$LastWriteTime = if (!!$Timestamps[[System.String]$nodename]) { $Timestamps[[System.String]$nodename] }
			
			# Get MRUlist Order
			$MRUList = [System.Collections.ArrayList]::new()
			$MRUListEx = $registrykey.GetValue([System.String]'MRUListEx')
			$count = $MRUListEx.count
			for ($m = 0; $m -lt $count; $m = $m + 4)
			{
				$null = $MRUList.Add([System.BitConverter]::ToUInt32($MRUListEx[$m .. ($m + 3)], 0))
			}
			if (!$MRUList) { $MRUList = $SubkeyValueNames }
			# foreach ($name in ($SubkeyValueNames -ne 'MRUListEx'))
			foreach ($name in $MRUList)
			{
				$SubkeyValue = $registrykey.GetValue([System.String]$name)
				
				if ($null -ne $SubkeyValue)
				{
					try
					{
						if ($keyname -in ('LastVisitedPidlMRU', 'LastVisitedPidlMRULegacy'))
						{
							$TargetString = [System.Text.Encoding]::Unicode.GetString($SubkeyValue)
							$TargetName = [System.Text.RegularExpressions.Regex]::Split($TargetString, '\x00')[0]
							$idx = $TargetName.Length * 2 + 2
							$itemIDlist = Get-EmbeddedIDList -ByteArray $SubkeyValue -Index $idx
							$subkeyValuenode = $subkeynode.Nodes.Add("$($name)", "$($name)")
							$subkeyValuenode.Text = "[$($subkeyValuenode.Text)] $($TargetName)"
						}
						else
						{
							$itemID = [ShellLink.Structures.ItemID]::FromByteArray($SubkeyValue)
							$itemIDlist = if ($itemID -is [ShellLink.Structures.ItemID]) { Get-LinkTargetIdList -ItemIdListItem $itemID }
							else { $null }
							$subkeyValuenode = $subkeynode.Nodes.Add("$($name)", "$($name)")
							
							if (!!$itemIDlist)
							{
								$iname = if (!!$itemIDlist.GUID) { $itemIDlist.GUID }
								else { $null }
								$subkeyValuenode.Text = "[$($subkeyValuenode.Text)] $($iname)"
							}
						}
					}
					catch { $itemIDlist = $null }
					
					$MRUcontents = [PSCustomObject]@{
						'Key' = ($registrykey.Name -replace 'HKEY_CURRENT_USER', 'HKCU')
						'SubKey' = $name
						'LastWriteTime' = $LastWriteTime
						'Data' = ([System.BitConverter]::ToString($subkeyvalue, 0).replace('-', ''))
						'TargetName' = $TargetName
						'ItemID' = $itemIDlist
					}
					
					[System.Windows.Forms.Application]::DoEvents()
					
					# Add Node
					$subkeyValuenode.Tag = @($null, $null, $MRUcontents)
					$subkeyValuenode.ImageIndex = 2
					$subkeyValuenode.SelectedImageIndex = 3
				}
			}
		}
		$Registry.Close()
		$Registry.Dispose()
	} # End Get-SubKeysClassesRoot
	
	function Process-MRUlist
	{
		[OutputType([System.Boolean])]
		param ()
		$false
		$toolstripRefresh.Visible = $false
		$treeview1.BeginUpdate()
		$treeview1.Nodes.Clear()
		$treeview2.Nodes.Clear()
		
		if (!!$Script:AppListIdx)
		{
			$Script:AppListIdx.Clear()
		}
		$TreeSearch.Visible = $false
		$TreeSearch.Text = "Search"
		[System.GC]::Collect()
		
		$Root = $treeview1.Nodes.Add('Registry', 'Registry')
		$Root.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
		$Root.ForeColor = 'DarkTurquoise'
		$Status.Text = "Please wait - Collecting Registry entries ..."
		# Current User
		$RegistryKeys = @(
			'Software\Microsoft\Windows\Shell\BagMRU' #NTUser.dat
			'Software\Classes\Local Settings\Software\Microsoft\Windows\Shell\BagMRU' # UsrClass.dat
		)
		foreach ($Registrykey in $RegistryKeys)
		{
			$Status.Text = "Please wait - Processing: $($Registrykey)"
			$RegistrykeyName = Split-Path $Registrykey -Leaf
			$HKCUnode = $Root.Nodes.Add("$($RegistrykeyName)", "$($RegistrykeyName)")
			$HKCUnode.ToolTipText = "$($Registrykey)"
			$HKCUnode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
			Get-SubKeysHKCU -Node $HKCUnode -key $Registrykey
			[System.Windows.Forms.Application]::DoEvents()
		}
		
		# Get RecentDocs
		$RegistryKeys = @(
			'Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs'
			'Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\OpenSavePidlMRU'
			'Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPidlMRU'
			'Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\LastVisitedPidlMRULegacy'
			'Software\Microsoft\Windows\CurrentVersion\Explorer\StreamMRU'
			# 'Software\Microsoft\Windows\CurrentVersion\Explorer\Streams'
			)
		#$RegistryKey = 'Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs'
		foreach ($Registrykey in $RegistryKeys)
		{
			$RegistrykeyName = Split-Path $Registrykey -Leaf
			$RecentNode = $Root.Nodes.Add("$($RegistrykeyName)", "$($RegistrykeyName)")
			$RecentNode.ToolTipText = "$($Registrykey)"
			$Status.Text = "Please wait - Processing: $($Registrykey)"
			$RecentNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
			Get-RecentDocs -Node $RecentNode -key $Registrykey
			[System.Windows.Forms.Application]::DoEvents()
		}
	
		$Status.Text = "Ready"
		$Root.Expand()
		$Root.Nodes[0].Expand()
		$treeview1.EndUpdate()
	} # End Process-MRUlist
	
	function Populate-MRUitem
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$ItemProperties
		)
		
		if ($null -ne $ItemProperties)
		{
			$treeview2.BeginUpdate()
			$treeview2.Nodes.Clear()
			
			# Add Root branch
			$Root2 = $treeview2.Nodes.Add("Root", "Local Registry")
			# Add MRU item Node
			$mrunode = $Root2.Nodes.Add("$($ItemProperties.key)", "$($ItemProperties.key)")
			$mrunode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
			$mrunode.Tag = @($null, $null, $null, $null, $ItemProperties.ItemID)
			# Add Properties
			$null = $mrunode.Nodes.Add("SubKey", "SubKey: $($ItemProperties.SubKey)")
			if (!!$ItemProperties.LastWriteTime)
			{
				$null = $mrunode.Nodes.Add("LastWriteTime", "SubKey LastWriteTime: $($ItemProperties.LastWriteTime)")
				$mrunode.Nodes["LastWriteTime"].ForeColor = 'Cyan'
			}
			Populate-ItemIdListItems -ItemIDListNode $mrunode -ItemIdList @($ItemProperties.ItemID)
			$null = $mrunode.Nodes.Add("RawData", "Data")
			$mrunode.Nodes["RawData"].Tag = @($ItemProperties.Data)
			$mrunode.Nodes["RawData"].ToolTipText = "Right click to copy the raw (Hex) data ($($ItemProperties.Data.length))"
			$mrunode.Nodes["RawData"].ForeColor = 'Peru'
			# End
			$Root2.Expand()
			$Root2.Nodes[0].ExpandAll()
			$Root2.Nodes[0].EnsureVisible()
			$treeview2.EndUpdate()
		}
		else
		{
			Show-ErrorMessage -ErrorMessage "Oops ð¤"
			[System.Console]::Beep(500, 150)
		}
	} # End Populate-MRUitem
	
	$treeview1_NodeMouseClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
		
		# $status.Text = $_.Node.Tag
		if ($_.Node.Level -eq 1 -and $_.Button -eq 'Left')
		{
		<#	$treeview1.Nodes[0].Collapse()#>
			$_.Node.Toggle()
			$this.SelectedNode = $_.Node
		#	$treeview1.SelectedNode.LastNode.EnsureVisible()
		}
		elseif ($_.Button -eq 'Right')
		{
			$this.SelectedNode = $_.Node
		}
		
	}
	
	$treeview1_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		$SaveStream.Visible = $false
			
		if ($treeview1.SelectedNode.Nodes.Count -ne 0 -or !!$treeview1.Nodes["Registry"] )
		{
			$CopyFullFilePath.Visible = $true
		}
		else
		{
			$CopyFullFilePath.Visible = $false
		}
		
		
		if (!!$treeview1.SelectedNode -and !!$treeview1.SelectedNode.Tag -and $treeview1.SelectedNode.Tag.count -le 2)
		{
			$OpenFileWith.Visible = $true
			$toolstripseparator8.Visible = $true
			if ($treeview1.SelectedNode.Nodes.Count -ne 0 -and $treeview1.SelectedNode.LastNode.Name.StartsWith('Stream Name') -and !$treeview1.SelectedNode.IsExpanded)
			{
				$treeview1.SelectedNode.Expand()
			}
			
			if ($treeview1.SelectedNode.Name.StartsWith('Stream Name'))
			{
				if (!$treeview1.SelectedNode.Text.EndsWith('Zone.Identifier'))
				{
					$OpenFileWith.Visible = $false
				}
				$CopyFullFilePath.Visible = $false
				$SaveStream.Visible = $true
				$status.Text = "Selected: $($treeview1.SelectedNode.Text)"
				$tx = $treeview1.SelectedNode.Bounds.Location.X
				$ty = $treeview1.SelectedNode.Bounds.Location.Y
				$contextmenustrip1.Show($treeview1, $tx+50, $ty+50)
			}
			else
			{
				$SaveStream.Visible = $false
				$status.Text = "Selected: $($treeview1.SelectedNode.Name)"
			}
		}
		else
		{
			$CopyFullFilePath.Visible = $false
			$OpenFileWith.Visible = $false
			$toolstripseparator8.Visible = $false
			$status.Text = "$($treeview1.SelectedNode.Text)"
		}
	
		$node = $treeview1.SelectedNode
		if (!$node.Text.StartsWith('[') -and $node.Name.EndsWith(".automaticDestinations-ms") -and !!$node.Tag)
		{
			try
			{
				$Tree1Search.Text = "Select Jumplist by App Name"
				Process-Automatic -File "$($treeview1.SelectedNode.Name)"
			}
			catch
			{
				if (!!$Error[0].Exception.InnerException.Message)
				{
					Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message
					$Error.Clear
					try { Process-Link -File "$($treeview1.SelectedNode.Name)" }
					catch
					{
						if (!!$Error[0].Exception.InnerException.Message)
						{
							Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message
							$Error.Clear
						}
					}
				}
				else
				{
					$status.Text = "Error processing $($treeview1.SelectedNode.Name)"
					$null
				}
			}
		}
		elseif (!!$node.Tag -and $node.Tag.count -lt 3 -and !$node.Name.StartsWith('Stream Name'))
		{
			try
			{
				$Tree1Search.Text = "Select Jumplist by App Name"
				Process-Link -File "$($treeview1.SelectedNode.Name)"
			}
			catch
			{
				if (!!$Error[0].Exception.InnerException.Message)
				{
					Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message
					$Error.Clear
				}
			}
		}
		elseif (!!$node.Tag -and $node.Tag.count -eq 3)
		{
			try
			{
				Populate-MRUitem -ItemProperties ($node.Tag[2])
			}
			catch
			{
				[System.Console]::Beep(500, 150)
			}
		}
		[System.GC]::Collect()
	}
	
	$Collapse_Expand1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Toggle()
		}
	}
	
	$CopyNode1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Text | Set-Clipboard
		}
	}
	
	$Exit1_Click={
		$Jumplist_Browser.Close()
	}
	
	$CopyNode2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.Text | Set-Clipboard
		}
	}
	
	$CopyNode2Tag_Click = {
		if (!!$treeview2.SelectedNode.Tag -and $treeview2.SelectedNode.Tag.count -ge 1)
		{
			try
			{
				$treeview2.SelectedNode.Tag[0] | Set-Clipboard
			}
			catch
			{
				[System.Console]::Beep(500, 150)
			}
		}
	}
	
	$CopyAll2_Click={
			$node = $treeview2.SelectedNode
			If (!!$node -and $node.GetNodeCount($true) -ge 1)
			{
				$Status.Text = 'Please wait ..'
				$Jumplist_Browser.Cursor = 'AppStarting'
				$nodes = (Get-Nodes -nodes $node)
				($nodes.text -replace '\x00','').trim()  | Out-String | Set-Clipboard
				$nodes = $null
				$Jumplist_Browser.Cursor = 'Default'
				$Status.Text = 'Ready'
			}
			else { [System.Console]::Beep(500, 150) }
	}
		
	$Expand2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.Toggle()
		}
	}
	
	$Exit2_Click={
		$Jumplist_Browser.Close()
	}
	
	$Jumplist_Browser_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		switch ([System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "Are you sure you want to Exit?", "LNK & Jumplist Browser", "YesNo", "Question", 'Button2'))
		{
			'Yes' {
				$Status.Text = "Exiting .."
				try
				{
					$treeview1.Nodes.Clear()
					$treeview2.Nodes.Clear()
					$notifyicon1.Dispose()
				}
				catch { }
				[GC]::Collect()
				$Cancel = $false
			}
			'No' {
				$Cancel = $true
			}
		}
		if (!!$Cancel) { $_.Cancel = $true }
		else { $_.Cancel = $false }
	}
	
	$About_Click={
		# Check for latest release on Github
		$JumplistBrowserVersion = "v." + [System.Windows.Forms.Application]::ProductVersion
		$repo = "kacos2000/Jumplist-Browser"
		$latestR = "https://api.github.com/repos/$($repo)/releases/latest"
		$releases = "https://api.github.com/repos/$($repo)/releases"
		$aboutmessage = "Jumplist Browser $($JumplistBrowserVersion)`nCostas Katsavounidis Â© 2022-2024`nhttps://github.com/kacos2000"
		$downlink = "https://github.com/kacos2000/Jumplist-Browser/releases/latest"
		
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		if (test-connection -ComputerName 8.8.8.8 -Count 1 -Quiet -ErrorAction SilentlyContinue)
		{
			$Status.Text = "Checking releases on GitHub"
			try
			{
				$rlist = (Invoke-RestMethod -Uri $releases -UserAgent 'https://github.com/kacos2000/Jumplist-Browser' -TimeoutSec 30).tag_name
				$latest = (Invoke-RestMethod -Uri $latestR -UserAgent 'https://github.com/kacos2000/Jumplist-Browser' -TimeoutSec 30)
				
				$tag = $latest[0].tag_name
				$published = $latest[0].published_at
			}
			catch{ $rlist = $latest = $null}
			if (!!$rlist -and !!$latest)
			{
				if ($JumplistBrowserVersion -ne $tag -and $JumplistBrowserVersion -in $rlist)
				{
					$latestmessage = "$($aboutmessage)`n`nThere is a new update ($($tag)) of Jumplist Browser at:`n'$($downlink)'`nreleased on $($published). Check it out .. "
					$Status.Text = "Latest version: JumplistBrowser $($tag)"
					Show-WarningMessage -WarningMessage $latestmessage
				}
				elseif ($JumplistBrowserVersion -eq $tag)
				{
					$Status.Text = "Latest version: JumplistBrowser $($tag)"
					Show-InfoMessage -InfoMessage "$($aboutmessage)`nYou are using the latest version of Jumplist Browser."
				}
				else
				{
					$Status.Text = "Latest version: JumplistBrowser $($tag)"
					Show-InfoMessage -InfoMessage $aboutmessage
				}
			}
			else
			{
				Show-InfoMessage -InfoMessage $aboutmessage
			}
		}
		else
		{
			$Status.Text = "Session TimeOut"
			Show-InfoMessage -InfoMessage $aboutmessage
		}
		$Status.Text = "Ready"
		
	}
	
	$OpenFolder_Click = {
		
		$currentuser_recentfolder = [System.Environment]::GetFolderPath("Recent")
		$folderbrowserdialog1.SelectedPath = "$($currentuser_recentfolder)"
		
		if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
		{
			$script:recentfolder = $folderbrowserdialog1.SelectedPath
			if ($treeview1.Nodes) { $treeview1.Nodes.Clear() }	else { }
			if ($treeview2.Nodes) { $treeview2.Nodes.Clear() }	else { }
			$TreeSearch.Visible = $false
			$TreeSearch.Text = "Search"
			$Status.Text = $null
			[System.GC]::Collect()
			try
			{
				$Status.Text = "Selected Folder: $($recentfolder) "
				if (!!(Get-Files -Folder "$($recentfolder)"))
				{
					$toolstripRefresh.Visible = $true
					[System.Console]::Beep(2500,300)
				}
				else
				{
					$toolstripRefresh.Visible = $false
					[System.Console]::Beep(500, 150)
				}
			}
			catch
			{
				$toolstripRefresh.Visible = $false
				[System.Console]::Beep(500, 150)
				return
			}
		}
		else
		{
			$toolstripRefresh.Visible = $false
			[System.Console]::Beep(500, 150)
		}
	}
	
	$Open_Click={
		
		$openfiledialog1.Filter = "Link file (*.lnk)|*.lnk|Automatic Destinations Jumplist (*.automaticDestinations-ms)|*.automaticDestinations-ms|Custom Destinations Jumplist (*.customDestinations-ms)|*.customDestinations-ms|Raw Image file (001, raw, dd, img, ima)|*.001;*.raw;*.dd;*.img;*.ima|All files (*.*)|*.*"
		if ($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$Folder = Split-Path -Path "$($openfiledialog1.FileName)" -Parent
			if ($treeview1.Nodes) { $treeview1.Nodes.Clear() }	else { }
			if ($treeview2.Nodes) { $treeview2.Nodes.Clear() }	else { }
			$Tree1Search.Visible = $false
			$Tree1Search.Text = "Select Jumplist by App Name"
			$Tree1Search.Items.Clear()
			$TreeSearch.Visible = $false
			$TreeSearch.Text = "Search"
			$fname = Split-Path -Path $openfiledialog1.FileName -leaf
			$file = @([PSCustomObject][Ordered]@{
					'FileName'	      = $openfiledialog1.FileName
					'Name'		      = $fname
					'Parent'		  = $folder
					'CreationTimeUtc' = [system.IO.File]::GetCreationTimeUtc($openfiledialog1.FileName).ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					'LastAccessTimeUtc' = [system.IO.File]::GetLastAccessTimeUtc($openfiledialog1.FileName).ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					'LastWriteTimeUtc' = [system.IO.File]::GetLastWriteTimeUtc($openfiledialog1.FileName).ToString("dd-MMM-yyyy HH:mm:ss.fffffff")
					'Attributes'	  = [system.IO.File]::GetAttributes($openfiledialog1.FileName)
					'Size'		      = [System.IO.FileInfo]::new($openfiledialog1.FileName).Length
				})
			$Status.Text = "Selected File: $($openfiledialog1.FileName) "
			[System.GC]::Collect()
			Add-fileNodes -Files $file -RootFolder "$($Folder)"
			$toolstripRefresh.Visible = $true
		}
		else
		{
			$toolstripRefresh.Visible = $false
			[System.Console]::Beep(500, 150)
		}
	}
	
	$Collapse2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.Collapse()
		}
	}
	
	$ExpandAll2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.ExpandAll()
		}
	}
	
	$CollapseAll2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.CollapseAll()
			$treeview2.Nodes[0].Expand()
		}
	}
	
	$Expand1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Expand()
		}
		
	}
	
	$Collapse1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Collapse()
		}
	}
	
	$ExpandAll1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.ExpandAll()
		}
		
	}
	
	$CollapseAll1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.CollapseAll()
			$treeview1.Nodes[0].Expand()
		}
		
	}
	
	$OpenFileWith_Click = {
		if (!!$treeview1.SelectedNode -and !!$treeview1.SelectedNode.Tag -and $treeview1.SelectedNode.Tag.count -le 2)
		{
			try
			{
				$filename = $treeview1.SelectedNode.Tag[0].ToString()
				if ( [System.IO.FileInfo]::New($filename).Exists )
				{
					[ShellOpenWith]::DoOpenFileWith($filename)
				}
	
			}
			catch [System.Management.Automation.MethodInvocationException]{
				if ($treeview1.SelectedNode.Text.Contains('Stream Name: Zone.Identifier'))
				{
					Start-Process notepad.exe "$($filename)"
				}
			}
			catch { [System.Console]::Beep(500, 150) }
		}
	}
	
	$CopyFullFilePath_Click = {
		if (!!$treeview1.SelectedNode -and !!$treeview1.SelectedNode.Tag -and $treeview1.SelectedNode.Tag.count -le 2)
		{
			try
			{
				$filename = $treeview1.SelectedNode.Tag[0].ToString()
				$filename | Set-Clipboard
			}
			catch { [System.Console]::Beep(500, 150) }
		}
		else
		{
			$treeview1.SelectedNode.FullPath | Set-Clipboard
		}
	}
	
	$SaveStream_Click = {
		if (!!$treeview1.SelectedNode -and $treeview1.SelectedNode.Text.Contains('Stream Name:') -and !!$treeview1.SelectedNode.Tag -and $treeview1.SelectedNode.Tag.count -le 2)
		{
			$filename = $treeview1.SelectedNode.Tag[0].ToString()
			try
			{
				$StreamData = Get-Content -Path "$($filename)" -Encoding Byte -ErrorAction Stop
				$StreamName = (Split-Path -Path $filename -leaf).Split(':')[1]
			#	$savefiledialog1.AddExtension = $true
				$savefiledialog1.InitialDirectory = [Environment]::GetFolderPath('Desktop')
				$savefiledialog1.Filter = "All files (*.*)|*.*"
				$savefiledialog1.FilterIndex = 0
				$savefiledialog1.FileName = "ADS_$($StreamName)"
				
				if ($savefiledialog1.ShowDialog() -eq 'OK')
				{
					$OutputFileStream = [IO.File]::OpenWrite($savefiledialog1.FileName)
					$OutputFileStream.Write($StreamData, 0, $StreamData.count)
					$OutputFileStream.Dispose()
					$Status.Text = 'Ready'
				}
				else { [System.Console]::Beep(500, 150) }
				
			}
			catch { [System.Console]::Beep(500, 150) }
		}
	}
	
	$SaveNodestoTxt_Click={
		$node = $treeview2.Nodes[0]
		If (!!$node -and $node.GetNodeCount($false) -ge 1)
		{
			$savefiledialog1.AddExtension = $true
			$savefiledialog1.InitialDirectory = [Environment]::GetFolderPath('Desktop')
			$savefiledialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"
			$savefiledialog1.FilterIndex = 0
			$savefiledialog1.FileName = "Jumplist_properties"
			$savefiledialog1.DefaultExt = 'txt'
			$savefiledialog1.OverwritePrompt = $true
			if ($savefiledialog1.ShowDialog() -eq 'OK')
			{
				$Status.Text = 'Please wait ..'
				$Jumplist_Browser.Cursor = 'AppStarting'
				$nodes = (Get-Nodes -nodes $node)
				[System.IO.File]::WriteAllLines($savefiledialog1.FileName, $nodes.text, [System.Text.Encoding]::UTF8)
			#	$nodes.text | Out-String | Out-File -FilePath $savefiledialog1.FileName -Encoding utf8 -NoClobber -Force -ErrorAction SilentlyContinue
				$nodes = $null
				$Jumplist_Browser.Cursor = 'Default'
				$Status.Text = 'Ready'
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$exitToolStripMenuItem_Click={
		$Jumplist_Browser.Close()
	}
	
	$Process1_Click={
		$node = $treeview1.SelectedNode
		if (!!$node -and $node.Name -notcontains 'Stream Name')
		{
			if (!$node.Name.StartsWith('[') -and $node.Name.EndsWith(".automaticDestinations-ms") -and !!$node.Tag)
			{
				Process-Automatic -File "$($treeview1.SelectedNode.Name)"
			}
			elseif (!!$node.Tag)
			{
				Process-Link -File "$($treeview1.SelectedNode.Name)"
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$treeview2_NodeMouseClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
		if ($_.Button -eq 'Right')
		{
			$treeview2.SelectedNode = $_.Node
			if (!!$_.Node.Tag)
			{
				$CopyNode2Tag.Visible = $true
			}
			else
			{
				$CopyNode2Tag.Visible = $false
			}
			if ($_.Node.Text.StartsWith("Stream Name") -and $_.Tag.count -gt 1 -and !!$_.Node.Tag[1])
			{
				$SaveStreamToFile.Visible = $true
			}
			else
			{
				$SaveStreamToFile.Visible = $false
			}
		}
		
	}
	
	$SaveStreamToFile_Click={
		if (!!$treeview2.SelectedNode.Tag -and !!$treeview2.SelectedNode.Tag[1])
		{
			$savefiledialog1.AddExtension = $true
			$savefiledialog1.InitialDirectory = [Environment]::GetFolderPath('Desktop')
			$savefiledialog1.Filter = "LNK files (*.lnk)|*.lnk|All files (*.*)|*.*"
			$savefiledialog1.FilterIndex = 0
			$savefiledialog1.FileName = "Stream"
			$savefiledialog1.DefaultExt = 'lnk'
			
			if ($savefiledialog1.ShowDialog() -eq 'OK')
			{
				$data = $treeview2.SelectedNode.Tag[1]
				$OutputFileStream = [IO.File]::OpenWrite($savefiledialog1.FileName)
				$OutputFileStream.Write($data, 0, $data.count)
				$OutputFileStream.Dispose()
				$Status.Text = 'Ready'
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$Status_DoubleClick = {
		if (!!$Status.Text)
		{
			$Status.Text | Set-Clipboard
			[System.Console]::Beep(2000,150)
		}
	}
	
	$toolstripRefresh_Click={
		if (!!$script:recentfolder)
		{
			if ($treeview1.Nodes) { $treeview1.Nodes.Clear() } else {$null }
			if ($treeview2.Nodes) { $treeview2.Nodes.Clear() } else { $null }
			
			$Status.Text = $null
			$Tree1Search.Visible = $false
			$Tree1Search.Text = "Select Jumplist by App Name"
			$TreeSearch.Visible = $false
			$TreeSearch.Text = "Search"
			[System.GC]::Collect()
			try
			{
				$Status.Text = "Selected Folder: $($script:recentfolder) "
				if (!!(Get-Files -Folder "$($script:recentfolder)"))
				{
					$toolstripRefresh.Visible = $true
				}
				else
				{
					$toolstripRefresh.Visible = $false
				}
			}
			catch
			{
				$toolstripRefresh.Visible = $false
				[System.Console]::Beep(500, 150)
				return
			}
		}
		else
		{
			$toolstripRefresh.Visible = $false
			[System.Console]::Beep(500, 150)
		}
	}
	
	$GetMRUlist_Click={
		try
		{
			$Tree1Search.Visible = $false
			$Tree1Search.Visible = $false
			$Tree1Search.Text = "Select Jumplist by App Name"
			$Tree1Search.Items.Clear()
			$TreeSearch.Visible = $false
			$TreeSearch.Text = "Search"
			[System.GC]::Collect()
			$Status.Text = "Please wait - Collecting Registry entries ..."
			Process-MRUlist
			if (!!$treeview1.Nodes)
			{
				[System.Console]::Beep(2500, 300)
			}
			else
			{
				[System.Console]::Beep(500, 150)
				$Status.Text = "â¹ï¸"
			}
		}
		catch
		{
			[System.Console]::Beep(500, 150)
			$treeview1.EndUpdate()
		}
	}
	
	# Items to remove from Json
	$PropList = @('Data', 'Tbytes', 'Raw', 'extData', 'LinkInfoData', 'LinkTargetIDListData', 'StringDataData', 'ExtraDataData', 'LinkSlackLength', 'LinkSlack','Unknown', 'Unknown_1', 'Unknown_2', 'Unknown_3')
	
	# Original source: https://stackoverflow.com/a/63379522/12925530
	Function Remove-Property
	{
		param (
			# A PSCustomObject
			[Parameter(Mandatory, ValueFromPipeline)]
			$Object,
			# A list of property names to remove
			[Parameter(Mandatory)]
			[string[]]$PropList,
			# recurse?
			[Parameter()]
			[Switch]$Recurse
		)
		# Write-Host $Object  -ForegroundColor Cyan
		foreach ($Prop in $PropList)
		{
			$Object.PSObject.Properties.Remove($prop)
		}
		foreach ($Obj in $Object.PSObject.Properties)
		{
			if ([System.String]::IsNullOrEmpty($Obj.Value) -or $Obj.Value -eq '00000000' -and $Obj.Name -notin ('ItemIdListItems', 'ItemIdExtensions', 'PropertyStoreEntries', 'EmbeddedIdList', 'EmbeddedItems', 'TargetMetadata') -and $Obj.Name -notcontains 'ID List' -and $Obj.Name -notcontains 'TypedProperty' -and $Obj.Name -notcontains 'Serialized Property' -and $Obj.Name -notcontains 'Entension')
			{
				$Object.PSObject.Properties.Remove($Obj.Name)
			}
		}
		# Write-Host $Object  -ForegroundColor Green
		if ($Recurse.IsPresent)
		{
			foreach ($Obj in $Object.PSObject.Properties)
			{
				# Write-Host $ObjValue  -ForegroundColor Yellow
				if ($Obj.Value -is [System.Management.Automation.PSCustomObject])
				{
					$Obj.Value | Remove-Property -PropList $PropList -Recurse
				}
				elseif ($Obj.Value -is [System.Collections.ArrayList] -or $Obj.Value -is [System.Object[]])
				{
					foreach ($item in $Obj.Value)
					{
						$item | Remove-Property -PropList $PropList -Recurse
					}
				}
			}
		}
	} # End Remove-Property
	
	$SaveLnkToJson_Click={
	if (!!$treeview2.SelectedNode.Tag -and $treeview2.SelectedNode.Tag.count -eq 5)
		{
			$linkdata = $treeview2.SelectedNode.Tag[4]
			$LinkName = $treeview2.SelectedNode.Text.Replace('.', '_').Replace(':', '-').Replace('\', '-')
			$j_temp = $linkdata
			Remove-Property -Object $j_temp -PropList $PropList -Recurse
			# Convert the result to json with max depth
			$json = ($j_temp | ConvertTo-Json -Depth 100)
			$j_temp = $null
			# Save the result
			if (!!$json)
			{
				$savefiledialog1.AddExtension = $true
				$savefiledialog1.InitialDirectory = [Environment]::GetFolderPath('Desktop')
				$savefiledialog1.Filter = "Json files (*.json)|*.json|All files (*.*)|*.*"
				$savefiledialog1.FilterIndex = 0
				if (!!$LinkName)
				{
					$savefiledialog1.FileName = "$($LinkName)"
				}
				else
				{
					$savefiledialog1.FileName = "Link"
				}
				$savefiledialog1.DefaultExt = 'json'
				
				if ($savefiledialog1.ShowDialog() -eq 'OK')
				{
					$OutputFileStream = [IO.File]::WriteAllText($savefiledialog1.FileName, $json, [System.Text.Encoding]::UTF8)
					$Status.Text = 'Ready'
					$json = $null
				}
				else { [System.Console]::Beep(500, 150) }
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$treeview2_AfterSelect=[System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		if (!!$treeview2.SelectedNode -and $treeview2.SelectedNode.BackColor -eq 'DarkBlue')
		{
			$treeview2.SelectedNode.BackColor = 'Black'
		}
		if (!!$treeview2.SelectedNode -and !!$treeview2.SelectedNode.Tag -and $treeview2.SelectedNode.Tag.count -eq 5)
		{
			$SaveLnkToJson.Visible = $true
			$toolstripseparator11.Visible = $true
		}
		else
		{
			$SaveLnkToJson.Visible = $false
			$toolstripseparator11.Visible = $false
		}
	}
	
	$toolstrip3_About_Click={
		$About.PerformClick()
	}
	
	$toolstrip3_Exit_Click={
		$Jumplist_Browser.Close()
	}
	
	$toolstrip3_GitHub_Click = {
		$NotifyIcon1.ShowBalloonTip(0, "LNK & Jumplist Browser", "Opening 'https://kacos2000.github.io/Jumplist-Browser/'", "Info")
		[system.Diagnostics.Process]::start("https://kacos2000.github.io/Jumplist-Browser/")
	}
	
	# Treeview2 Search
	function Find-Nodes
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			$Nodes,
			[Parameter(Mandatory = $true)]
			[System.String]$Term
		)
		
		$found = $Nodes.where{ $_.Text.ToLower().Contains($Term.ToLower()) }
		if ($found.count -ge 1)
		{
			foreach ($f in $found)
			{
				$f.BackColor = 'DarkBlue' # "Indigo"
				$f.EnsureVisible()
				$f.Expand()
			}
		}
		else
		{
			$TreeSearch.PerformClick()
		}
	}
	
	$TreeSearch_Click={
		$TreeSearch.Text = $null
		$treeview2.BeginUpdate()
		$Nodes = Get-Nodes -nodes $treeview2.Nodes
		$treeview2.EndUpdate()
		$treeview2.SelectedNode = $treeview2.Nodes[0]
		$treeview2.CollapseAll()
		$treeview2.Nodes[0].Expand()
	}
	
	$TreeSearch_KeyPress=[System.Windows.Forms.KeyPressEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyPressEventArgs]
		$_.Handled = ![char]::IsLetterOrDigit($_.KeyChar) -and ![char]::IsPunctuation($_.KeyChar) -and ![char]::IsControl($_.KeyChar) -and $_.KeyChar -notin ([char][int]'32') 
		
		if ($_.Handled -eq $false)
		{
			$TreeSearch.BackColor = 'Honeydew'
		}
		else
		{
			$_.Handled = $true
			$TreeSearch.BackColor = 'Tomato'
		}
	}
	
	$TreeSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if ($_.KeyCode -eq 'Enter' -and !!$TreeSearch.Text)
		{
			$treeview2.BeginUpdate()
			$Nodes = Get-Nodes -nodes $treeview2.Nodes
			Find-Nodes -Nodes $Nodes -Term $TreeSearch.Text.ToString()
			$treeview2.EndUpdate()
		}
	}
	
	$Tree1Search_SelectedIndexChanged={
		$idx = $Tree1Search.SelectedIndex
		if ($idx -in $Script:AppListIdx.keys)
		{
			$filename = $Script:AppListIdx[$idx]
			$TreeSearch.Text = "Search"
			$node = $treeview1.Nodes.Find("$($filename)", $true)
			$treeview1.SelectedNode = $node[0]
			$treeview1.SelectedNode.Expand()
			
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Jumplist_Browser.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeview1.SelectedNode -ne $null)
		{
			$script:MainForm_treeview1 = $treeview1.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeview1 = $null
		}
		if($treeview2.SelectedNode -ne $null)
		{
			$script:MainForm_treeview2 = $treeview2.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeview2 = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$Jumplist_Browser.remove_FormClosing($Jumplist_Browser_FormClosing)
			$Jumplist_Browser.remove_Load($Jumplist_Browser_Load)
			$OpenFolder.remove_Click($openfolder_Click)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$Status.remove_DoubleClick($Status_DoubleClick)
			$treeview1.remove_AfterSelect($treeview1_AfterSelect)
			$treeview1.remove_NodeMouseClick($treeview1_NodeMouseClick)
			$treeview2.remove_AfterSelect($treeview2_AfterSelect)
			$treeview2.remove_NodeMouseClick($treeview2_NodeMouseClick)
			$CopyNode1.remove_Click($CopyNode1_Click)
			$Exit1.remove_Click($Exit1_Click)
			$Process1.remove_Click($Process1_Click)
			$CopyNode2.remove_Click($CopyNode2_Click)
			$CopyAll2.remove_Click($CopyAll2_Click)
			$Expand2.remove_Click($Expand2_Click)
			$Exit2.remove_Click($Exit2_Click)
			$Open.remove_Click($Open_Click)
			$About.remove_Click($About_Click)
			$Expand1.remove_Click($Expand1_Click)
			$Collapse1.remove_Click($Collapse1_Click)
			$ExpandAll1.remove_Click($ExpandAll1_Click)
			$CollapseAll1.remove_Click($CollapseAll1_Click)
			$Collapse2.remove_Click($Collapse2_Click)
			$ExpandAll2.remove_Click($ExpandAll2_Click)
			$CollapseAll2.remove_Click($CollapseAll2_Click)
			$SaveNodestoTxt.remove_Click($SaveNodestoTxt_Click)
			$OpenFileWith.remove_Click($OpenFileWith_Click)
			$CopyFullFilePath.remove_Click($CopyFullFilePath_Click)
			$CopyNode2Tag.remove_Click($CopyNode2Tag_Click)
			$SaveStreamToFile.remove_Click($SaveStreamToFile_Click)
			$toolstripRefresh.remove_Click($toolstripRefresh_Click)
			$GetMRUlist.remove_Click($GetMRUlist_Click)
			$SaveLnkToJson.remove_Click($SaveLnkToJson_Click)
			$SaveStream.remove_Click($SaveStream_Click)
			$toolstrip3_About.remove_Click($toolstrip3_About_Click)
			$toolstrip3_Exit.remove_Click($toolstrip3_Exit_Click)
			$toolstrip3_GitHub.remove_Click($toolstrip3_GitHub_Click)
			$TreeSearch.remove_KeyDown($TreeSearch_KeyDown)
			$TreeSearch.remove_KeyPress($TreeSearch_KeyPress)
			$TreeSearch.remove_Click($TreeSearch_Click)
			$Tree1Search.remove_SelectedIndexChanged($Tree1Search_SelectedIndexChanged)
			$Jumplist_Browser.remove_Load($Form_StateCorrection_Load)
			$Jumplist_Browser.remove_Closing($Form_StoreValues_Closing)
			$Jumplist_Browser.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$Jumplist_Browser.SuspendLayout()
	$splitcontainer1.SuspendLayout()
	$menustrip1.SuspendLayout()
	$statusstrip1.SuspendLayout()
	$contextmenustrip1.SuspendLayout()
	$contextmenustrip2.SuspendLayout()
	$contextmenustrip3.SuspendLayout()
	#
	# Jumplist_Browser
	#
	$Jumplist_Browser.Controls.Add($splitcontainer1)
	$Jumplist_Browser.Controls.Add($menustrip1)
	$Jumplist_Browser.Controls.Add($statusstrip1)
	$Jumplist_Browser.AutoScaleDimensions = New-Object System.Drawing.SizeF(10, 20)
	$Jumplist_Browser.AutoScaleMode = 'Font'
	$Jumplist_Browser.ClientSize = New-Object System.Drawing.Size(1883, 1294)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAAAAAAAAAAPAwAAABp7AAACAAABAAUAAAAAAAEAIACENgAAVgAAADAwAAABACAA
qCUAANo2AAAgIAAAAQAgAKgQAACCXAAAGBgAAAEAIACICQAAKm0AABAQAAABACAAaAQAALJ2AACJ
UE5HDQoaCgAAAA1JSERSAAABAAAAAQAIBgAAAFxyqGYAAAABc1JHQgCuzhzpAAAABGdBTUEAALGP
C/xhBQAAAAlwSFlzAAALEgAACxIB0t1+/AAANhlJREFUeF7tnQd4XMW1x18SkpDAe05CMQZjiikm
BAgOPaaazoMAoQRIyEvB9E5IMMXBlNjGuODesVWsZvXeVtKqWMVWL7uStsiSbFmSJW+RDSSed85q
r7l792xT3XLO9/0+y9LuvXPnzv/MmTlz5/4XGxsbGxsbGxsbGxsbGxsbGxsbGxtbgFhVl/ixumto
RonecmWx8cidJR1DT5R2WF8q7RhaAP8uKjFal8DPG5CSDuuX8G8MYv95+Pe2z1gXwc/4nZfwGGXG
I3fgMSs6h87Gc9hPx8bGNtGGAi/tsNxdZrQ+D2JdbBOxYagCOAg/iwkBzwXnLOmwRGMZsCxYJiyb
vZhsbGyjsXTtsR+W7bNeCwKbV2ocWl1qsBSC+AacxOh/HCo2WApKjEOrsOx4DXgt9stiY2OjbLf2
2P+UGo/cDqL5Z3GHNQd61COEuAITg+UbGEpUwc8rwZk9WtRtOs1+2WxsoWk4li7eZ7kXe8pSo7XF
STRBj7UZrv2Lsn2We0o7jv3IXi1sbMFr5Z1HLwKxvwaNPyuoevhRAkOGoVLDUCZEP6+W7Tt6ob26
2NgC30p0Q+dgwy7usBRTjZ9xpqTD2ohDIXSY9mpkYwscs6XiDEN/L+4Y2kM1cMZ77HMHf8MUpL16
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
AJGIbRzGspNk0r2cq9vDo9zfx6b769Ov//PZtf/127b/9dq2//LZtP/u1bH/5Myq/9jCoffSvJzZ
x7KVpq+dg2NURT0hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADAqY852MKjoeXMq+/64Lv//+XA//zhvP/43bn/9tu4//Xbt//127f/9du3
//Xat//02rf/9Nm2//PZtv/02rb/9Nq2/+rRr//Vv6DqxbCUnIh7ZToAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtqOFKuHKqKrv17P//+nD//vhvP/127f/9Nu3//Pa
tv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Tbt//127f/9Nu3//HYtP/w17P/8di0
/9rEo/rHspSgZ1tIKgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADeyKd18Ne09f/rxf/4
3rr/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Pa
tv/z2rb/89q2//Tbt//13Lj/8tm2/+3Vsv/w2LT/2MGi7K+cg20AAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u66TE+zVs7L/68b/++G9//Lat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z
2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Xcuf/w17X/7NSy/+jR
r//Dr5KnDAwMFQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAADhyqUi89y41f/ux//027j/89q3//Pat//z2rf/89q3//Pat//z2rf/
89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z
2rf/89q3//Pat//027j/9Nu4/+vTsf/v17T/yraYyEtDPCIAAAAAAAAAAQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDStCL337vg/+vG//LZt//z2rj/89q4
//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/
89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//Xcuf/s1LP/79e1/824m9NL
QzwiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8da7E/ff
vNn/68b/89q3//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4
//Xcuf/13Ln/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/
9Nu4//TbuP/23bn/7ta0//DYtv/JtJjKFxcXFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA9Nu4u//uyP/z2rf/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//Tb
uP/027j/9Nu4//TbuP/027n/9N3A/+vVuP/t1bP/9du4//TbuP/027j/9Nu4//TbuP/027j/9Nu4
//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9t25/+3Vs//x2bb/u6iNqwAAAAUAAAAB
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw2LZ+//DL//Tbuf/027n/9Nu5//Tbuf/0
27n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuv/13Lv/6seC/9u9gf/axar/79a1//fd
u//027n/9Nu5//Tbuf/23Lr/9dy6//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5
//bduv/s1LP/6tKx/5+PeHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPXui344b78
+eC9//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//bfxP/v
yn//68Fa/+u/VP/cwIv/49C7//DYuP/027n/9t27//Tdwf/r1bn/7dW0//Xbuf/027n/9Nu5//Tb
uf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/13Lr/7da0/9W/ofBYTUErAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAPLZt7z/7Mf/89q5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/
9Nu5//Tbuf/13Lr/99/B//HcyP/kul7/78x1/+3FZv/gs0v/27+O/9vFpv/fzLb/59G2/+nFgP/c
vYH/2sWq/+3VtP/13Lr/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/13Lr/8dm3//HZ
t/+5qI6mAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA89y5Qv/pxf/23bv/9Ny6//Tcuv/03Lr/9Ny6
//Tcuv/03Lr/9Ny6//Tcuv/13bz/9Ny6//ffwf/z3sX/5cqf/9OqT//Omx7/2qMg/+KqI//ipxb/
4acY/+CsMP/dtFj/37Zb/+vDYP/rv1T/3LyC/+vVu//23bv/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/0
3Lr/9Ny6//Tcuv/03Lr/9t67/+7Wtv/axKb7bmZVPAAAAAAAAAAAAAAAAAAAAAAAAAAA89q5t//s
x//z3Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny5//bevv/r1bX/4My2/+XNpf/Wr1v/zJka
/8yWDv/NmRj/y5cY/9ukGv/iqRz/4agb/+GnFv/hpA//5Kka/+7Ogf/sw13/6seC//Tewv/03Lr/
9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Pbuf/y2rn/uqeOoQAAAAAA
AAAAAAAAAAAAAADx3Lol99+9/Pjfvf/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9d7C//DN
iv/mt0r/2LFd/8yaIv/MlQ3/zpkX/86aGv/Omhr/zZka/9miG//iqRz/4agc/+GoHP/hqBv/4ake
/+OqHv/fuWn/79i7//bdvP/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/
9Ny6//bevP/x2bj/0bug70E6MiMAAAAAAAAAAAAAAADy27l5/+/L//Pcu//03Lv/9Ny7//Tcu//0
3Lv/9Ny7//Tcu//03Lv/9d/E/+7KgP/msSz/1J4X/8yXFP/Omhr/zpoa/86aGv/Omhr/zJgZ/9ae
Fv/jqRz/4agc/+GoHP/hqBz/4agb/+CmFP/bvon/6tW9//bevP/03Lv/9Ny7//Tcu//03Lv/9Ny7
//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//XdvP/y2rr/69O0/5+OeGgAAAAAAAAAAAAAAAD03LrC
/+nG//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//fgxv/mw3z/y5YQ/86aGv/O
mhr/zpoa/86aGv/MlxL/y5YS/9imLP/iqRz/4agc/+GoHP/hqBz/4agc/+GmEf/cuG//5tK8//be
vP/03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//13bz/9dy8
/7+rkqwAAAAAAAAAAPLYvxTz27vy+uLA//TcvP/03Lz/9Ny8//TcvP/03Lz/9Ny8//TcvP/03Lz/
9Ny8//bgxf/t0aH/zZkY/86ZGP/Omhr/zpoZ/82XEP/UpDL/6MmO//DSnf/hqBr/4aca/+GoHP/h
qBz/4agc/+GmEP/dtFz/49C7//Xevf/03Lz/9Ny8//TcvP/03Lz/9Ny8//TcvP/03Lz/9Ny8//Tc
vP/03Lz/9Ny8//TcvP/23r3/9d29/825n90MDAAUAAAAAPLZvD395sP/9d69//TdvP/03bz/9N28
//TdvP/03bz/9N28//TdvP/03bz/9N28//Xev//z27f/0J8q/82YFP/Pmxr/y5cV/9KwZP/w2rz/
+eXP//PZr//iqiT/4acZ/+GoHP/hqBz/4agc/+GmEv/esUn/4M22//Tdvf/03bz/9N28//TdvP/0
3bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/13r3/9N28/9fCpvppX1AzAAAAAPTd
u2L/7cr/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TewP/z2rL/3Kw5
/8uVEP/DkRT/u4oQ/9K6kv/o1b//9N6+//Tdu//ksDP/4KYV/+GoHP/hqBz/4agc/+GmFf/frTf/
3squ//PcvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/0
3bz/9d28/+XPsf+VhXNSAAAAAPTcvH7/78z/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Td
vf/03b3/9N29//XgyP/txnP/6bEl/9GjMv+5ihj/vYsN/9q1Y//axan/69W4//fhxv/mtkb/4KUS
/+GoHP/hqBz/4agc/+GnF//gqij/3Maj//Davf/13r7/9N29//Tdvf/03b3/9N29//Tdvf/03b3/
9N29//Tdvf/03b3/9N29//Tdvf/03b3/9d6+/+/Yuf+ll39qAAAAAPTdvY//7sz/9N29//Tdvf/0
3b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tewf/x1aP/7cZz//PZsP/r06//5LlZ/+et
G//mxoX/8d3E//bhyf/ovVz/36QP/+GoHP/hqBz/4agc/+GnGv/hqB3/3MGU/+3Yvv/13r7/9N29
//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9t++//PcvP+vnod6
AAAAAPTevZX/7sz/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/1
38L/9eHI//Xfwv/34sn/9Niq/+3Gcv/02rD/9d/B//bhyv/rxXP/36QP/+GoHP/hqBz/4agc/+Go
G//hphX/3L2D/+rXvv/2377/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29
//Tdvf/03b3/9t+///bfvv+xoYmAAAAAAPTdvZH/783/9d6+//Xevv/13r7/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r3/9d/D//biyv/138H/9d69//biyf/u
zIr/4KQS/+GoHP/hqBz/4agc/+GoHP/hphH/3blx/+jVv//34MD/9d6+//Xevv/13r7/9d6+//Xe
vv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9+DA//ffv/+yoYh7AAAAAPXdvoL/8M3/9d6+
//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//bhxv/x057/4acZ/+GnGv/hqBz/4agc/+GoHP/hpRH/3bVd/+TSvf/2
37//9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9+DA//Xe
vv+rnYVrAAAAAPXfv2j/783/9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6/
//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///bfxP/z2bD/4qsk/+CnGP/hqBz/
4agc/+GoHP/hphL/3rFJ/+HOuf/13sD/9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///Xev//13r//+OHB/+3Xuf+fkHpTAAAAAPfhv0T/6cj/9t/A//Xev//13r//9d6///Xe
v//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6/
//Xfwf/13b3/5LA0/+CmFf/hqBz/4agc/+GoHP/hphX/3644/9/Ksf/03b//9t6///Xev//13r//
9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//+uLD/97Krf1/dWUyAAAAAPXivBv1
3b73+uPD//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xe
v//13r//9d6///Xev//13r//9d6///XewP/24cf/5rZH/+ClEv/hqBz/4agc/+GoHP/hpxj/4Ksp
/93Hpf/x3MD/9t/A//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//137//
/ubG/9bCp+MiIiIPAAAAAAAAAAD13r/N/+vK//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/1
38D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/3483/6b5d/9+k
D//hqBz/4agc/+GoHP/hqBr/4agd/9zDl//u28H/9uDB//XfwP/138D/9d/A//XfwP/138D/9d/A
//XfwP/138D/9d/A//XfwP/24MH//+vK/8u4n7IAAAAAAAAAAAAAAADz37+I//LR//XfwP/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/1
38D/9d/A//XfwP/35M//7Md6/96jDf/hqBz/4agc/+GoHP/hqBv/4aYV/9y/hf/r2MH/9+HB//Xf
wP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/34cH//ObG/7WmjmsAAAAAAAAA
AAAAAAD14cMz++bH//fhwv/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//Xfwf/24sn/68Nr/+GmFP/hqBz/4agc/+GoHP/h
qBz/4aUR/9y6cv/o1sL/+OLD//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//Xf
wP/85sb/4c2w9X9uXR4AAAAAAAAAAAAAAAAAAAAA896/yf/tzP/138H/9d/B//Xfwf/138H/9d/B
//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//biy//uyX7/
68Ng/+vCX//hpRP/4KQR/+GnGv/hqBz/4aUP/922YP/g0cX/8Nq9//bfwf/138H/9d/B//Xfwf/1
38H/9d/B//Xfwf/138H/9d/B//Xfwf//78//z72jqgAAAAAAAAAAAAAAAAAAAAAAAAAA9t7BV//x
0P/238H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B
//Xfwf/138H/9d/B//bizP/txXH/68Vn/+vEY//pu1T/5bRA/+GoHf/fow7/4KUR/+KwOf/ewpD/
28ix/+7ZvP/24cL/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//rjxf/y3b7/q5mIOgAAAAAA
AAAAAAAAAAAAAAAAAAAAqqqqA/TewdL/7s3/9N/B//Xgwf/14MH/9eDB//Xgwf/14MH/9eDB//Xg
wf/14MH/9eDB//Xgwf/14MH/9eDB//Xgwf/14MH/9eDB//XhxP/03r3/7cZx/+7Kfv/248z/9uLH
//LYqv/tyoH/5rM7/+zEYv/rv1P/3L+G/+zawv/34sL/9eDB//Xgwf/14MH/9eDB//Xgwf/14MH/
9d/B///y0f/VwqmyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPfhw0T/7s7/9+LE//Xgwv/1
4ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xg
wf/14cT/9uPN//bjzP/14MP/9eDD//biyf/46Nr/7sl8/+vFZ//rwVn/68qI//Xiy//14ML/9eDC
//Xgwv/14ML/9eDC//Xgwv/14ML//OjJ/+7bvfmsn4woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAADz3cCe//XU//Xfwf/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/1
4ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14cT/9d+9/+3G
cf/uyn//9uHE//Xhw//14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/24cP///LS/9bCqXcAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADp1L8M9uLF2P/v0P/038L/9eDD//Xgw//14MP/
9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgw//14ML/9eHF//bjzv/2483/9eDE//Xgwv/14MP/9eDD//Xgw//14MP/9eDD//Xf
wv//9NT/59K2uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8trC
KvnmyPD/7M3/9N/C//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/
9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgw//14MP/9N/C///x0v/z38LYxribEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLavj/76sr1/+zN//Xgwv/24cP/9uHD//bhw//24cP/9uHD
//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/
9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//14ML///HR//jmx+HhyrQiAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz279A++nL7v/w
0f/24MP/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE
//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP//9NX/
+ebI2fDUuCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA89y6LfvoydP/9tb/+ePG//Xgw//24cT/9uHE//bhxP/24cT/9uHE//bh
xP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE
//bhxP/14MP/++bI///21v/55sm559C5FgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANrItg7658qa/+7P///v0P/2
4cX/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bh
xP/24cT/9uHE//bhxP/24cT/9uHE//jixf//8tP/+ujL+/fjx4AAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA+OPHSfvoy8r/8tT//+/R//jjx//24cX/9uHF//bhxf/24cX/9uHF//bhxf/2
4cX/9uHF//bhxf/24cX/9uHF//bhxf/24cX/9uHF//bhxf/65Mj///HT///u0P/66Mu39eHDMwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAAAAA89i2LvnivvL/5sL/89q3//PbuP/z27j/89u4//PbuP/z27j/89q4//TcvP/13Lv/
9Nu4//PauP/z27j/89u4//PbuP/z27j/89u4//PauP/027j/9dy5//vivv/YwqPtem9aMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAP7rxA323rvc/+nF//Pat//027j/9Nu4//TbuP/027j/9Nu4//Tb
uP/13bz/7tGk/+HJpf/x2bj/9t26//Tbuf/13Lr/9ty6//TbuP/027j/9Nu4//TbuP/027j/9dy5
//3jv//MuJvUHx8fEAAAAAAAAAAAAAAAAAAAAAAAAAAA89i2mP/wy//z2rj/9Nu5//Tbuf/027n/
9Nu5//Tbuf/027n/9t7C//TYrP/sxGP/4b5y/+LOuv/w2sD/9NzA/+3WuP/r1Lb/9Nu4//Tbuf/0
27n/9Nu5//Tbuf/027n/9ty6//vhvv+0ooqQAAAAAAAAAAAAAAAAAAAAAPPdvC754sD/9968//Tb
uf/027r/9Nu6//Tbuf/03L3/9t2+//fgx//u17j/3LVh/+O1Q//lszf/3bFM/9y8ff/jxIn/58Bo
/9zBkf/x2rz/9dy6//Tbuv/027r/9Nu6//Tbuv/13Lr/+eC9/93GqPl5bl4uAAAAAAAAAAAAAAAA
8tu5pf/uyv/z27n/9Ny6//Tcuv/03Lr/9N27//DXr//lzav/3759/8+fLP/LlQ//zpkV/9+mGP/i
phH/4KUR/+OuKv/sw1//68mH//Tewv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/23rv//eXC/7yo
kJoAAAAAAAAAAPPcuRb13Lz0+uG///Tcu//03Lv/9Ny7//TcvP/03b7/675Y/9WkLP/KlA//zZgT
/86aG//MmBX/3aQY/+KpHf/hqBv/4aYS/96wRv/s1rz/9t69//Tcu//03Lv/9Ny7//Tcu//03Lv/
9Ny7//Xcu//74sD/1L6i60U5LhYAAAAA89y6Wf/tyf/03Lv/9Ny7//Tcu//03Lv/9Ny7//Xewf/v
0Zn/0Jsa/82YF//Omhr/zJUN/8+eJf/fqyz/4agZ/+GoHP/hphP/3a4//+fSuf/23r3/9Ny7//Tc
u//03Lv/9Ny7//Tcu//03Lv/9Ny7//ffvf/v17j/not5UgAAAADz27qW/+/L//TdvP/03bz/9N28
//TdvP/03bz/9N29//Tfwv/TpDb/zZcR/82ZGf/YsFf/89u6/+rBZv/fpA//4agc/+GnF//eqi3/
5M2t//Xfv//03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9t69//7mxP+8qZCKAAAAAPTdu77/
6sj/9N28//TdvP/03bz/9N28//TdvP/03b//9d26/92uPP/CiwD/vY4b/97Ksf/149H/7cd4/9+k
D//hqBz/4acZ/9+oIP/hyJ//9N/B//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/13r3//+jG
/8m2m7EAAAAA8ty81P/nxf/03b3/9N29//Tdvf/03b3/9N29//Tewv/y1qf/675X/9m2bP/SojD/
37hi/+3byP/wz5D/4KUT/+GoHP/hqBv/4KYX/9/Cjv/y3cT/9N29//Tdvf/03b3/9N29//Tdvf/0
3b3/9N29//Xdvf//6Mb/0Lyhx///fwL03r3a/ubF//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Te
vv/13sH/+eXQ//TWof/wzYf/9uHJ//HUo//hqBv/4aca/+GoHP/hpRL/3r16//Hdxf/13r7/9N29
//Tdvf/03b3/9N29//Tdvf/03b3/9N29///ox//Uv6TOAAAAAPXevtX/6Mb/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//Xev//13r3/9uDE//bhxv/138L/89qz/+KsJ//gphj/4agc/+GlEP/e
uGX/7tvF//bfv//13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7//+rI/9TApMgAAAAA9N6+wv/r
yv/13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///XewP/13sD/5LE4
/+ClFP/hqBz/4aUR/96yUf/r2ML/9+DA//Xev//13r//9d6///Xev//13r//9d6///Xev///7Mv/
0r6jsgAAAADz3r+c//DO//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///bhyf/nuEz/4KQR/+GoHP/hphP/3q4+/+jUu//34MH/9d6///Xev//13r//9d6///Xe
v//13r//9t/A///ty//Jt52LAAAAAPTfv2H/8c//9d+///XfwP/138D/9d/A//XfwP/138D/9d/A
//XfwP/138D/9d/A//XfwP/137//9+PN/+rAZf/fpA7/4agc/+GnFv/fqy3/5dCx//bhw//138D/
9d/A//XfwP/138D/9d/A//XfwP/34cH/++XF/7amjVEAAAAA9eO/HPfgwfn648P/9d/A//XfwP/1
38D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/35M//68Vy/9+jDf/hqBz/4acZ/9+o
IP/iyqP/9+LG//XfwP/138D/9d/A//XfwP/138D/9d/A//3nx//k0LPvcXFUEgAAAAAAAAAA896/
sv/w0P/03sD/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9uDH//LXp//rw2T/
5bEz/9+iDP/fpA7/4KUS/97CkP/t2sf/9d/A//Xfwf/138H/9d/B//Xfwf/03sD///LR/9jCqJ0A
AAAAAAAAAAAAAAD24MI7/uzM//fhw//138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xf
wf/14cX/89qv/+zFa//uzIP/7syI/+e6Uv/jrSn/5bxb/93Fmf/y3sT/9uDC//Xfwf/138H/9d/B
//rlxv/x3b/9vKmRKgAAAAAAAAAAAAAAAAAAAAD03sCr//TU//Tfwf/14ML/9eDC//Xgwv/14ML/
9eDC//Xgwv/14ML/9eDC//Xgwf/14cX/9d/A//Xhxv/25M//9+bV/+/Oif/rv1P/7MyL//Xiy//1
4ML/9eDC//Xgwv/138H///XU/97Kr5MAAAAAAAAAAAAAAAAAAAAAAAAAAPTfvxj45Mfq/+vM//Tf
wv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14MT/9eDD//Xgwv/14MT/9N+/
//HVof/24ML/9eDD//Xgwv/14ML/9N/B///w0P/v277aqpR/DAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAPPfwEH66cv9/enK//Tfwv/14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgwv/14cX/9uLK//XgxP/14MP/9eDD//Tfwv//7M3/+OXI8uLLtS0AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLdv1T76sz8/+3O//Xgw//24cP/9uHD//bhw//24cP/9uHD
//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//14MP///DQ//rpy/Lq1ro/
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPdv0T76Mvm//XW//jjxv/1
4MT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/14MP/+eTH///3
1//76MvY79u8MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AOzZvBv66Mun/+zP///y1P/75cj/9uHF//bhxf/24cX/9uHF//bhxf/24cX/9uHF//bhxf/24cX/
/ObJ///01f/76Mv/+efIl+7Muw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD348dA/OrMrPjmyfb/9NX///TV///v0f//7M7//+vN///s
zv//79H///TV///z1P/558nw+ujLovXhyTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/u7NH/npzGD558mZ
+OXJv/fkx9P24sba9+TH0vnlyLz55smU/OrNWP/pyRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+qqgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/4AP//4AA//4AAD/8AAAf+AAAD/AAAAfgAAAD
4AAAA8AAAAHAAAABgAAAAIAAAACAAAAAgAAAAIAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAIAAAADA
AAABwAAAAeAAAAPgAAAD8AAAB/gAAA/8AAAf/gAAP/+AAP//4AP///9//ygAAAAYAAAAMAAAAAEA
IAAAAAAAYAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ANO+nkfhyaiU48qpyeLLqePiyqjq4Mem4trDo8jRu5yTs6GIRwAAAAEAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfyKVQ7tezzf3jvf//68T//+bB//3jvf/8
4b3//eO+///mwP//6ML/8tm1/9rEo8mtnIJOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAVVVVA+7WtZj/58L//+jC//TbuP/z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/9t25
///nwf/v17T/xLGUlAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//6oD89u5s//xy//23Ln/
89q3//Pat//z2rf/89q4//Xcuv/027j/89q3//Pat//z2rf/89q3//PauP/537z//+bB/8e0lq4A
AAAFAAAAAAAAAAAAAAAAAAAAAAAAAADz2bed//LM//TbuP/027j/9Nu4//TbuP/027j/9Nu4/+vS
r//y2rr/9ty5//Xcuv/13Lr/9Nu4//TbuP/027j/9967///nwv+9qI2XAAAAAAAAAAAAAAAAAAAA
APXcuVH/7cj/9ty6//Tbuf/027n/9Nu5//Xcu//34cr/8dGT/+S+Z//jy6v/8NvE/+/Ws//r07L/
9Nu5//Tbuf/027n/9Nu5//rgvf/x2bf/opF6TQAAAAAAAAAA///MBfTaudv+58T/89u5//Tbuf/0
3Lr/8tzC//Hbv//iwob/1aY2/+KsKf/frDL/3rVb/+fAZf/kxov/89zA//Tbuv/027r/9Nu6//Tc
uv//6cX/z7qf0gAAAAUAAAAA9du7T//syf/03Lr/9Ny6//TcvP/127X/5r9q/9GlP//Llg//yZQP
/9adEf/jqBb/4aQM/+KxOP/t0qb/9d7A//Tcuv/03Lr/9Ny6//Tcuv/4373/89q5/6CPekkAAAAA
9Nu6pP/tyv/z3Lv/9Ny7//TcvP/238L/47pg/8qTB//OmRX/zZoc/9uqNP/iqBr/4acX/92oKf/n
0LH/9t6///Tcu//03Lv/9Ny7//Tcu//03bz//+rI/8ezmpj///8B9Ny81/7nxP/03bz/9N28//Td
vP/24cf/68yW/8qSBf/Hlh//5s2j//HSlv/gpRP/4acZ/9+nHf/ly57/9eDC//TdvP/03bz/9N28
//TdvP/03bz//+nG/9XBpcz/378Q89y87/riwf/03bz/9N28//TdvP/138b/8M6H/9WnOP/Imy//
5cyk//HWqf/hqBz/4acZ/+ClFf/ixIz/9N/F//TdvP/03bz/9N28//TdvP/03bz//ubE/93Iq+X0
4MEZ89y89vniwf/03b3/9N29//Tdvf/03b7/9Nu3//bgxP/y05j/8dOe//Pbuf/irCj/4KYX/+Cl
Ef/gvnf/89/H//Xdvf/03b3/9N29//Tdvf/03b3//eXE/+HMr+zw4rgS9d6+8Pvjw//13r7/9d6+
//Xevv/13r7/9d7A//Xev//24MX/9uDF//XewP/ksjn/4KUU/+GlEP/fuGL/8t7I//bfv//13r7/
9d6+//Xevv/13r7//+fG/+LNr+b///8C9d6/2v7nx//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///bhyf/nuE3/4KQR/+GlEf/esk3/79vE//bfwP/13r//9d6///Xev//13r///+vK/9/K
rs0AAAAA9t/Aqv/wzv/13r//9d+///Xfv//137//9d+///Xfv//137//9d+///fkzv/qwWf/3qMN
/+GmFP/erTr/7Ni9//fhwv/137//9d+///Xfv//03r////HP/9jFqJoAAAAA9t+/Wf/x0P/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/B//bhxv/rxG3/36MM/+CjDf/eqSf/6NO2//fixf/1
38D/9d/A//XfwP/34ML//ujJ/8a0m0gAAAAA5eXMCvTewOX96cr/9N/B//Xfwf/138H/9d/B//Xf
wf/138H/9eDE//Tbtv/sxWr/6sBh/+WzPf/iqiL/4MGC/+3Zvv/24cP/9d/B//Tfwf//7s7/59G2
1j8/PwQAAAAAAAAAAPTfwmH/9dT/9uDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgw//03Lf/
9uLI//bjzf/vzYX/6sFj//Dbuv/14cT/9eDC//jixP//787/2sasTQAAAAAAAAAAAAAAAAAAAAD0
38Kw//bW//Xfwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14cb/9eDD//Xhxf/14ML/9N25//bh
xf/04ML/9eDC///41//r1bmbAAAAAAAAAAAAAAAAAAAAAAAAAADp1L8M+OXHxv/31//34cT/9eDD
//bhw//24cP/9uHD//bhw//24cP/9uHD//Xgw//24cX/9uHG//Xgw//44sT///jY//Xhw7SqqqoD
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6dS/DPnlyK3/9db//+vN//bhxP/24cT/9uHE//bhxP/2
4cT/9uHE//bhxP/24cT/9uHE///tz///89T/+OTHnL+/fwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAD55clk++nM3f/z1f//8tT//+rN//znyf/75sn//OfK///rzf//89T///LU
//vpzNT24cdXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
5cyyCvzqy1n66Mun9+XI2Pbjxu/24sX19+TH7fjlyNT66Mqh+OnKUsyZmQUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDi
xhL/6ckY/+/PEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AD8A/AAf
APAABwDgAAMA4AADAMAAAQCAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAA
gAAAAMAAAQDgAAMA4AADAPAABwD8AB8A/gA/AP/j/wAoAAAAEAAAACAAAAABACAAAAAAAEAEAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMitkRzq1LGK7tWz2e7Vsvrw17T/69Ow+ufO
rNnYwqKKg3tgHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOnQr1P337vr/+/I//7kv//43rv/9926
//jeu///5cD//+zG/+nRr+u0oodVAAAAAAAAAAAAAAAAAAAAAPLZtlH+58L//uXA//PZt//027n/
8tq7//PbvP/13Lz/9Ny6//Pat///58L/8dq3/7Kih1MAAAAAAAAAAPXZvBv337zy/eTB//Pauf/2
38T/9d2//+nEdf/lyJX/79az/+3TrP/027r/89q4///nw//kzazxiH9tHAAAAAD03buQ//HM//Pb
u//02rT/58iM/9WqSP/TmxD/36cc/+GwOv/qzJP/9N7B//Tbuv/027r//+/K/8y4nI7+2rYH89y6
4/zkwv/03b7/9dy5/9WkMP/IkQf/16g4/+KpHP/fpBP/6cyc//bfw//03Lv/89y7//7nxf/hyqzf
8ti4KPXevf/2377/89y8//bhxv/dsk//yZos/+3Vsf/kry//36MN/+XFiP/14Mf/9N28//TdvP/5
4sD/6dO0/fXevjf85MP/9t++//Tdvf/03bz/89mw/+3Pl//y2rX/5bM//9+hB//jv3L/9ODJ//Td
vf/03b3/+OHA//Lbu//438Ap9+DA//jgwP/13r7/9d6+//Xfwv/24cf/9uLL/+e5Uf/foQT/4bhc
//Tgyf/13r7/9d6+//riwv/t17j94sapCfPdvub95sb/9d6///Xev//13r//9d6///fjzv/qwWj/
3p8A/+CyR//y38j/9t/A//Xev//+6cn/6tS23wAAAAD03sCX//TT//TewP/138D/9d/A//Xfwf/1
4cb/7MVw/+KqIP/fqiz/6tOx//bgxP/03sD///XT/+XPtI0AAAAA99+/IPfkxvf86Mn/9N/B//Xg
wv/14ML/9N/B//PbtP/03r3/7sp//+zOlP/04cf//urL//TgwvHNuqYaAAAAAAAAAADx2r9c//HS
//3pyv/038L/9eDD//Xgw//14cb/9uLH//biyP/14MP//+rL///tzv/s1rlRAAAAAAAAAAAAAAAA
AAAAAPTewF776czy//bW///py//548b/+OLF//njxv//6sz///fX//vqzO3y3cJUAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA8Nq9I/vqzZT658rg9+TH/v3pzP/348f++ufL3fvpy4/u1LseAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/9+/CP/rzCj68NI0/vHQJv//1AYAAAAAAAAA
AAAAAAAAAAAAAAAAAPAHAADgAwAAwAEAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
gAAAAMABAADgAwAA8AcAAPwfAAAL'))
	#endregion
	$Jumplist_Browser.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Jumplist_Browser.MainMenuStrip = $menustrip1
	$Jumplist_Browser.Margin = '6, 6, 6, 6'
	$Jumplist_Browser.MinimumSize = New-Object System.Drawing.Size(1905, 1348)
	$Jumplist_Browser.Name = 'Jumplist_Browser'
	$Jumplist_Browser.StartPosition = 'CenterScreen'
	$Jumplist_Browser.Text = 'LNK & Jumplist Browser'
	$Jumplist_Browser.add_FormClosing($Jumplist_Browser_FormClosing)
	$Jumplist_Browser.add_Load($Jumplist_Browser_Load)
	#
	# splitcontainer1
	#
	$splitcontainer1.BackColor = [System.Drawing.Color]::White 
	$splitcontainer1.CausesValidation = $False
	$splitcontainer1.ContextMenuStrip = $contextmenustrip2
	$splitcontainer1.Dock = 'Fill'
	$splitcontainer1.Location = New-Object System.Drawing.Point(0, 35)
	$splitcontainer1.Margin = '0, 0, 0, 50'
	$splitcontainer1.Name = 'splitcontainer1'
	[void]$splitcontainer1.Panel1.Controls.Add($treeview1)
	$splitcontainer1.Panel1.Margin = '0, 0, 0, 5'
	[void]$splitcontainer1.Panel2.Controls.Add($treeview2)
	$splitcontainer1.Panel2.Margin = '0, 0, 0, 5'
	$splitcontainer1.Size = New-Object System.Drawing.Size(1883, 1231)
	$splitcontainer1.SplitterDistance = 626
	$splitcontainer1.SplitterWidth = 7
	$splitcontainer1.TabIndex = 2
	#
	# menustrip1
	#
	$menustrip1.Font = [System.Drawing.Font]::new('Segoe UI', '9')
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripRefresh)
	[void]$menustrip1.Items.Add($Tree1Search)
	[void]$menustrip1.Items.Add($About)
	[void]$menustrip1.Items.Add($TreeSearch)
	$menustrip1.Location = New-Object System.Drawing.Point(0, 0)
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '10, 3, 0, 3'
	$menustrip1.ShowItemToolTips = $True
	$menustrip1.Size = New-Object System.Drawing.Size(1883, 35)
	$menustrip1.TabIndex = 0
	$menustrip1.Text = 'menustrip1'
	#
	# statusstrip1
	#
	$statusstrip1.Font = [System.Drawing.Font]::new('Segoe UI', '10')
	$statusstrip1.ImageScalingSize = New-Object System.Drawing.Size(24, 24)
	[void]$statusstrip1.Items.Add($Status)
	$statusstrip1.Location = New-Object System.Drawing.Point(0, 1266)
	$statusstrip1.Margin = '0, 5, 0, 0'
	$statusstrip1.MinimumSize = New-Object System.Drawing.Size(0, 28)
	$statusstrip1.Name = 'statusstrip1'
	$statusstrip1.Padding = '2, 0, 23, 0'
	$statusstrip1.Size = New-Object System.Drawing.Size(1883, 28)
	$statusstrip1.TabIndex = 1
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($Open)
	[void]$fileToolStripMenuItem.DropDownItems.Add($toolstripseparator1)
	[void]$fileToolStripMenuItem.DropDownItems.Add($OpenFolder)
	[void]$fileToolStripMenuItem.DropDownItems.Add($toolStripSeparator)
	[void]$fileToolStripMenuItem.DropDownItems.Add($GetMRUlist)
	[void]$fileToolStripMenuItem.DropDownItems.Add($toolstripseparator2)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAUgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB9ElEQVQ4T42T20/TYBjGm2j8A20H0YWgWYxbJGgUIWGBafCIiUa8cXiAbXSTboPJPOFh
08HGQBKT6gWFmJh4wQW60m50sEMf369kC1sW0ya/m/d5nl/yXZTzST9OnL2RGuv2vvl+anRxww7d
w29l1830NZ8vfZzr8b2/NS5tIbNVR/anaYvMZh23wxvovf5xlBMGk3Ikp2PhW5nYt0kZkawOYejV
Ktc1lFTEJQ3RtT3EvhoWc+sG2r843Ro567KNMLAgc11XX3YUmCZa6CxIkGAgocxkNEire5DWDAtW
ahdE6dbIZ6nLNsLlOAmuzCuhLxrEHFlXDItI3kC9jhbCdGvkrMs2wsUYCS5FlcDnXUwvFYmSRTBb
Qo1GRwksH2YWmSLYRuifJUG/pDxPFTBJ/NqpolrDf9ncruDxpwLYhu+LyJyj74Xy9EMBE69Vi221
hgoVO/H7T7XZYxveEyaBR1T871Tcmys2UYsmKlUaHWFHq+NunPJ53cK/qIJ3h0jgniHBrhXeiZWa
lPaBAxoydMNsycapyzb8uQAJzoc6ChjlA8AgUfu9KXBNyxzvmpKf0XseJjXcT+i2mKAu2wiuqTzn
9IhjI4/yCKT+Ipgu2IJ1hx8sw3lB9HLslzztDvqEM09WTvb41+3A907mnJ6Q1+GQjv0DAR4sggxA
S24AAAAASUVORK5CYIIL'))
	#endregion
	$fileToolStripMenuItem.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = New-Object System.Drawing.Size(66, 29)
	$fileToolStripMenuItem.Text = '&File'
	#
	# OpenFolder
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAsgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAABc1JHQgCuzhzpAAAABGdBTUEAALGPC/xhBQAAAAlw
SFlzAAAWJQAAFiUBSVIk8AAAAkdJREFUOE/FkF1I02EUxv8XXXRlkRWFUGB54c0gKKK6CCmiUBTL
LEjShJofVBgLc360qenm5ubUlS5rm66p00ozCvuQCkUi1NSRZmpWFJViZqjk16+/LtShhHcdeHjh
cJ7fec4rLLeUBjuX1FYyjQ7+tpZfETKjmylVhM284bJ8hE99b6m06Repo+XpPzeFxGYTFJ2DMDPc
1WZhbKhiVr8H7Uz0m3FYs+lofbYk5EiMjqAoAwHSPISKYh2jg6Vu5qmvBUw44yi9qaakMANzfiqm
nBSuaeXkqeLdoWUWDaPfLXPmadFMlxyc0iW1CHCrSMWvL6Y5c22lZlYPHVnU2FXcLcnAYU7DblJi
NV7mhiGJQp0coybBBSsxZTD8IXc2dm+9gqpSHVO9SuhLd9d7sdeTCJ0yeBNLa3kotut6BLMxjZ/d
aviopbosm8ZHWtfQwuivw6EphMkGf8Ye+/GuWIJMGuw6pcig4EeHkr6GZKrsWqZ7FNAe5TK2RorG
40w2BjJWd4DhB3sYqNyGMtpHPEfuAhTokhloS+C2TUPzCzFJZ5wIOA3NYUy/DGb8+SFGavcyWLWd
b2W+NF1ZzQl/7/mPNGbJaa9L4Y4tC7pToEWM++oo4/UBjDzxY6hmJ/0OCZ8tW3FqPVFIt3A2+uQ8
IDczngqrGue9GJr0wpwatSuoU63kfuoqypPWYY734uqFzYQt3D5T+vSL6BVnyEyIIPHcMc5HBnIq
dD+HD+5i324JOyQ++Hp7sWnjWtav8WCDp4c74D+XIPwBF8beaT1+/VgAAAAASUVORK5CYIIL'))
	#endregion
	$OpenFolder.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$OpenFolder.ImageTransparentColor = [System.Drawing.Color]::Magenta 
	$OpenFolder.Name = 'OpenFolder'
	$OpenFolder.ShortcutKeys = [System.Windows.Forms.Keys]::F -bor [System.Windows.Forms.Keys]::Control 
	$OpenFolder.Size = New-Object System.Drawing.Size(267, 30)
	$OpenFolder.Text = 'Open &Folder'
	$OpenFolder.add_Click($openfolder_Click)
	#
	# toolStripSeparator
	#
	$toolStripSeparator.Name = 'toolStripSeparator'
	$toolStripSeparator.Size = New-Object System.Drawing.Size(264, 6)
	#
	# exitToolStripMenuItem
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAPAEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA3klEQVQ4T62TQQrCMBBFk43iOayL4tIbKSpCTyBY1LPpSqF1oYuSU5Tsx5l0qkka2iAO
fCjT/34yAxF/KTUViyqRRTWTECX0EsO4ENh4BI19QoZxDAgZIsR4N6DeL0Gl428vHWFv5XhIjLsB
9WENpsprE4IwFBfT0vl2OEDNJwDPmwEopIXhdTf/bC/j3RGcEKoATGI8sETr2qbacTwf416ADePJ
9jh+COPeEvNNA/C17XH0cTccQNKnzJmZvvU5czwkxgM7iBTjGJDIMmToFTKMfx5TfAh6ncf0ewnx
BuWSu6CElvwDAAAAAElFTkSuQmCCCw=='))
	#endregion
	$exitToolStripMenuItem.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = New-Object System.Drawing.Size(267, 30)
	$exitToolStripMenuItem.Text = 'E&xit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# folderbrowserdialog1
	#
	$folderbrowserdialog1.Description = 'Select Folder'
	$folderbrowserdialog1.ShowNewFolderButton = $False
	#
	# Status
	#
	$Status.Font = [System.Drawing.Font]::new('Segoe UI', '10')
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAA1QEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABd0lEQVQ4T41QsUoDQRBdkoCIICqKP6Bg4QckoKCdFiFNPHeyh9HGyhP8DcFPUOwEqztj
iEUKg6VYigRR8A8iCjbK+WadMxtzah4MO7Pz3szbVYyMDvdsAmQoukZ9KeX/yNFZIUtRjOhkdfho
cx3dSnswZChsivAgS+ETBj1IazBgwA2Ex7bQ0bQ4ele64dm7v4D3Xn1tD99yJsrDxYmiWqyoEStd
22eOIe+FiGIr+AkITsX2HQ9i8fj64WpRV+srJhhlDpGOeQBilmtjzJHv+yOc9wAD2orq8TLtnm/Q
WozNEH2LbWitn+W8F5mDzeaioosdTkls/xZwMGM1aahWS2Pu5kqlsg3BFrZ+JHflcnlY6L3wDRO6
Yoh8acEVFZN7iY60usAHuQTeXpIW95bcHoe0egF7UwkBDl5xLkCcx9lJ7hEFofcjCIIhh5gaQk0H
PqyVJnIDT2sIvR/sAJYtAeS5ROR53jyeNwFxG/WkJQ+CZICUDpT6BFa396VSSYX0AAAAAElFTkSu
QmCCCw=='))
	#endregion
	$Status.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Status.Margin = '0, 0, 0, 0'
	$Status.Name = 'Status'
	$Status.Size = New-Object System.Drawing.Size(24, 28)
	$Status.TextAlign = 'MiddleLeft'
	$Status.add_DoubleClick($Status_DoubleClick)
	#
	# treeview1
	#
	$treeview1.BackColor = [System.Drawing.Color]::Black 
	$treeview1.BorderStyle = 'None'
	$treeview1.ContextMenuStrip = $contextmenustrip1
	$treeview1.Dock = 'Fill'
	$treeview1.Font = [System.Drawing.Font]::new('Calibri', '10')
	$treeview1.ForeColor = [System.Drawing.SystemColors]::Window 
	$treeview1.HideSelection = $False
	$treeview1.Location = New-Object System.Drawing.Point(0, 0)
	$treeview1.Margin = '5, 5, 5, 5'
	$treeview1.Name = 'treeview1'
	$treeview1.ShowNodeToolTips = $True
	$treeview1.Size = New-Object System.Drawing.Size(626, 1231)
	$treeview1.TabIndex = 0
	$treeview1.add_AfterSelect($treeview1_AfterSelect)
	$treeview1.add_NodeMouseClick($treeview1_NodeMouseClick)
	#
	# treeview2
	#
	$treeview2.BackColor = [System.Drawing.Color]::Black 
	$treeview2.BorderStyle = 'None'
	$treeview2.ContextMenuStrip = $contextmenustrip2
	$treeview2.Dock = 'Fill'
	$treeview2.Font = [System.Drawing.Font]::new('Consolas', '9.5')
	$treeview2.ForeColor = [System.Drawing.SystemColors]::Window 
	$treeview2.HideSelection = $False
	$treeview2.Location = New-Object System.Drawing.Point(0, 0)
	$treeview2.Margin = '5, 5, 5, 5'
	$treeview2.Name = 'treeview2'
	$treeview2.ShowNodeToolTips = $True
	$treeview2.Size = New-Object System.Drawing.Size(1250, 1231)
	$treeview2.TabIndex = 0
	$treeview2.add_AfterSelect($treeview2_AfterSelect)
	$treeview2.add_NodeMouseClick($treeview2_NodeMouseClick)
	#
	# contextmenustrip1
	#
	$contextmenustrip1.ImageScalingSize = New-Object System.Drawing.Size(32, 32)
	[void]$contextmenustrip1.Items.Add($CopyNode1)
	[void]$contextmenustrip1.Items.Add($CopyFullFilePath)
	[void]$contextmenustrip1.Items.Add($toolstripseparator6)
	[void]$contextmenustrip1.Items.Add($Process1)
	[void]$contextmenustrip1.Items.Add($OpenFileWith)
	[void]$contextmenustrip1.Items.Add($SaveStream)
	[void]$contextmenustrip1.Items.Add($toolstripseparator8)
	[void]$contextmenustrip1.Items.Add($Expand1)
	[void]$contextmenustrip1.Items.Add($Collapse1)
	[void]$contextmenustrip1.Items.Add($toolstripseparator7)
	[void]$contextmenustrip1.Items.Add($ExpandAll1)
	[void]$contextmenustrip1.Items.Add($CollapseAll1)
	[void]$contextmenustrip1.Items.Add($toolstripseparator5)
	[void]$contextmenustrip1.Items.Add($Exit1)
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = New-Object System.Drawing.Size(331, 408)
	#
	# CopyNode1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAANgEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA2ElEQVQ4T6WSQQqDMBBFhV7AtotC6bVcCxN14z16gK5q7yGuXOi60GWhh4nODxF0krRK
H3wicXx8oxERXTm1jFLqVpblMfpFnue11noR7HVdB8mDc7CjfkICrH3fo809TdPYjrtMwzE1Jri2
t9bha4B9rj74wo1eWZZdzMMg1KAoikGCPT4biD4sOi8E84QEPGtWPhs0ebPo5DRA5oK9akzAJABW
8tzUoKoq50w2NZBgZlMDiRHwezi/sq+BDDCCEKsb+EiSZPdXg7ngG0EB4LNo5SeTIaJ2BBNZGvIe
WvGrAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyNode1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyNode1.Name = 'CopyNode1'
	$CopyNode1.Size = New-Object System.Drawing.Size(330, 38)
	$CopyNode1.Text = 'Copy Selected Node Text'
	$CopyNode1.add_Click($CopyNode1_Click)
	#
	# toolstripseparator6
	#
	$toolstripseparator6.Name = 'toolstripseparator6'
	$toolstripseparator6.Size = New-Object System.Drawing.Size(327, 6)
	#
	# toolstripseparator7
	#
	$toolstripseparator7.Name = 'toolstripseparator7'
	$toolstripseparator7.Size = New-Object System.Drawing.Size(327, 6)
	#
	# Exit1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAPAEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA3klEQVQ4T62TQQrCMBBFk43iOayL4tIbKSpCTyBY1LPpSqF1oYuSU5Tsx5l0qkka2iAO
fCjT/34yAxF/KTUViyqRRTWTECX0EsO4ENh4BI19QoZxDAgZIsR4N6DeL0Gl428vHWFv5XhIjLsB
9WENpsprE4IwFBfT0vl2OEDNJwDPmwEopIXhdTf/bC/j3RGcEKoATGI8sETr2qbacTwf416ADePJ
9jh+COPeEvNNA/C17XH0cTccQNKnzJmZvvU5czwkxgM7iBTjGJDIMmToFTKMfx5TfAh6ncf0ewnx
BuWSu6CElvwDAAAAAElFTkSuQmCCCw=='))
	#endregion
	$Exit1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Exit1.Name = 'Exit1'
	$Exit1.Size = New-Object System.Drawing.Size(330, 38)
	$Exit1.Text = 'Exit'
	$Exit1.add_Click($Exit1_Click)
	#
	# Process1
	#
	$Process1.BackColor = [System.Drawing.Color]::Honeydew 
	$Process1.Enabled = $False
	$Process1.Name = 'Process1'
	$Process1.Size = New-Object System.Drawing.Size(330, 38)
	$Process1.Text = 'Process '
	$Process1.Visible = $False
	$Process1.add_Click($Process1_Click)
	#
	# toolstripseparator8
	#
	$toolstripseparator8.Name = 'toolstripseparator8'
	$toolstripseparator8.Size = New-Object System.Drawing.Size(327, 6)
	$toolstripseparator8.Visible = $False
	#
	# contextmenustrip2
	#
	$contextmenustrip2.ImageScalingSize = New-Object System.Drawing.Size(32, 32)
	[void]$contextmenustrip2.Items.Add($CopyNode2)
	[void]$contextmenustrip2.Items.Add($CopyNode2Tag)
	[void]$contextmenustrip2.Items.Add($CopyAll2)
	[void]$contextmenustrip2.Items.Add($toolstripseparator11)
	[void]$contextmenustrip2.Items.Add($SaveStreamToFile)
	[void]$contextmenustrip2.Items.Add($SaveLnkToJson)
	[void]$contextmenustrip2.Items.Add($toolstripseparator9)
	[void]$contextmenustrip2.Items.Add($Expand2)
	[void]$contextmenustrip2.Items.Add($Collapse2)
	[void]$contextmenustrip2.Items.Add($toolstripseparator4)
	[void]$contextmenustrip2.Items.Add($ExpandAll2)
	[void]$contextmenustrip2.Items.Add($CollapseAll2)
	[void]$contextmenustrip2.Items.Add($toolstripseparator10)
	[void]$contextmenustrip2.Items.Add($SaveNodestoTxt)
	[void]$contextmenustrip2.Items.Add($toolstripseparator3)
	[void]$contextmenustrip2.Items.Add($Exit2)
	$contextmenustrip2.Name = 'contextmenustrip2'
	$contextmenustrip2.Size = New-Object System.Drawing.Size(394, 452)
	#
	# CopyNode2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAUwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB9UlEQVQ4T5WTy2sTURTGb3wgRf+E/C8hkCwD2WTjIuDCuAqRvAl5k+cmkIBjEie1OOME
KajFiiUJFUsRoQvXSlssLS6KKBQkSu0cv3NjQtImUD/4uDPcud/5nZkzol6v3y+Xy08qlYrGLpVK
0oVCQYvFYivJZPK2x+O5KoSwwBeFwyumaWrzrCiKhgKa1+u94/P5ruPxiyFzAnT4KWzUajWDrznE
7Xbf9fv9NzKZzJV/R0caB3w7MbX13iddefj4EK2YMLGxT8VikdASRaPR00AgUJuhwcY0gVGtVs9o
gZrNJoGGHA5H02q1LsmQccDJ0NRevvpooOrCgE6nI1cOcTqdywi4eZ6gC2QZ8OMn0eb2AW29P6Tt
D0fyoKqOAliNRoPsdrsq8vm8DBj+MrXVFztd9LuQQNd1arXb1Gq16YGiUDAYPBO5XG6GYBwwPCVU
P5LVeZ2ncDhMAp9lQvDs+U4XRAsJzisej5NIpVIzBOOA33/wDrYOpAfvvlBvc582Bnv0ur9Lx9/l
+VEARnU6wEBL/0eQSCSWpwL0bDY7IeDK/bf7svqb/h6t93ZpbeMzfT3GJoR/hUQ6nb6HpEe4USOR
iAqiSxNgMomH0WKz2a5h5cm6BSK8/8tJfoUp8WxbQLIGIpP7Y0SuwuaH2aFQaGKXyzX4CxZw19hB
z+7oAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyNode2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyNode2.Name = 'CopyNode2'
	$CopyNode2.Size = New-Object System.Drawing.Size(393, 38)
	$CopyNode2.Text = 'Copy Selected Node Text'
	$CopyNode2.add_Click($CopyNode2_Click)
	#
	# CopyAll2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAANgEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA2ElEQVQ4T6WSQQqDMBBFhV7AtotC6bVcCxN14z16gK5q7yGuXOi60GWhh4nODxF0krRK
H3wicXx8oxERXTm1jFLqVpblMfpFnue11noR7HVdB8mDc7CjfkICrH3fo809TdPYjrtMwzE1Jri2
t9bha4B9rj74wo1eWZZdzMMg1KAoikGCPT4biD4sOi8E84QEPGtWPhs0ebPo5DRA5oK9akzAJABW
8tzUoKoq50w2NZBgZlMDiRHwezi/sq+BDDCCEKsb+EiSZPdXg7ngG0EB4LNo5SeTIaJ2BBNZGvIe
WvGrAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyAll2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyAll2.Name = 'CopyAll2'
	$CopyAll2.Size = New-Object System.Drawing.Size(393, 38)
	$CopyAll2.Text = 'Copy Selected Node''s Child Nodes'
	$CopyAll2.ToolTipText = 'Copy all the Child Nodes of the selected Node'
	$CopyAll2.add_Click($CopyAll2_Click)
	#
	# toolstripseparator9
	#
	$toolstripseparator9.Name = 'toolstripseparator9'
	$toolstripseparator9.Size = New-Object System.Drawing.Size(390, 6)
	#
	# Expand2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAuQEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABW0lEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwKFDB4kzYMZ2CP/kwz3/k2e6/9cvE/ifOd/3/4KtU0Gx0YpiAC5b
0+eE/ZdpYPivu5Lhf8EZ7/+6yxn+S9cy/E+a5XoJaEgtXgOO3N3+X6qO4b/HHUawZhAA0R53GP5L
VDH8X3SifzpeAyIn2/5XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9rGMBCWz4LohkbAInLZTF8ABuA
KymHTDT7L9SK6gIYW6iF4b9rm+otnJnp0JFD/ydvaP0vkM/wX2oiwiUgWmoSw3++HIb/mYv8msAx
gQsAXdbv06VzjzeT4T8n0CCQZhAN4js2K5x27dbjhirFCSQDk9z9GtfmrjevEXkukszwzbJW7JFb
lc4EBlYGAwYGBgkA/k2qEIW0rPkAAAAASUVORK5CYIIL'))
	#endregion
	$Expand2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Expand2.Name = 'Expand2'
	$Expand2.Size = New-Object System.Drawing.Size(393, 38)
	$Expand2.Text = 'Expand'
	$Expand2.ToolTipText = 'The Selected Node'
	$Expand2.add_Click($Expand2_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = 'toolstripseparator10'
	$toolstripseparator10.Size = New-Object System.Drawing.Size(390, 6)
	#
	# Exit2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAPAEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA3klEQVQ4T62TQQrCMBBFk43iOayL4tIbKSpCTyBY1LPpSqF1oYuSU5Tsx5l0qkka2iAO
fCjT/34yAxF/KTUViyqRRTWTECX0EsO4ENh4BI19QoZxDAgZIsR4N6DeL0Gl428vHWFv5XhIjLsB
9WENpsprE4IwFBfT0vl2OEDNJwDPmwEopIXhdTf/bC/j3RGcEKoATGI8sETr2qbacTwf416ADePJ
9jh+COPeEvNNA/C17XH0cTccQNKnzJmZvvU5czwkxgM7iBTjGJDIMmToFTKMfx5TfAh6ncf0ewnx
BuWSu6CElvwDAAAAAElFTkSuQmCCCw=='))
	#endregion
	$Exit2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Exit2.Name = 'Exit2'
	$Exit2.Size = New-Object System.Drawing.Size(393, 38)
	$Exit2.Text = 'Exit'
	$Exit2.add_Click($Exit2_Click)
	#
	# openfiledialog1
	#
	$openfiledialog1.ReadOnlyChecked = $True
	$openfiledialog1.ShowReadOnly = $True
	#
	# Open
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAFAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABtklEQVQ4T5WS0UtTURzHv5IweqgHX0MI6o+ooN5C8EHqoRd7qAwUYxFjl1kbW6KriOHG
3VjR2FrrrmAQISx0NEgZtgb2EAiJEiNZYBROWkKG83773et9yDR29z18Hs73nvM938M9sKUhHIUC
wmvSlPlVXMABDGPVWtFSHWaIwYCM6xJyBVkJ2La+tyHj5Et4IB0oUTomMnl3IJptCPwbv6r9VLPT
t6xtpi4/Hu5Gv9S+iC2hKfyGP5r9wf8oqr3aFWrgVdMciTxaOz1+9gxuoxOjYhq6WSb978ngIhmq
kal1095XlYXPDD68u9MuoGqWvVdbwq9/MFRZqFLTVJ8Z4A8/ob7xgSX1MN/cQ1vMTBwswBtKcjHf
R35JSrbR2y51zobkNyp34ixFHGJ8lM4p6Xm/NbpcWy+zGMQyPD6Fb2OHJGCFbCiCuzXMsVkNcy7i
eIZRpZdLL0+J+Zqs9diDk6wVzxsH30DYfYz1eadUi5HLJ+3BeZbjXawkjpxAwgXy+3MJiJLfhlpT
90hAlS/c2JxSjzuQuQad/CTmmn2+asw58c58B2kXCplB6E8HwTZYL4zhHAD8Ad1Qd/Ir+3S0AAAA
AElFTkSuQmCCCw=='))
	#endregion
	$Open.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Open.Name = 'Open'
	$Open.ShortcutKeys = [System.Windows.Forms.Keys]::O -bor [System.Windows.Forms.Keys]::Control 
	$Open.Size = New-Object System.Drawing.Size(267, 30)
	$Open.Text = '&Open File'
	$Open.add_Click($Open_Click)
	#
	# About
	#
	$About.Alignment = 'Right'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAugEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABXElEQVQ4T4WTO0sDQRSFRxRbd802EoiooBb+nbQWs2YLEdRSRHxXioX+BLtgI8rMxogJ
Wgl2Yu+j01JRAivjmfEOJMMVD3zs49x7ZvburggVy8ZMnOrDKNUPUao+IqnecbyPpD4oZfk0lTGq
1gdjqY5iqb8RYCxJlpuklrtzokDgvlhvDVAXCc0wLroKHUwAoU57Quz2wqLxxUvjVZ5v9ngOqXdc
c0nqKdwowoLJ5Ra1G1NZYAJS3Ynk+ajAsPYY02FDJpauWM8h1Ramru5YE/wXgMVvEKDfONPixXkW
DP5J4OQ1NDxenEc84g2oW8ZweHGeQ6oWdqB2WRN4cZ4FX+iqGJprjOGiE5oWL87DAD+Tmh5x3wJ2
sc0VWRV/B6y4ZqdqvR/bOeEKWaQ+FsL0UTcJITA2UcA+jgWLfP2uHDZ3Kc6aFRRvYMLX+Ede0PSM
6zYa14Znz8pURhLiB6He59HTFA2SAAAAAElFTkSuQmCCCw=='))
	#endregion
	$About.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$About.Name = 'About'
	$About.Size = New-Object System.Drawing.Size(90, 29)
	$About.Text = 'About'
	$About.add_Click($About_Click)
	#
	# Expand1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAuQEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABW0lEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwKFDB4kzYMZ2CP/kwz3/k2e6/9cvE/ifOd/3/4KtU0Gx0YpiAC5b
0+eE/ZdpYPivu5Lhf8EZ7/+6yxn+S9cy/E+a5XoJaEgtXgOO3N3+X6qO4b/HHUawZhAA0R53GP5L
VDH8X3SifzpeAyIn2/5XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9rGMBCWz4LohkbAInLZTF8ABuA
KymHTDT7L9SK6gIYW6iF4b9rm+otnJnp0JFD/ydvaP0vkM/wX2oiwiUgWmoSw3++HIb/mYv8msAx
gQsAXdbv06VzjzeT4T8n0CCQZhAN4js2K5x27dbjhirFCSQDk9z9GtfmrjevEXkukszwzbJW7JFb
lc4EBlYGAwYGBgkA/k2qEIW0rPkAAAAASUVORK5CYIIL'))
	#endregion
	$Expand1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Expand1.Name = 'Expand1'
	$Expand1.Size = New-Object System.Drawing.Size(330, 38)
	$Expand1.Text = 'Expand'
	$Expand1.add_Click($Expand1_Click)
	#
	# Collapse1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAApwEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABSUlEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwOmTJ4kzYNZWCP/1/v3/N/v6/p8sIv5/e0jI/4MzZoBiox/FAFy2
bgyN/j+XgeH/XTa2/+95ef/fAdJzgPxN3t6XgNIdeA14sWvX/1lAxe9YWP5/BGqEYRB/JlD8xqRJ
0/EasNbZ+f9+oMKD3Nz/P06dCscg/h6g+DIjo3tYwwAW2j3MLP9XAhViAyDxHkbGD2ADcCXl1TY2
YP/PZWT8f7enB45BYQDCi3R0buHMTGeAUbW7owMYSgz/p2HB7UC8LSSkCRwTuADQZTOWGRvfA6r6
34qEQfz5GhqngfJVUKU4gWSuj4/vkri4LbOkpZ+3MTB8my0n96hFR2caFwODPgMDgwQA5fqgNsaN
05UAAAAASUVORK5CYIIL'))
	#endregion
	$Collapse1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Collapse1.Name = 'Collapse1'
	$Collapse1.Size = New-Object System.Drawing.Size(330, 38)
	$Collapse1.Text = 'Collapse'
	$Collapse1.add_Click($Collapse1_Click)
	#
	# toolstripseparator5
	#
	$toolstripseparator5.Name = 'toolstripseparator5'
	$toolstripseparator5.Size = New-Object System.Drawing.Size(327, 6)
	#
	# ExpandAll1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAATAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB7klEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/BYqBwOLdn1FDRtkA0pK
Sv6DvCMgIPI/sPDa/9d//v9fdnrP/5CJ7v+1SwT+h03y+t+/YfP/f//+tUK1o3qhtLQU7IX//+uZ
Hr789yy0O/C/TAPDf92VDP8Lznj/113O8F+6luF/0izXS0BDasEGYAtEoGTjyjNTt0nVMfz3uMMI
1gwCINrjDsN/iSqG/4tO9E8HK8YWiEADDjo3GX1XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9sQG0t
JAyA3oUHItCA41JpEM3YAEhcLovhA9gAbIF4/eb1/7a1+v+FWlFdAGMLtTD8d21TvQU2oKGhAe4F
IIZ5oaRr7fTXAvkM/6UmIlwCoqUmMfzny2H4n7nIrwlsAC4ANKTfp0vnHm8mw39OoEEgzSAaxHds
Vjjt2q3HDVWKE0gGJrn7Na7NXW9eI/JcJJnhm2Wt2CO3Kp0JDKwMBgwMDBIAgcOxdR/eHc8AAAAA
SUVORK5CYIIL'))
	#endregion
	$ExpandAll1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$ExpandAll1.Name = 'ExpandAll1'
	$ExpandAll1.Size = New-Object System.Drawing.Size(330, 38)
	$ExpandAll1.Text = 'Expand All'
	$ExpandAll1.add_Click($ExpandAll1_Click)
	#
	# CollapseAll1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAOwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB3UlEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/AkqBwNrD/5ADRtkA0pK
Sv6DvCMgIPI/pODa/0///v8/sXL//8XOvv/7hcT/L3H3/79h4pb///7964dqR/VCaWkp2Av/6+uZ
nr/992K+S+j/uUDuXTa2/+95ef/fAdJzgPxN3t6XgPZ1gA3AFohAG7pvz5q1bRZQ8TsWlv8fgRph
GMSfCRS/MWnSdLBibIEINOD0DH2z7/uBCg9yc///OHUqHIP4e4Diy4yM7oENqK2FhMEfIIYFItCA
8+0MzP9XAhViAyDxHkbGD2ADsAXik4eP/0/VNAH7fy4j4/+7PT1wDAoDEF6ko3MLbEBDQwPcC0AM
80L99pY5r4Gh9H8aFtwOxNtCQprABuACQENmLDM2vgdU9b8VCYP48zU0TgPlq6BKcQLJXB8f3yVx
cVtmSUs/b2Ng+DZbTu5Ri47ONC4GBn0GBgYJANEup2CwHtGOAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CollapseAll1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CollapseAll1.Name = 'CollapseAll1'
	$CollapseAll1.Size = New-Object System.Drawing.Size(330, 38)
	$CollapseAll1.Text = 'Collapse All'
	$CollapseAll1.add_Click($CollapseAll1_Click)
	#
	# Collapse2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAApwEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABSUlEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwOmTJ4kzYNZWCP/1/v3/N/v6/p8sIv5/e0jI/4MzZoBiox/FAFy2
bgyN/j+XgeH/XTa2/+95ef/fAdJzgPxN3t6XgNIdeA14sWvX/1lAxe9YWP5/BGqEYRB/JlD8xqRJ
0/EasNbZ+f9+oMKD3Nz/P06dCscg/h6g+DIjo3tYwwAW2j3MLP9XAhViAyDxHkbGD2ADcCXl1TY2
YP/PZWT8f7enB45BYQDCi3R0buHMTGeAUbW7owMYSgz/p2HB7UC8LSSkCRwTuADQZTOWGRvfA6r6
34qEQfz5GhqngfJVUKU4gWSuj4/vkri4LbOkpZ+3MTB8my0n96hFR2caFwODPgMDgwQA5fqgNsaN
05UAAAAASUVORK5CYIIL'))
	#endregion
	$Collapse2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Collapse2.Name = 'Collapse2'
	$Collapse2.Size = New-Object System.Drawing.Size(393, 38)
	$Collapse2.Text = 'Collapse'
	$Collapse2.add_Click($Collapse2_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = 'toolstripseparator4'
	$toolstripseparator4.Size = New-Object System.Drawing.Size(390, 6)
	#
	# ExpandAll2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAATAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB7klEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/BYqBwOLdn1FDRtkA0pK
Sv6DvCMgIPI/sPDa/9d//v9fdnrP/5CJ7v+1SwT+h03y+t+/YfP/f//+tUK1o3qhtLQU7IX//+uZ
Hr789yy0O/C/TAPDf92VDP8Lznj/113O8F+6luF/0izXS0BDasEGYAtEoGTjyjNTt0nVMfz3uMMI
1gwCINrjDsN/iSqG/4tO9E8HK8YWiEADDjo3GX1XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9sQG0t
JAyA3oUHItCA41JpEM3YAEhcLovhA9gAbIF4/eb1/7a1+v+FWlFdAGMLtTD8d21TvQU2oKGhAe4F
IIZ5oaRr7fTXAvkM/6UmIlwCoqUmMfzny2H4n7nIrwlsAC4ANKTfp0vnHm8mw39OoEEgzSAaxHds
Vjjt2q3HDVWKE0gGJrn7Na7NXW9eI/JcJJnhm2Wt2CO3Kp0JDKwMBgwMDBIAgcOxdR/eHc8AAAAA
SUVORK5CYIIL'))
	#endregion
	$ExpandAll2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$ExpandAll2.Name = 'ExpandAll2'
	$ExpandAll2.Size = New-Object System.Drawing.Size(393, 38)
	$ExpandAll2.Text = 'Expand All'
	$ExpandAll2.add_Click($ExpandAll2_Click)
	#
	# CollapseAll2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAOwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB3UlEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/AkqBwNrD/5ADRtkA0pK
Sv6DvCMgIPI/pODa/0///v8/sXL//8XOvv/7hcT/L3H3/79h4pb///7964dqR/VCaWkp2Av/6+uZ
nr/992K+S+j/uUDuXTa2/+95ef/fAdJzgPxN3t6XgPZ1gA3AFohAG7pvz5q1bRZQ8TsWlv8fgRph
GMSfCRS/MWnSdLBibIEINOD0DH2z7/uBCg9yc///OHUqHIP4e4Diy4yM7oENqK2FhMEfIIYFItCA
8+0MzP9XAhViAyDxHkbGD2ADsAXik4eP/0/VNAH7fy4j4/+7PT1wDAoDEF6ko3MLbEBDQwPcC0AM
80L99pY5r4Gh9H8aFtwOxNtCQprABuACQENmLDM2vgdU9b8VCYP48zU0TgPlq6BKcQLJXB8f3yVx
cVtmSUs/b2Ng+DZbTu5Ri47ONC4GBn0GBgYJANEup2CwHtGOAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CollapseAll2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CollapseAll2.Name = 'CollapseAll2'
	$CollapseAll2.Size = New-Object System.Drawing.Size(393, 38)
	$CollapseAll2.Text = 'Collapse All'
	$CollapseAll2.add_Click($CollapseAll2_Click)
	#
	# SaveNodestoTxt
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAkwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAACNUlEQVQ4T6WSX2iSURjGjzD8wJFs4aCLQKYY1RYNHIlDJelCSTAaJot1IQYNQ8FwiTAG
GgmDomIjWV2JnyzwIpC6kIouomBDIjFGTHZh7KYCdzVxEvj0nqObuYIFPfDwnfP++Z3zHj4m9Z9+
yfoMYEyN7cL6oWaMQdmvxYDGUKA1iZrvPVikRN9fGw6aA6Kxeag1/NAOQFKpaKPAv4gDguFoL2A+
nhQJLvvHUXjOMqSSM5iLRURMVWI4utHO8zoOGBzSdwG3orF9ANfKUgQvUn7cuWHE9LlunIvXHQDo
EaIAT+zpTeE57gbGkZo9hdo7M7xjlGs1RI7XBYLh3wBKPa5O+3sAXEE7Q/3TCLDrRqtkxZSRodXc
FnWeK9egHtJ1AW63lzYKkdxzvd5AwELQbz6CTAKfbfCcYSiursLhvESPONwF2C+4YJpw/GGum1YO
8QONy6h9sGGSHrharRJA2wWYzHboDEYKSGR1j8vlL+Imu5vXeyDrZfFPkCQdxk02aI6dgMvlFaeu
FYvYqFTEOhKJ0Dh1zNBNOCQnLyCZXICvPSpNTgDreYcAXOwA8vk8Xr1+K9aJRALxeBzNZlNAnq3k
IKeWsWaxdCDS8I7Z4oRWNyYAO01g+clTyNkcWgSQZRmZTAbpdFoAZ6mpEphCzedEqH2Lgbkjgydb
I6MTAsCbKptfUd36IRqy2ey+OaTR+In3oTDi1Hz/4ZIYQyLfVkjH6/TlgUOsRIke8NHi4++0/18x
9gu56xvVOQsp2AAAAABJRU5ErkJgggs='))
	#endregion
	$SaveNodestoTxt.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$SaveNodestoTxt.Name = 'SaveNodestoTxt'
	$SaveNodestoTxt.Size = New-Object System.Drawing.Size(393, 38)
	$SaveNodestoTxt.Text = 'Save Nodes to TXT'
	$SaveNodestoTxt.add_Click($SaveNodestoTxt_Click)
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = 'toolstripseparator3'
	$toolstripseparator3.Size = New-Object System.Drawing.Size(390, 6)
	#
	# savefiledialog1
	#
	#
	# OpenFileWith
	#
	$OpenFileWith.BackColor = [System.Drawing.Color]::Gainsboro 
	$OpenFileWith.ForeColor = [System.Drawing.Color]::Red 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAArAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAACTklEQVQ4T5WSTUhUcRTFj2mWjcJEE4pSIVpNfqMuNLQWFVRDhc080QozB5NkwDYR9DW6
CBRjoEUilBgKgYsiWokFbty4iCIhsSYZstQiF8aIhoOn8+ZNRB9iHfjx/tx77v/e9+7Dahq8ir29
Bt731uDtw0sojoX/TcN+JPTUYGxx4jrDL0+w24NX/v3YGEuvrQEfvE/bQLJP1HHoBlicjGbDQHzM
srqe+LGpy4Mpzjao+IFoJ6cq2XEY08mAQ5Y4y7mKes+hdeR2fLS7nLQlmZO0cSQAltnRXgKsj1n/
1P0mZASOI8ywuke6qFAU8ib5OZe3jmEhBdip2N+nCHjQ86LPoYLWaJE5QXqqecEVUc7n90DXNvTn
AImxkp+660VB50ksc6VZ5kbRxKMHHGyozdS5XlSS8/nsrMKy7GV+YJ1VGdO1gxgKPs6S8TK5VKSn
i4G2Uvbf2UeuHCIX94giBgfiWePEsEo2WJVSpxtHAtUaNXyGnKsgQ4nkbBbHBl0MjVTpvMOKfUjT
086AAWojbgNaq36QhJYyjM0NOnXBWXLSRgbjVKSOEZ/FzC4r9k6XhBycewSeysHrLUAKWl1o7G5Q
9/k67TuPHNd5XOZ5LzfbwK12czKvFTNzQTv5xsauOq0Y8KG+EMHIkLpOl6tDhkgV6Xrfiyx0JrE0
X7mlFsU0/o/c5HYuPkujOxsTOJ2HmW+jJeRXz68sndeH7BD6E83zb/mF0XIaTnxERQaMaic+1eaC
/4MnG1/0/S+YS0gQdpEp8kShKFqDArEbQNp36wSQdSmzmr4AAAAASUVORK5CYIIL'))
	#endregion
	$OpenFileWith.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$OpenFileWith.Name = 'OpenFileWith'
	$OpenFileWith.Size = New-Object System.Drawing.Size(330, 38)
	$OpenFileWith.Text = 'Open File with'
	$OpenFileWith.ToolTipText = 'Open the selected file with another tool '
	$OpenFileWith.Visible = $False
	$OpenFileWith.add_Click($OpenFileWith_Click)
	#
	# CopyFullFilePath
	#
	$CopyFullFilePath.Name = 'CopyFullFilePath'
	$CopyFullFilePath.Size = New-Object System.Drawing.Size(330, 38)
	$CopyFullFilePath.Text = 'Copy Full File Path'
	$CopyFullFilePath.Visible = $False
	$CopyFullFilePath.add_Click($CopyFullFilePath_Click)
	#
	# CopyNode2Tag
	#
	$CopyNode2Tag.BackColor = [System.Drawing.Color]::PapayaWhip 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAUwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB9UlEQVQ4T5WTy2sTURTGb3wgRf+E/C8hkCwD2WTjIuDCuAqRvAl5k+cmkIBjEie1OOME
KajFiiUJFUsRoQvXSlssLS6KKBQkSu0cv3NjQtImUD/4uDPcud/5nZkzol6v3y+Xy08qlYrGLpVK
0oVCQYvFYivJZPK2x+O5KoSwwBeFwyumaWrzrCiKhgKa1+u94/P5ruPxiyFzAnT4KWzUajWDrznE
7Xbf9fv9NzKZzJV/R0caB3w7MbX13iddefj4EK2YMLGxT8VikdASRaPR00AgUJuhwcY0gVGtVs9o
gZrNJoGGHA5H02q1LsmQccDJ0NRevvpooOrCgE6nI1cOcTqdywi4eZ6gC2QZ8OMn0eb2AW29P6Tt
D0fyoKqOAliNRoPsdrsq8vm8DBj+MrXVFztd9LuQQNd1arXb1Gq16YGiUDAYPBO5XG6GYBwwPCVU
P5LVeZ2ncDhMAp9lQvDs+U4XRAsJzisej5NIpVIzBOOA33/wDrYOpAfvvlBvc582Bnv0ur9Lx9/l
+VEARnU6wEBL/0eQSCSWpwL0bDY7IeDK/bf7svqb/h6t93ZpbeMzfT3GJoR/hUQ6nb6HpEe4USOR
iAqiSxNgMomH0WKz2a5h5cm6BSK8/8tJfoUp8WxbQLIGIpP7Y0SuwuaH2aFQaGKXyzX4CxZw19hB
z+7oAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyNode2Tag.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyNode2Tag.Name = 'CopyNode2Tag'
	$CopyNode2Tag.Size = New-Object System.Drawing.Size(393, 38)
	$CopyNode2Tag.Text = 'Copy Selected Node''s Tag Data (Hex)'
	$CopyNode2Tag.Visible = $False
	$CopyNode2Tag.add_Click($CopyNode2Tag_Click)
	#
	# SaveStreamToFile
	#
	$SaveStreamToFile.BackColor = [System.Drawing.Color]::Lavender 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAGgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABvElEQVQ4T5XSQUjCYBQH8E8KB0pDwyBIkBQjqkNQIEmK0UFJsEsJUYeogwSGhSRhKPPQ
KejQqXYS56mb0EEKuodeI5IORbeiojBqF1/v+9wmxIj14M/etvf9tvGNcNaRM9LtBUJ4eK1eGwoh
BMxWF9gc3iqhiw8Oj/Bit+6wXiiQ2c0B76APRoCzWLAxgdGiQHIr0wFywj67SOv9own1el03siyz
GRWw93nawHZmVwOM1C/AA5t4ogJf39+6T6d5eXtnM3R2I7mlAGYPrCeSGvBXtZQjnV1dSwDf524D
S8trhgC16OzC4koHiMXi2JjYDaMJR+ZxFwaxR2BmNgo+f/hfCYYiCLjagG9qBtzeCTzhMLxOfr+B
HYE56Ol1Ys+5YdIXBEf/EESjcfaNV7Ua3DYarKeVTqe1pFIphgSCkTZgQiAQCjNgTgEqlQqcX1yy
nlahUABBECCfz0M2m+0ADvYGg82p6Qi43OMMaOLPdnwiglQ+hWfcdrp1kiRBqVSCYrEIoihqAM8A
YtvrsQ+3Rsf8DKALGncPcP/4BLKy8eVyWQtFKBCajakA4TA7Js75SW8YixmsvQNAuiw3PwhUWzMK
5g6uAAAAAElFTkSuQmCCCw=='))
	#endregion
	$SaveStreamToFile.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$SaveStreamToFile.Name = 'SaveStreamToFile'
	$SaveStreamToFile.Size = New-Object System.Drawing.Size(393, 38)
	$SaveStreamToFile.Text = 'Save Stream to File'
	$SaveStreamToFile.Visible = $False
	$SaveStreamToFile.add_Click($SaveStreamToFile_Click)
	#
	# toolstripRefresh
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAHgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABwElEQVQ4T41TOyxDYRT+b3pRBmHAIulgM0kkYrMJXUxX0FJsXlPFJmWQSDwWMYjRhLBK
LMLkum26WEhDIo0O1KtSbT2O89170ki09EtO7v3P+f5zzz3nO6oQtAErrvnCL66hyIfmt7Iuv5Vq
mr1tlXBpKBuLjeiD4c/xXaKpfaKKQJSqJ682O0KkC+V/NARj9ZrPygxvvdPyCVHVaJRqJy4XJFwa
PKFrNyfJzR+SnUQfsr7aV24qJVwcTh+spOY7y+Dd2HilJU5QGYgQ+7Livxd6YTAp1bP2SIvH9Mu6
Vu+IEzwL1YEncOTW+k+f5KhU6EjXBsw3Yz1JcweUN+9ygqsw08rYcQlTqWbjvFzrM9/aZi6Ik7yL
m5NGa/ic6V17oOk9vrwY57iZ7uDkQlEKBzgRBAlkXMJloSgktZPzR/AxcTO4DJSDsn6WibJRPn5D
mEjyhN+UowM0Ag0p1Cg0EI0UamFgFPZIeDQYEUaFkWF0jp9Hye9CLw6IAyKBWCAaiAciknBpgEwh
VySBfCFjyFnC/wOLgoXB4mCBsEhYKCyWUP5EHVujbS3BbuXde2XLKe/+Bz9TqnM7kY87xnylvgFe
cjMncFhmHQAAAABJRU5ErkJgggs='))
	#endregion
	$toolstripRefresh.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$toolstripRefresh.Name = 'toolstripRefresh'
	$toolstripRefresh.Size = New-Object System.Drawing.Size(98, 33)
	$toolstripRefresh.Text = 'Refresh'
	$toolstripRefresh.ToolTipText = 'Refresh selected folder'
	$toolstripRefresh.Visible = $False
	$toolstripRefresh.add_Click($toolstripRefresh_Click)
	#
	# GetMRUlist
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAJgEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAAyElEQVQ4T2OgGPAWr5nkfejhf3TMVbRiMlCaEaIKD/Da/+x/yff/GNjvyPP/QGk2iCo8
wHHHw/+ZL/7/TwdiZNpjD9gALogqPMB83cP/YXf+Y2C7zc+IM0BnyZ3/zif+Y2CTlXeJM0B+0sn/
uqueYGC1aReIMwAU2qLt+/+Lt+/5j0xzZS2YDpKGqMIPQFEFCm2QYnRMOBZwpoP85VOA0kyE5Amm
A4LphFA6IJhOCKUDgumEUDogmE4IpQOC6YRQOgCFNm55Bi4AW/SimGtrwKkAAAAASUVORK5CYIIL'))
	#endregion
	$GetMRUlist.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$GetMRUlist.Name = 'GetMRUlist'
	$GetMRUlist.Size = New-Object System.Drawing.Size(267, 30)
	$GetMRUlist.Text = 'Get MRU from Registry'
	$GetMRUlist.ToolTipText = 'Read Curent User''s MRU '
	$GetMRUlist.add_Click($GetMRUlist_Click)
	#
	# toolstripseparator2
	#
	$toolstripseparator2.Name = 'toolstripseparator2'
	$toolstripseparator2.Size = New-Object System.Drawing.Size(264, 6)
	#
	# imagelist1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAADYcQAAAk1TRnQBSQFMAgEBDgEAAaABAQGgAQEBGAEAARgBAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFgAwABYAMAAQEBAAEgBgABkEIABAEDCAEKAwkBDAMGAQgDAgEDJAAEAQMDAQQD
AwQEAQUDBAEFAwQBBQMDAQQDAwEEBAEMAAQBAwMBBAMDBAQBBQMEAQUDBAEFAwMBBAMDAQQEAfAA
BAEDAwEEAy0BRAM5AV4DMwFSAxYBHgQCHAADHAEnAy0BRAM2AVkDNgFZAzcBWgM3AVoDNwFaAzYB
WQM2AVkDGAEgAwIBAwQAAxwBJwMtAUQDNgFZAzYBWQM3AVoDNwFaAzcBWgM2AVkDNgFZAxgBIAMC
AQPsAAMCAQMDBwEJA1UBrQNoAfQBYQJbAd4DMwFRAwYBBxwAA0IBdANfAckc/wM5AV0DBgEIBAAD
QgF0A18ByRz/AzkBXQMGAQjoAAMDAQQDKQE+A1UBrQNjAeQBawJfAfsDaAH0A1kBtgM9AWcDBgEH
BAIUAANOAZgDagHtAv8B/AP/AfwD/wH8A/8B/AP/AfwD/wH8A/8B/AH/AzkBXgMHAQkEAANOAZgD
agHtAv8B/AP/AfwD/wH8A/8B/AP/AfwD/wH8A/8B/AH/AzkBXgMHAQngAAQBAwIBAwMpAT4DTQGS
AeQBsgGYAf8B1AHAAbYB/wHXAcYBvgH/Ae0BxAGuAf8DaAHwA1kBtgMzAVADFgEdBAIQAANVAaoB
zgG1AaQD/wH8A/8B/AP/AfwD/wH8A/8B/AP/AfwD/wH8Af8DOQFeAwcBCQQAA1UBqgHOAbUBpAP/
AfwD/wH8A/8B/AP/AfwD/wH8A/8B/AP/AfwB/wM5AV4DBwEJ4AADAgEDAwcBCQNVAa0B5AGyAZgB
/wG1Aa4BqwH/AeYB5AHjCf8B7QHEAa4B/wNoAfQBZQJeAd0DMwFQAwYBBxAAA1UBqgHUAboBqh3/
AzkBXgMHAQkEAANVAaoB1AG6Aaod/wM5AV4DBwEJ3AADAwEEAykBPgNVAa0DYwHkAdcBwwG5Af8B
5gHkAeMB/wH3AvYJ/wH5AesB5AH/AX0BawFhAfsDaAH0A1cBtQM8AWYDBgEHBAIIAANVAaoB2gG/
Aa4d/wM5AV0DBgEIBAADVQGqAdoBvwGuHf8DOQFdAwYBCNQABAEDAgEDAykBPgNNAZIB8AG9AaMB
/wHaAcYBvAH/Ad8B3AHbFf8B+QHrAeQB/wHuAcQBrgH/A2cB7wNXAbUDMwFQAxQBGwgAA0MBdQNd
AcoB8AHiAdkB/wHwAeIB2QH/AfAB4gHZAf8B8AHiAdkB/wHwAeIB2QH/A74B/QN9AfoDNgFYAwMB
BAQAA0MBdQNdAcoB8AHiAdkB/wHwAeIB2QH/AfAB4gHZAf8B8AHiAdkB/wHwAeIB2QH/A74B/QN9
AfoDNgFYAwMBBNQAAwIBAwMHAQkDVQGtAfEBvgGjAf8B1wHQAc0B/wHyAe8B7iH/Ae4BxAGuAf8D
bwHzAWQCYAHbAzABSgQBBAADCQELAzoBYAHTAakBjAH/AdMBqQGMAf8B0wGpAYwB/wHTAakBjAH/
AdMBqQGMAf8DfQH6A2cB7wMzAVAIAAMJAQsDOgFgAdMBqQGMAf8B0wGpAYwB/wHTAakBjAH/AdMB
qQGMAf8B0wGpAYwB/wN9AfoDZwHvAzMBUNQAAwMBBAMpAT4DVQGtA2MB5AHtAdkBzwH/AfIB7wHu
Af8B+wH6AfkN/wP1Af8B4QLgAf8D9Qn/AdMBwQG4Af8BZwJfAfsCbwFgAfMDMwFRCAADAwEEAxgB
IAM1AVUDNQFVA0wBjgFuAWABVwH/A0wBjgM0AVMDMwFQAxQBGwgAAwMBBAMYASADNQFVAzUBVQNL
AYoBbgFoAVoB9QNLAYoDNAFTAzMBUAMUARvMAAQBAwIBAwMpAT4DTQGSAfYBwgGnAf8B7gHaAdAB
/wHxAe8B7RH/AvUB9AH/AesC6gH/AeEC4AH/A/UB/wH1AvQB/wHhAd8B3gH/Ac0BtgGqAf8DZQHj
A1UBqgMnATkYAAM1AVUDQAH/A0wBjgM1AVUDNQFVAzUBVQM1AVUDNQFVAzUBVQM1AVUDNQFVAzUB
VQNIAYMDYAHgAzABS9gAAwIBAwMHAQkDVQGtAfYBxAGnAf8B4wHdAdoB/wH2AfQB8xX/AuAB3wH/
AuAB3wn/AeEB3wHeAf8BpgGgAZwB/wHbAaIBhAH/A1UBqgQBHAADNQFVA0cB/wNHAf8DRwH/A0cB
/wNHAf8DRwH/A0cB/wNHAf8DRwH/A0cB/wNHAf8DXQHqA1kBwAMqAUDYAAMnAToDVQGtA2MB5AHw
Ad0B0wH/AfYB9AHzAf8B/AL7Df8B9QL0Af8B4AHfAd4B/wLqAekB/wL1AfQF/wHXAdQB0gH/AcsB
twGqAf8B3QGnAYgB/wNMAY4DJwE5IAADFQEcAzUBVQM1AVUDNQFVAzUBVQM1AVUDSwGNAysB/ANL
AY0DNQFVAzUBVQM1AVUDMQFOAyoBQAMQARXYAAM1AVUB/wG+AZMB/wHzAdABtwH/AfMB5gHbEf8D
9AH/AeoC6QH/AeAB3wHeAf8B9QL0Af8C9gH1Af8B5QHjAeIB/wHOAboBrQH/A2UB4wNVAaoDJwE5
LAADGwElAysBQgM1AVUDNQFVA0sBjQFtAWIBWgH8A0sBjQM1AVUDNQFVAxoBIwMGAQfcAAQBAzUB
VgH/AcwBnAL/AcsBnwL/AdwBwBH/Ad8C3gH/Ad8C3gn/AeUB4wHiAf8BsQGrAakB/wHlAbABkQH/
A1UBqgQBMAADQQFwAl0BWwHFAZ8BfQFlAf8BnwF9AWUB/wGfAX0BZQH/AZ8BfQFlAf8BnwF9AWUB
/wGfAX0BZQH/AZ8BfQFlAf8DPgFqAxABFdwABAEDNQFWAf8BzgGgAv8BzgGhAv8B0wGsAv8B3gHC
Av8B9AHrCf8D9AH/A/QF/wHqAecB5QH/AeEBzQHBAf8B5QGyAZIB/wNMAY4DJwE5NAADTwGXA2UB
7AHfAcsBqQH/Ad8BywGpAf8B3wHLAakB/wHfAcsBqQH/Ad8BywGpAf8B3wHLAakB/wHfAcsBqQH/
A10BzANEAXfcAAQBAzUBVgH/Ac8BowH/AfsBwgGTAf8B+wHDAZUC/wHQAacC/wHlAc8C/wH0AewJ
/wH6AvkB/wHvAe0B7AH/AeQB0QHFAf8DZQHjA1UBqgMnATk4AANVAaoB/wH8AfAC/wH1AdEC/wH1
AdEC/wH1AdEC/wH1AdEC/wH1AdEC/wH1AdEC/wH1AdEB/wN+AfwDUwGn3AAEAQM1AVYB/wHQAaQB
/wH0AacBdgH/AfQBqgF5Av8B1wGtAv8B0gGqAv8B3wHGCf8B7wHtAewB/wHPAckBxQH/Ae8BvgGd
Af8DVQGqBAE8AANVAaoB/wH+AfQC/wH7Ad4C/wH7Ad4C/wH7Ad4C/wH7Ad4C/wH7Ad4C/wH7Ad4C
/wH7Ad4B/wN+AfwDUwGn4AADNQFVAf8BzwGkAf8DZQHiA2UB4gH+AboBjQL/AckBnwL/AdYBsgL/
Ad8BxgH/AekB3AHSAf8B4wHRAcQB/wHvAb8BnQH/A0wBjgMnATlAAANVAaoC/wH7Av8B/gH0Av8B
/gH0Av8B/gH0Av8B/gH0Av8B/gH0Av8B/gH0Av8B/gH0Af8DfgH8A1MBp+AAAzUBVQH/AdQBqwH/
A2UB4gNlAeIB/gG9AZIC/wHOAaUC/wHWAa4C/wHVAa8B/wHpAckBsAH/A2UB4wNVAaoDJwE5RAAD
VQGqIP8DfQH6A1MBpeAAAzUBVQH/Ad4BuAL/AeABuwL/AeEBvAL/AeEBvAL/AeEBvAL/AeEBvAL/
AeEBvAL/AccBmgH/A1UBqgQBSAADVQGqIP8DbgH1A1IBoOAAAxUBHAM1AVUDNQFVAzUBVQM1AVUD
NQFVAzUBVQM1AVUDNQFVAycBOUwAAycBOQM1AVUDNQFVAzUBVQM1AVUDNQFVAzUBVQM1AVUDNQFV
AzMBUgMkATX/AP8A/wDrAAMGAQcDCgENAw8BEwMQARUDEQEWAxIBFwMSARgDFgQdASgDFgEdAxMB
GQMTARoDRAF5AVQCUwGpAVUCUwGqAVUCUwGqA0wBkAM5AV0DFwEfFAADBgEHAwoBDQMPARMDEAEV
AxEBFgMSARcDEgEYAxYEHQEoAxYBHQMTARkDEwEaA0QBeQFTAVQBUwGpAVMBVQFTAaoBUwFVAVMB
qgNMAZADOQFdAxcBHxgABAIDBgEHAwkBDAMJAQwDAwEEBAFsAAQBAwIBAwFAAUEBQAFxAVIBVAFS
AagBUwFVAVMBqgFTAVUBUwGqA0wBkAM5AV0DFwEfFAADBgEHAwoBDQMPARMDMQFOAz4BawM/AWwD
PwFtA0IBcgNGAX0DQgFyA0ABbgNAAW8BYAJdAc4BgAF+AVQB/gHEAXQBVQH/AcQBcwFRAf8CZgFf
AeUBVwJWAbIDNwFaAxcBHxAAAwYBBwMKAQ0DDwETAzEBTgM+AWsDPwFsAz8BbQNCAXIDRgF9A0IB
cgNAAW4DQAFvAV0BYAFdAc4BUwGAAV8B/gFVAZ8BXAH/ARwBggEoAf8BXwFmAV8B5QFWAVcBVgGy
AzcBWgMXAR8QAAQBAxgBIAM4AVwDOgFhAy8BSQMPARQDBgEHOAAEAQMDAQQDBwEJAwoBDQMaASMD
MAFLAyUBNgMZASIDDAEQAwwBDwMJAQwDBwEJAwQBBQMXAR8DNgFYAVkBXAFZAcYBQAFHAUAB/QFV
AZ8BXAH/ARwBggEoAf8BXwFmAV8B5QFWAVcBVgGyAzcBWgMXAR8cAANVAaoBqAGkAaIJ/wH6Af8B
9QH/Ae8B/wHhAf8B6gH/Ad4B/wHVAbwBkwH/AbABNwEAAf8BwQFEAQQB/wHbAYYBWQb/AfoB8gH/
Ae0BvgGfAf8ByQFKAQYB/wFXAlUBsQM4AVwcAANVAaoBqAGkAaIJ/wH6Af8B9QH/Ae8B/wHhAf8B
6gH/Ad4B/wGbAcwBlwH/AQABZgELAf8BAAF8ARIB/wFVAa8BYwX/AVUBsAFkAf8BAAGJARcB/wEA
AYkBFwH/AVUBVwFVAbEDOAFcEAADAgEDAzYBWAHmAuQB/wH1AvQB/wNaAboDIQEvAw0BEQQBNAAD
AgEDAwkBCwMTARoDHAEnAz4BaQNiAeEDUQGhAzwBZgMhATADHwEsAxsBJQMVARwDCwEOAzcBWgEA
AWYBCwH/AQABfAESAf8BVQGvAWMF/wFVAbABZAH/AQABiQEXAf8BAAGJARcB/wFVAVcBVQGxAzgB
XBAAAxsBJQM5AV4DVQGqA2UB4wHiAeEB4An/AfkB/wH1Af8B7gH/AeAB/wH0Af8B6wH/AeoBxgGm
Af8BzwFUAREB/wHUAVkBEwH/AeQBkQFhA/8B/QH/Ad4BsAGQAf8B0QF5AUIB/wHXAVsBEwH/AWYC
XwHlA0wBkBAAAxsBJQM5AV4DVQGqA2UB4wHiAeEB4An/AfkB/wH1Af8B7gH/AeAB/wH0Af8B6wH/
AaUB2gGpAf8BAAGPARoB/wFxAb8BfwH/AcYB5AHLBf8BxgHlAcsB/wFxAcMBgQH/AQABmwEeAf8B
XwFmAV8B5QNMAZAIAAQBAwIBAwNCAXQDXQHHAfcB9QHyAf8B/AH7AfoB/wNpAegDWgG6AzIBTwMN
ARE0AAQBAwQBBQMJAQwDRgF/A14BzQNuAfUDZgHgA1cBsgM/AW0DIQEvAwsBDgMHAQkDKgE/AUwB
TQFMAZEBAAGPARoB/wFxAb8BfwH/AcYB5AHLBf8BxgHlAcsB/wFxAcMBgQH/AQABmwEeAf8BXwFm
AV8B5QNMAZAIAAMCAQMDBgEIAzoBYANYAbMU/wH5Af8B9AH/Ae4B/wHfAf8B+QH/AfAB/wH2Ac0B
sAH/AeMBaQEfAf8B4wFpAR8B/wHtAZsBaQP/Af0B/wHSAZEBZwH/AckBXwEdAf8B4wFpAR8B/wHa
AWABGAH/AlUBUwGqCAADAgEDAwYBCAM6AWADWAGzFP8B+QH/AfQB/wHuAf8B3wH/AfkB/wHwAf8B
qgHkAbMB/wEAAa0BJwH/AY8B3AGhAf8ByAHwAdIB/wGqAekBuwH/AeMB+AHoAf8BxQHrAc0B/wFQ
AcIBaQH/ARsBpgE4Af8BUwFVAVMBqggAAxYBHQM2AVgDXQHHA2cB6gNcAcEDWgG3A10BzAT/A1EB
ngMxAU0DCQEMAwMBBCwABAEDFgEeAzYBWANdAccDagHtA18ByQNqAe0DZgHlA1cBsgM4AVsDGAEg
BAEDNgFZA1UBrQEAAa0BJwH/AY8B3AGhAf8ByAHwAdIB/wGqAekBuwH/AeMB+AHoAf8BxQHrAc0B
/wFQAcIBaQH/ARsBpgE4Af8BUwFVAVMBqggAAwYBCAMTARkDVwGyGP8B+QH/AfQB/wHtAf8B3gH/
AfkB/wHwAf8B+QHRAbQB/wHuAXYBKQH/Ae4BdgEpAf8B9AGkAXAF/wHaAZ0BdQH/AdUBbwEuAf8B
7gF2ASkB/wHpAW8BJAH/AlUBUwGqCAADBgEIAxMBGQNXAbIY/wH5Af8B9AH/Ae0B/wHeAf8B+QH/
AfAB/wGqAekBtwH/AQABvgEyAf8BWQHSAXkB/wFZAdIBeQH/AQABvgEyAf8BqgHpAbsB/wH6Af8B
/QH/Ae8B/wH4Af8BUAHLAXAB/wFTAVUBUwGqCAADNQFVAfkC+AH/Av0B+wH/A1wBwQMtAUUDHAEn
AzwBZQj/A1kBtgMbASUDCQEMLAAEAgM2AVcB+QL4Af8C/QH7Af8DXwHJAzgBXQNfAckB7AHkAd4B
/wH8AfQB7gH/A1cBsQM5AV0DAgEDAzcBWgFVAVYBVQGuAQABvgEyAf8BWQHSAXkB/wFZAdIBeQH/
AQABvgEyAf8BqgHpAbsB/wH6Af8B/QH/Ae8B/wH4Af8BUAHLAXAB/wFTAVUBUwGqCAADKAE7A1cB
sgNmAeUY/wH5Af8B9AH/AewB/wHdAf8B+AH/AfEB/wH6AdIBtgH/AfEBeQEtAf8B9QF8ATAB/wH4
AZ4BZAH/AfsB3QHIAf8B2gGPAV4B/wHZAXABLAH/AfcBfgEyAf8BfgFeASsB/ANTAacIAAMoATsD
VwGyA2YB5Rj/AfkB/wH0Af8B7AH/Ad0B/wH4Af8B8QH/AaoB7AG6Af8BAAHHAToB/wEeAdMBVAH/
AR4B1QFWAf8BAAHPAT4B/wE5Ad0BbAH/AWgB4wGPAf8BjwHiAagB/wErAX4BKwH8A1MBpwQAAwQB
BQM3AVoB9AHrAecB/wNuAfUDVAGoAxMBGQMSARcDLgFGA1IBpANiAeEDZQHnA1kBtgMwAUsDCwEO
KAADQAFuA1wBwwH0AesB5QH/A1cBtAM+AWkDFwEfAy4BRwNNAZIB7AHkAeAB/wNmAeUDVQGvAzkB
XQNCAXMBUwFUAVMBqQEAAccBOgH/AR4B0wFUAf8BHgHVAVYB/wEAAc8BPgH/ATkB3QFsAf8BaAHj
AY8B/wGPAeIBqAH/ASsBfgErAfwDUwGnBAADBAEFAzcBWgHqAuYB/wH4AvcV/wH7Af0B/AH/AfAB
+AHsAf8B2wHyAc4B/wHiAekB4AH/AesBzgHBAf8B9gGiAXIB/wH5AYwBSgH/AfYBkAFPAf8B7gGt
AYEB/wHgAYQBSAH/Ad0BbwEqAf8B5wFvAScB/wFcAloBxANAAW8EAAMEAQUDNwFaAeoC5gH/AfgC
9xX/AfsB/QH8Af8B8AH4AewB/wHbAfIBzgH/AeIB6QHgAf8BtAHgAcUB/wFTAdkBfQH/AR0B2QFZ
Af8BAwHbAUgB/wEEAd4BSgH/AQQB3gFKAf8BGAHRAVEB/wE/AbcBXwH/AVoBXAFaAcQDQAFvBAAD
BAEFAzcBWgHkAdcB0gH/A24B9QNVAa8DIQEvAzMBUgNEAXkDUgGkA10BxwNmAeUE/wNLAY0DJgE4
KAADSwGKA2MB3wH2AekB4gH/A1gBswM6AWADBAEFAyoBPwNNAZIBvgG9AboB/QOAAf4DZgHlA1cB
sQNDAXUBRwFIAUcBgwFcAWEBXAHZAVoBawFaAfIBAwHbAUgB/wEEAd4BSgH/AQQB3gFKAf8BGAHR
AVEB/wE/AbcBXwH/AVoBXAFaAcQDQAFvBAADDAEQAzwBZRz/AfQB+AH2Af8B3gHrAdwB/wG8AdcB
sAH/AbYBvAG9Af8BzAHFAdYC/wHyAfkB/wH7AacBdwH/Ae4BewEyAf8B2QFvASkB/wHrAXsBMgH/
AeIBbgEoAf8BvwFIAQkB/wM1AVYEAQQAAwwBEAM8AWUc/wH0AfgB9gH/Ad4B6wHcAf8BvAHXAbAB
/wG2AbwBvQH/AcoBxQHWAf8B+AH0AfsB/wFXAeQBhwH/AQgB4gFQAf8BCwHtAVYB/wELAe0BVgH/
AQcByQFDAf8BAAGAARwB/wM1AVYEAQgAAzUBVQHIAb4BuwH/Ae0B5AHhAf8DYgHXA0kBhwNiAdcB
/wH5AfcC/wH4AfcB/wNXAbEDVwGxBP8DYQHUA0YBfygAAzYBVwNVAawB/wH0Ae4B/wOAAf4DVgGu
AwwBDwNVAa8DvgH9An0BewH6Ab4BvQG7Af0B7gHlAeIC/wH3AfIB/wM6AWADJwE6A0sBjQFcAWEB
XAHZAQgB4gFQAf8BCwHtAVYB/wELAe0BVgH/AQcByQFDAf8BAAGAARwB/wM1AVYEAQQAAzsBYgNa
AbcC/wH6A/8B+wP/AfwD/wH9A/8B/gH/AfsC9wH/AfQB6AHmAf8B1wHTAdEB/wNoAfQDYwHfA2gB
9AHXAcUByQH/AeIBxgHCAf8B9AHQAbsB/wH5AdMBtwH/AfIBzwG3Af8B+AHTAboB/wH1AckBrwH/
AeoBsgGUAf8DNQFVCAADOwFiA1oBtwL/AfoD/wH7A/8B/AP/Af0D/wH+Af8B+wL3Af8B9AHoAeYB
/wHXAdMB0QH/A2gB9ANjAd8DaAH0AdYBxQHJAf8B3wHHAcIB/wG9AeQBwAH/Aa0B9QHBAf8BrgH5
AcYB/wGuAfkBxgH/AawB6AG4Af8BqgHFAZsB/wM1AVUMAAMVARwDNQFVA1wBxgNrAfIDYgHXA1wB
wwNhAdEB/wH9AfwB/wNmAeUDXwHLA1cBsQM9AWcDMwFSA0EBcQMkATQDCwEOHAADFgEdAzoBYANd
AcoDagHtA2UB4wNWAa4DUwGlA1sBwAO+Af0DfgH8AbYBsgGwAf0B4AHbAdkB/wM3AVoDEwEZAykB
PQNIAYQBUwFUAVMBqQFVAVYBVQGuA1UBrQFLAUwBSwGPAzUBVQEVAhYBHQgAA04BlQNnAeoB/wH6
AfMC/wH6AfMC/wH5AfMC/wH5AfMC/wH5AfQB/wH3AesB5gH/AecB0QHLAf8DXAHGA1EBnwNLAYoD
XgHNA2gB9AHbAbwBtQH/AfMB6AHhAv8B/QH3Av8B/AH5Av8B+wH4Av8B9gHwAv8B6wHgAf8DOAFb
AwUBBgQAA04BlQNnAeoB/wH6AfMC/wH6AfMC/wH5AfMC/wH5AfMC/wH5AfQB/wH3AesB5gH/AecB
0QHLAf8DXAHGA1EBnwNLAYoDXgHNA2gB9AHbAbwBtQH/AfMB6AHhAv8B/QH3Av8B/AH5Av8B+wH4
Av8B9gHwAv8B6wHgAf8DOAFbAwUBBhAAA0EBcQNcAcYB7wHoAeMB/wNhAdEDXQHFA2IB3ANvAfMD
ZgHlA1cBsQM4AVsDOwFiA1wBxgNKAYkDMAFLAwkBDAMDAQQYAAMcAScDQwF1A1oBvwNqAe0DgAH+
A1oBvwNbAcAB8QHkAd4B/wG+AbgBtQH9A34B/AG2AbMBsgH9A0wBjgM4AVsDOwFjA0QBdwNCAXMD
NwFaAzYBWAMnAToQAANVAaoBmgGPAYoC/wHvAegC/wHvAecC/wHuAeUC/wHtAeEC/wHsAd8B/wHz
AdsBzgH/AdoBugGuAf8DNQFVCAADSwGKA2MB3wHrAdUB0gH/AfgB7gHpAv8B+QHyAv8B9QHuAv8B
9AHtAv8B8wHsAv8B8gHrAf8DPQFoAw8BEwQAA1UBqgGaAY8BigL/Ae8B6AL/Ae8B5wL/Ae4B5QL/
Ae0B4QL/AewB3wH/AfMB2wHOAf8B2gG6Aa4B/wM1AVUIAANLAYoDYwHfAesB1QHSAf8B+AHuAekC
/wH5AfIC/wH1Ae4C/wH0Ae0C/wHzAewC/wHyAesB/wM9AWgDDwETFAADNQFVAc8BxgHCAf8B7wHq
AeYB/wNiAdwDTgGXA2IB3AL/Af0C/wH+AfkB/wNVAa8DVQGvCP8DWQG2AxsBJQMJAQwgAANDAXUD
XQHKAf8B+QH0Af8DgAH+A4AB/gHkAdwB2QH/AfIB5wHiAf8DvgH9A30B+gGfAZkBlwH9AckBxAHC
Bf8DVwGyAzkBXgMCAQMEARQAAlQBUwGmA18B+wH/AegB3gL/AeYB3AL/AeQB2gL/AeIB1wL/AeAB
1AH/Ae4BzwHGAf8BzQGvAa4B/wNZAbYDOgFhBAADUQGfA2gB9AHyAegB6QH/AfsB9wH1Av8B/QH7
Av8B/AH5Av8B+wH5Av8B+wH4Av8B+wH2Af8DOAFbAwUBBgQAAlQBUwGmA18B+wH/AegB3gL/AeYB
3AL/AeQB2gL/AeIB1wL/AeAB1AH/Ae4BzwHGAf8BzQGvAa4B/wNZAbYDOgFhBAADUQGfA2gB9AHy
AegB6QH/AfsB9wH1Av8B/QH7Av8B/AH5Av8B+wH5Av8B+wH4Av8B+wH2Af8DOAFbAwUBBhQAAxUB
HAM1AVUDXAHGA28B8wNiAdwDSwGMA04BmAL/Af0B/wNjAeQDXQHKA1cBsQNmAeUDZQHnA1kBtgMx
AU0DDAEQHAADHAEnAz4BagNdAcoDagHtA4AB/gGiAZ4BnQH9A4AB/gOAAf4DvgH9A34B/AGyAawB
qwH9AfQB7gHrAf8DZgHlA1UBrwM5AV4DGAEhBAEQAANHAYIDYgHXAf8B4gHXAv8B3wHUAv8B3AHR
Af8B/gHaAdAB/wH7AdgB0QH/AegByAHKAf8BxQGrAboB/wNnAe8DWQG2AzUBVQNcAcYC0AHNAf8B
+AH2AfgB/wH9AfwB/Q//Af4D/wH9Af8DNQFVCAADRwGCA2IB1wH/AeIB1wL/Ad8B1AL/AdwB0QH/
Af4B2gHQAf8B+wHYAdEB/wHoAcgBygH/AcUBqwG6Af8DZwHvA1kBtgM1AVUDXAHGAtABzQH/AfgB
9gH4Af8B/QH8Af0P/wH+A/8B/QH/AzUBVSAAA0EBcQNVAaoDVQGqA0UBfANMAY4DZQHiA24B9QNm
AeUDVwGxA1sBwANjAdoE/wNRAZ4DMQFNAwkBDAMDAQQYAAMcAScDQwF1A04BmANUAakDVAGoA2UB
4gHaAdIBzQH/AfgB7QHnAf8CvgG7Af0DfgH8A74B/QGDAoAB/gNmAeUDVwGyAzgBWwMYASEEAQwA
AyoBQANOAZUB/wHdAdIC/wHaAc4B/wH+AdcBzAH/AfsB0wHMAf8B8wHSAdcB/wHhAccB2gH/AcQB
sAHTAf8BtwGzAcQB/wG2AcEBuwH/AcEB2QG4Af8B1gHoAdMB/wHrAfQB6x3/AzUBVQgAAyoBQANO
AZUB/wHdAdIC/wHaAc4B/wH+AdcBzAH/AfsB0wHMAf8B8wHSAdcB/wHhAccB2gH/AcQBsAHTAf8B
twGzAcQB/wG2AcEBuwH/AcEB2QG4Af8B1gHoAdMB/wHrAfQB6x3/AzUBVSwAA1UBqgNlAeIDUgGo
A2UB4gj/A0wBkANMAZAI/wNZAbYDGwElAwkBDCwAA1UBqgGwAakBpQH/AesB5AHeAf8B+AHxAesB
/wO+Af0DfQH6A74B/QH2AfAB7QP/AfwB/wNXAbIDOQFeAwIBAwQBCAADEAEVAz4BagH/Ad8B1wH/
AfwB2AHSAf8B+AHUAdMB/wHyAdIB2AH/Ae0B0gHlAf8B4wHOAesB/wHVAccB7AH/AdEB0wHZAf8B
0gHhAc4B/wHYAfIBzQH/AesB9wHoAf8B+AH7AfgV/wHlAeMB4gH/AbABqgGnAf8DNQFVCAADEAEV
Az4BagH/Ad8B1wH/AfwB2AHSAf8B+AHUAdMB/wHyAdIB2AH/Ae0B0gHlAf8B4wHOAesB/wHVAccB
7AH/AdEB0wHZAf8B0gHhAc4B/wHYAfIBzQH/AesB9wHoAf8B+AH7AfgV/wHlAeMB4gH/AbABqgGn
Af8DNQFVLAADVQGqA24B9QNlAeIDXQHMA2EB1gT/Az4BagMlATYDPAFlA10BzANlAecDWQG2AykB
PgQBKAADVQGqAdIBzgHLAf8BwAG5AbcB/wHiAdsB1gH/AYMCgAH+A74B/QNMAY4DTAGPAfgB8gHu
Af8DZgHlA1QBpgMrAUIDEQEWDAADMQFMA2YB5QNjAfYB8wHTAdwB/wHsAdIB4wH/AecB0gHvAf8B
4gHTAfUB/wHeAdUB9gH/Ad0B5AHhAf8B3wHyAdcB/wHkAf8B1gH/AfYB/wHxA/8B/hX/A2UB4wNV
AaoDJwE5DAADMQFMA2YB5QNjAfYB8wHTAdwB/wHsAdIB4wH/AecB0gHvAf8B4gHTAfUB/wHeAdUB
9gH/Ad0B5AHhAf8B3wHyAdcB/wHkAf8B1gH/AfYB/wHxA/8B/hX/A2UB4wNVAaoDJwE5LAADQQFx
A1wBxgHzAfAB7wH/A2EB1gNfAckDYQHZAzABSgMQARUDJwE5A1oBvQH5AfgB9gH/Ae4B6QHmAf8D
NQFWBAEoAANOAZgDagHtAcYCwgH/Ac8ByQHGAf8DYwHkA1UBrwMoATsDLwFJA2IB1wNrAfIDYQHW
A0cBgwMfASwMAAMoATsCVwFWAbIDZgHlAe8B1AHnAf8B6AHSAe4B/wHjAdIB9QH/Ad8B1QH2Af8B
3QHaAe8B/wHdAecB3AH/Ad8B9AHTAf8B5AH/AdUB/wH2Af8B7gP/AfwV/wNVAaoUAAMoATsCVwFW
AbIDZgHlAe8B1AHnAf8B6AHSAe4B/wHjAdIB9QH/Ad8B1QH2Af8B3QHaAe8B/wHdAecB3AH/Ad8B
9AHTAf8B5AH/AdUB/wH2Af8B7gP/AfwV/wNVAao4AAM1AVUB3AHTAc8B/wHzAfAB7wH/A2EB2QNL
AYwDIgExAx4BKwNFAXwDXwHTAfAB7QHrAf8B0wHIAcIB/wM1AVUsAANDAXUDXQHKBP8DgAH+A1YB
rgMMAQ8DBAEFAyABLQNJAYcDYgHXA2wB6wNaAcQDKwFBDAADDwEUAygBOwNZAbwBrgGhAa8B/QHo
AdUB9wH/AeIB1AH4Af8B3gHWAfMB/wHdAd4B6AH/Ad0B6gHYAf8B3wH1AdIB/wHkAf8B1QH/AfQB
/wHrAf8B/QH/AfkR/wNXAbIDOQFdFAADDwEUAygBOwNZAbwBrgGhAa8B/QHoAdUB9wH/AeIB1AH4
Af8B3gHWAfMB/wHdAd4B6AH/Ad0B6gHYAf8B3wH1AdIB/wHkAf8B1QH/AfQB/wHrAf8B/QH/AfkR
/wNXAbIDOQFdOAADFQEcAzUBVQNcAcYDawHyA2EB2QNaAbcDVwG1A18B0wNoAfADXQHHAzUBVgMW
AR0sAAMcAScDPgFqA10BygNqAe0DYwHkA1YBrgNEAXcDSQGFA2IB1wNrAfIDWwHAAysBQgMRARYU
AANBAXADWQG8A2MB5ANjAfYB5QHiAfMB/wHdAuIB/wHdAe0B1QH/Ad8B9wHRAf8B5AH/AdUB/wHz
Af8B6AH/AfwB/wH2Bf8D+wH/A2YB5QNXAbIDOgFgAxoBJBwAA0EBcANZAbwDYwHkA2MB9gHlAeIB
8wH/Ad0C4gH/Ad0B7QHVAf8B3wH3AdEB/wHkAf8B1QH/AfMB/wHoAf8B/AH/AfYF/wP7Af8DZgHl
A1cBsgM6AWADGgEkQAADQQFxA1wBxgH1AfIB8QH/A34B/AN+AfwB+QH3AfUB/wNdAccDQgFyBAE0
AAMcAScDQwF1A1oBvwNqAe0DgAH+A10BygNfAcsB+QH3AfUB/wNdAccDQgFyBAEcAAMnAToDVQGv
A2MB5AH0AfcB9AH/Ad0B5wHeAf8B3QHwAdIB/wHfAfgBzwH/AeQB/wHVAf8B8QH/AeYB/wH6Af8B
9AX/AvQB8wH/A1cBsgMSARgDBgEIJAADJwE6A1UBrwNjAeQB9AH3AfQB/wHdAecB3gH/Ad0B8AHS
Af8B3wH4Ac8B/wHkAf8B1QH/AfEB/wHmAf8B+gH/AfQF/wL0AfMB/wNXAbIDEgEYAwYBCEgAAzUB
VQHhAdkB1QH/AfUB8gHxAf8B+QH3AfUB/wHtAeYB4AH/AzUBVgQBQAADQwF1A10Bygj/AfkB9wH1
Af8B7QHmAeAB/wM1AVYEASAAAw8BEwMnAToDMQFMAz4BaQNMAZADYQHWA18B+wGWAZkBiAH/A2cB
6gNaAbcDPAFlAzcBWgMoATsDBgEIAwIBAyQAAw8BEwMnAToDMQFMAz4BaQNMAZADYQHWA18B+wGW
AZkBiAH/A2cB6gNaAbcDPAFlAzcBWgMoATsDBgEIAwIBA0gAAxUBHAM1AVUDNQFVAzUBVQM1AVUD
FgEdRAADHAEnAzgBWwNRAZwDXAHGA1YBrgM1AVUDFgEdMAADDwEUAygBOwNHAYEDVAGmA1UBqgNO
AZUDOwFiAwwBEAMEAQU8AAMPARQDKAE7A0cBgQNUAaYDVQGqA04BlQM7AWIDDAEQAwQBBbQAAxIB
GAMuAUcDQQFxAzYBWf8ArQADBAEFAwsBDgMMAQ8DDAEPAwwBDwNDAXYDUwGqA1MBqgNQAZ0DPQFp
AwwBDwMMAQ8DCgENAwYBCAMCAQMkAAQCAwUEBgEHAwYBCAMGAQgDQgF0A1MBqgNVAaoDVQGqA0IB
dAMGAQgDEwEaAxMBGgMGAQgDBgEIAwQBBRQAAyYBOQNTAaoDUwGqA1MBqgNTAaoDUwGqA1MBqgNV
AaoBUwJVAaoBUwJVAaoBUwJVAaoBUwJVAaoBUwJUAakDVAGmA1IBpQNSAaUDUgGlA1IBpQNSAaUD
UgGlAyUBNwwAASYBJwEmATkDUwGqA1MBqgNTAaoDUwGqA1MBqgNTAaoBUwFVAVMBqgFTAlUBqgFT
AlUBqgFTAlUBqgFTAlUBqgFTAlUBqgFTAVUBUwGqA1MBqgNTAaoDUwGqA1MBqgNTAaoDUwGqASYB
JwEmATkYAAMEAQUDCwEOAwwBDwMMAQ8DDAEPA1UBrwMOAf8DDQH/A1oB8gNRAaIDDAEPAwwBDwMK
AQ0DBgEIAwIBAyQAAxYBHgM4AVsDOAFcAzgBXQM4BF0ByQMlAf8DUQH/A0wB/wNYAb0DJwE5AzsB
YwNAAW8DOQFdAxoBJAMEAQUUAAM1AVUDEgH/AxIB/wMSAf8DEgH/AxIB/wMuAf8DZwH/ASIBswHM
Af8BAAHZAv8BAAHZAv8BAAHZAv8BVwKAAf4DXwH7A00B+gNNAfoDTQH6A00B+gNNAfoDTQH6AzQB
UwwAAzUBVQEAASwBAAH/AQABLAEAAf8BAAEsAQAB/wEAASwBAAH/AQABLAEAAf8BAAFQAQAB/wEA
AZkBAAH/AQABxAGqAf8BAAHZAv8BAAHZAv8BAAHZAv8BAAHEAaoB/wEAAZkBAAH/AQABUAEAAf8B
AAEsAQAB/wEAASwBAAH/AQABLAEAAf8BAAEsAQAB/wEAASwBAAH/AzUBVSwAA1MBqgMqAf8DJgH/
A0AB/wNTAao4AAM1AVUDAAH/AxAB/wMQAf8DAAH/Ax0B/wMrAf8DKAH/AycB/wNgAdsDTgGUA2AB
2wM2Af8DcwH/AzUBVRgAAzUBVQMSAf8DEgH/AxIB/wMSAf8DEgH/Ay4B/wNnAf8BIgGtAcwB/wEA
AdAC/wEAAdAC/wEAAdAC/wEiAa0BzAH/A2cB/wMuAf8DEgH/AxIB/wMYAf8DHAH/Ax4B/wM1AVUM
AAM1AVUBAAEsAQAB/wEAASwBAAH/AQABLAEAAf8BAAEsAQAB/wEAASwBAAH/AQABUAEAAf8BAAGZ
AQAB/wEAAb4BqgH/AQAB0AL/AQAB0AL/AQAB0AL/AQABvgGqAf8BAAGZAQAB/wEAAVABAAH/AQAB
LAEAAf8BAAEsAQAB/wEAASwBAAH/AQABLAEAAf8BAAEsAQAB/wM1AVUUAANAAXEDUwGqA1MBqgNJ
AYgDSQGIA1MBqgNgAeMDJgH/AyYB/wM/Af8DYAHjA1MBqgNTAaoDUwGqA1MBqgNTAacDPwFuIAAD
NQFVAx0B/wMiAf8DIgH/AxsB/wMiAf8DPgH/A28B/wNUAf8DYAHzA2AB2wNgAfMDLwH/A0QB/wM1
AVUYAAMVARwDNQFVAzUBVQM1AVUDNQFVAzUBVQM1AVUDNQFVAUMCRAF3A1UBrwGKAc0B3QH/A0wB
jgM1AVUDNQFVAzUBVQM1AVUDNQFVAzUBVQM1AVUDNQFVAxUBHAwAAxUBHAM1AVUDNQFVAzUBVQM1
AVUDNQFVAzUBVQM1AVUBQwJEAXcDVQGvATMB4wGMAf8DTAGOAzUBVQM1AVUDNQFVAzUBVQM1AVUD
NQFVAzUBVQM1AVUDFQEcDAADFQEcAzUBVQNZAcYDLwH/A0UB/wNeAd0DXgHdAyoB/wMnAf8DJgH/
AygB/wM4Af8DLwH/Aw4B/wMOAf8DGwH/AzcB/wMrAfwDUwGnFAADFQEcAzUBVQM1AVUDTAGOA0EB
/wM5Af8DLQH/AxsB/wNZAcYDUwGqA1UBqgNVAaoDVgG1A1wBywNiAe4DVAH/AysB/wNMAY4DNQFV
AzUBVQMVARwsAAMkATQDSgGJAcECvgH/AzUBVVAAAyQBNANKAYkBPwHpAUQB/wM1AVUIASgAAzUB
VQMAAf8DGwH/AykB/wMrAf8DKQH/AykB/wMrAf8DKwH/AysB/wMrAf8DKwH/AysB/wMrAf8DKgH/
AyoB/wMrAf8DNAH/A1MBqhQAAzUBVQMAAf8DQwH/A2cB/wNsAf8DVgH/AzIB/wMAAf8DNQFVDAAD
GAEhAzoBYgNfAcsDpQH/AygB/wMrAf8DQwH/A3EB/wM1AVUsAAMkATUDSwGKAaQCowH/AzUBVgQB
TAADJAE1AUoBSwFKAYoBIgHhASgB/wM1AVYIAgQBJAADFQEcAzUBVQNZAcYDTgH/AzEB/wMwAf8D
MAH/AzEB/wMxAf8DMQH/AzEB/wMxAf8DMQH/AzEB/wMxAf8DMAH/AzAB/wMhAf8DUwGqFAADNQFV
Ax8B/wM5Af8DZAH/A6EB/wErAXsBXgH8A10BzgNCAXUDHAEnDAADCQELAxgBIQMtAUQDTAGOA2kB
/wNFAf8DOwH/A0oB/wNZAcYDQAFxBAADNAFTA0sBiwNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNV
AaoDWQG8A18B2AN9Af8DXQHHA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDJwE5CAAD
NAFTA0sBiwNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDWQG8A18B2AFSAZIBVAH/A10BxwNW
AasDVgGrA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqAycBORQAA1UBqgNfAf8DNwH/AzcB/wM3Af8D
NgH/A14B/wNuAf8DZAH/A1wB/wNNAf8DNwH/AzcB/wM3Af8DNgH/AxcB/wNTAaoMAAQCAwcBCQM5
AV0DQwH/A1gB/wOBAf8DvgH/ASsBfgFpAfwBWwFeAVsBzQFBAUIBQQFzAyMBMgMJAQwUAAMnATkD
VQGqA2AB4wNHAf8DYQH/A1kBxgNAAXEEAANLAYsDZgHgA5wB/wF/An4B/wF/An4B/wOcAf8BfgJ9
Af8BfgJ9Af8DnAH/AX0CfAH/AX0CewH/AZwCmgH/AZwCmwH/AZwCmwH/AZwCmQH/AZwCmQH/AYcB
kgGOAf8BXAGFAXkB/wFdAXMBiwH/AXIBeQGVAf8BmgKWAf8DNQFVCAADSwGLA2YB4AOcAf8BfwJ+
Af8BfwJ+Af8DnAH/AX4CfQH/AX4CfQH/A5wB/wF9AnwB/wF9AnsB/wGcApoB/wGcApsB/wGcApsB
/wGcApkB/wGcApkB/wGHAZIBjgH/AVwBhQF5Af8BXQFzAYsB/wFyAXkBlQH/AZoClgH/AzUBVRQA
A1UBqgNaAf8DPQH/Az0B/wM8Af8DOQH/A7IB/wPhAf8DxQH/A6wB/wN/Af8DPQH/Az0B/wM9Af8D
PAH/AxYB/wNTAaoMAAMFAQYDFAEbA0ABbgNqAf8DnwH/A70B/wPEAf8BUwHSAXcB/wFAAbUBQAH9
AU0BbAFNAfoBQgFDAUIBdQMZASIEARgAA1MBqgNnAf8DtAH/AzUBVQgAA1UBqgOgBf8BqAKnAf8B
qAKnBf8BpQKkAf8BpQKkBf8BogKgAf8BogKeAv8C+QL/AvwC/wL8Av8C+AL/AvYB/wHAAeEB1QH/
AUEBugGWAf8BRAGGAc4B/wGBAZcB6wH/AfkC7QH/AzUBVQgAA1UBqgOgBf8BqAKnAf8BqAKnBf8B
pQKkAf8BpQKkBf8BogKgAf8BogKeAv8C+QL/AvwC/wL8Av8C+AL/AvYB/wHAAeEB1QH/AUEBugGW
Af8BRAGGAc4B/wGBAZcB6wH/AfkC7QH/AzUBVQgAA0ABcQNTAaoDVQGqA2AB4wNMAf8DRAH/A0QB
/wNLAf8DWQH/A0wBjgM1AVUDNQFVAzcBWgNNAZMDWgH/A0sB/wNEAf8DQwH/A0AB/wNgAeMDVQGq
A08BlwM5AV4DDgESAUYBRwFGAYABXQFhAV0BzwFTAaQBZwH/AVcBvwFyAf8BVwHOAXYB/wFTAdEB
cwH/AS0B1QFaAf8BTQGAAXwB/gFAAbUBQAH9AVsBXwFbAdADSQGHAxoBJAMJAQwUAANTAaoDUAH/
A3sB/wNZAcYDQAFxBAADVQGqA6YF/wHcAtsB/wHaAtgB/wH4AvYB/wHVAtMB/wHUAtEB/wHzAu8B
/wHQAssB/wHOAsgB/wHuAuYB/wH5AvYC/wL8Av8C+AL/AvYB/wHqAe4B6gH/Ab8B3wHTAf8BvgHM
AeQB/wLRAe0B/wH5Au0B/wM1AVUIAANVAaoDpgX/AdwC2wH/AdoC2AH/AfgC9gH/AdUC0wH/AdQC
0QH/AfMC7wH/AdACywH/Ac4CyAH/Ae4C5gH/AfkC9gL/AvwC/wL4Av8C9gH/AeoB7gHqAf8BvwHf
AdMB/wG+AcwB5AH/AtEB7QH/AfkC7QH/AzUBVQgAA1MBqgNRAf8DZwH/A1IB/wNJAf8DSwH/A0oB
/wNNAfoDXgHvAzMBUAgAAwQBBQM3AVoDXwH/A1EB/wNLAf8DSwH/A1QB/wNbAf8DYgH/A10B7ANO
AZcDEgEXAVYBVwFWAbIBPgGOAVQB/wFNAcUBbQH/ATsB0wFjAf8BLQHbAVsB/wEjAdwBVAH/ASMB
3AFUAf8BJAHdAVUB/wEkAd4BVgH/AU8BgAFyAf4BWwFfAVsB0AFDAUQBQwF3Ax8BLAMDAQQQAANT
AaoDPQH/A1oB/wMwAf8DUwGqBAADVQSqBf8B+QL4Af8B9wL1Af8B+AL2Af8B8wLxAf8B8gLvAf8B
8wLvAf8B7wLrAf8B7QLoAf8B7gLoAf8B+QL3Av8C/QL/AvoC/wL5Av8C9wH/Af4C9gH/AfwC9QH/
AfsC9AH/AfsC8wH/AzUBVQgAA1UEqgX/AfkC+AH/AfcC9QH/AfgC9gH/AfMC8QH/AfIC7wH/AfMC
7wH/Ae8C6wH/Ae0C6AH/Ae4C6AH/AfkC9wL/Av0C/wL6Av8C+QL/AvcB/wH+AvYB/wH8AvUB/wH7
AvQB/wH7AvMB/wM1AVUIAANVAaoDWwH/A1IB/wNSAf8DUgH/A1IB/wNRAf8DWQHvA1sB0AMtAUUM
AAM1AVUDSgH/A08B/wNSAf8DUgH/A1IB/wNSAf8DUgH/Ax4B/wNTAaoDEQEWA1cBsQFiAbABeAH/
AVkBzAF6Af8BSwHcAXMB/wE/AeUBbAH/ATYB5wFmAf8BNgHnAWYB/wE2AecBZgH/ATYB5wFmAf8B
NgHnAWcB/wFbAoAB/gEhAV8BIQH7AzoBYAMJAQwQAANTAaoDLgH/A1IB/wNPAf8DUwGqBAADVQGq
A65N/wM1AVUIAANVAaoDrk3/AzUBVQgAA1UBqgNnAf8DbwH/A2AB/wNYAf8DWQH/A1gB/wNNAfoD
WQHvAzMBUAwAAzUBVQNfAf8DWwH/A1kB/wNZAf8DVgH/A2AB/wN4Af8DLwH/A1MBqgMRARYDVwGx
AX8ByQGUAf8BawHXAYkB/wFeAecBhAH/AVQB8QF/Af8BSwHzAXoB/wFLAfMBegH/AUsB8wF6Af8B
SwHzAXoB/wEtAdABXAH/AV0BYwFdAd8DUQGeAygBOwMFAQYQAANTAaoDOgH/A1EB/wOSAf8DVQGq
BAADSwGLA2YB4AOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB
/wOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB/wOcAf8DNQFVCAADSwGLA2YB4AOcAf8DnAH/A5wB/wOc
Af8DnAH/A5wB/wOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB/wOcAf8DnAH/A5wB
/wOcAf8DNQFVCAADQQFxA1UBqgNVAaoDZQHjA2IB/wNfAf8DXwH/A1QB/wM8Af8DTAGOAzMBUAMu
AUYDMwFQA0wBjgNoAf8DYgH/A18B/wNfAf8DUwH/A2AB4wNVAaoDUwGqA0ABcQMRARYDTAGQA2IB
3AFoAmoB+QFAAb4BQAH9AT8BygFhAf8BOQHHAVgB/wFRAeoBegH/AVQB8wGDAf8BRQHkAXQB/wNi
AeEBUgFTAVIBpQMxAUwDFQEcBAIQAANTAaoDSwH/A04B/wNcAcYDQQFxBAADSwGLA2YB4AOcAf8B
fwJ+Af8BfwJ+Af8DnAH/AX4CfQH/AX4CfQH/A5wB/wF9AnwB/wF9AnsB/wGcApoB/wGcApsB/wGc
ApsB/wGcApkB/wGcApkB/wGHAZIBjgH/AVwBhQF5Af8BXQFzAYsB/wFyAXkBlQH/AZoClgH/AzUB
VQgAA0sBiwNmAeADnAH/AX8CfgH/AX8CfgH/A5wB/wF+An0B/wF+An0B/wOcAf8BfQJ8Af8BfQJ7
Af8BnAKaAf8BnAKbAf8BnAKbAf8BnAKZAf8BnAKZAf8BhwGSAY4B/wFcAYUBeQH/AV0BcwGLAf8B
cgF5AZUB/wGaApYB/wM1AVUUAANVAaoDbwH/A2YB/wNmAf8DZgH/A2UB/wM/Af8DXgHwA10B0QNe
AfADZQH/A2YB/wNmAf8DZgH/A2UB/wNKAf8DUwGqDAADEgEXAzEETgGWA2IB7gFBAWoBQQH5AQAB
cQETAf8BAAFjAQAB/wFGAcsBZQH/AVEB6AGBAf8BIgG6AVQB/wFSAVMBUgGlAzMBUQMDAQQEARQA
A1UBqgNiAf8DRwH/AzUBVQgAA1UBqgOgBf8BqAKnAf8BqAKnBf8BpQKkAf8BpQKkBf8BogKgAf8B
ogKeAv8C+QL/AvwC/wL8Av8C+AL/AvYB/wHAAeEB1QH/AUEBugGWAf8BRAGGAc4B/wGBAZcB6wH/
AfkC7QH/AzUBVQgAA1UBqgOgBf8BqAKnAf8BqAKnBf8BpQKkAf8BpQKkBf8BogKgAf8BogKeAv8C
+QL/AvwC/wL8Av8C+AL/AvYB/wHAAeEB1QH/AUEBugGWAf8BRAGGAc4B/wGBAZcB6wH/AfkC7QH/
AzUBVRQAA1UBqgNiAf8DbQH/A20B/wNtAf8DbAH/A2AB/wNNAfoDXgHwA2oB+gNsAf8DbQH/A20B
/wNtAf8DbAH/A18B1QNGAYAMAAMGAQgDIAEuA0YBfgFVAWoBaAH5A0AB/QFhAYcBZwH/AYwBrQGM
Af8BWQHMAXwB/wFeAmUB4gFSAVQBUgGoAzQBVAMWAR0EARAAAyYBOQNTAaoDYAHjA2sB/wNiAf8D
WQHGA0ABcQQAA1UBqgOmBf8B3ALbAf8B2gLYAf8B+AL2Af8B1QLTAf8B1ALRAf8B8wLvAf8B0ALL
Af8BzgLIAf8B7gLmAf8B+QL2Av8C/AL/AvgC/wL2Af8B6gHuAeoB/wG/Ad8B0wH/Ab4BzAHkAf8C
0QHtAf8B+QLtAf8DNQFVCAADVQGqA6YF/wHcAtsB/wHaAtgB/wH4AvYB/wHVAtMB/wHUAtEB/wHz
Au8B/wHQAssB/wHOAsgB/wHuAuYB/wH5AvYC/wL8Av8C+AL/AvYB/wHqAe4B6gH/Ab8B3wHTAf8B
vgHMAeQB/wLRAe0B/wH5Au0B/wM1AVUMAAMVARwDNQFVA1kBxgNkAf8DcgH/A3IB/wNyAf8DcgH/
A3IB/wNyAf8DcgH/A3IB/wNyAf8DcgH/A3IB/wNyAf8DcgH/A2MB1QNHAYAQAAMPARQDPgFpA30B
/wNzAf8DhgH/A7cB/wF2AbwBjgH/AVkCXAHGAzQBVAMWAR4EAhAAAyYBOQNMAY4DMwH/A2UB/wN6
Af8DcQH/A1kBxgNAAXEEAANVBKoF/wH5AvgB/wH3AvUB/wH4AvYB/wHzAvEB/wHyAu8B/wHzAu8B
/wHvAusB/wHtAugB/wHuAugB/wH5AvcC/wL9Av8C+gL/AvkC/wL3Af8B/gL2Af8B/AL1Af8B+wL0
Af8B+wLzAf8DNQFVCAADVQSqBf8B+QL4Af8B9wL1Af8B+AL2Af8B8wLxAf8B8gLvAf8B8wLvAf8B
7wLrAf8B7QLoAf8B7gLoAf8B+QL3Av8C/QL/AvoC/wL5Av8C9wH/Af4C9gH/AfwC9QH/AfsC9AH/
AfsC8wH/AzUBVQwAAzUBVQMmAf8DXAH/A3cB/wN2Af8DdgH/A3YB/wN2Af8DdgH/A3YB/wN2Af8D
dgH/A3YB/wN2Af8DdgH/A3YB/wN2Af8DbwH/A1UBqhQAAzUBVQOcAf8DeQH/A28B/wOAAf8BnAGd
AZwB/wNVAawDBAEFBAIUAANTAaoDNgH/A3QB/wOPAf8DjwH/A3QB/wM1AVUIAANVAaoDrk3/AzUB
VQgAA1UBqgOuTf8DNQFVDAADFQEcAzUBVQNcAcYDngH/A3sB/wOHAf8DnAH/A7gB/wOPAf8DewH/
A3sB/wN6Af8DlAH/A8kB/wO/Af8DpAH/A3cB/wNtAf8DVQGqFAADFQEcAzUBVQM1AVUDTAGOA1EB
/wN4Af8DZQHjA1UBrANWAasDUwGqA1MBqgNTAaoDVQGqA1UBqgNgAeMDZgH/A3wB/wNMAY4DPAFk
A0gBgwMfASwIAAMnATkDRAF7A1wBxgNlAewB7gLsAf8B8ALvAf8B7wLtAf8B7gLrAf8B7ALoAf8B
6wLnAf8B6QLlAf8B5gLjAf8B5gLiAf8B5QLgAf8B4wLeAf8B4gLdAf8B4QLcAf8B4QLaAf8BzALI
Af8DXwHQA0IBcgMbASYIAAMnATkDRAF7A1wBxgNlAewB7gLsAf8B8ALvAf8B7wLtAf8B7gLrAf8B
7ALoAf8B6wLnAf8B6QLlAf8B5gLjAf8B5gLiAf8B5QLgAf8B4wLeAf8B4gLdAf8B4QLcAf8B4QLa
Af8BzALIAf8DXwHQA0IBcgMbASYUAANBAXEDXAHGA4AB/gNcAcYDVQGqA1UBqgNlAeMDfwH/A4AB
/wN8Af8DZQHjA1UBqgNVAaoDXAHGA10B/wNcAcYDQQFxIAADNQFVA28B/wN5Af8DiAH/A5wB/wN/
Af8DZgH/A08B/wNVAf8DbQH/A5gB/wOGAf8DfgH/A38B/wM8AWYDGAQgAS4DDAEPDAADGwEmA0EB
cQNPAZcDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGq
A1UBqgNVAaoDRAF7AxYBHQMIAQoMAAMbASYDQQFxA08BlwNVAaoDVQGqA1UBqgNVAaoDVQGqA1UB
qgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNEAXsDFgEdAwgBChgAAzQBVANA
Af0DNAFUCAADVQGqA4QB/wOFAf8DfAH/A1UBqggAAzUBVQMoAf8DNQFVJAADNQFVA9oB/wOeAf8D
nQH/A9cB/wO5Af8DnAH/A4EB/wN8Af8DlgH/A80B/wOYAf8DfgH/A34B/wNJAYgDIwEz4AADFQEc
AzQBVAMVARwIAANVAaoD1QH/A9QB/wOOAf8DVQGqCAADFQEcAzUBVQMVARwkAAMVARwDNQFVA1kB
xgNZAcYDNQFVA1wBxgNiAf8DegH/A4MB/wNcAcYDNQFVA1wBxgNcAcYDNQFVAyABLQMNARH0AANB
AXEDVQGqA1UBqgNVAaoDQQFxQAADQAFxA0ABcQQAA0ABcQNTAaoDVQGqA1UBqgNBAXEEAANAAXED
QAFx/wD/APIABAEDAgEDAUABQQFAAXEBUgFUAVIBqAFTAVUBUwGqAVMBVQFTAaoDTAGQAzkBXQMX
AR8UAAMGAQgDCgENAwwBEAMMARADDAEQAwwBEAMMARADDAEQAwwBEAMMARADDAEQAwwBEAMMARAD
DAEQAwwBEAMMAQ8DCAEKBAEYAAMGAQgDCgENAwwBEAMMARADDAEQAwwBEAMMARADDAEQAwwBEAMM
ARADDAEQAwwBEAMMARADDAEQAwwBEAMMAQ8DCAEKBAEQAAQCAwYBBwMKAQ0DDAEPAwwBDwMMAQ8D
DAEPAwwBDwMMAQ8DDAEPAwwBDwMMAQ8DDAEPAwwBDwMMAQ8DDAEPAwwBDwMMAQ8DDAEPAwoBDQME
AQUEAQQAAwMBBAMHAQkDDAEQAwwBEAMMARADDAEQAwwBEAMMARADDAEQAwwBEAMMARADDAEQAwwB
EAMdASgDNgFYAVkBXAFZAcYBQAFHAUAB/QFIAZ0BUgH/ARgBfQEiAf8BXwFmAV8B5QFWAVcBVgGy
AzcBWgMXAR8IAAQCAwQBBQMrAUIDOwFiAzwBZQM8AWUDPAFlAzwBZQM8AWUDPAFlAzwBZQM8AWUD
PAFlAzwBZQM8AWUDPAFlAzwBZQM8AWQDLAFDBAIEAQwABAIDBAEFAysBQgM7AWIDPAFlAzwBZQM8
AWUDPAFlAzwBZQM8AWUDPAFlAzwBZQM8AWUDPAFlAzwBZQM8AWUDPAFlAzwBZAMsAUMEAgQBDAAD
BgEHAxEBFgMbASYDIAEuAyABLgMgAS4DIAEuAyABLgMgAS4DIAEuAyABLgMgAS4DIAEuAyABLgMg
AS4DIAEuAyABLgMgAS4DHwEsAxwBJwMMAQ8EAgQAAwkBCwMTARoDIQEvAyEBMAMhATADIQEwAyEB
MAMhATADIQEwAyEBMAMhATADIQEwAyEBMAFCAUMBQgF1AQABZgELAf8BAAF9ARMB/wFIAa4BWgH/
AdkB+QHhAf8BSAGgAVEB/wEAAXoBDgH/AQABiQEXAf8BVQFXAVUBsQM4AVwIAAMEAQUDCwEOA1UB
rwH6Af8B9gH/AfUB/wHxAf8B8wH/Ae4B/wHxAf8B7AH/Ae8B/wHqAf8B7gH/AegB/wHrAf8B5gH/
AegB/wHjAf8B5wH/AeEB/wHlAf8B3wH/AeMB/wHdAf8B4gH/AdsB/wHgAf8B2QH/Ad4B/wHXAf8B
8gH/Ae4B/wNWAasDAgEDBAEMAAMEAQUDCwEOA1UBrzz/A1YBqwMCAQMEAQwAAygBPANXAbEDWgG3
A1kBuQNZAbkDWQG5A1kBuQNZAbkDWQG5A1kBuQNZAbkDWQG5A1kBuQNZAbkDWQG5A1kBuQNZAbkD
WQG5A1kBuQNaAbcDLQFEAwYBBwQAA0MBdQNYAbMDWgG6A1oBugNaAboDWgG6A1oBugNaAboDWgG6
A1oBugNaAboDWgG6A1oBugNhAdEBAAGPARoB/wEAAYgBFAH/AVEBrQFdAf8B8gH9AfUB/wFRAagB
WgH/AQABgQEOAf8BAAGIARIB/wFfAWYBXwHlA0wBkAgAAwQBBQMLAQ4DVQGvAfgB/wHzAf8B8gH/
Ae0B/wHwAf8B6wH/Ae4B/wHoAf8B7AH/AeYB/wHpAf8B5AH/AecB/wHhAf8B5QH/Ad4B/wHiAf8B
2wH/Ad8B/wHZAf8B3QH/AdYB/wHbAf8B1AH/AdoB/wHSAf8B2AH/AdAB/wHxAf8B7AH/A1YBqwMC
AQMEAQwAAwQBBQMLAQ4DVQGvPP8DVgGrAwIBAwQBCAAEAQM1AVYBnAH6Av8BmAH6Av8BlgH6Av8B
lgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6
Av8BlgH6Av8BlgH6Av8BlgH6Av8BlgH6Av8BswH7Av8B7AP/AzkBXwMIAQoEAAFTAlUBqgFbAckB
5wH/AZEB+AL/AZEB+AL/AZEB+AL/AZEB+AL/AZEB+AL/AZEB+AL/AZEB+AL/AZEB+AL/AZEB+AL/
AZEB+AL/AcQB/QL/AZMB5AG3Af8BAAGtAScB/wE5AawBTAH/AY4BxwGUBf8BjgHHAZQB/wFRAa0B
XAH/AUkBrwFYAf8BGAGgATMB/wFTAVUBUwGqCAADBAEFAwsBDgNVAa8B+QH/AfMB/wHyAf8B7AH/
AfAB/wHqAf8B7gH/AegB/wHrAf8B5QH/AekB/wHjAf8B5gH/AeAB/wHkAf8B3QH/AeEB/wHaAf8B
3gH/AdcB/wHbAf8B1AH/AdkB/wHSAf8B1wH/AdAB/wHWAf8BzgH/AfEB/wHsAf8DVgGrAwIBAwQB
DAADBAEFAwsBDgNVAa8I/wHmAfEB6QH/AeYB8QHpLf8DVgGrAwIBAwQBCAAEAgM2AVcBfQHxAv8B
eAHwAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHv
Av8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BnAH0Av8B5wP/AzkBXwMIAQoE
AAFTAlUBqgE9AbYB2gH/AWwB6wL/AWwB6wL/AWwB6wL/AWwB6wL/AWwB6wL/AWwB6wL/AWwB6wL/
AWwB6wL/AWwB6wL/AWwB6wL/AasB+AL/AYcB6QG7Af8BAAG+ATIB/wGqAekBuw3/AfMB/wH3Af8B
3AH/AecB/wFJAcsBagH/AVMBVQFTAaoIAAMEAQUDCwEOA1UBrwH7Af8B9gH/AfUB/wHvAf8B8gH/
AewB/wHwAf8B6gH/Ae4B/wHoAf8B6wH/AeUB/wHpAf8B4wH/AeYB/wHgAf8B5AH/Ad0B/wHhAf8B
2gH/Ad4B/wHXAf8B2wH/AdQB/wHZAf8B0gH/AdcB/wHQAf8B8gH/Ae0B/wNWAasDAgEDBAEMAAME
AQUDCwEOA1UBrwj/AbQB1gG8Af8BtAHWAbwt/wNWAasDAgEDBAEIAAQCAzYBVwFgAegC/wFbAeYC
/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZ
AeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wFZAeUC/wGHAe4C/wHiA/8DOQFfAwgBCgQAA1UB
qgGQAdYB5wH/AWMB6AL/AVQB4wL/AUwB4QL/AUwB4QL/AUwB4QL/AUwB4QL/AUwB4QL/AUwB4QL/
AUwB4QL/AUwB4QL/AZIB9QL/AXkB7AG9Af8BAAHHAToB/wE5AdoBagH/AY4B7QGsBf8BjgHXAZ8B
/wFRAc8BcgH/AUkB5AF6Af8BKwF+ASsB/ANTAacIAAMEAQUDCwEOA1UBrwH8Af8B9wH/AfcB/wHx
Af8B9QH/Ae8B/wHyAf8B7AH/AfAB/wHqAf8B7gH/AegB/wHrAf8B5QH/AekB/wHjAf8B5gH/AeAB
/wHkAf8B3QH/AeEB/wHaAf8B3gH/AdcB/wHbAf8B1AH/AdkB/wHSAf8B8gH/Ae4B/wNWAasDAgED
BAEIAAQBAwYBCAMPARQDVwGxCP8BdQGlAXcB/wE8AY4BRwH/AVUBuwFuAf8BxgHoAc8l/wNWAasD
AgEDBAEIAAQCAzYBVwFIAeAC/wFCAd0C/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/
AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC/wE/AdwC
/wF0AegC/wHeA/8DOQFfAwgBCgQAA1UBqgHIAeoB7gH/AYgB7wL/AVYB4wL/AT0B3QL/AT0B3QL/
AT0B3QL/AT0B3QL/AT0B3QL/AT0B3QL/AT0B3QL/AT0B3QL/AW4B7AL/AWwB6wHUAf8BOQHaAX4B
/wEVAdkBWQH/ATsB4wFyAf8BrgH5AccB/wE8AdEBZgH/AQIBvAE2Af8BAAG6ATcB/wFbAV0BWwHK
AUIBQwFCAXUIAAMEAQUDCwEOA1UBrwH9Af8B+QH/AfkB/wHzAf8B9wH/AfEB/wH1Af8B7wH/AfIB
/wHsAf8B8AH/AeoB/wHuAf8B6AH/AesB/wHlAf8B6QH/AeMB/wHmAf8B4AH/AeQB/wHdAf8B4QH/
AdoB/wHeAf8B1wH/AdsB/wHUAf8B8wH/Ae8B/wNWAasDAgEDBAEIAAMJAQsDGAEhAyoBQANaAb8B
xAH4AdUB/wG3AfQBywH/AUQBpwFYAf8BCgGPASUB/wEIAa4BMgH/AXQBzwGMAf8BxgHqAdAh/wNW
AasDAgEDBAEIAAQCAzYBVwEzAdkC/wEsAdYC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC
/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEo
AdUC/wFjAeMC/wHaA/8DOQFfAwgBCgQAA1UBqgHlAfEB7wH/AdoD/wFyAeoC/wE+AeAC/wE+AeAC
/wE+AeAC/wE+AeAC/wE+AeAC/wE+AeAC/wE+AeAC/wE+AeAC/wE+AeAC/wFiAegC/wGrAfkC/wE+
AeYBiAH/AQgB4gFQAf8BCwHtAVYB/wELAe0BVgH/AQcByQFDAf8BAAGAARwB/wM9AWgDDwETCAAD
BAEFAwsBDgNVAa8B/gH/AfsB/wH7Af8B9QH/AfkB/wHzAf8B9wH/AfEB/wH1Af8B7wH/AfIB/wHs
Af8B8AH/AeoB/wHuAf8B6AH/AesB/wHlAf8B6QH/AeMB/wHmAf8B4AH/AeQB/wHdAf8B4QH/AdoB
/wHeAf8B1wH/AfQB/wHxAf8DVgGrAwIBAwQBCAADFwEfAzMBUANNAZMBYAJkAdsBTwHpAYAB/wEo
Ad4BYwH/ASIB3QFeAf8BHQHbAVYB/wEYAdcBSgH/AQgBsgE3Af8BVQHAAXMh/wNWAasDAgEDBAEI
AAQCAzYBVwFaAekC/wFUAecC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFR
AeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wFRAeYC/wGCAe8C
/wHiA/8DOQFfAwgBCgQAA1UBqgHKAegB7wH/AXYB1AHyAf8BZwHkAfsB/wFgAewC/wFgAewC/wFg
AewC/wFgAewC/wFgAewC/wFgAewC/wFgAewC/wFgAewC/wFgAewC/wFsAe8C/wGEAfQC/wGFAfQB
1wH/AYgB9QHFAf8BjAH5AccB/wGMAfkBxwH/AXYB6gHAAf8BSwHMAbMB/wNMAY4DJwE5CAADBAEF
AwsBDgNVAa8B/gH/AfwB/wH9Af8B9wH/AfsB/wH1Af8B+QH/AfMB/wH3Af8B8QH/AfUB/wHvAf8B
8gH/AewB/wHwAf8B6gH/Ae4B/wHoAf8B6wH/AeUB/wHpAf8B4wH/AeYB/wHgAf8B5AH/Ad0B/wHh
Af8B2gH/AfUB/wHzAf8DVgGrAwIBAwQBCAADGAEgAzMBUQNOAZQBYAJkAdsBVAHrAYAB/wEvAeEB
YgH/ASoB4AFeAf8BJgHfAVkB/wElAd4BVQH/AR8B0QFPAf8BMQHLAVwB/wFbAckBfgH/AcgB7QHU
Gf8DVgGrAwIBAwQBCAAEAgM2AVcBcwHyAv8BbgHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8B
bAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHxAv8BbAHx
Av8BbAHxAv8BlQH1Av8B5wP/AzkBXwMIAQoEAANVAaoBwwHmAfAB/wFSAb4B5AH/AWwB4QH2Af8B
eAHzAv8BeAHzAv8BeAHzAv8BeAHzAv8BeAHzAv8BeAHzAv8BeAHzAv8BeAHzAv8BeAHzAv8BeAHz
Av8BeAHzAv8BngH5Av8BsgH8Av8BtgH8Av8BtQH8Av8BoQH5Av8BeAHzAv8BWQJbAcADPgFrCAAD
BAEFAwsBDgNVAa8C/wH9Af8B/gH/AfkB/wH9Af8B9wH/AfsB/wH1Af8B+QH/AfMB/wH3Af8B8QH/
AfUB/wHvAf8B8gH/AewB/wHwAf8B6gH/Ae4B/wHoAf8B6wH/AeUB/wHpAf8B4wH/AeYB/wHgAf8B
5AH/Ad0B/wH2Af8B9AH/A1YBqwMCAQMEAQgAAxgBIAMzAVIDTgGVA2IB3AFhAfEBiAH/AT0B6QFs
Af8BOQHoAWgB/wE2AecBZgH/ATYB5wFmAf8BNgHnAWYB/wEnAdMBWAH/AQkBqwE8Af8BrQHjAb4Z
/wNWAasDAgEDBAEIAAQCAzYBVwF+AfUC/wF6AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4
AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC/wF4AfQC
/wF4AfQC/wGdAfgC/wHoA/8DOQFfAwgBCgQAA1UBqgHPAekB8gH/AW8BvgHXAf8BfwHjAfIB/wGH
AfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC
/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wGHAfUC/wE4Ab4B5gH/AVMCVQGq
CAADBAEFAwsBDgNVAa8C/wH+A/8B+wH/Af4B/wH5Af8B/QH/AfcB/wH7Af8B9QH/AfkB/wHzAf8B
9wH/AfEB/wH1Af8B7wH/AfIB/wHsAf8B8AH/AeoB/wHuAf8B6AH/AesB/wHlAf8B6QH/AeMB/wHm
Af8B4AH/AfcB/wH1Af8DVgGrAwIBAwQBCAADGAEgAzMBUgNOAZUDYgHcAXQB+wGYAf8BVAH1AYAB
/wFPAfQBfQH/AU0B9AF7Af8BTQH0AXsB/wFNAfQBewH/ATYB2QFlAf8BCQGkATkB/wGtAeEBvRn/
A1YBqwMCAQMEAQgABAIDNgFXAYsB9wL/AYcB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB
9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/AYUB9gL/
AYUB9gL/AacB+QL/AeoD/wM5AV8DCAEKBAADVQGqAe8B9gH1Af8BzwHjAeEB/wG7AfMB9QH/AakB
+gL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/
AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AZkB+AL/AYwB5gH3Af8DVQGqCAAD
BAEFAwsBDgNVAa8C/wH+A/8B+wP/AfoB/wH+Af8B+QH/Af0B/wH3Af8B+wH/AfUB/wH5Af8B8wH/
AfcB/wHxAf8B9QH/Ae8B/wHyAf8B7AH/AfAB/wHqAf8B7gH/AegB/wHrAf8B5QH/AekB/wHjAf8B
+AH/AfYB/wNWAasDAgEDBAEIAAMYASADMwFRA04BlANkAdsBkwH+AckB/wF5AfwBugH/AXYB+wG6
Af8BbQH7AaoB/wFeAfsBiwH/AT4B2gFtAf8BWQHSAX0B/wGtAeEBvQH/AeQB9QHpGf8DVgGrAwIB
AwQBCAAEAgM2AVcBmQH5Av8BlQH5Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4
Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8BlAH4Av8B
sQH7Av8B7AP/AzkBXwMIAQoEAANVAaoB/wH9AfgC/wH4AeoB/wHlAf0B9AH/AdEB/QH4Af8BwQH5
AfgB/wHBAfkB+AH/AcEB+QH4Af8BwQH5AfgB/wHBAfkB+AH/AcEB+QH4Af8BwQH5AfgB/wHBAfkB
+AH/AcEB+QH4Af8BwQH5AfgB/wHBAfkB+AH/AcEB+QH4Af8BwQH5AfgB/wGrAeIB4QH/A2MB5ANV
Aa8DVQGtA0IBcggAAwQBBQMLAQ4DVQGvAv8B/gP/AfsD/wH7A/8B+gH/Af4B/wH5Af8B/QH/AfcB
/wH7Af8B9QH/AfkB/wHzAf8B9wH/AfEB/wH1Af8B7wH/AfIB/wHsAf8B8AH/AeoB/wHuAf8B6AH/
AesB/wHlAf8B+AH/AfYB/wNWAasDAgEDBAEIAAMQARUDJwE5Az4BagNeAc0BwQH/AesB/wGyAf8B
5AH/AXgB3QGtAf8BWAHXAYwB/wFRAewBgQH/AWIB2AGHAf8BmwHeAbEh/wNWAasDAgEDBAEIAAQC
AzYBVwGnAfwC/wGkAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC
/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wG8AfwC/wHv
A/8DOQFfAwgBCgQAA1UBqgL/AfsD/wHyAv8B/gHtAv8B/AHrAv8B+AHqAv8B+AHqAv8B+AHqAv8B
+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHq
Af8BvgG1AaYB/wNVAa8DCwEOAwYBCAMCAQMIAAMEAQUDCwEOA1UBrwL/Af4D/wH7A/8B+wP/AfsD
/wH7Af8B/gH/AfkB/wH9Af8B9wH/AfsB/wH1Af8B+QH/AfMB/wH3Af8B8QH/AfUB/wHvAf8B8gH/
AewB/wHwAf8B6gH/Ae4B/wHoAf8B+QH/AfcB/wNWAasDAgEDBAEIAAQBAwcBCQMSARcDVwGyCP8B
VQGaAVcB/wENAYYBIQH/ASgBxQFeAf8BtwHsAckl/wNWAasDAgEDBAEIAAQCAzYBVwHhAfAB5AH/
AeAB8AHkAf8B4AHwAeQB/wHgAfAB5AH/AeAB8AHkAf8B4AHwAeQB/wHgAfAB5AH/AeAB8AHkAf8B
4AHwAeQB/wHgAfAB5AH/AeAB8AHkAf8B4AHwAeQB/wHgAfAB5AH/AeAB8AHkAf8B4AHwAeQB/wHg
AfAB5AH/AeAB8AHkAf8B6AHzAesB/wH6AfsB+AH/AzkBXgMHAQkEAANVAaoC/wH7A/8B9AP/AfIC
/wH+AfIC/wH9AfEC/wH9AfEC/wH9AfEC/wH9AfEC/wH9AfEC/wH9AfEC/wH9AfEC/wH9AfEC/wH9
AfEC/wH9AfEC/wH9AfEC/wH9AfEC/wH9AfEB/wHHAbsBqwH/A1UBrAMEAQUDAgEDBAEIAAMEAQUD
CwEOA1UBrwL/Af4D/wH7A/8B+wP/AfsD/wH7A/8B+gH/Af4B/wH5Af8B/QH/AfcB/wH7Af8B9QH/
AfkB/wHzAf8B9wH/AfEB/wH1Af8B7wH/AfIB/wHsAf8B8AH/AeoB/wH6Af8B+AH/A1YBqwMCAQME
AQwAAwUBBgMNAREDVgGwCP8BbQG1AYAB/wFWAa4BbgH/AbcB7AHJAf8B5wH5Ae0l/wNWAasDAgED
BAEIAAQCAzYBVwH+AfEB5AH/Af4B6gHQAf8B/gHnAcYB/wH+AekBxwH/Af4B6wHIAf8B/gHtAckB
/wH+Ae4BygH/Af4B8AHbAf8B9gHnAdgB/wHnAdMBwAH/AeUB0QG9Af8B5AHQAbwB/wHkAdABvAH/
AeQB0AG8Af8B5AHQAbwB/wHkAdABvAH/AeQB0AG8Af8DgAH+A74B/QM3AVoDBQEGBAADVQGqAf8B
+wHzAv8B9AHbAv8B9gHbAv8B9wHcAv8B+QHdAv8B+wHeAv8B/AHfAv8B/QHgAv8B/gHwAf8B9gH0
AesB/wHlAd4B0QH/AeUB3gHRAf8B5QHeAdEB/wHlAd4B0QH/AeUB3gHRAf8B5QHeAdEB/wHlAd4B
0QH/A2UB5wNNAZIEARAAAwQBBQMLAQ4DVQGvAv8B/gP/AfsD/wH7A/8B+wP/AfsD/wH7A/8B+gH/
Af4B/wH5Af8B/QH/AfcB/wH7Af8B9QH/AfkB/wH0Af8B+QH/AfQB/wH3Af8B8wH/AfYB/wHyAf8B
/AH/AfsB/wNWAasEAgQBDAADBAEFAwsBDgNVAa8I/wGmAdcBuAH/AaYB1wG4Lf8DVgGrAwIBAwQB
CAAEAgM2AVcF/wHqAcQC/wHiAacC/wHnAaoC/wHsAa0C/wHyAa8C/wH3AbEC/wH8AeUB/wHnAeEB
2wH/AbgBpgGTAf8BswGgAYwB/wGxAZ0BiQH/AbEBnQGJAf8BsQGdAYkB/wGxAZ0BiQH/AbEBnQGJ
Af8BsQGdAYkB/wGvAZoBhgH9A30B+gM0AVMIAANVAaoB/wH0AeEC/wHeAaYC/wHjAagC/wHoAaoC
/wHtAa0C/wHyAbAC/wH2AbIC/wH5AbUC/wH9AeYB/wHlAd4B2AH/AbEBnQGJAf8BsQGdAYkB/wGx
AZ0BiQH/AbEBnQGJAf8BsQGdAYkB/wGxAZ0BiQH/AbEBnQGJAf8DWAG4AzsBYxQAAwQBBQMLAQ4D
VQGvAv8B/gP/AfsD/wH7A/8B+wP/AfsD/wH7A/8B+wP/AfsB/wH+Af8B+QH/Af0B/wH4Af8B+wH/
AfcB/wH+Af8B/A3/A1UBqgQBEAADBAEFAwsBDgNVAa88/wNWAasDAgEDBAEIAAQBAzUBVgX/AfgB
6wL/AfUB4gL/AfcB4wL/AfkB5AL/AfsB5AL/AfwB5QH/Af0B+AHsAf8DXAHGAzUBVQM1AVUDNQFV
AzUBVQM1AVUDNQFVAzUBVQM1AVUDNAFUAzQBUwMVARwIAANVAaoB6wHgAdMC/wH0AeEC/wH2AeIC
/wH3AeMC/wH5AeQC/wH7AeUC/wH8AeUC/wH9AeYB/wNRAZ4DPAFlAzUBVQM1AVUDNQFVAzUBVQM1
AVUDNQFVAzUBVQMpAT0DGAEhFAADBAEFAwsBDgNVAa8C/wH+A/8B+wP/AfsD/wH7A/8B+wP/AfsD
/wH7A/8B+wP/AfoB/wH+Af8B+QH/Af0B/wH4Af8B/QH/AfkB/wH9Af8B+wX/A1YBsAM4AVsUAAME
AQUDCwEOA1UBrzz/A1YBqwMCAQMEAQwAAycBOQNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoD
VQGqA0EBcTQAA0EBcQNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqAy8BSQMMARA4AAME
AQUDCwEOA1UBrwL/Af4D/wH7A/8B+wP/AfsD/wH7A/8B+wP/AfsD/wH7A/8B+wP/AfsB/wH+Af8B
+gH/Af0B/wH6Af8DbAHrA1wBxAM8AWQDGQEiFAADBAEFAwsBDgNVAa88/wNWAasDAgEDBAHMAAME
AQUDCwEOA1UBrwL/Af4D/wH7A/8B+wP/AfsD/wH7A/8B+wP/AfsD/wH7A/8B+wP/AfsD/wH7A/8B
/gH/A1wBxAMxAU4DEwEaGAADBAEFAwsBDgNVAa88/wNWAasEAgQBzAAEAgMEAQUDUgGgA2IB7gNi
Ae4DYgHuA2IB7gNiAe4DYgHuA2IB7gNiAe4DYgHuA2IB7gNiAe4DVgGrAzwBZAMTARoDBwEJGAAE
AgMEAQUDVQGsAsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/
AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/AsYBxAH/A1UBqgQB2AADPAFmA08B
mQNPAZkDTwGZA08BmQNPAZkDTwGZA08BmQNPAZkDTwGZA08BmQNPAZkDNQFWAxoBIygAA0EBcQNV
AaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UBqgNVAaoDVQGqA1UB
qgNBAXH/AI0AAUIBTQE+BwABPgMAASgDAAFgAwABYAMAAQEBAAEBBQABgAEEFgAD/wEAAf8B8AF/
AcABHAEBBgAB/wHgAT8BgAEIBwAB/wHgAT8BgAEIBwAB/wHAAQ8BgAEIBwAB/wEAAQcBgAEIBwAB
/wEAAQcBgAEIBwAB/gEAAQEBgAEIBwAB+AEAAQEBgAEIBwAB+AIAAYABGAEBBgAB8AEAAQEBgAEY
AQEGAAHAAQABAQH4AQABDwYAAcABAAEDAfgBAAEPBgABwAEAAQcB+AEAAQ8GAAHAAQABDwH+AQAB
PwYAAYABAAEfAf4BAAE/BgABgAEAAT8B/gEAAT8GAAGAAQABfwH+AQABPwYAAYABAAH/Af4BAAE/
BgABwAEBAf8B/gEAAT8GAAHAAQMB/wH+AQABPwYAAcABBwH/Af4BAAE/BgABwAEPAf8B/gEAAT8G
AAb/BgAG/wYAAfABAAEBAfABAAEBAfgBHwL/AfwBAQHwAgAB8AIAAfABHwH/AYACAAH+AgAB/gIA
AfABDwH/AYACAAHwAgAB8AIAAcABDwH/AYACAAHAAgABwAIAAcABAwH/AYACAAHAAgABwAIAAcAB
AwH/AYACAAHAAgABwAIAAYABAQH/AYACAAGAAgABgAIAAYABAQH/AYACAAGAAgABgAIAAcABAQH/
AYACAAGAAQABAQGAAQABAQHAAQABPwGAAQABAQGAAgABgAIAAfABAAEPAcABAAEHAYABGAEAAYAB
GAEAAfgBAAEPAfABAAEPAYABCAEAAYABCAEAAfgBAAEHAfABAAEHAYABAAEBAYABAAEBAf4BAAEB
AfgBAAEDAYABAAEBAYABAAEBAf8BwAEBAf8BwAEBAYABAAEBAYABAAEBAf8BwAEAAf8BwAEBAcAB
AAEBAcABAAEBAf8BwAEAAf8BwAEBAcABAAEHAcABAAEHAf8B4AEBAf8BwAEBAcABAAEHAcABAAEH
Af8B4AEBAf8BwAEBAfABAAEHAfABAAEHAf8B+AEDAf8B4AEDAfgBAAEPAfgBAAEPAf8B/AEHAf8B
+AEHAfgBAAEPAfgBAAEPAf8B/AEPAf8B+AEPAf8BAAF/Af8BAAF/BP8B/AE/DP8B+AEAAQ8B+AEA
AQcBwAEAAQEBwAEAAQEB+AEAAQ8B+AEAAQcBwAEAAQEBwAEAAQEB/wHBAf8B+AEAAQ8BwAEAAQEB
wAEAAQEB8AEAAQcB+AEAAQ8BwAEAAQEBwAEAAQEBwAEAAQcBwAEAAQEB/wHDAv8BwAH/AcABAAEH
AcABHAEBAf8BwQL/AcABfwHAAQABBwHAARwBAAGAAQABAQGAAQABAQHwAQABBwEAAQ8CgAEAAQEB
gAEAAQEB8AEAAQcBAAEHAeEBgAEAAQEBgAEAAQEBgAMAAQMB4AGAAQABAQGAAQABAQGAARgCAAEB
AeABgAEAAQEBgAEAAQEBgAEcAgABAQHgAYABAAEBAYABAAEBAYABHAIAAQEB4AGAAQABAQGAAQAB
AQGAAwABAQHgAYABAAEBAYABAAEBAfABAAEHAQABAwHhAYABAAEBAYABAAEBAfABAAEHAQABBwKA
AQABAQGAAQABAQHAAQABBwGAAQ8BAAGAAQABAQGAAQABAQHAAQABBwHAAR8BAQGAAQABAQGAAQAB
AQHAAQABBwHAAQABAQGAAQABAQGAAQABAQHwAQABBwH4AQABAQHAAQABAQHAAQABAQH4AcEBjwH4
AQABBwb/AfgBwQGPAfgBAAEHB/8BwQH/Af4BQQE/Fv8B/AEBAfABAAEDAfABAAEDAcACAAGAAgAB
wAEAAQEBwAEAAQEBwAIAAYACAAHAAQABAQHAAQABAQHAAgABgAIAAcABAAEBAcABAAEBAYACAAGA
AgABwAEAAQEBwAEAAQEBgAIAAYACAAHAAQABAQHAAQABAQGAAgABgAIAAcABAAEBAYABAAEBAYAC
AAGAAgABwAEAAQEBgAEAAQEBgAIAAYACAAHAAQABAQGAAQABAQGAAgABgAIAAcABAAEBAYABAAEB
AYACAAGAAgABwAEAAQEBgAEAAQEBgAIAAYACAAHAAQABAQGAAQABAQGAAgABgAIAAcABAAEBAYAB
AAEBAYACAAGAAgABwAEAAQEBgAEAAQEBgAIAAYACAAHAAQABAQGAAQABAQGAAgABgAIAAcABAAEB
AcABAAEBAYACAAGAAQABAwHAAQABAQHAAQABAQGAAQABAQGAAQABBwHAAQABAwHAAQABAQGAAQAB
AQGAAQABBwHAAQABBwHAAQABAQHAAQ8B/wGAAQ8B/wHAAQABBwHAAQABAQb/AcABAAEPAcABAAEB
Bv8BwAEAAQ8BwAEAAQMG/wHwAQABPwHwAQABBwz/Cw=='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = [System.Drawing.Color]::Transparent 
	$imagelist1.Images.SetKeyName(0,'folder.ico')
	$imagelist1.Images.SetKeyName(1,'folder_open-add.ico')
	$imagelist1.Images.SetKeyName(2,'document_color_green.ico')
	$imagelist1.Images.SetKeyName(3,'document_flat-import.ico')
	$imagelist1.Images.SetKeyName(4,'manufacturing_process_1_gear.ico')
	$imagelist1.Images.SetKeyName(5,'manufacturing_process_1_gear_empty-import.ico')
	$imagelist1.Images.SetKeyName(6,'storage_network.ico')
	$imagelist1.Images.SetKeyName(7,'storage_network_green.ico')
	$imagelist1.Images.SetKeyName(8,'storage_disc-info.ico')
	$imagelist1.Images.SetKeyName(9,'storage_disc-ok.ico')
	$imagelist1.Images.SetKeyName(10,'link.ico')
	$imagelist1.Images.SetKeyName(11,'link-ok.ico')
	$imagelist1.Images.SetKeyName(12,'tag_blue.ico')
	$imagelist1.Images.SetKeyName(13,'organization.ico')
	#
	# imagelist2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAKLAAAAk1TRnQBSQFMAgEBDgEAAbABAQGwAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABQAMAAQEBAAEgBgABQDIABAEDEQEWAwkBDBwAAwUEBgEHAwYBBwMGAQcD
BQEGDAADBQQGAQcDBgEHAwYBBwMFAQakAAMHAQkB+wGzAY4B/wFhAlsB3gMIAQoUAANWAa4U/wMJ
AQwEAANWAa4U/wMJAQycAAMHAQkB+wG0AY4B/wGzAasBqQH/AeQBpgGFAf8BZQJeAd0DCAEKEAAB
sQGMAXQD/wH7A/8B+wP/AfsD/wH7A/8B+wH/AwsBDgQAAbEBjAF0A/8B+wP/AfsD/wH7A/8B+wP/
AfsB/wMLAQ6YAAMHAQkB/AG0AY4B/wG1Aa4Bqwn/AeQBpwGFAf8BZQJeAd0DCAEKDAABvgGYAYAV
/wMLAQ4EAAG+AZgBgBX/AwsBDpQAAwcBCQH8AbQBjgH/AbgBsQGuEf8B5gGnAYUB/wFiAl0B3AMI
AQoIAAHMAaMBiRX/AwgBCgQAAcwBowGJFf8DCAEKkAADBwEJAf4BtQGOAf8B1wHQAc0Z/wHmAacB
hQH/AWQCYAHbBAIEAAMMARAB0wGpAYwB/wHTAakBjAH/AdMBqQGMAf8B0wGpAYwB/wNnAe8IAAMM
ARAB0wGpAYwB/wHTAakBjAH/AdMBqQGMAf8B0wGpAYwB/wNnAe+QAAMHAQkB/wG1AY4B/wHgAdoB
1xH/AdIC0An/AakBoAGdAf8B7wGVAWwB/xQAAzwB/xwAA14B8JQAAwcBCQH/AbcBjgH/AeMB3QHa
Ef8C0AHPCf8BpgGgAZwB/wH1AaMBeAH/BAEUAANHAf8DRwH/A0cB/wNHAf8DRwH/A0cB/wNHAf8D
RwH/A1kBwJQAAf8BtwGOAf8B5AHgAd0R/wHQAc8BzQn/AaQBnwGaAf8B+AGrAX4B/wQBKAADXgH7
oAAEAQH/AcwBnAL/AcsBoA3/Ac8CzQn/AbEBqwGpAv8BswGFAf8EASAAAVQCUgGoAZ8BfQFlAf8B
nwF9AWUB/wGfAX0BZQH/AZ8BfQFlAf8BnwF9AWUB/wMYASCUAAQBAf8BzwGiAv8B0AGiAv8BzQGk
Ef8BzwHJAcUC/wG1AYcB/wQBJAAF/wHyAcsC/wHyAcsC/wHyAcsC/wHyAcsC/wHyAcsB/wNfAfuU
AAQBAf8B0AGkAf8B7wGTAV8C/wHXAa0C/wHPAakJ/wHPAckBxQL/AbgBiQH/BAEoAAX/AfsB3gL/
AfsB3gL/AfsB3gL/AfsB3gL/AfsB3gH/A18B+5gAAf8BzwGkAf8BWgJYAb0B/gGrAX0C/wHSAacC
/wHPAakB/wHNAcgBxAL/AboBiQH/BAEsABj/AWMCXwH7mAAB/wHeAbgC/wHhAbwC/wHhAbwC/wHh
AbwC/wHhAbwC/wG6AYkB/wQBMAAY/wNoAfD/AP8AngADDAEPAxUBHQMYASEDGQEjAxoBJAMoATwD
GgEkAxwBJwF+AisB/AGnAS8BAAH/AacBLwEAAf8DSwGMEAADDAEPAxUBHQMYASEDGQEjAxoBJAMo
ATwDGgEkAxwBJwErAVYBKwH8AQABbwELAf8BAAFpAQoB/wNLAYwUAAMIAQoDEgEXAwUBBkwAAwQB
BQEhAV4BIQH7AQABbwELAf8BAAFpAQoB/wNLAYwYAAF9AXYBcwn/Ae8B/wHhAf8B6AH/Ad0B/wGw
ATcBAAH/AckBSgEGBv8B+AHrAf8ByQFKAQYB/wFLAkoBihQAAX0BdgFzCf8B7wH/AeEB/wHoAf8B
3QH/AQABZgELAf8BAAGHARUF/wEAAYkBFwH/AQABiQEXAf8BSgFLAUoBigwAAwQBBQHmAuQB/wP8
Af8DIQEvBAIkAAMDAQQDEwEaAyABLQNiAeEDRgGBAyEBMAMeASoDFQEcAwYBBwEAAWYBCwH/AQAB
hwEVBf8BAAGJARcB/wEAAYkBFwH/AUoBSwFKAYoMAAM0AVMQ/wHuAf8B4AP/AfkB/wHeAWMBGgH/
Ad4BYwEaA/8B/AH/AbUBUQERAf8B3gFjARoB/wHMAVIBDgH/DAADNAFTEP8B7gH/AeAD/wH5Af8B
AAGkASIN/wEAAaQBIgH/AQABjAEaAf8IAAMEAQUB+QL4Av8B/gH5Cf8DGwElKAADBAEFAfkC+AH/
Ae0B4AHZAf8B+QHyAe4B/wNKAYsDAgEDBAADSAGEAQABpAEiDf8BAAGkASIB/wEAAYwBGgH/CAAD
EwEZFP8B7QH/Ad4D/wH5Af8B7gF2ASkB/wHuAXYBKQX/AcgBbAEwAf8B7gF2ASkB/wHmAWwBIgH/
CAADEwEZFP8B7QH/Ad4D/wH5Af8BAAG+ATIB/wGFAdwBnQH/AQABvgEyBf8B7wH/AfgB/wEAAbEB
LAH/CAAB+QL4A/8B/AH/Ay0BRQMSARgI/wMbASUgAAMCAQMB+QL4A/8B/AH/AzgBXQHkAdwB1gH/
AfwB9AHuAf8DSgGKAwIBAwNJAYUBAAG+ATIB/wGFAdwBnQH/AQABvgEyBf8B7wH/AfgB/wEAAbEB
LAH/CAAB4AHaAdkV/wHrAf8B3QH/Af4B/wH7Af8B8gF6AS8B/wH7AYIBNgH/AfkBzAGtAf8BywFn
ASUB/wH7AYIBNgH/AWoCQQH5CAAB4AHaAdkV/wHrAf8B3QH/Af4B/wH7Af8BAAHLAT4B/wEAAdcB
RAH/AQAB1wFEAf8BAAHWAUQB/wFfAdMBgAH/AUEBaAFBAfkEAAMJAQwB8gHkAd4B/wNgAegDAgED
AxEBFgNDAXYI/wMXAR8cAANuAfUB8QHkAdwB/wM1AVYEAAMIAQoB5AHcAdkB/wH+AfQB8QH/A0oB
igNEAXsBAAHLAT4B/wEAAdcBRAH/AQAB1wFEAf8BAAHWAUQB/wFfAdMBgAH/AUEBaAFBAfkEAAMS
ARgU/wHvAfUB8gH/AbwB1wGwAf8BswGuAcQC/wHyAfkB/wH5AYEBNgH/AdkBbwEpAf8B9AGBATcB
/wG/AUgBCQH/BAIEAAMSARgU/wHvAfUB8gH/AbwB1wGwAf8BswGuAcQB/wH4AfQB+wH/AQcB3AFN
Af8BCwHtAVYB/wELAe0BVgH/AQABgAEcAf8EAggAAcgBvgG7Av8B9wH0Af8DSQGHAf8B+QH3Av8B
+AH3Af8DSgGKBP8DWQG+HAADRwGCAf8B9AHuAf8BjgGIAYUB/QMMAQ8E/wJ9AXsB+gHmAdwB2gL/
AfcB8gH/Aw0BEQNLAY0BBwHcAU0B/wELAe0BVgH/AQsB7QFWAf8BAAGAARwB/wQCBAADWwHQAv8B
+AP/AfkD/wH8Bf8B7gHdAdoB/wG1AbEBsAH/A10BzwHgAtAB/wHTAbABpgP/AfgD/wH+A/8B/gL/
AecB2gH/CAADWwHQAv8B+AP/AfkD/wH8Bf8B7gHdAdoB/wG1AbEBsAH/A10BzwHgAtAB/wHTAbAB
pgP/AfgD/wH+A/8B/gL/AecB2gH/EAAByQHCAb4C/wH5AfQB/wNOAZcF/wH5AfcB/wNKAYoDAwEE
A1MBqQMYASAYAANVAa8B/wH3AfEB/wGRAYsBhwH9A0IBcgH3AegB4QH/A30B+gHQAc0BzAH/AwIB
AwMQARUDRAF7A0kBhQNIAYMMAAFnAV8BWwL/Ae8B6AL/Ae8B5wL/Ae0B4QL/AesB3gH/AdoBugGu
Af8IAANdAc8B6wHVAdIC/wH7AfQC/wH1Ae4C/wH0Ae0C/wHyAesB/wMVARwEAAFnAV8BWwL/Ae8B
6AL/Ae8B5wL/Ae0B4QL/AesB3gH/AdoBugGuAf8IAANdAc8B6wHVAdIC/wH7AfQC/wH1Ae4C/wH0
Ae0C/wHyAesB/wMVARwQAAHPAcYBwgL/AfwB+AH/A04BlwX/Af4B+QH/A0kBhwj/AxsBJRgAA1UB
rwH/AfkB9AH/AZIBjAGLAf0B5AHcAdkB/wH5Ae0B5gH/A30B+gGuAaYBpAX/A0oBiwMCAQMQAANa
AfUB/wHkAdkC/wHgAdUC/wHdAdIC/wHZAcwB/wHGAakBrgH/A18B2gQAAakBpAGjAf8B9QHyAfQP
/wH8Af8IAANaAfUB/wHkAdkC/wHgAdUC/wHdAdIC/wHZAcwB/wHGAakBrgH/A18B2gQAAakBpAGj
Af8B9QHyAfQP/wH8Af8YAAHMAcYBwgH/AeEB2gHWAf8DEgEXBv8B/AH/A0oBigj/AxsBJRgAA1UB
rwT/A34B/AHnAeAB3AL/AfIB6wH/A30B+gHuAeYB4QL/Af4B+QH/A0oBiwMCAQMMAAM6AWAB/wHd
AdIC/wHZAcwB/wH7AdMBzAH/Ae8B0gHdAf8BxAGwAdMB/wGxAbUBvAH/AcEB2QG4Af8B4QHvAeEV
/wgAAzoBYAH/Ad0B0gL/AdkBzAH/AfsB0wHMAf8B7wHSAd0B/wHEAbAB0wH/AbEBtQG8Af8BwQHZ
AbgB/wHhAe8B4RX/IAABwgG+AbwB/wNSAagI/wM2AVkI/wMbASUgAAGSAYwBiAH/AesB5AHeAv8B
9wHxAf8DfQH6AfEB6AHmA/8B/AH/A0oBiwMCAQMMAAH/AeAB2QH/AfgC0gH/Ae4B0gHeAf8B5wHS
AfIB/wHeAdMB+QH/Ad0B6wHZAf8B5AH/AdcV/wGIAYABewH/DAAB/wHgAdkB/wH4AtIB/wHuAdIB
3gH/AecB0gHyAf8B3gHTAfkB/wHdAesB2QH/AeQB/wHXFf8BiAGAAXsB/yAAAcQBuAG1Bf8DUgGj
BP8EAgMSARgC/wH+Af8B/AH5AfgB/wQCHAAC/wH8Af8BqgGkAaMB/wHuAeYB4QX/BAIB9AHrAecF
/wM6AWIMAAJXAVYBsgHyAdUB5AH/AegB0gHuAf8B4AHSAfkB/wHdAdoB7wH/Ad0B7gHSAf8B5AH/
AdUD/wH7Ef8QAAJXAVYBsgHyAdUB5AH/AegB0gHuAf8B4AHSAfkB/wHdAdoB7wH/Ad0B7gHSAf8B
5AH/AdUD/wH7Ef8oAAHcAdMBzwX/A0sBjAMCAQMDRQF8BP8B0wHIAcIB/yAAA1UBrwT/A4AB/gMM
AQ8EAANJAYcC/wH5Af8DWgHEEAACXwFeAfsB6AHXAfsB/wHeAdMB+QH/Ad0B4AHkAf8B3QHyAdAB
/wHkAf8B1QH/AfsB/wH0Df8DMwFSFAACXwFeAfsB6AHXAfsB/wHeAdMB+QH/Ad0B4AHkAf8B3QHy
AdAB/wHkAf8B1QH/AfsB/wH0Df8DMwFSLAAB4AHWAdAF/wN8AfgE/wHuAeYB4QH/BAEkAANVAa8E
/wGgAZwBmAH9A0oBiQT/Ae4B5gHhAf8EARQAA1UBrwT/Ad0B5wHeAf8B3QH1AcwB/wHkAf8B1QH/
AfgB/wHuBf8C7wHtAf8DEgEYHAADVQGvBP8B3QHnAd4B/wHdAfUBzAH/AeQB/wHVAf8B+AH/Ae4F
/wLvAe0B/wMSARg0AAHhAdkB1QX/Ae0B5gHgAf8EASwAA1UBrwj/Ae0B5gHgAf8EASAAAzYBWQNa
AfUBbwFmAWIB/wFfAlsB0AMSARgsAAM2AVkDWgH1AW8BZgFiAf8BXwJbAdADEgEYfAADPgFrA18B
yP8AIQADEAEVAxIBFwMSARcDAAH/AwAB/wNiAeEDEgEXAxIBFwMJAQwcAAMHBAkBDAMJAQwDAAH/
A2UB/wNcAf8DCQEMAyQBNAMJAQwDCQEMEAADEgH/AxIB/wMSAf8DEgH/A2cB/wEAAd4C/wEAAd4C
/wEAAd4C/wNqAfkDUQH3A1EB9wNRAfcDUQH3DQABLAEAAf8BAAEsAQAB/wEAASwBAAH/AQABLAEA
Af8BAAGZAQAB/wEAAd4C/wEAAd4C/wEAAd4C/wEAAZkBAAH/AQABLAEAAf8BAAEsAQAB/wEAASwB
AAH/AQABLAEAAf8gAAMsAf8DJgH/A00B/ysAAf8DGAH/AwAB/wMsAf8DKAH/AyYB/wNOAZQDGAH/
A3MB/xQAAxIB/wMSAf8DEgH/AxIB/wNnAf8BAAHQAv8BAAHQAv8BAAHQAv8DZwH/AxIB/wMSAf8D
GwH/Ax4B/w0AASwBAAH/AQABLAEAAf8BAAEsAQAB/wEAASwBAAH/AQABmQEAAf8BAAHQAv8BAAHQ
Av8BAAHQAv8BAAGZAQAB/wEAASwBAAH/AQABLAEAAf8BAAEsAQAB/wEAASwBAAH/EAADIgH/A1IB
/wNWAbIDKQH/AyIB/wMmAf8DSgH/AwAB/wMAAf8DPQH/A1wB+BgAAysB/wMrAf8DKQH/AyIB/wOT
Af8DVgH/AxgB/wMrAf8DLQH/KAADMQFMAc8CzAH/OAADMQFMAU0B7QFSAf8nAAH/AygB/wMrAf8D
KAH/AysB/wMrAf8DKwH/AysB/wMrAf8DKQH/AysB/wM5Af8TAAH/A2UB/wNsAf8DSwH/AwAB/wwA
AzoBYgPkAf8DKAH/AywB/wNxAf8gAAMzAVABpAKjAf8EAjQAAzMBUAEiAeEBKAH/CAIgAAN3Af8D
NAH/AzQB/wM0Af8DNAH/AzQB/wM0Af8DNAH/AzQB/wMzAf8DCgH/EAADLwH/AzcB/wO7Af8BXAF3
AVwB+AMhATAEARAAA4kB/wM3Af8DNwH/AwAB/wQAA1gBugNqAf8DagH/A2oB/wNqAf8DagH/A2oB
/wNqAf8DagH/A2oB/wNqAf8DagH/A2oB/wNqAf8IAANYAboDagH/A2oB/wNqAf8DagH/A2oB/wNq
Af8DagH/A2oB/wNqAf8DagH/A2oB/wNqAf8DagH/EAADaQH/Az0B/wM9Af8DOQH/A+8B/wPFAf8D
oAH/Az0B/wM9Af8DPAH/AwMB/wgAAwUBBgMbASYDagH/A7oB/wPEAf8BGwHZAVEB/wFNAWwBTQH6
AyMBMwQBEAADQQH/A7QB/wgAA3EF/wF9AnsF/wF4AncF/wF0AnEC/wL5Av8C/gL/AvgC/wL1Af8B
QQG6AZYB/wFFAWwB6gH/AfkC7QH/CAADcQX/AX0CewX/AXgCdwX/AXQCcQL/AvkC/wL+Av8C+AL/
AvUB/wFBAboBlgH/AUUBbAHqAf8B+QLtAf8IAAM5Af8DcQH/A0MB/wNHAf8DRwH/A2kB/wgAAwkB
CwNpAf8DRwH/A0cB/wNbAf8DagH/A10B1AMSARgBHgFcAS8B/wFHAcEBZgH/ASkB1gFWAf8BGgHX
AUsB/wEaAdcBSwH/ARsB2QFOAf8BKwFnASsB/AMkATUEAQwAAzcB/wNeAf8DAQH/BAADfQX/AfIC
7wH/AfQC8gH/AeoC5wH/Ae0C5wH/AeMC3QH/AeYC3QL/Av4C/wL4Av8C9QH/Af4C8QH/AfkC7wH/
AfkC7QH/CAADfQX/AfIC7wH/AfQC8gH/AeoC5wH/Ae0C5wH/AeMC3QH/AeYC3QL/Av4C/wL4Av8C
9QH/Af4C8QH/AfkC7wH/AfkC7QH/CAADYAH/A1IB/wNSAf8DUgH/A1EB/wNbAdAMAANKAf8DUgH/
A1IB/wNSAf8DUgH/AwQB/wMRARYBZgGiAXcB/wFZAcwBegH/AUQB5AFvAf8BNgHnAWYB/wE2AecB
ZgH/ATYB5wFmAf8BNgHnAWcB/wEhAV8BIQH7Aw4BEgwAAxwB/wNSAf8DTgH/BAADhTX/CAADhTX/
CAADZQH/A30B/wNbAf8DXAH/A1wB/wMoAf8MAANpAf8DXAH/A1wB/wNVAf8DiwH/Aw4B/wMRARYB
mgHSAaoB/wF0AdwBkQH/AWIB9QGLAf8BVgH5AYQB/wFWAfkBhAH/AVYB+QGEAf8BEQGqAUEB/wNB
AXADBAEFDAADNwH/A1EB/wPkAf8EAANYAboDagH/A2oB/wNqAf8DagH/A2oB/wNqAf8DagH/A2oB
/wNqAf8DagH/A2oB/wNqAf8DagH/CAADWAG6A2oB/wNqAf8DagH/A2oB/wNqAf8DagH/A2oB/wNq
Af8DagH/A2oB/wNqAf8DagH/A2oB/xAAA3QB/wNmAf8DZgH/A2UB/wMsAf8DXQHRA2UB/wNmAf8D
ZgH/A2UB/wM9Af8IAAMSARcDPgFqA2IB7gEAAXgBHAH/AQABYwEAAf8BaQH/AZgB/wEiAboBVAH/
A0QBeAMDAQQQAANvAf8DRwH/CAADcQX/AX0CewX/AXgCdwX/AXQCcQL/AvkC/wL+Av8C+AL/AvUB
/wFBAboBlgH/AUUBbAHqAf8B+QLtAf8IAANxBf8BfQJ7Bf8BeAJ3Bf8BdAJxAv8C+QL/Av4C/wL4
Av8C9QH/AUEBugGWAf8BRQFsAeoB/wH5Au0B/xAAA1EB/wNwAf8DcAH/A3AB/wNwAf8DcAH/A3AB
/wNwAf8DcAH/A3AB/wNSAaAMAAMfASwDbQH/A3EB/wPSAf8BKwHJAWIB/wNFAXwDAwEEEAADEgH/
A28B/wNvAf8DIwH/BAADfQX/AfIC7wH/AfQC8gH/AeoC5wH/Ae0C5wH/AeMC3QH/AeYC3QL/Av4C
/wL4Av8C9QH/Af4C8QH/AfkC7wH/AfkC7QH/CAADfQX/AfIC7wH/AfQC8gH/AeoC5wH/Ae0C5wH/
AeMC3QH/AeYC3QL/Av4C/wL4Av8C9QH/Af4C8QH/AfkC7wH/AfkC7QH/DAADJgH/A3cB/wN2Af8D
dgH/A3YB/wN2Af8DdgH/A3YB/wN2Af8DdgH/A3YB/wNsAf8QAAOcAf8DZwH/A4AB/wGqAasBqgH/
AwQBBRAAAxcB/wN0Af8DnQH/A3QB/wgAA4U1/wgAA4U1/xAAA8wB/wN9Af8DmQH/A9kB/wN9Af8D
fQH/A3sB/wPyAf8D3AH/A3cB/wNmAf8YAAM5Af8DfQH/A34B/wNVAf8DNgH/A0cB/wN+Af8DfQH/
A4AB/wQAAy0BRQwAA1UBqgHkAuEB/wHoAucB/wHmAuMB/wHjAt0B/wHgAtoB/wHaAtUB/wHZAtIB
/wHVAs0B/wHTAssB/wHSAsgB/wGiAp8B/wMfASwMAANVAaoB5ALhAf8B6ALnAf8B5gLjAf8B4wLd
Af8B4ALaAf8B2gLVAf8B2QLSAf8B1QLNAf8B0wLLAf8B0gLIAf8BogKfAf8DHwEsFAADQAH9CAAD
hAH/A4UB/wN3Af8IAAMoAf8cAAPaAf8DgAH/A9cB/wOqAf8DgQH/A3oB/wPNAf8DfgH/A34B/wMx
AU2kAAT/A/wB/wNlAf8sAAMUAf8EAAMsAf8DdgH/A44B/wQAA0AB//8A+QADBAEFASEBXgEhAfsB
AAFvAQsB/wEAAWkBCgH/A0sBjBAAAw4EEgEYAxIBGAMSARgDEgEYAxIBGAMSARgDEgEYAxIBGAMS
ARgDEAEVBAEQAAMOBBIBGAMSARgDEgEYAxIBGAMSARgDEgEYAxIBGAMSARgDEgEYAxABFQQBDAAD
EQEWAyABLgMgAS4DIAEuAyABLgMgAS4DIAEuAyABLgMgAS4DIAEuAyABLgMgAS4DHAEnAwIBAwQA
AwwBEAMhAS8DIQEwAyEBMAMhATADIQEwAyEBMAMhATADIQEwAQABZgELAf8BAAGHARUF/wEAAYkB
FwH/AQABiQEXAf8BSgFLAUoBiggAAwsBDgH8Af8B+QH/AfUB/wHxAf8B8gH/Ae0B/wHvAf8B6gH/
Ae0B/wHnAf8B6AH/AeMB/wHmAf8B4AH/AeMB/wHdAf8B4QH/AdoB/wHeAf8B1wH/AfwB/wH5Af8D
AgEDDAADCwEOLP8DAgEDCAAEAQGrA/8BpgP/AaYD/wGmA/8BpgP/AaYD/wGmA/8BpgP/AaYD/wGm
A/8BpgP/AaYD/wHuA/8DDAEPBAABTQG7AeQB/wGkA/8BpAP/AaQD/wGkA/8BpAP/AaQD/wGkA/8B
5gP/AQABpAEiDf8BAAGkASIB/wEAAYwBGgH/CAADCwEOAfsB/wH1Af8B8QH/AesB/wHuAf8B6AH/
AeoB/wHkAf8B5gH/AeAB/wHjAf8B3AH/Ad4B/wHXAf8B2gH/AdMB/wHXAf8B0AH/AdUB/wHNAf8B
/gH/AfsB/wMCAQMMAAMLAQ4s/wMCAQMIAAMCAQMBfQHxAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHv
Av8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8BdgHvAv8B5wP/AwwBDwQAASYB
nAHIAf8BbAHrAv8BbAHrAv8BbAHrAv8BbAHrAv8BbAHrAv8BbAHrAv8BbAHrAv8BywP/AQABvgEy
Af8BhQHcAZ0B/wEAAb4BMgX/Ae8B/wH4Af8BAAGxASwB/wgAAwsBDgH+Af8B+QH/AfUB/wHvAf8B
8QH/AesB/wHuAf8B6AH/AeoB/wHkAf8B5gH/AeAB/wHjAf8B3AH/Ad4B/wHXAf8B2gH/AdMB/wHX
Af8B0AP/AfwB/wMCAQMMAAMLAQ4I/wGOAcIBmiH/AwIBAwgAAwIBAwFSAeMC/wFKAeAC/wFKAeAC
/wFKAeAC/wFKAeAC/wFKAeAC/wFKAeAC/wFKAeAC/wFKAeAC/wFKAeAC/wFKAeAC/wFKAeAC/wHg
A/8DDAEPBAAC5gHkAf8BXwHnAv8BPAHcAv8BPAHcAv8BPAHcAv8BPAHcAv8BPAHcAv8BPAHcAv8B
qgH+Av8BAAHLAT4B/wEAAdcBRAH/AQAB1wFEAf8BAAHWAUQB/wFfAdMBgAH/AUEBaAFBAfkIAAML
AQ4C/wH7Af8B+AH/AfIB/wH1Af8B7wH/AfEB/wHrAf8B7gH/AegB/wHqAf8B5AH/AeYB/wHgAf8B
4wH/AdwB/wHeAf8B1wH/AdoB/wHTA/8B/AH/AwIBAwgABAIDEgEXCP8BAAFSAQAB/wEAAZkBJh3/
AwIBAwgAAwIBAwEzAdkC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC
/wEoAdUC/wEoAdUC/wEoAdUC/wEoAdUC/wHaA/8DDAEPBAAB6wHqAecB/wHaA/8BPgHgAv8BPgHg
Av8BPgHgAv8BPgHgAv8BPgHgAv8BPgHgAv8BPgHgAv8BqwH5Av8BBwHcAU0B/wELAe0BVgH/AQsB
7QFWAf8BAAGAARwB/wMVARwIAAMLAQ4C/wH+Af8B+wH/AfUB/wH4Af8B8gH/AfUB/wHvAf8B8QH/
AesB/wHuAf8B6AH/AeoB/wHkAf8B5gH/AeAB/wHjAf8B3AH/Ad4B/wHXA/8B/gH/AwIBAwgAAyEB
LwNNAZMBYgHuAY8B/wEoAd4BYwH/AR8B3QFcAf8BGAHXAUoB/wEAAaABLRn/AwIBAwgAAwIBAwFt
AfEC/wFmAe8C/wFmAe8C/wFmAe8C/wFmAe8C/wFmAe8C/wFmAe8C/wFmAe8C/wFmAe8C/wFmAe8C
/wFmAe8C/wFmAe8C/wHmA/8DDAEPBAAB+QH3AfIB/wFEAb4B6wH/AXEB8gL/AXEB8gL/AXEB8gL/
AXEB8gL/AXEB8gL/AXEB8gL/AXEB8gL/AXEB8gL/AcUD/wHNA/8BzAP/AXEB8gL/A0EBcggAAwsB
DgT/Af4B/wH4Af8B+wH/AfUB/wH4Af8B8gH/AfUB/wHvAf8B8QH/AesB/wHuAf8B6AH/AeoB/wHk
Af8B5gH/AeAB/wHjAf8B3AX/AwIBAwgAAyEBMANOAZUBagHxAY4B/wEyAeMBYgH/ASsB4QFbAf8B
KwHhAVsB/wErAeEBWwH/AQkBrgE9Ff8DAgEDCAADAgEDAX4B9QL/AXgB9AL/AXgB9AL/AXgB9AL/
AXgB9AL/AXgB9AL/AXgB9AL/AXgB9AL/AXgB9AL/AXgB9AL/AXgB9AL/AXgB9AL/AegD/wMMAQ8E
AAT/AW8BvgHXAf8BhwH1Av8BhwH1Av8BhwH1Av8BhwH1Av8BhwH1Av8BhwH1Av8BhwH1Av8BhwH1
Av8BhwH1Av8BhwH1Av8BhwH1Av8BhwH1Av8BEAGjAdkB/wgAAwsBDgb/AfsB/wH+Af8B+AH/AfsB
/wH1Af8B+AH/AfIB/wH1Af8B7wH/AfEB/wHrAf8B7gH/AegB/wHqAf8B5AH/AeYB/wHgBf8DAgED
CAADIQEwA04BlQGEAf4BpAH/AVQB9QGAAf8BTQH0AXsB/wFNAfQBewH/AU0B9AF7Af8BCQGkATkV
/wMCAQMIAAMCAQMBkgH4Av8BjAH3Av8BjAH3Av8BjAH3Av8BjAH3Av8BjAH3Av8BjAH3Av8BjAH3
Av8BjAH3Av8BjAH3Av8BjAH3Av8BjAH3Av8B6wP/AwwBDwQABf8B9QHmAf8BxQP/AaIB+QL/AaIB
+QL/AaIB+QL/AaIB+QL/AaIB+QL/AaIB+QL/AaIB+QL/AaIB+QL/AaIB+QL/AaIB+QL/AaIB+QL/
AcEB+wL/CAADCwEOBv8B+wP/AfsB/wH+Af8B+AH/AfsB/wH1Af8B+AH/AfIB/wH1Af8B7wH/AfEB
/wHrAf8B7gH/AegB/wHqAf8B5AX/AwIBAwgAAyEBLwNNAZMBrgH/AecB/wGMAf8B1wH/AYkB/wHZ
Af8BZgH/AZMB/wEfAbUBTxn/AwIBAwgAAwIBAwGnAfwC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC
/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wGjAfsC/wHvA/8DDAEPBAAG/wHy
Av8B/gHrAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B+AHqAv8B
+AHqAf8BnQGTAYQB/wMLAQ4DBAEFCAADCwEOBv8B+wP/AfsD/wH7Af8B/gH/AfgB/wH7Af8B9QH/
AfgB/wHyAf8B9QH/Ae8B/wHxAf8B6wH/Ae4B/wHoBf8DAgEDCAAEAgMSARcI/wEAAWcBAwH/ASgB
xQFeHf8DAgEDCAADAgEDAf4B6gHWAf8B/gHqAdYB/wH+AeoB1gH/Af4B6gHWAf8B/gHqAdYB/wH+
AeoB1gH/Af4B6gHWAf8B/gHqAdYB/wH+AeoB1gH/Af4B6gHWAf8B/gHqAdYB/wH+AeoB1gL/AfkB
9QH/AwoBDQQABv8B9QP/AfUD/wH1A/8B9QP/AfUD/wH1A/8B9QP/AfUD/wH1A/8B9QP/AfUB/wGx
AZ0BiQH/BAEMAAMLAQ4G/wH7A/8B+wP/AfsD/wH7Af8B/gH/AfgB/wH7Af8B9QH/AfgB/wHyAf8B
9QH/Ae8B/wHxAf8B6wX/AwIBAwwAAwsBDgj/ATcBpAFfIf8DAgEDCAADAgEDBf8B4AGmAv8B5wGq
Av8B7wGuAv8B9wGxBf8BuAGmAZMB/wGxAZ0BiQH/AbEBnQGJAf8BsQGdAYkB/wGxAZ0BiQH/AbEB
nQGJAf8DfQH6CAAF/wHeAaYC/wHmAakC/wHtAa0C/wH0AbEC/wH5AbUF/wGxAZ0BiQH/AbEBnQGJ
Af8BsQGdAYkB/wGxAZ0BiQH/AbEBnQGJAf8DTgGUEAADCwEOBv8B+wP/AfsD/wH7A/8B+wP/AfsB
/wH+Af8B+AH/AfsB/wH3Df8EAQwAAwsBDiz/AwIBAwwAFP8B+wHyAecB/yQAAdIBwgGzFf8DGwEl
KAADCwEOBv8B+wP/AfsD/wH7A/8B+wP/AfsD/wH7Af8B/gH/AfkB/wH7Af8B9wX/AzEBTRAAAwsB
Diz/AwIBA4wAAwsBDgb/AfsD/wH7A/8B+wP/AfsD/wH7A/8B+wP/AfsF/wMxAU4UAAMLAQ4s/wQC
kAADagHmA2oB5gNqAeYDagHmA2oB5gNqAeYDagHmA2oB5gMxAU4cAAKpAaYB/wKpAaYB/wKpAaYB
/wKpAaYB/wKpAaYB/wKpAaYB/wKpAaYB/wKpAaYB/wKpAaYB/wKpAaYB/wKpAaYB//8ACQABQgFN
AT4HAAE+AwABKAMAAUADAAFAAwABAQEAAQEGAAECFgAD/wEAAf8BHwLBBAAB/wEPAoAEAAH+AQcC
gAQAAfwBAwKABAAB+AEBAoAEAAHwAQACgQQAAeABAQL3BAABwAEBAfABBwQAAcABAwH/AX8EAAGA
AQcB+AEPBAABgAEPAfgBDwQAAYABHwH4AQ8EAAHAAT8B+AEPBAABwAF/AfgBDwQABP8EAAT/BAAB
4AEBAeABAQHxAv8BwQH4AQAB+AEAAeAB/wGAAQAB4AEAAeABAAHAAf8BwAGAAcABAAHAAQABwAF/
AYABAAHAAQABwAEAAYABPwGIAQABgAEAAYABAAHAAT8BgAEAAYABAQGAAQEB4AEPAcABAwGBAYAB
gQGAAfABBwHgAQcBgAGBAYABgQH4AQMB8AEDAYABAQGAAQEB/gEBAf4BAQHAAQEBwAEBAf4BAAH+
AQEBwAEDAcABAwH/AQEB/gERAeABAwHgAQMB/wGBAf8BAQHwAQcB8AEHAf8BwwH/AYMB/AEfAfwB
HwP/Ac8I/wHwAQcB8AEDAcABAQHAAQEB/gE/AfABBwHAAQEBwAEBAeABAwHwAQcB/gF/Af4BfwHA
AQMCwQH+AT8B/gEfAeABAwHAAfABgAEBAYABAQHgAQMBAAF5AYABAQGAAQEBgQGAAQABOAGAAQEB
gAEBAYEBwAEAATgBgAEBAYABAQGBAcABAAE4AYABAQGAAQEB4AEDAQABeQGAAQEBgAEBAeABAwGA
AfABgAEBAYABAQHAAQMBwQHhAYABAQGAAQEB4AEDAfABBQHAAQEBwAEBAfYBNwHwAQME/wH+AT8B
+gEvD/8BwQHgAQEB4AEBAcABAAGAAQABwAEBAcABAQGAAQABgAEAAcABAQHAAQEBgAEAAYABAAHA
AQEBwAEBAYABAAGAAQABwAEBAYABAQGAAQABgAEAAcABAQGAAQEBgAEAAYABAAHAAQEBgAEBAYAB
AAGAAQABwAEBAYABAQGAAQABgAEAAcABAQGAAQEBgAEAAYABAAHAAQEBgAEBAYABAAGAAQEBwAEB
AcABAQGAAQEBgAEDAcABAQHAAQEBwAH/AYAB/wHAAQMBwAEBBP8BwAEHAcABAQT/AeABDwHgAQMI
/ws='))
	#endregion
	$imagelist2.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist2.TransparentColor = [System.Drawing.Color]::Transparent 
	$imagelist2.Images.SetKeyName(0,'folder.ico')
	$imagelist2.Images.SetKeyName(1,'folder_open-ok.ico')
	$imagelist2.Images.SetKeyName(2,'document_color_green.ico')
	$imagelist2.Images.SetKeyName(3,'document_flat-import.ico')
	$imagelist2.Images.SetKeyName(4,'manufacturing_process_1_gear.ico')
	$imagelist2.Images.SetKeyName(5,'manufacturing_process_1_gear_empty-import.ico')
	$imagelist2.Images.SetKeyName(6,'storage_network.ico')
	$imagelist2.Images.SetKeyName(7,'storage_network_green.ico')
	$imagelist2.Images.SetKeyName(8,'storage_disc-info.ico')
	$imagelist2.Images.SetKeyName(9,'storage_disc-ok.ico')
	$imagelist2.Images.SetKeyName(10,'link.ico')
	$imagelist2.Images.SetKeyName(11,'link-ok.ico')
	$imagelist2.Images.SetKeyName(12,'tag_blue.ico')
	$imagelist2.Images.SetKeyName(13,'organization.ico')
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = 'toolstripseparator1'
	$toolstripseparator1.Size = New-Object System.Drawing.Size(264, 6)
	#
	# SaveLnkToJson
	#
	$SaveLnkToJson.BackColor = [System.Drawing.Color]::Honeydew 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAGgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABvElEQVQ4T5XSQUjCYBQH8E8KB0pDwyBIkBQjqkNQIEmK0UFJsEsJUYeogwSGhSRhKPPQ
KejQqXYS56mb0EEKuodeI5IORbeiojBqF1/v+9wmxIj14M/etvf9tvGNcNaRM9LtBUJ4eK1eGwoh
BMxWF9gc3iqhiw8Oj/Bit+6wXiiQ2c0B76APRoCzWLAxgdGiQHIr0wFywj67SOv9own1el03siyz
GRWw93nawHZmVwOM1C/AA5t4ogJf39+6T6d5eXtnM3R2I7mlAGYPrCeSGvBXtZQjnV1dSwDf524D
S8trhgC16OzC4koHiMXi2JjYDaMJR+ZxFwaxR2BmNgo+f/hfCYYiCLjagG9qBtzeCTzhMLxOfr+B
HYE56Ol1Ys+5YdIXBEf/EESjcfaNV7Ua3DYarKeVTqe1pFIphgSCkTZgQiAQCjNgTgEqlQqcX1yy
nlahUABBECCfz0M2m+0ADvYGg82p6Qi43OMMaOLPdnwiglQ+hWfcdrp1kiRBqVSCYrEIoihqAM8A
YtvrsQ+3Rsf8DKALGncPcP/4BLKy8eVyWQtFKBCajakA4TA7Js75SW8YixmsvQNAuiw3PwhUWzMK
5g6uAAAAAElFTkSuQmCCCw=='))
	#endregion
	$SaveLnkToJson.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$SaveLnkToJson.Name = 'SaveLnkToJson'
	$SaveLnkToJson.Size = New-Object System.Drawing.Size(393, 38)
	$SaveLnkToJson.Text = 'Save LNK to Json'
	$SaveLnkToJson.Visible = $False
	$SaveLnkToJson.add_Click($SaveLnkToJson_Click)
	#
	# toolstripseparator11
	#
	$toolstripseparator11.Name = 'toolstripseparator11'
	$toolstripseparator11.Size = New-Object System.Drawing.Size(390, 6)
	$toolstripseparator11.Visible = $False
	#
	# SaveStream
	#
	$SaveStream.ForeColor = [System.Drawing.Color]::DarkGreen 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAkwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAACNUlEQVQ4T6WSX2iSURjGjzD8wJFs4aCLQKYY1RYNHIlDJelCSTAaJot1IQYNQ8FwiTAG
GgmDomIjWV2JnyzwIpC6kIouomBDIjFGTHZh7KYCdzVxEvj0nqObuYIFPfDwnfP++Z3zHj4m9Z9+
yfoMYEyN7cL6oWaMQdmvxYDGUKA1iZrvPVikRN9fGw6aA6Kxeag1/NAOQFKpaKPAv4gDguFoL2A+
nhQJLvvHUXjOMqSSM5iLRURMVWI4utHO8zoOGBzSdwG3orF9ANfKUgQvUn7cuWHE9LlunIvXHQDo
EaIAT+zpTeE57gbGkZo9hdo7M7xjlGs1RI7XBYLh3wBKPa5O+3sAXEE7Q/3TCLDrRqtkxZSRodXc
FnWeK9egHtJ1AW63lzYKkdxzvd5AwELQbz6CTAKfbfCcYSiursLhvESPONwF2C+4YJpw/GGum1YO
8QONy6h9sGGSHrharRJA2wWYzHboDEYKSGR1j8vlL+Imu5vXeyDrZfFPkCQdxk02aI6dgMvlFaeu
FYvYqFTEOhKJ0Dh1zNBNOCQnLyCZXICvPSpNTgDreYcAXOwA8vk8Xr1+K9aJRALxeBzNZlNAnq3k
IKeWsWaxdCDS8I7Z4oRWNyYAO01g+clTyNkcWgSQZRmZTAbpdFoAZ6mpEphCzedEqH2Lgbkjgydb
I6MTAsCbKptfUd36IRqy2ey+OaTR+In3oTDi1Hz/4ZIYQyLfVkjH6/TlgUOsRIke8NHi4++0/18x
9gu56xvVOQsp2AAAAABJRU5ErkJgggs='))
	#endregion
	$SaveStream.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$SaveStream.Name = 'SaveStream'
	$SaveStream.Size = New-Object System.Drawing.Size(330, 38)
	$SaveStream.Text = 'Save AlternateDataStream As'
	$SaveStream.ToolTipText = 'Export the ADS to a file'
	$SaveStream.Visible = $False
	$SaveStream.add_Click($SaveStream_Click)
	#
	# notifyicon1
	#
	$notifyicon1.BalloonTipIcon = 'Info'
	$notifyicon1.BalloonTipTitle = 'LNK & Jumplist Browser'
	$notifyicon1.ContextMenuStrip = $contextmenustrip3
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAAAAAAAAAAPAwAAABp7AAACAAABAAUAAAAAAAEAIACENgAAVgAAADAwAAABACAA
qCUAANo2AAAgIAAAAQAgAKgQAACCXAAAGBgAAAEAIACICQAAKm0AABAQAAABACAAaAQAALJ2AACJ
UE5HDQoaCgAAAA1JSERSAAABAAAAAQAIBgAAAFxyqGYAAAABc1JHQgCuzhzpAAAABGdBTUEAALGP
C/xhBQAAAAlwSFlzAAALEgAACxIB0t1+/AAANhlJREFUeF7tnQd4XMW1x18SkpDAe05CMQZjiikm
BAgOPaaazoMAoQRIyEvB9E5IMMXBlNjGuODesVWsZvXeVtKqWMVWL7uStsiSbFmSJW+RDSSed85q
r7l792xT3XLO9/0+y9LuvXPnzv/MmTlz5/4XGxsbGxsbGxsbGxsbGxsbGxsbGxtbgFhVl/ixumto
RonecmWx8cidJR1DT5R2WF8q7RhaAP8uKjFal8DPG5CSDuuX8G8MYv95+Pe2z1gXwc/4nZfwGGXG
I3fgMSs6h87Gc9hPx8bGNtGGAi/tsNxdZrQ+D2JdbBOxYagCOAg/iwkBzwXnLOmwRGMZsCxYJiyb
vZhsbGyjsXTtsR+W7bNeCwKbV2ocWl1qsBSC+AacxOh/HCo2WApKjEOrsOx4DXgt9stiY2OjbLf2
2P+UGo/cDqL5Z3GHNQd61COEuAITg+UbGEpUwc8rwZk9WtRtOs1+2WxsoWk4li7eZ7kXe8pSo7XF
STRBj7UZrv2Lsn2We0o7jv3IXi1sbMFr5Z1HLwKxvwaNPyuoevhRAkOGoVLDUCZEP6+W7Tt6ob26
2NgC30p0Q+dgwy7usBRTjZ9xpqTD2ohDIXSY9mpkYwscs6XiDEN/L+4Y2kM1cMZ77HMHf8MUpL16
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
AJGIbRzGspNk0r2cq9vDo9zfx6b769Ov//PZtf/127b/9dq2//LZtP/u1bH/5Myq/9jCoffSvJzZ
x7KVpq+dg2NURT0hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADAqY852MKjoeXMq+/64Lv//+XA//zhvP/43bn/9tu4//Xbt//127f/9du3
//Xat//02rf/9Nm2//PZtv/02rb/9Nq2/+rRr//Vv6DqxbCUnIh7ZToAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtqOFKuHKqKrv17P//+nD//vhvP/127f/9Nu3//Pa
tv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Tbt//127f/9Nu3//HYtP/w17P/8di0
/9rEo/rHspSgZ1tIKgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADeyKd18Ne09f/rxf/4
3rr/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Pa
tv/z2rb/89q2//Tbt//13Lj/8tm2/+3Vsv/w2LT/2MGi7K+cg20AAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u66TE+zVs7L/68b/++G9//Lat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z
2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Xcuf/w17X/7NSy/+jR
r//Dr5KnDAwMFQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAADhyqUi89y41f/ux//027j/89q3//Pat//z2rf/89q3//Pat//z2rf/
89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z
2rf/89q3//Pat//027j/9Nu4/+vTsf/v17T/yraYyEtDPCIAAAAAAAAAAQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDStCL337vg/+vG//LZt//z2rj/89q4
//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/
89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//Xcuf/s1LP/79e1/824m9NL
QzwiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8da7E/ff
vNn/68b/89q3//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4
//Xcuf/13Ln/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/
9Nu4//TbuP/23bn/7ta0//DYtv/JtJjKFxcXFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA9Nu4u//uyP/z2rf/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//Tb
uP/027j/9Nu4//TbuP/027n/9N3A/+vVuP/t1bP/9du4//TbuP/027j/9Nu4//TbuP/027j/9Nu4
//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9t25/+3Vs//x2bb/u6iNqwAAAAUAAAAB
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw2LZ+//DL//Tbuf/027n/9Nu5//Tbuf/0
27n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuv/13Lv/6seC/9u9gf/axar/79a1//fd
u//027n/9Nu5//Tbuf/23Lr/9dy6//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5
//bduv/s1LP/6tKx/5+PeHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPXui344b78
+eC9//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//bfxP/v
yn//68Fa/+u/VP/cwIv/49C7//DYuP/027n/9t27//Tdwf/r1bn/7dW0//Xbuf/027n/9Nu5//Tb
uf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/13Lr/7da0/9W/ofBYTUErAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAPLZt7z/7Mf/89q5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/
9Nu5//Tbuf/13Lr/99/B//HcyP/kul7/78x1/+3FZv/gs0v/27+O/9vFpv/fzLb/59G2/+nFgP/c
vYH/2sWq/+3VtP/13Lr/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/13Lr/8dm3//HZ
t/+5qI6mAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA89y5Qv/pxf/23bv/9Ny6//Tcuv/03Lr/9Ny6
//Tcuv/03Lr/9Ny6//Tcuv/13bz/9Ny6//ffwf/z3sX/5cqf/9OqT//Omx7/2qMg/+KqI//ipxb/
4acY/+CsMP/dtFj/37Zb/+vDYP/rv1T/3LyC/+vVu//23bv/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/0
3Lr/9Ny6//Tcuv/03Lr/9t67/+7Wtv/axKb7bmZVPAAAAAAAAAAAAAAAAAAAAAAAAAAA89q5t//s
x//z3Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny5//bevv/r1bX/4My2/+XNpf/Wr1v/zJka
/8yWDv/NmRj/y5cY/9ukGv/iqRz/4agb/+GnFv/hpA//5Kka/+7Ogf/sw13/6seC//Tewv/03Lr/
9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Pbuf/y2rn/uqeOoQAAAAAA
AAAAAAAAAAAAAADx3Lol99+9/Pjfvf/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9d7C//DN
iv/mt0r/2LFd/8yaIv/MlQ3/zpkX/86aGv/Omhr/zZka/9miG//iqRz/4agc/+GoHP/hqBv/4ake
/+OqHv/fuWn/79i7//bdvP/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/
9Ny6//bevP/x2bj/0bug70E6MiMAAAAAAAAAAAAAAADy27l5/+/L//Pcu//03Lv/9Ny7//Tcu//0
3Lv/9Ny7//Tcu//03Lv/9d/E/+7KgP/msSz/1J4X/8yXFP/Omhr/zpoa/86aGv/Omhr/zJgZ/9ae
Fv/jqRz/4agc/+GoHP/hqBz/4agb/+CmFP/bvon/6tW9//bevP/03Lv/9Ny7//Tcu//03Lv/9Ny7
//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//XdvP/y2rr/69O0/5+OeGgAAAAAAAAAAAAAAAD03LrC
/+nG//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//fgxv/mw3z/y5YQ/86aGv/O
mhr/zpoa/86aGv/MlxL/y5YS/9imLP/iqRz/4agc/+GoHP/hqBz/4agc/+GmEf/cuG//5tK8//be
vP/03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//13bz/9dy8
/7+rkqwAAAAAAAAAAPLYvxTz27vy+uLA//TcvP/03Lz/9Ny8//TcvP/03Lz/9Ny8//TcvP/03Lz/
9Ny8//bgxf/t0aH/zZkY/86ZGP/Omhr/zpoZ/82XEP/UpDL/6MmO//DSnf/hqBr/4aca/+GoHP/h
qBz/4agc/+GmEP/dtFz/49C7//Xevf/03Lz/9Ny8//TcvP/03Lz/9Ny8//TcvP/03Lz/9Ny8//Tc
vP/03Lz/9Ny8//TcvP/23r3/9d29/825n90MDAAUAAAAAPLZvD395sP/9d69//TdvP/03bz/9N28
//TdvP/03bz/9N28//TdvP/03bz/9N28//Xev//z27f/0J8q/82YFP/Pmxr/y5cV/9KwZP/w2rz/
+eXP//PZr//iqiT/4acZ/+GoHP/hqBz/4agc/+GmEv/esUn/4M22//Tdvf/03bz/9N28//TdvP/0
3bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/13r3/9N28/9fCpvppX1AzAAAAAPTd
u2L/7cr/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TewP/z2rL/3Kw5
/8uVEP/DkRT/u4oQ/9K6kv/o1b//9N6+//Tdu//ksDP/4KYV/+GoHP/hqBz/4agc/+GmFf/frTf/
3squ//PcvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/0
3bz/9d28/+XPsf+VhXNSAAAAAPTcvH7/78z/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Td
vf/03b3/9N29//XgyP/txnP/6bEl/9GjMv+5ihj/vYsN/9q1Y//axan/69W4//fhxv/mtkb/4KUS
/+GoHP/hqBz/4agc/+GnF//gqij/3Maj//Davf/13r7/9N29//Tdvf/03b3/9N29//Tdvf/03b3/
9N29//Tdvf/03b3/9N29//Tdvf/03b3/9d6+/+/Yuf+ll39qAAAAAPTdvY//7sz/9N29//Tdvf/0
3b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tewf/x1aP/7cZz//PZsP/r06//5LlZ/+et
G//mxoX/8d3E//bhyf/ovVz/36QP/+GoHP/hqBz/4agc/+GnGv/hqB3/3MGU/+3Yvv/13r7/9N29
//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9t++//PcvP+vnod6
AAAAAPTevZX/7sz/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/1
38L/9eHI//Xfwv/34sn/9Niq/+3Gcv/02rD/9d/B//bhyv/rxXP/36QP/+GoHP/hqBz/4agc/+Go
G//hphX/3L2D/+rXvv/2377/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29
//Tdvf/03b3/9t+///bfvv+xoYmAAAAAAPTdvZH/783/9d6+//Xevv/13r7/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r3/9d/D//biyv/138H/9d69//biyf/u
zIr/4KQS/+GoHP/hqBz/4agc/+GoHP/hphH/3blx/+jVv//34MD/9d6+//Xevv/13r7/9d6+//Xe
vv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9+DA//ffv/+yoYh7AAAAAPXdvoL/8M3/9d6+
//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//bhxv/x057/4acZ/+GnGv/hqBz/4agc/+GoHP/hpRH/3bVd/+TSvf/2
37//9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9+DA//Xe
vv+rnYVrAAAAAPXfv2j/783/9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6/
//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///bfxP/z2bD/4qsk/+CnGP/hqBz/
4agc/+GoHP/hphL/3rFJ/+HOuf/13sD/9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///Xev//13r//+OHB/+3Xuf+fkHpTAAAAAPfhv0T/6cj/9t/A//Xev//13r//9d6///Xe
v//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6/
//Xfwf/13b3/5LA0/+CmFf/hqBz/4agc/+GoHP/hphX/3644/9/Ksf/03b//9t6///Xev//13r//
9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//+uLD/97Krf1/dWUyAAAAAPXivBv1
3b73+uPD//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xe
v//13r//9d6///Xev//13r//9d6///XewP/24cf/5rZH/+ClEv/hqBz/4agc/+GoHP/hpxj/4Ksp
/93Hpf/x3MD/9t/A//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//137//
/ubG/9bCp+MiIiIPAAAAAAAAAAD13r/N/+vK//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/1
38D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/3483/6b5d/9+k
D//hqBz/4agc/+GoHP/hqBr/4agd/9zDl//u28H/9uDB//XfwP/138D/9d/A//XfwP/138D/9d/A
//XfwP/138D/9d/A//XfwP/24MH//+vK/8u4n7IAAAAAAAAAAAAAAADz37+I//LR//XfwP/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/1
38D/9d/A//XfwP/35M//7Md6/96jDf/hqBz/4agc/+GoHP/hqBv/4aYV/9y/hf/r2MH/9+HB//Xf
wP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/34cH//ObG/7WmjmsAAAAAAAAA
AAAAAAD14cMz++bH//fhwv/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//Xfwf/24sn/68Nr/+GmFP/hqBz/4agc/+GoHP/h
qBz/4aUR/9y6cv/o1sL/+OLD//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//Xf
wP/85sb/4c2w9X9uXR4AAAAAAAAAAAAAAAAAAAAA896/yf/tzP/138H/9d/B//Xfwf/138H/9d/B
//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//biy//uyX7/
68Ng/+vCX//hpRP/4KQR/+GnGv/hqBz/4aUP/922YP/g0cX/8Nq9//bfwf/138H/9d/B//Xfwf/1
38H/9d/B//Xfwf/138H/9d/B//Xfwf//78//z72jqgAAAAAAAAAAAAAAAAAAAAAAAAAA9t7BV//x
0P/238H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B
//Xfwf/138H/9d/B//bizP/txXH/68Vn/+vEY//pu1T/5bRA/+GoHf/fow7/4KUR/+KwOf/ewpD/
28ix/+7ZvP/24cL/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//rjxf/y3b7/q5mIOgAAAAAA
AAAAAAAAAAAAAAAAAAAAqqqqA/TewdL/7s3/9N/B//Xgwf/14MH/9eDB//Xgwf/14MH/9eDB//Xg
wf/14MH/9eDB//Xgwf/14MH/9eDB//Xgwf/14MH/9eDB//XhxP/03r3/7cZx/+7Kfv/248z/9uLH
//LYqv/tyoH/5rM7/+zEYv/rv1P/3L+G/+zawv/34sL/9eDB//Xgwf/14MH/9eDB//Xgwf/14MH/
9d/B///y0f/VwqmyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPfhw0T/7s7/9+LE//Xgwv/1
4ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xg
wf/14cT/9uPN//bjzP/14MP/9eDD//biyf/46Nr/7sl8/+vFZ//rwVn/68qI//Xiy//14ML/9eDC
//Xgwv/14ML/9eDC//Xgwv/14ML//OjJ/+7bvfmsn4woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAADz3cCe//XU//Xfwf/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/1
4ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14cT/9d+9/+3G
cf/uyn//9uHE//Xhw//14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/24cP///LS/9bCqXcAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADp1L8M9uLF2P/v0P/038L/9eDD//Xgw//14MP/
9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgw//14ML/9eHF//bjzv/2483/9eDE//Xgwv/14MP/9eDD//Xgw//14MP/9eDD//Xf
wv//9NT/59K2uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8trC
KvnmyPD/7M3/9N/C//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/
9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgw//14MP/9N/C///x0v/z38LYxribEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLavj/76sr1/+zN//Xgwv/24cP/9uHD//bhw//24cP/9uHD
//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/
9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//14ML///HR//jmx+HhyrQiAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz279A++nL7v/w
0f/24MP/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE
//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP//9NX/
+ebI2fDUuCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA89y6LfvoydP/9tb/+ePG//Xgw//24cT/9uHE//bhxP/24cT/9uHE//bh
xP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE
//bhxP/14MP/++bI///21v/55sm559C5FgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANrItg7658qa/+7P///v0P/2
4cX/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bh
xP/24cT/9uHE//bhxP/24cT/9uHE//jixf//8tP/+ujL+/fjx4AAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA+OPHSfvoy8r/8tT//+/R//jjx//24cX/9uHF//bhxf/24cX/9uHF//bhxf/2
4cX/9uHF//bhxf/24cX/9uHF//bhxf/24cX/9uHF//bhxf/65Mj///HT///u0P/66Mu39eHDMwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAAAAA89i2LvnivvL/5sL/89q3//PbuP/z27j/89u4//PbuP/z27j/89q4//TcvP/13Lv/
9Nu4//PauP/z27j/89u4//PbuP/z27j/89u4//PauP/027j/9dy5//vivv/YwqPtem9aMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAP7rxA323rvc/+nF//Pat//027j/9Nu4//TbuP/027j/9Nu4//Tb
uP/13bz/7tGk/+HJpf/x2bj/9t26//Tbuf/13Lr/9ty6//TbuP/027j/9Nu4//TbuP/027j/9dy5
//3jv//MuJvUHx8fEAAAAAAAAAAAAAAAAAAAAAAAAAAA89i2mP/wy//z2rj/9Nu5//Tbuf/027n/
9Nu5//Tbuf/027n/9t7C//TYrP/sxGP/4b5y/+LOuv/w2sD/9NzA/+3WuP/r1Lb/9Nu4//Tbuf/0
27n/9Nu5//Tbuf/027n/9ty6//vhvv+0ooqQAAAAAAAAAAAAAAAAAAAAAPPdvC754sD/9968//Tb
uf/027r/9Nu6//Tbuf/03L3/9t2+//fgx//u17j/3LVh/+O1Q//lszf/3bFM/9y8ff/jxIn/58Bo
/9zBkf/x2rz/9dy6//Tbuv/027r/9Nu6//Tbuv/13Lr/+eC9/93GqPl5bl4uAAAAAAAAAAAAAAAA
8tu5pf/uyv/z27n/9Ny6//Tcuv/03Lr/9N27//DXr//lzav/3759/8+fLP/LlQ//zpkV/9+mGP/i
phH/4KUR/+OuKv/sw1//68mH//Tewv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/23rv//eXC/7yo
kJoAAAAAAAAAAPPcuRb13Lz0+uG///Tcu//03Lv/9Ny7//TcvP/03b7/675Y/9WkLP/KlA//zZgT
/86aG//MmBX/3aQY/+KpHf/hqBv/4aYS/96wRv/s1rz/9t69//Tcu//03Lv/9Ny7//Tcu//03Lv/
9Ny7//Xcu//74sD/1L6i60U5LhYAAAAA89y6Wf/tyf/03Lv/9Ny7//Tcu//03Lv/9Ny7//Xewf/v
0Zn/0Jsa/82YF//Omhr/zJUN/8+eJf/fqyz/4agZ/+GoHP/hphP/3a4//+fSuf/23r3/9Ny7//Tc
u//03Lv/9Ny7//Tcu//03Lv/9Ny7//ffvf/v17j/not5UgAAAADz27qW/+/L//TdvP/03bz/9N28
//TdvP/03bz/9N29//Tfwv/TpDb/zZcR/82ZGf/YsFf/89u6/+rBZv/fpA//4agc/+GnF//eqi3/
5M2t//Xfv//03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9t69//7mxP+8qZCKAAAAAPTdu77/
6sj/9N28//TdvP/03bz/9N28//TdvP/03b//9d26/92uPP/CiwD/vY4b/97Ksf/149H/7cd4/9+k
D//hqBz/4acZ/9+oIP/hyJ//9N/B//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/13r3//+jG
/8m2m7EAAAAA8ty81P/nxf/03b3/9N29//Tdvf/03b3/9N29//Tewv/y1qf/675X/9m2bP/SojD/
37hi/+3byP/wz5D/4KUT/+GoHP/hqBv/4KYX/9/Cjv/y3cT/9N29//Tdvf/03b3/9N29//Tdvf/0
3b3/9N29//Xdvf//6Mb/0Lyhx///fwL03r3a/ubF//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Te
vv/13sH/+eXQ//TWof/wzYf/9uHJ//HUo//hqBv/4aca/+GoHP/hpRL/3r16//Hdxf/13r7/9N29
//Tdvf/03b3/9N29//Tdvf/03b3/9N29///ox//Uv6TOAAAAAPXevtX/6Mb/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//Xev//13r3/9uDE//bhxv/138L/89qz/+KsJ//gphj/4agc/+GlEP/e
uGX/7tvF//bfv//13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7//+rI/9TApMgAAAAA9N6+wv/r
yv/13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///XewP/13sD/5LE4
/+ClFP/hqBz/4aUR/96yUf/r2ML/9+DA//Xev//13r//9d6///Xev//13r//9d6///Xev///7Mv/
0r6jsgAAAADz3r+c//DO//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///bhyf/nuEz/4KQR/+GoHP/hphP/3q4+/+jUu//34MH/9d6///Xev//13r//9d6///Xe
v//13r//9t/A///ty//Jt52LAAAAAPTfv2H/8c//9d+///XfwP/138D/9d/A//XfwP/138D/9d/A
//XfwP/138D/9d/A//XfwP/137//9+PN/+rAZf/fpA7/4agc/+GnFv/fqy3/5dCx//bhw//138D/
9d/A//XfwP/138D/9d/A//XfwP/34cH/++XF/7amjVEAAAAA9eO/HPfgwfn648P/9d/A//XfwP/1
38D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/35M//68Vy/9+jDf/hqBz/4acZ/9+o
IP/iyqP/9+LG//XfwP/138D/9d/A//XfwP/138D/9d/A//3nx//k0LPvcXFUEgAAAAAAAAAA896/
sv/w0P/03sD/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9uDH//LXp//rw2T/
5bEz/9+iDP/fpA7/4KUS/97CkP/t2sf/9d/A//Xfwf/138H/9d/B//Xfwf/03sD///LR/9jCqJ0A
AAAAAAAAAAAAAAD24MI7/uzM//fhw//138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xf
wf/14cX/89qv/+zFa//uzIP/7syI/+e6Uv/jrSn/5bxb/93Fmf/y3sT/9uDC//Xfwf/138H/9d/B
//rlxv/x3b/9vKmRKgAAAAAAAAAAAAAAAAAAAAD03sCr//TU//Tfwf/14ML/9eDC//Xgwv/14ML/
9eDC//Xgwv/14ML/9eDC//Xgwf/14cX/9d/A//Xhxv/25M//9+bV/+/Oif/rv1P/7MyL//Xiy//1
4ML/9eDC//Xgwv/138H///XU/97Kr5MAAAAAAAAAAAAAAAAAAAAAAAAAAPTfvxj45Mfq/+vM//Tf
wv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14MT/9eDD//Xgwv/14MT/9N+/
//HVof/24ML/9eDD//Xgwv/14ML/9N/B///w0P/v277aqpR/DAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAPPfwEH66cv9/enK//Tfwv/14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgwv/14cX/9uLK//XgxP/14MP/9eDD//Tfwv//7M3/+OXI8uLLtS0AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLdv1T76sz8/+3O//Xgw//24cP/9uHD//bhw//24cP/9uHD
//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//14MP///DQ//rpy/Lq1ro/
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPdv0T76Mvm//XW//jjxv/1
4MT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/14MP/+eTH///3
1//76MvY79u8MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AOzZvBv66Mun/+zP///y1P/75cj/9uHF//bhxf/24cX/9uHF//bhxf/24cX/9uHF//bhxf/24cX/
/ObJ///01f/76Mv/+efIl+7Muw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD348dA/OrMrPjmyfb/9NX///TV///v0f//7M7//+vN///s
zv//79H///TV///z1P/558nw+ujLovXhyTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/u7NH/npzGD558mZ
+OXJv/fkx9P24sba9+TH0vnlyLz55smU/OrNWP/pyRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+qqgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/4AP//4AA//4AAD/8AAAf+AAAD/AAAAfgAAAD
4AAAA8AAAAHAAAABgAAAAIAAAACAAAAAgAAAAIAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAIAAAADA
AAABwAAAAeAAAAPgAAAD8AAAB/gAAA/8AAAf/gAAP/+AAP//4AP///9//ygAAAAYAAAAMAAAAAEA
IAAAAAAAYAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ANO+nkfhyaiU48qpyeLLqePiyqjq4Mem4trDo8jRu5yTs6GIRwAAAAEAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfyKVQ7tezzf3jvf//68T//+bB//3jvf/8
4b3//eO+///mwP//6ML/8tm1/9rEo8mtnIJOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAVVVVA+7WtZj/58L//+jC//TbuP/z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/9t25
///nwf/v17T/xLGUlAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//6oD89u5s//xy//23Ln/
89q3//Pat//z2rf/89q4//Xcuv/027j/89q3//Pat//z2rf/89q3//PauP/537z//+bB/8e0lq4A
AAAFAAAAAAAAAAAAAAAAAAAAAAAAAADz2bed//LM//TbuP/027j/9Nu4//TbuP/027j/9Nu4/+vS
r//y2rr/9ty5//Xcuv/13Lr/9Nu4//TbuP/027j/9967///nwv+9qI2XAAAAAAAAAAAAAAAAAAAA
APXcuVH/7cj/9ty6//Tbuf/027n/9Nu5//Xcu//34cr/8dGT/+S+Z//jy6v/8NvE/+/Ws//r07L/
9Nu5//Tbuf/027n/9Nu5//rgvf/x2bf/opF6TQAAAAAAAAAA///MBfTaudv+58T/89u5//Tbuf/0
3Lr/8tzC//Hbv//iwob/1aY2/+KsKf/frDL/3rVb/+fAZf/kxov/89zA//Tbuv/027r/9Nu6//Tc
uv//6cX/z7qf0gAAAAUAAAAA9du7T//syf/03Lr/9Ny6//TcvP/127X/5r9q/9GlP//Llg//yZQP
/9adEf/jqBb/4aQM/+KxOP/t0qb/9d7A//Tcuv/03Lr/9Ny6//Tcuv/4373/89q5/6CPekkAAAAA
9Nu6pP/tyv/z3Lv/9Ny7//TcvP/238L/47pg/8qTB//OmRX/zZoc/9uqNP/iqBr/4acX/92oKf/n
0LH/9t6///Tcu//03Lv/9Ny7//Tcu//03bz//+rI/8ezmpj///8B9Ny81/7nxP/03bz/9N28//Td
vP/24cf/68yW/8qSBf/Hlh//5s2j//HSlv/gpRP/4acZ/9+nHf/ly57/9eDC//TdvP/03bz/9N28
//TdvP/03bz//+nG/9XBpcz/378Q89y87/riwf/03bz/9N28//TdvP/138b/8M6H/9WnOP/Imy//
5cyk//HWqf/hqBz/4acZ/+ClFf/ixIz/9N/F//TdvP/03bz/9N28//TdvP/03bz//ubE/93Iq+X0
4MEZ89y89vniwf/03b3/9N29//Tdvf/03b7/9Nu3//bgxP/y05j/8dOe//Pbuf/irCj/4KYX/+Cl
Ef/gvnf/89/H//Xdvf/03b3/9N29//Tdvf/03b3//eXE/+HMr+zw4rgS9d6+8Pvjw//13r7/9d6+
//Xevv/13r7/9d7A//Xev//24MX/9uDF//XewP/ksjn/4KUU/+GlEP/fuGL/8t7I//bfv//13r7/
9d6+//Xevv/13r7//+fG/+LNr+b///8C9d6/2v7nx//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///bhyf/nuE3/4KQR/+GlEf/esk3/79vE//bfwP/13r//9d6///Xev//13r///+vK/9/K
rs0AAAAA9t/Aqv/wzv/13r//9d+///Xfv//137//9d+///Xfv//137//9d+///fkzv/qwWf/3qMN
/+GmFP/erTr/7Ni9//fhwv/137//9d+///Xfv//03r////HP/9jFqJoAAAAA9t+/Wf/x0P/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/B//bhxv/rxG3/36MM/+CjDf/eqSf/6NO2//fixf/1
38D/9d/A//XfwP/34ML//ujJ/8a0m0gAAAAA5eXMCvTewOX96cr/9N/B//Xfwf/138H/9d/B//Xf
wf/138H/9eDE//Tbtv/sxWr/6sBh/+WzPf/iqiL/4MGC/+3Zvv/24cP/9d/B//Tfwf//7s7/59G2
1j8/PwQAAAAAAAAAAPTfwmH/9dT/9uDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgw//03Lf/
9uLI//bjzf/vzYX/6sFj//Dbuv/14cT/9eDC//jixP//787/2sasTQAAAAAAAAAAAAAAAAAAAAD0
38Kw//bW//Xfwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14cb/9eDD//Xhxf/14ML/9N25//bh
xf/04ML/9eDC///41//r1bmbAAAAAAAAAAAAAAAAAAAAAAAAAADp1L8M+OXHxv/31//34cT/9eDD
//bhw//24cP/9uHD//bhw//24cP/9uHD//Xgw//24cX/9uHG//Xgw//44sT///jY//Xhw7SqqqoD
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6dS/DPnlyK3/9db//+vN//bhxP/24cT/9uHE//bhxP/2
4cT/9uHE//bhxP/24cT/9uHE///tz///89T/+OTHnL+/fwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAD55clk++nM3f/z1f//8tT//+rN//znyf/75sn//OfK///rzf//89T///LU
//vpzNT24cdXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
5cyyCvzqy1n66Mun9+XI2Pbjxu/24sX19+TH7fjlyNT66Mqh+OnKUsyZmQUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDi
xhL/6ckY/+/PEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AD8A/AAf
APAABwDgAAMA4AADAMAAAQCAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAA
gAAAAMAAAQDgAAMA4AADAPAABwD8AB8A/gA/AP/j/wAoAAAAEAAAACAAAAABACAAAAAAAEAEAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMitkRzq1LGK7tWz2e7Vsvrw17T/69Ow+ufO
rNnYwqKKg3tgHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOnQr1P337vr/+/I//7kv//43rv/9926
//jeu///5cD//+zG/+nRr+u0oodVAAAAAAAAAAAAAAAAAAAAAPLZtlH+58L//uXA//PZt//027n/
8tq7//PbvP/13Lz/9Ny6//Pat///58L/8dq3/7Kih1MAAAAAAAAAAPXZvBv337zy/eTB//Pauf/2
38T/9d2//+nEdf/lyJX/79az/+3TrP/027r/89q4///nw//kzazxiH9tHAAAAAD03buQ//HM//Pb
u//02rT/58iM/9WqSP/TmxD/36cc/+GwOv/qzJP/9N7B//Tbuv/027r//+/K/8y4nI7+2rYH89y6
4/zkwv/03b7/9dy5/9WkMP/IkQf/16g4/+KpHP/fpBP/6cyc//bfw//03Lv/89y7//7nxf/hyqzf
8ti4KPXevf/2377/89y8//bhxv/dsk//yZos/+3Vsf/kry//36MN/+XFiP/14Mf/9N28//TdvP/5
4sD/6dO0/fXevjf85MP/9t++//Tdvf/03bz/89mw/+3Pl//y2rX/5bM//9+hB//jv3L/9ODJ//Td
vf/03b3/+OHA//Lbu//438Ap9+DA//jgwP/13r7/9d6+//Xfwv/24cf/9uLL/+e5Uf/foQT/4bhc
//Tgyf/13r7/9d6+//riwv/t17j94sapCfPdvub95sb/9d6///Xev//13r//9d6///fjzv/qwWj/
3p8A/+CyR//y38j/9t/A//Xev//+6cn/6tS23wAAAAD03sCX//TT//TewP/138D/9d/A//Xfwf/1
4cb/7MVw/+KqIP/fqiz/6tOx//bgxP/03sD///XT/+XPtI0AAAAA99+/IPfkxvf86Mn/9N/B//Xg
wv/14ML/9N/B//PbtP/03r3/7sp//+zOlP/04cf//urL//TgwvHNuqYaAAAAAAAAAADx2r9c//HS
//3pyv/038L/9eDD//Xgw//14cb/9uLH//biyP/14MP//+rL///tzv/s1rlRAAAAAAAAAAAAAAAA
AAAAAPTewF776czy//bW///py//548b/+OLF//njxv//6sz///fX//vqzO3y3cJUAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA8Nq9I/vqzZT658rg9+TH/v3pzP/348f++ufL3fvpy4/u1LseAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/9+/CP/rzCj68NI0/vHQJv//1AYAAAAAAAAA
AAAAAAAAAAAAAAAAAPAHAADgAwAAwAEAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
gAAAAMABAADgAwAA8AcAAPwfAAAL'))
	#endregion
	$notifyicon1.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$notifyicon1.Text = 'LNK & Jumplist Browser'
	$notifyicon1.Visible = $True
	#
	# contextmenustrip3
	#
	$contextmenustrip3.ImageScalingSize = New-Object System.Drawing.Size(32, 32)
	[void]$contextmenustrip3.Items.Add($toolstrip3_About)
	[void]$contextmenustrip3.Items.Add($toolstripseparator12)
	[void]$contextmenustrip3.Items.Add($toolstrip3_GitHub)
	[void]$contextmenustrip3.Items.Add($toolstripseparator13)
	[void]$contextmenustrip3.Items.Add($toolstrip3_Exit)
	$contextmenustrip3.Name = 'contextmenustrip3'
	$contextmenustrip3.Size = New-Object System.Drawing.Size(192, 130)
	#
	# toolstrip3_About
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAA8gIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAIAAAACAIBgAAAHN6evQAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABnVAAAZ1QG1
aOuAAAAClElEQVRYR+2WzWsTQRjGN35dtGY3UYofiAiCH+BJEfwnBKG32ppZE7EIghTUg8aLHgQt
4qXe9KBoEEVMdmIiVBFEUFAPHkQUevDgRRCpWqkd3+m+0NndZzbZkh4Ef/CwsO+87zMzO7Mzzr9L
5dXytSMTq5yB2gp+s7isKct1rpDHSQ3XDz57fjDr+VLNPUXwxRVBi54n88NyM6f0Bq/S3uQJeZ2K
/w4NO2qGOni3WGlu4xILxxONMo3sOzDpLCF/0eycchyV43JZUDka8VVYOKPok93W64ULdwcljsUL
xbV/7LU6c29SDV97B+OmaBZvdT0TbqkxhIqY2nfuuTIZHO/cCb1A2cJOUbTWu778BgsYOnDlDVuH
jN75CNvFNF0oBTvYCkNTNQ4SE9o40lbvv4bmk1NKbR99CtslFTxgqyR9B9tF2j4/cWKPJOSfvkOt
rWwZRW85mNSF+o804XskGuRZtoxC376GEmwyQXGbyOcZW0ahVfoBJdhkguI26R8bW0bJ+v1NUDxN
+aN1j22ZanUJapgmExRPU2Ho4QZ2nocC0/GGaTJB8TTpHce289Aa+IQa22SC4jbR2TAFf8sUvB9v
nCYTFLeJdsELtozi+s1jKMEmExS3KzjPllH0jSfDpYOtQ1AcK5il3baLLZNQoxvJJCwTFLfoMVth
8qX6FvpGP0BiQiYoDjRTLAd72MoOHRgnQHJCJigeF039RbboDP0ub6IiCxXVaznViWVcvgvoDqfv
cqhYVtHI2/2Dj1Zy5SyoHK2H01l2RkR09tMgLme+kMbxDsudNIq63kLQCOtJoVTfyyV6g+4IzcYF
Kv4yvPMbhnqWhHxLHb20WjR2c8oiMlBbqi+w+no1d7JlWmD/MXGcv6U8dwaagS5xAAAAAElFTkSu
QmCCCw=='))
	#endregion
	$toolstrip3_About.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$toolstrip3_About.Name = 'toolstrip3_About'
	$toolstrip3_About.Size = New-Object System.Drawing.Size(191, 38)
	$toolstrip3_About.Text = 'About'
	$toolstrip3_About.add_Click($toolstrip3_About_Click)
	#
	# toolstrip3_Exit
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAzwEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAIAAAACAIBgAAAHN6evQAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABnVAAAZ1QG1
aOuAAAABcUlEQVRYR+2WMU7DQBBFHVGDIBUHILREQEPPQSk4QBDU0HIFLDmiQDQIaKCBYthx/qK1
/b9jFEcuyJNek92ZP4k3yWYbNjAeJtl5fjC6D37lk5GtpPcIvbwn2reD8G/abBVDz05D+LS0QR+G
3ojRrOXdR8PjQIyGFvYoYjSsKFocbdPXU5ftQYyGFbnzk7HZy5PZzSVdd212Yfb6bPPTMV13EaNh
RcV0ZxEeIUOU4ZEwRDHdbexxEaNhRfnhltntDN1BMkQl3Lm7LmsqPSBiNKyoVAzxl3AXMRpW9Csb
ImVJuIsYDSuqqIboEO4iRsOK6tpV7WN3Wr4dqYjRsKLUxjNP6TAEYjSsKMoOXNu3g4kYDSty5Wln
Z6JlCMRoWJH/qNjHG7oH6geuPsTnuxXHe5UeUcRoWJH7eLa/GEKd9jhECPe9jXWIGA0rivr/AQ2P
hrVyD1uDiNGwoj5FjGb4C8nQV7LBL6UOhhjmWr7hn5FlP2yGEjmU89+wAAAAAElFTkSuQmCCCw=='))
	#endregion
	$toolstrip3_Exit.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$toolstrip3_Exit.Name = 'toolstrip3_Exit'
	$toolstrip3_Exit.Size = New-Object System.Drawing.Size(191, 38)
	$toolstrip3_Exit.Text = 'Exit'
	$toolstrip3_Exit.add_Click($toolstrip3_Exit_Click)
	#
	# toolstripseparator12
	#
	$toolstripseparator12.Name = 'toolstripseparator12'
	$toolstripseparator12.Size = New-Object System.Drawing.Size(188, 6)
	#
	# toolstripseparator13
	#
	$toolstripseparator13.Name = 'toolstripseparator13'
	$toolstripseparator13.Size = New-Object System.Drawing.Size(188, 6)
	#
	# toolstrip3_GitHub
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
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
rfK+AAAAAElFTkSuQmCCCw=='))
	#endregion
	$toolstrip3_GitHub.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$toolstrip3_GitHub.Name = 'toolstrip3_GitHub'
	$toolstrip3_GitHub.Size = New-Object System.Drawing.Size(191, 38)
	$toolstrip3_GitHub.Text = 'Visit Github'
	$toolstrip3_GitHub.add_Click($toolstrip3_GitHub_Click)
	#
	# TreeSearch
	#
	$TreeSearch.Alignment = 'Right'
	$TreeSearch.BackColor = [System.Drawing.Color]::Honeydew 
	$TreeSearch.BorderStyle = 'FixedSingle'
	$TreeSearch.Font = [System.Drawing.Font]::new('Consolas', '9')
	$TreeSearch.Margin = '1, 0, 50, 0'
	$TreeSearch.MaxLength = 50
	$TreeSearch.Name = 'TreeSearch'
	$TreeSearch.Size = New-Object System.Drawing.Size(400, 29)
	$TreeSearch.Text = 'Search'
	$TreeSearch.ToolTipText = 'Type Text and press ENTER to search
or click to clear'
	$TreeSearch.Visible = $False
	$TreeSearch.add_KeyDown($TreeSearch_KeyDown)
	$TreeSearch.add_KeyPress($TreeSearch_KeyPress)
	$TreeSearch.add_Click($TreeSearch_Click)
	#
	# Tree1Search
	#
	$Tree1Search.AutoCompleteMode = 'Suggest'
	$Tree1Search.BackColor = [System.Drawing.Color]::PapayaWhip 
	$Tree1Search.FlatStyle = 'Standard'
	$Tree1Search.Margin = '10, 0, 1, 0'
	$Tree1Search.Name = 'Tree1Search'
	$Tree1Search.Size = New-Object System.Drawing.Size(364, 33)
	$Tree1Search.Text = 'Select Jumplist by App Name'
	$Tree1Search.Visible = $False
	$Tree1Search.add_SelectedIndexChanged($Tree1Search_SelectedIndexChanged)
	$contextmenustrip3.ResumeLayout()
	$contextmenustrip2.ResumeLayout()
	$contextmenustrip1.ResumeLayout()
	$statusstrip1.ResumeLayout()
	$menustrip1.ResumeLayout()
	$splitcontainer1.ResumeLayout()
	$Jumplist_Browser.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Jumplist_Browser.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Jumplist_Browser.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Jumplist_Browser.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$Jumplist_Browser.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $Jumplist_Browser.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)

# SIG # Begin signature block
# MIIviAYJKoZIhvcNAQcCoIIveTCCL3UCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCDDyXimIuKRqsjs
# 7qzSd0uzacC4dJB/OYn2AGMUS7zRaKCCKI0wggQyMIIDGqADAgECAgEBMA0GCSqG
# SIb3DQEBBQUAMHsxCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNo
# ZXN0ZXIxEDAOBgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1p
# dGVkMSEwHwYDVQQDDBhBQUEgQ2VydGlmaWNhdGUgU2VydmljZXMwHhcNMDQwMTAx
# MDAwMDAwWhcNMjgxMjMxMjM1OTU5WjB7MQswCQYDVQQGEwJHQjEbMBkGA1UECAwS
# R3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRowGAYDVQQKDBFD
# b21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmljYXRlIFNlcnZp
# Y2VzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvkCd9G7h6naHHE1F
# RI6+RsiDBp3BKv4YH47kAvrzq11QihYxC5oG0MVwIs1JLVRjzLZuaEYLU+rLTCTA
# vHJO6vEVrvRUmhIKw3qyM2Di2olV8yJY897cz++DhqKMlE+faPKYkEaEJ8d2v+PM
# NSyLXgdkZYLASLCokflhn3YgUKiRx2a163hiA1bwihoT6jGjHqCZ/Tj29icyWG8H
# 9Wu4+xQrr7eqzNZjX3OM2gWZqDioyxd4NlGs6Z70eDqNzw/ZQuKYDKsvnw4B3u+f
# mUnxLd+sdE0bmLVHxeUp0fmQGMdinL6DxyZ7Poolx8DdneY1aBAgnY/Y3tLDhJwN
# XugvyQIDAQABo4HAMIG9MB0GA1UdDgQWBBSgEQojPpbxB+zirynvgqV/0DCktDAO
# BgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zB7BgNVHR8EdDByMDigNqA0
# hjJodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2Vz
# LmNybDA2oDSgMoYwaHR0cDovL2NybC5jb21vZG8ubmV0L0FBQUNlcnRpZmljYXRl
# U2VydmljZXMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQAIVvwC8Jvo/6T61nvGRIDO
# T8TF9gBYzKa2vBRJaAR26ObuXewCD2DWjVAYTyZOAePmsKXuv7x0VEG//fwSuMdP
# WvSJYAV/YLcFSvP28cK/xLl0hrYtfWvM0vNG3S/G4GrDwzQDLH2W3VrCDqcKmcEF
# i6sML/NcOs9sN1UJh95TQGxY7/y2q2VuBPYb3DzgWhXGntnxWUgwIWUDbOzpIXPs
# mwOh4DetoBUYj/q6As6nLKkQEyzU5QgmqyKXYPiQXnTUoppTvfKpaOCibsLXbLGj
# D56/62jnVvKu8uMrODoJgbVrhde+Le0/GreyY+L1YiyC1GoAQVDxOYOflek2lphu
# MIIFbzCCBFegAwIBAgIQSPyTtGBVlI02p8mKidaUFjANBgkqhkiG9w0BAQwFADB7
# MQswCQYDVQQGEwJHQjEbMBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYD
# VQQHDAdTYWxmb3JkMRowGAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UE
# AwwYQUFBIENlcnRpZmljYXRlIFNlcnZpY2VzMB4XDTIxMDUyNTAwMDAwMFoXDTI4
# MTIzMTIzNTk1OVowVjELMAkGA1UEBhMCR0IxGDAWBgNVBAoTD1NlY3RpZ28gTGlt
# aXRlZDEtMCsGA1UEAxMkU2VjdGlnbyBQdWJsaWMgQ29kZSBTaWduaW5nIFJvb3Qg
# UjQ2MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAjeeUEiIEJHQu/xYj
# ApKKtq42haxH1CORKz7cfeIxoFFvrISR41KKteKW3tCHYySJiv/vEpM7fbu2ir29
# BX8nm2tl06UMabG8STma8W1uquSggyfamg0rUOlLW7O4ZDakfko9qXGrYbNzszwL
# DO/bM1flvjQ345cbXf0fEj2CA3bm+z9m0pQxafptszSswXp43JJQ8mTHqi0Eq8Nq
# 6uAvp6fcbtfo/9ohq0C/ue4NnsbZnpnvxt4fqQx2sycgoda6/YDnAdLv64IplXCN
# /7sVz/7RDzaiLk8ykHRGa0c1E3cFM09jLrgt4b9lpwRrGNhx+swI8m2JmRCxrds+
# LOSqGLDGBwF1Z95t6WNjHjZ/aYm+qkU+blpfj6Fby50whjDoA7NAxg0POM1nqFOI
# +rgwZfpvx+cdsYN0aT6sxGg7seZnM5q2COCABUhA7vaCZEao9XOwBpXybGWfv1Vb
# HJxXGsd4RnxwqpQbghesh+m2yQ6BHEDWFhcp/FycGCvqRfXvvdVnTyheBe6QTHrn
# xvTQ/PrNPjJGEyA2igTqt6oHRpwNkzoJZplYXCmjuQymMDg80EY2NXycuu7D1fkK
# dvp+BRtAypI16dV60bV/AK6pkKrFfwGcELEW/MxuGNxvYv6mUKe4e7idFT/+IAx1
# yCJaE5UZkADpGtXChvHjjuxf9OUCAwEAAaOCARIwggEOMB8GA1UdIwQYMBaAFKAR
# CiM+lvEH7OKvKe+CpX/QMKS0MB0GA1UdDgQWBBQy65Ka/zWWSC8oQEJwIDaRXBeF
# 5jAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zATBgNVHSUEDDAKBggr
# BgEFBQcDAzAbBgNVHSAEFDASMAYGBFUdIAAwCAYGZ4EMAQQBMEMGA1UdHwQ8MDow
# OKA2oDSGMmh0dHA6Ly9jcmwuY29tb2RvY2EuY29tL0FBQUNlcnRpZmljYXRlU2Vy
# dmljZXMuY3JsMDQGCCsGAQUFBwEBBCgwJjAkBggrBgEFBQcwAYYYaHR0cDovL29j
# c3AuY29tb2RvY2EuY29tMA0GCSqGSIb3DQEBDAUAA4IBAQASv6Hvi3SamES4aUa1
# qyQKDKSKZ7g6gb9Fin1SB6iNH04hhTmja14tIIa/ELiueTtTzbT72ES+BtlcY2fU
# QBaHRIZyKtYyFfUSg8L54V0RQGf2QidyxSPiAjgaTCDi2wH3zUZPJqJ8ZsBRNraJ
# AlTH/Fj7bADu/pimLpWhDFMpH2/YGaZPnvesCepdgsaLr4CnvYFIUoQx2jLsFeSm
# TD1sOXPUC4U5IOCFGmjhp0g4qdE2JXfBjRkWxYhMZn0vY86Y6GnfrDyoXZ3JHFuu
# 2PMvdM+4fvbXg50RlmKarkUT2n/cR/vfw1Kf5gZV6Z2M8jpiUbzsJA8p1FiAhORF
# e1rYMIIFgzCCA2ugAwIBAgIORea7A4Mzw4VlSOb/RVEwDQYJKoZIhvcNAQEMBQAw
# TDEgMB4GA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjYxEzARBgNVBAoTCkds
# b2JhbFNpZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMTQxMjEwMDAwMDAwWhcN
# MzQxMjEwMDAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBS
# NjETMBEGA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCAiIw
# DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJUH6HPKZvnsFMp7PPcNCPG0RQss
# grRIxutbPK6DuEGSMxSkb3/pKszGsIhrxbaJ0cay/xTOURQh7ErdG1rG1ofuTToV
# Bu1kZguSgMpE3nOUTvOniX9PeGMIyBJQbUJmL025eShNUhqKGoC3GYEOfsSKvGRM
# IRxDaNc9PIrFsmbVkJq3MQbFvuJtMgamHvm566qjuL++gmNQ0PAYid/kD3n16qIf
# KtJwLnvnvJO7bVPiSHyMEAc4/2ayd2F+4OqMPKq0pPbzlUoSB239jLKJz9CgYXfI
# WHSw1CM69106yqLbnQneXUQtkPGBzVeS+n68UARjNN9rkxi+azayOeSsJDa38O+2
# HBNXk7besvjihbdzorg1qkXy4J02oW9UivFyVm4uiMVRQkQVlO6jxTiWm05OWgtH
# 8wY2SXcwvHE35absIQh1/OZhFj931dmRl4QKbNQCTXTAFO39OfuD8l4UoQSwC+n+
# 7o/hbguyCLNhZglqsQY6ZZZZwPA1/cnaKI0aEYdwgQqomnUdnjqGBQCe24DWJfnc
# BZ4nWUx2OVvq+aWh2IMP0f/fMBH5hc8zSPXKbWQULHpYT9NLCEnFlWQaYw55PfWz
# jMpYrZxCRXluDocZXFSxZba/jJvcE+kNb7gu3GduyYsRtYQUigAZcIN5kZeR1Bon
# vzceMgfYFGM8KEyvAgMBAAGjYzBhMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
# BTADAQH/MB0GA1UdDgQWBBSubAWjkxPioufi1xzWx/B/yGdToDAfBgNVHSMEGDAW
# gBSubAWjkxPioufi1xzWx/B/yGdToDANBgkqhkiG9w0BAQwFAAOCAgEAgyXt6NH9
# lVLNnsAEoJFp5lzQhN7craJP6Ed41mWYqVuoPId8AorRbrcWc+ZfwFSY1XS+wc3i
# EZGtIxg93eFyRJa0lV7Ae46ZeBZDE1ZXs6KzO7V33EByrKPrmzU+sQghoefEQzd5
# Mr6155wsTLxDKZmOMNOsIeDjHfrYBzN2VAAiKrlNIC5waNrlU/yDXNOd8v9EDERm
# 8tLjvUYAGm0CuiVdjaExUd1URhxN25mW7xocBFymFe944Hn+Xds+qkxV/ZoVqW/h
# pvvfcDDpw+5CRu3CkwWJ+n1jez/QcYF8AOiYrg54NMMl+68KnyBr3TsTjxKM4kEa
# SHpzoHdpx7Zcf4LIHv5YGygrqGytXm3ABdJ7t+uA/iU3/gKbaKxCXcPu9czc8FB1
# 0jZpnOZ7BN9uBmm23goJSFmH63sUYHpkqmlD75HHTOwY3WzvUy2MmeFe8nI+z1TI
# vWfspA9MRf/TuTAjB0yPEL+GltmZWrSZVxykzLsViVO6LAUP5MSeGbEYNNVMnbrt
# 9x+vJJUEeKgDu+6B5dpffItKoZB0JaezPkvILFa9x8jvOOJckvB595yEunQtYQEg
# fn7R8k8HWV+LLUNS60YMlOH1Zkd5d9VUWx+tJDfLRVpOoERIyNiwmcUVhAn21klJ
# wGW45hpxbqCo8YLoRT5s1gLXCmeDBVrJpBAwggYaMIIEAqADAgECAhBiHW0MUgGe
# O5B5FSCJIRwKMA0GCSqGSIb3DQEBDAUAMFYxCzAJBgNVBAYTAkdCMRgwFgYDVQQK
# Ew9TZWN0aWdvIExpbWl0ZWQxLTArBgNVBAMTJFNlY3RpZ28gUHVibGljIENvZGUg
# U2lnbmluZyBSb290IFI0NjAeFw0yMTAzMjIwMDAwMDBaFw0zNjAzMjEyMzU5NTla
# MFQxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxKzApBgNV
# BAMTIlNlY3RpZ28gUHVibGljIENvZGUgU2lnbmluZyBDQSBSMzYwggGiMA0GCSqG
# SIb3DQEBAQUAA4IBjwAwggGKAoIBgQCbK51T+jU/jmAGQ2rAz/V/9shTUxjIztNs
# fvxYB5UXeWUzCxEeAEZGbEN4QMgCsJLZUKhWThj/yPqy0iSZhXkZ6Pg2A2NVDgFi
# gOMYzB2OKhdqfWGVoYW3haT29PSTahYkwmMv0b/83nbeECbiMXhSOtbam+/36F09
# fy1tsB8je/RV0mIk8XL/tfCK6cPuYHE215wzrK0h1SWHTxPbPuYkRdkP05ZwmRmT
# nAO5/arnY83jeNzhP06ShdnRqtZlV59+8yv+KIhE5ILMqgOZYAENHNX9SJDm+qxp
# 4VqpB3MV/h53yl41aHU5pledi9lCBbH9JeIkNFICiVHNkRmq4TpxtwfvjsUedyz8
# rNyfQJy/aOs5b4s+ac7IH60B+Ja7TVM+EKv1WuTGwcLmoU3FpOFMbmPj8pz44MPZ
# 1f9+YEQIQty/NQd/2yGgW+ufflcZ/ZE9o1M7a5Jnqf2i2/uMSWymR8r2oQBMdlyh
# 2n5HirY4jKnFH/9gRvd+QOfdRrJZb1sCAwEAAaOCAWQwggFgMB8GA1UdIwQYMBaA
# FDLrkpr/NZZILyhAQnAgNpFcF4XmMB0GA1UdDgQWBBQPKssghyi47G9IritUpimq
# F6TNDDAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADATBgNVHSUE
# DDAKBggrBgEFBQcDAzAbBgNVHSAEFDASMAYGBFUdIAAwCAYGZ4EMAQQBMEsGA1Ud
# HwREMEIwQKA+oDyGOmh0dHA6Ly9jcmwuc2VjdGlnby5jb20vU2VjdGlnb1B1Ymxp
# Y0NvZGVTaWduaW5nUm9vdFI0Ni5jcmwwewYIKwYBBQUHAQEEbzBtMEYGCCsGAQUF
# BzAChjpodHRwOi8vY3J0LnNlY3RpZ28uY29tL1NlY3RpZ29QdWJsaWNDb2RlU2ln
# bmluZ1Jvb3RSNDYucDdjMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5zZWN0aWdv
# LmNvbTANBgkqhkiG9w0BAQwFAAOCAgEABv+C4XdjNm57oRUgmxP/BP6YdURhw1aV
# cdGRP4Wh60BAscjW4HL9hcpkOTz5jUug2oeunbYAowbFC2AKK+cMcXIBD0ZdOaWT
# syNyBBsMLHqafvIhrCymlaS98+QpoBCyKppP0OcxYEdU0hpsaqBBIZOtBajjcw5+
# w/KeFvPYfLF/ldYpmlG+vd0xqlqd099iChnyIMvY5HexjO2AmtsbpVn0OhNcWbWD
# RF/3sBp6fWXhz7DcML4iTAWS+MVXeNLj1lJziVKEoroGs9Mlizg0bUMbOalOhOfC
# ipnx8CaLZeVme5yELg09Jlo8BMe80jO37PU8ejfkP9/uPak7VLwELKxAMcJszkye
# iaerlphwoKx1uHRzNyE6bxuSKcutisqmKL5OTunAvtONEoteSiabkPVSZ2z76mKn
# zAfZxCl/3dq3dUNw4rg3sTCggkHSRqTqlLMS7gjrhTqBmzu1L90Y1KWN/Y5JKdGv
# spbOrTfOXyXvmPL6E52z1NZJ6ctuMFBQZH3pwWvqURR8AgQdULUvrxjUYbHHj95E
# jza63zdrEcxWLDX6xWls/GDnVNueKjWUH3fTv1Y8Wdho698YADR7TNx8X8z2Bev6
# SivBBOHY+uqiirZtg0y9ShQoPzmCcn63Syatatvx157YK9hlcPmVoa1oDE5/L9Uo
# 2bC5a4CH2RwwggZZMIIEQaADAgECAg0B7BySQN79LkBdfEd0MA0GCSqGSIb3DQEB
# DAUAMEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFI2MRMwEQYDVQQK
# EwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTE4MDYyMDAwMDAw
# MFoXDTM0MTIxMDAwMDAwMFowWzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2Jh
# bFNpZ24gbnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENB
# IC0gU0hBMzg0IC0gRzQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDw
# AuIwI/rgG+GadLOvdYNfqUdSx2E6Y3w5I3ltdPwx5HQSGZb6zidiW64HiifuV6PE
# Ne2zNMeswwzrgGZt0ShKwSy7uXDycq6M95laXXauv0SofEEkjo+6xU//NkGrpy39
# eE5DiP6TGRfZ7jHPvIo7bmrEiPDul/bc8xigS5kcDoenJuGIyaDlmeKe9JxMP11b
# 7Lbv0mXPRQtUPbFUUweLmW64VJmKqDGSO/J6ffwOWN+BauGwbB5lgirUIceU/kKW
# O/ELsX9/RpgOhz16ZevRVqkuvftYPbWF+lOZTVt07XJLog2CNxkM0KvqWsHvD9WZ
# uT/0TzXxnA/TNxNS2SU07Zbv+GfqCL6PSXr/kLHU9ykV1/kNXdaHQx50xHAotIB7
# vSqbu4ThDqxvDbm19m1W/oodCT4kDmcmx/yyDaCUsLKUzHvmZ/6mWLLU2EESwVX9
# bpHFu7FMCEue1EIGbxsY1TbqZK7O/fUF5uJm0A4FIayxEQYjGeT7BTRE6giunUln
# EYuC5a1ahqdm/TMDAd6ZJflxbumcXQJMYDzPAo8B/XLukvGnEt5CEk3sqSbldwKs
# DlcMCdFhniaI/MiyTdtk8EWfusE/VKPYdgKVbGqNyiJc9gwE4yn6S7Ac0zd0hNkd
# Zqs0c48efXxeltY9GbCX6oxQkW2vV4Z+EDcdaxoU3wIDAQABo4IBKTCCASUwDgYD
# VR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFOoWxmnn
# 48tXRTkzpPBAvtDDvWWWMB8GA1UdIwQYMBaAFK5sBaOTE+Ki5+LXHNbH8H/IZ1Og
# MD4GCCsGAQUFBwEBBDIwMDAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AyLmdsb2Jh
# bHNpZ24uY29tL3Jvb3RyNjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLmds
# b2JhbHNpZ24uY29tL3Jvb3QtcjYuY3JsMEcGA1UdIARAMD4wPAYEVR0gADA0MDIG
# CCsGAQUFBwIBFiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5
# LzANBgkqhkiG9w0BAQwFAAOCAgEAf+KI2VdnK0JfgacJC7rEuygYVtZMv9sbB3DG
# +wsJrQA6YDMfOcYWaxlASSUIHuSb99akDY8elvKGohfeQb9P4byrze7AI4zGhf5L
# FST5GETsH8KkrNCyz+zCVmUdvX/23oLIt59h07VGSJiXAmd6FpVK22LG0LMCzDRI
# RVXd7OlKn14U7XIQcXZw0g+W8+o3V5SRGK/cjZk4GVjCqaF+om4VJuq0+X8q5+dI
# ZGkv0pqhcvb3JEt0Wn1yhjWzAlcfi5z8u6xM3vreU0yD/RKxtklVT3WdrG9KyC5q
# ucqIwxIwTrIIc59eodaZzul9S5YszBZrGM3kWTeGCSziRdayzW6CdaXajR63Wy+I
# Lj198fKRMAWcznt8oMWsr1EG8BHHHTDFUVZg6HyVPSLj1QokUyeXgPpIiScseeI8
# 5Zse46qEgok+wEr1If5iEO0dMPz2zOpIJ3yLdUJ/a8vzpWuVHwRYNAqJ7YJQ5NF7
# qMnmvkiqK1XZjbclIA4bUaDUY6qD6mxyYUrJ+kPExlfFnbY8sIuwuRwx773vFNgU
# QGwgHcIt6AvGjW2MtnHtUiH+PvafnzkarqzSL3ogsfSsqh3iLRSd+pZqHcY8yvPZ
# HL9TTaRHWXyVxENB+SXiLBB+gfkNlKd98rUJ9dhgckBQlSDUQ0S++qCV5yBZtnjG
# pGqqIpswggZoMIIEUKADAgECAhABSJA9woq8p6EZTQwcV7gpMA0GCSqGSIb3DQEB
# CwUAMFsxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMTEw
# LwYDVQQDEyhHbG9iYWxTaWduIFRpbWVzdGFtcGluZyBDQSAtIFNIQTM4NCAtIEc0
# MB4XDTIyMDQwNjA3NDE1OFoXDTMzMDUwODA3NDE1OFowYzELMAkGA1UEBhMCQkUx
# GTAXBgNVBAoMEEdsb2JhbFNpZ24gbnYtc2ExOTA3BgNVBAMMMEdsb2JhbHNpZ24g
# VFNBIGZvciBNUyBBdXRoZW50aWNvZGUgQWR2YW5jZWQgLSBHNDCCAaIwDQYJKoZI
# hvcNAQEBBQADggGPADCCAYoCggGBAMLJ3AO2G1D6Kg3onKQh2yinHfWAtRJ0I/5e
# L8MaXZayIBkZUF92IyY1xiHslO+1ojrFkIGbIe8LJ6TjF2Q72pPUVi8811j5bazA
# L5B4I0nA+MGPcBPUa98miFp2e0j34aSm7wsa8yVUD4CeIxISE9Gw9wLjKw3/QD4A
# QkPeGu9M9Iep8p480Abn4mPS60xb3V1YlNPlpTkoqgdediMw/Px/mA3FZW0b1XRF
# OkawohZ13qLCKnB8tna82Ruuul2c9oeVzqqo4rWjsZNuQKWbEIh2Fk40ofye8eEa
# VNHIJFeUdq3Cx+yjo5Z14sYoawIF6Eu5teBSK3gBjCoxLEzoBeVvnw+EJi5obPrL
# TRl8GMH/ahqpy76jdfjpyBiyzN0vQUAgHM+ICxfJsIpDy+Jrk1HxEb5CvPhR8toA
# Ar4IGCgFJ8TcO113KR4Z1EEqZn20UnNcQqWQ043Fo6o3znMBlCQZQkPRlI9Lft3L
# bbwbTnv5qgsiS0mASXAbLU/eNGA+vQIDAQABo4IBnjCCAZowDgYDVR0PAQH/BAQD
# AgeAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMB0GA1UdDgQWBBRba3v0cHQIwQ0q
# yO/xxLlA0krG/TBMBgNVHSAERTBDMEEGCSsGAQQBoDIBHjA0MDIGCCsGAQUFBwIB
# FiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzAMBgNVHRMB
# Af8EAjAAMIGQBggrBgEFBQcBAQSBgzCBgDA5BggrBgEFBQcwAYYtaHR0cDovL29j
# c3AuZ2xvYmFsc2lnbi5jb20vY2EvZ3N0c2FjYXNoYTM4NGc0MEMGCCsGAQUFBzAC
# hjdodHRwOi8vc2VjdXJlLmdsb2JhbHNpZ24uY29tL2NhY2VydC9nc3RzYWNhc2hh
# Mzg0ZzQuY3J0MB8GA1UdIwQYMBaAFOoWxmnn48tXRTkzpPBAvtDDvWWWMEEGA1Ud
# HwQ6MDgwNqA0oDKGMGh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vY2EvZ3N0c2Fj
# YXNoYTM4NGc0LmNybDANBgkqhkiG9w0BAQsFAAOCAgEALms+j3+wsGDZ8Z2E3JW2
# 318NvyRR4xoGqlUEy2HB72Vxrgv9lCRXAMfk9gy8GJV9LxlqYDOmvtAIVVYEtuP+
# HrvlEHZUO6tcIV4qNU1Gy6ZMugRAYGAs29P2nd7KMhAMeLC7VsUHS3C8pw+rcryN
# y+vuwUxr2fqYoXQ+6ajIeXx2d0j9z+PwDcHpw5LgBwwTLz9rfzXZ1bfub3xYwPE/
# DBmyAqNJTJwEw/C0l6fgTWolujQWYmbIeLxpc6pfcqI1WB4m678yFKoSeuv0lmt/
# cqzqpzkIMwE2PmEkfhGdER52IlTjQLsuhgx2nmnSxBw9oguMiAQDVN7pGxf+LCue
# 2dZbIjj8ZECGzRd/4amfub+SQahvJmr0DyiwQJGQL062dlC8TSPZf09rkymnbOfQ
# MD6pkx/CUCs5xbL4TSck0f122L75k/SpVArVdljRPJ7qGugkxPs28S9Z05LD7Mtg
# Uh4cRiUI/37Zk64UlaiGigcuVItzTDcVOFBWh/FPrhyPyaFsLwv8uxxvLb2qtuto
# I/DtlCcUY8us9GeKLIHTFBIYAT+Eeq7sR2A/aFiZyUrCoZkVBcKt3qLv16dVfLyE
# G02Uu45KhUTZgT2qoyVVX6RrzTZsAPn/ct5a7P/JoEGWGkBqhZEcr3VjqMtaM7WU
# M36yjQ9zvof8rzpzH3sg23IwggZyMIIE2qADAgECAhALYufvMdbwtA/sWXrOPd+k
# MA0GCSqGSIb3DQEBDAUAMFQxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdv
# IExpbWl0ZWQxKzApBgNVBAMTIlNlY3RpZ28gUHVibGljIENvZGUgU2lnbmluZyBD
# QSBSMzYwHhcNMjIwMjA3MDAwMDAwWhcNMjUwMjA2MjM1OTU5WjB2MQswCQYDVQQG
# EwJHUjEdMBsGA1UECAwUS2VudHJpa8OtIE1ha2Vkb27DrWExIzAhBgNVBAoMGkth
# dHNhdm91bmlkaXMgS29uc3RhbnRpbm9zMSMwIQYDVQQDDBpLYXRzYXZvdW5pZGlz
# IEtvbnN0YW50aW5vczCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAIxd
# u9+Lc83wVLNDuBn9NzaXp9JzWaiQs6/uQ6fbCUHC4/2lLfKzOUus3e76lSpnmo7b
# kCLipjwZH+yqWRuvrccrfZCoyVvBAuzdE69AMR02Z3Ay5fjN6kWPfACkgLe4D9og
# SDh/ZsOfHD89+yKKbMqsDdj4w/zjIRwcYGgBR6QOGP8mLAIKH7TwvoYBauLlb6aM
# /eG/TGm3cWd4oonwjiYU2fDkhPPdGgCXFem+vhuIWoDk0A0OVwEzDFi3H9zdv6hB
# bv+d37bl4W81zrm42BMC9kWgiEuoDUQeY4OX2RdNqNtzkPMI7Q93YlnJwitLfSrg
# GmcU6fiE0vIW3mkf7mebYttI7hJVvqt0BaCPRBhOXHT+KNUvenSXwBzTVef/9h70
# POF9ZXbUhTlJJIHJE5SLZ2DvjAOLUvZuvo3bGJIIASHnTKEIVLCUwJB77NeKsgDx
# YGDFc2OQiI9MuFWdaty4B0sXQMj+KxZTb/Q0O850xkLIbQrAS6T2LKEuviE6Ua7b
# QFXi1nFZ+r9XjOwZQmQDuKx2D92AUR/qwcpIM8tIbJdlNzEqE/2wwaE10G+sKuX/
# SaJFZbKXqDMqJr1fw0M9n0saSTX1IZrlrEcppDRN+OIdnQL3cf6PTqv1PTS4pZ/9
# m7iweMcU4lLJ7L/8ZKiIb0ThD9kIddJ5coICzr/hAgMBAAGjggGcMIIBmDAfBgNV
# HSMEGDAWgBQPKssghyi47G9IritUpimqF6TNDDAdBgNVHQ4EFgQUidoax6lNhMBv
# wMAg4rCjdP30S8QwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwEwYDVR0l
# BAwwCgYIKwYBBQUHAwMwEQYJYIZIAYb4QgEBBAQDAgQQMEoGA1UdIARDMEEwNQYM
# KwYBBAGyMQECAQMCMCUwIwYIKwYBBQUHAgEWF2h0dHBzOi8vc2VjdGlnby5jb20v
# Q1BTMAgGBmeBDAEEATBJBgNVHR8EQjBAMD6gPKA6hjhodHRwOi8vY3JsLnNlY3Rp
# Z28uY29tL1NlY3RpZ29QdWJsaWNDb2RlU2lnbmluZ0NBUjM2LmNybDB5BggrBgEF
# BQcBAQRtMGswRAYIKwYBBQUHMAKGOGh0dHA6Ly9jcnQuc2VjdGlnby5jb20vU2Vj
# dGlnb1B1YmxpY0NvZGVTaWduaW5nQ0FSMzYuY3J0MCMGCCsGAQUFBzABhhdodHRw
# Oi8vb2NzcC5zZWN0aWdvLmNvbTANBgkqhkiG9w0BAQwFAAOCAYEAG+2x4Vn8dk+Y
# w0Khv6CZY+/QKXW+aG/siN+Wn24ijKmvbjiNEbEfCicwZ12YpkOCnuFtrXs8k9zB
# PusV1/wdH+0buzzSuCmkyx5v4wSqh8OsyWIyIsW/thnTyzYys/Gw0ep4RHFtbNTR
# K4+PowRHW1DxOjaxJUNi9sbNG1RiDSAVkGAnHo9m+wAK6WFOIFV5vAbCp8upQPwh
# aGo7u2hXP/d18mf/4BtQ+J7voX1BFwgCLhlrho0NY8MgLGuMBcu5zw07j0ZFBvyr
# axDPVwDoZw07JM018c2Nn4hg2XbYyMtUkvCi120uI6299fGs6Tmi9ttP4c6pubs4
# TY40jVxlxxnqqvIA/wRYXpWOe5Z3n80OFEatcFtzLrQTyO9Q1ptk6gso/RNpRu3r
# ug+aXqfvP3a32FNZAQ6dUGr0ae57OtgM+hlLMhSSyhugHrnbi9oNAsqa/KA6UtD7
# MxWJIwAqACTqqVjUTKjzaaE+12aS3vaO6tEqCuT+DOtu7aJRPnyyMYIGUTCCBk0C
# AQEwaDBUMQswCQYDVQQGEwJHQjEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMSsw
# KQYDVQQDEyJTZWN0aWdvIFB1YmxpYyBDb2RlIFNpZ25pbmcgQ0EgUjM2AhALYufv
# MdbwtA/sWXrOPd+kMA0GCWCGSAFlAwQCAQUAoEwwGQYJKoZIhvcNAQkDMQwGCisG
# AQQBgjcCAQQwLwYJKoZIhvcNAQkEMSIEIPXnbOjAg2ba6nCofnJt9l54SVC1HIs3
# h8SdDMPrIL7LMA0GCSqGSIb3DQEBAQUABIICAG4oGR2mnfud86z9xdaxs4nG1i2j
# /Yk3ZnWxLuZqNsiyIB6NS6Je79txA3SLq4+6F+ArdqLBrQtpr8OQGTUxbcH7D8QL
# +NWPJtmj0sAE8BRZw3aeHCokPF0+9w5Oj30pBsw8xvQS9ZdVQQ8fisLTS5KDbHj4
# QEgmP7mkkcuLcIZnKGtF5dZdKXgSfPM2ssV0+/TZEU1GeyPK4EhKMiDb0RduCYgF
# Y/19U2l89B0GJE4QxjxwdNf9KpOwaX1lEzVFK+pRE00UpbX2KmKwI+ekrJRIx0QO
# ocH3vtzG6k0r4LEmSWBW4Hzy18197/9Jey7dJdnKzqeB7WFz80oTq7plxlKI7wK5
# YIZnFObUNjrZ0D4KGZyh0qVNDIqLP+39b3E2Sgr20HwrE1uP9dTtuQUZkpd1i0bX
# YnZF9xmjnDBOr2UYVZZSbdPBFiuzQCVyML1iGiByjImOL/JmLg19dF30qq0Le+GD
# dvdvsKdRkb+hquP+h3LawoEZxaJcxeA0RUsGFwqxrP671xv6M+X2floN9c4d/qj3
# Sgit/vhaw96vs55IIxq36po60P6T0teEUqU3Lv18nXP3TuZYgIOliEBEpMGyMxbf
# 1vb8tsfnhW4mFlk9Cx53GSqtWqB56nd3AhRF6aL5s+hsH5Er7+5EWPy320CqD+jn
# QWO1MPiXjEt5Hl7woYIDbDCCA2gGCSqGSIb3DQEJBjGCA1kwggNVAgEBMG8wWzEL
# MAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExMTAvBgNVBAMT
# KEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0gRzQCEAFIkD3C
# irynoRlNDBxXuCkwCwYJYIZIAWUDBAIBoIIBPTAYBgkqhkiG9w0BCQMxCwYJKoZI
# hvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yNDAxMDMyMTA1MDZaMCsGCSqGSIb3DQEJ
# NDEeMBwwCwYJYIZIAWUDBAIBoQ0GCSqGSIb3DQEBCwUAMC8GCSqGSIb3DQEJBDEi
# BCCFe7ztmA99NfnsnNsRo4ZBYk2F9F3bE0rVRPVHuTKL8DCBpAYLKoZIhvcNAQkQ
# AgwxgZQwgZEwgY4wgYsEFDEDDhdqpFkuqyyLregymfy1WF3PMHMwX6RdMFsxCzAJ
# BgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMTEwLwYDVQQDEyhH
# bG9iYWxTaWduIFRpbWVzdGFtcGluZyBDQSAtIFNIQTM4NCAtIEc0AhABSJA9woq8
# p6EZTQwcV7gpMA0GCSqGSIb3DQEBCwUABIIBgG1CLiaAziiqflOdWEqYm45BylMQ
# IMelFmtaWr6mcwje8UeNY1Wt8uGNkKjdKp7kaOug87/7sht23Q8tpAGBFUo4zTIf
# rpoiQG+nowMKssQ+n/Mb1O4R2Tue3lx1yOT+O6DFxJwmYvWndxto3fBJ+u+PPQul
# eVUk9E45FOuiowRTAsnbLAYLyMwjJCWN0gZNvWSTJY40DvkKJcxAqaHuy05Q1vlc
# +A5bhYz/JnOLI6Ku+TqFxUvwhNf/vB6X9+vXPnHmeVa/ophVKx+WslpQpESPpc79
# P5Om6uIQOkNk9+HXPqjioLvAwFyiGIHaVvd1wZZm/l6AW9fy8WlnqnZaMGhY+vx2
# SHdevJ/mt2QPu94wx/RsqX+jGSyK5CMpskrptRL2g6MRv8fItGq9SRLP7pVw6lj9
# pgKTWSs4DrHS41uZovOwsfprGAoOll286h7R7YEPBGsgikWwzdo0pHPTNEHp8xrK
# ooX7tml1YUZGqOhOWGp78B3P7WGygY+KyuCRug==
# SIG # End signature block
