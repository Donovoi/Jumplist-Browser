<#
    --------------------------------------------------------------------------------
     Generated by:       Costas Katsavounidis
	 					 https://github.com/kacos2000/Jumplist-Browser
    --------------------------------------------------------------------------------
#>
function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}


#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Jumplist_Browser = New-Object 'System.Windows.Forms.Form'
	$splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer'
	$statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$OpenFolder = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolStripSeparator = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$folderbrowserdialog1 = New-Object 'System.Windows.Forms.FolderBrowserDialog'
	$Status = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$treeview1 = New-Object 'System.Windows.Forms.TreeView'
	$treeview2 = New-Object 'System.Windows.Forms.TreeView'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$CopyNode1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator6 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$toolstripseparator7 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$Exit1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Process1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator8 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$contextmenustrip2 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$CopyNode2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CopyAll2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator9 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$Expand2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator10 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$Exit2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$Open = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$About = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Expand1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Collapse1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator5 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$ExpandAll1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CollapseAll1 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$Collapse2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator4 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$ExpandAll2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CollapseAll2 = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$SaveNodestoTxt = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator3 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$savefiledialog1 = New-Object 'System.Windows.Forms.SaveFileDialog'
	$OpenFileWith = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CopyFullFilePath = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$CopyNode2Tag = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$SaveStreamToFile = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripRefresh = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	Add-Type -AssemblyName WindowsBase
	# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/16cb4ca1-9339-4d0c-a68d-bf1d6cc0f943
	
	function Get-DPI
	{
		[OutputType([single])]
		param
		(
			[IntPtr]$Handle = [IntPtr]::Zero
		)
		
		$g = [System.Drawing.Graphics]::FromHwnd($Handle)
		$dpi = $g.DpiX
		$g.Dispose()
		
		return $dpi
	}
	
	$Jumplist_Browser_Load = {
		$splitcontainer1.AutoScroll = $true
		if ((Get-DPI $Jumplist_Browser.Handle) -gt 96)
		{
			#$treeview1.ImageList = $imagelist1 # HighDPI (24*24)
			$statusstrip1.ImageScalingSize = New-Object System.Drawing.Size (24, 24)
			$menustrip1.ImageScalingSize = New-Object System.Drawing.Size (24, 24)
			#	$richtextbox1.Font = New-Object Drawing.Font($oldFont.FontFamily, 8, [Drawing.FontStyle]::Regular)
			for ($i = 1; $i -lt 2; $i++)
			{
				(Get-Variable contextmenustrip$i -ValueOnly).ImageScalingSize = New-Object System.Drawing.Size (24, 24)
			}
		}
		else
		{
			# $treeview1.ImageList = $imagelist2 # Regular (16 * 16)
			$statusstrip1.ImageScalingSize = New-Object System.Drawing.Size (16, 16)
			$menustrip1.ImageScalingSize = New-Object System.Drawing.Size (16, 16)
			#	$richtextbox1.Font = New-Object Drawing.Font($oldFont.FontFamily, 8, [Drawing.FontStyle]::Regular)
			for ($i = 1; $i -lt 2; $i++)
			{
				(Get-Variable contextmenustrip$i -ValueOnly).ImageScalingSize = New-Object System.Drawing.Size (16, 16)
			}
		}
		
		# Get current user access level & check if user is Administrator
		# $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
		# $IsAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
	}
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	#endregion
	
	function Show-ErrorMessage
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$ErrorMessage
		)
		[void][System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "$($ErrorMessage)", "Jumplist Browser", "OK", "Error")
	}
	
	function Show-InfoMessage
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$InfoMessage
		)
		[void][System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "$($InfoMessage)", "Jumplist Browser", "OK", "Information")
	}
	
	function Show-WarningMessage
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$WarningMessage
		)
		[void][System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "$($WarningMessage)", "Jumplist Browser", "OK", "Warning")
	}
	
	function Get-ShellFolders
	{
		try
		{
			$ShellFolders = @(
				"HKCU:Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" # User/Roaming
				"HKCU:Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" # User
				"HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" # Public
				"HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders" # Public/Common
			)
			
			$shellf = @{ }
			Foreach ($ShellFolder in $ShellFolders)
			{
				
				$folders = Get-Item -Path $ShellFolder
				Foreach ($s in ($folders.GetValueNames() | sort))
				{
					if ($s -eq "!Do not use this registry key") { continue }
					$name = if ($s.StartsWith('{') -and ($s -in $Special.guid)) { $Special.where{ $_.guid -eq $s }.name }
					else { $s }
					
					$shellf[$Name] = "$($Folders.GetValue($s))"
				}
			}
			$knownFolders = [enum]::GetNames([System.Environment+SpecialFolder])
			foreach ($knownfolder in $knownFolders)
			{
				if (![String]::IsNullOrEmpty([environment]::getfolderpath($knownfolder)))
				{
					$shellf[$knownfolder] = "$([environment]::getfolderpath($knownfolder))"
				}
			}
			
			$shellf.GetEnumerator() | sort -Property Value -Descending -Unique
		}
		catch
		{
			$shellf = @{ }
			$knownFolders = [enum]::GetNames([System.Environment+SpecialFolder])
			foreach ($knownfolder in $knownFolders)
			{
				if (![String]::IsNullOrEmpty([environment]::getfolderpath($knownfolder)))
				{
					$shellf[$knownfolder] = "$([environment]::getfolderpath($knownfolder))"
				}
			}
			
			$shellf.GetEnumerator() | sort -Property Value -Descending -Unique
		}
	}
	
	function Get-KnownFolderProperties
	{
		try
		{
			$ShellFolders = @(
				"HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions"
				"HKLM:SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\"
			)
			
			$shellf = @{ }
			$FolderProps = Foreach ($ShellFolder in $ShellFolders)
			{
				
				$folders = Get-ChildItem -Path $ShellFolder
				Foreach ($folder in $folders)
				{
					if ($folder.SubKeyCount -gt 1 -or $folder.ValueCount -lt 2) { continue }
					$GUID = split-path $folder -leaf
					$folderproperties = Get-ItemProperty "$((split-path $folder.Name -NoQualifier).replace('HKEY_LOCAL_MACHINE', 'HKLM:'))"
					
					[PsCustomObject]@{
						'GUID'		   = $GUID
						'Name'		   = $folderproperties.Name
						'ParentFolder' = if (!!$folderproperties.ParentFolder) { $folderproperties.ParentFolder }else{ $null }
						'RelativePath' = if (!!$folderproperties.RelativePath) { $folderproperties.RelativePath }else{ $null }
					}
				}
			}
			$FolderProps = ($FolderProps | sort -Property GUID -Unique)
			
			$knownFolders = foreach ($prop in $FolderProps)
			{
				
				$parent = if ($prop.ParentFolder -in $FolderProps.GUID)
				{
					$FolderProps.Where{ $_.GUID -eq $prop.ParentFolder }.Name
				}
				else { $null }
				
				[PsCustomObject]@{
					'GUID'		   = $prop.GUID
					'Name'		   = $prop.Name
					# 'ParentFolder' = $prop.ParentFolder
					'Parent'	   = $parent
					'RelativePath' = $prop.RelativePath
				}
			}
			return $knownFolders
		}
		catch {$null}
	}
	
	function Get-KnownFolders
	{
		try
		{
			$knownFolders = Get-KnownFolderProperties
			
			$ShellFolders = Get-ShellFolders
			$CompleteShell = @{ }
			
			foreach ($shell in $ShellFolders.GetEnumerator())
			{
				
				if ($shell.key -in $knownFolders.GUID)
				{
					$CompleteShell["$($knownFolders.Where{ $_.GUID -eq $shell.key }.Name)"] = "$($shell.Value)"
				}
				else { $CompleteShell[$shell.key] = "$($shell.Value)" }
			}
			$CompleteShell.GetEnumerator() | sort -Property Value -Descending -Unique
		}
		catch
		{
			$ShellFolders
		}
	}
	# Preload the Shell Folders
	$ShellFolders = Get-KnownFolders
	$Knownfolders = Get-KnownFolderProperties
	
	function Get-Nodes
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$nodes
		)
		
		foreach ($node in $nodes)
		{
			[System.Windows.Forms.Application]::DoEvents()
			$node
			Get-Nodes -nodes $node.Nodes
		}
	}
	
	function Get-DelegateIDlist
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		try
		{
			$DelegateIDListsize = [System.BitConverter]::ToUInt32($ByteArray[0 .. 3], 0)
			$DelegateIDs = [System.Collections.ArrayList]::new()
			$idx = 4
			while ($idx -lt ($DelegateIDListsize - 4))
			{
				$itemSize = [Bitconverter]::ToUInt16($ByteArray[($idx) .. ($idx + 1)], 0)
				if ($itemSize -eq 0 -or $itemSize -gt ($DelegateIDListsize - $idx)) { break }
				$null = $DelegateIDs.Add([ShellLink.Structures.ItemID]::FromByteArray($ByteArray[$idx .. ($idx + $itemSize - 1)]))
				$idx = $idx + $itemSize
				if ($idx -ge ($DelegateIDListsize - 4)) { break }
			}
			
			if ($DelegateIDs.Count -ge 1)
			{
				$DelegateIDList = [System.Collections.ArrayList]::new()
				foreach ($DelegateID in $DelegateIDs)
				{
					$linkItem = Get-LinkTargetIDList -ItemIdListItem $DelegateID
					$null = $DelegateIDList.Add($linkItem)
				}
			}
		}
		catch
		{
			$DelegateIDList = $null
		}
		Return $DelegateIDList
	} # End Get-DelegateIDlist
	
	function Get-EmbeddedIDList
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		try
		{
			$ShellinkSize = $ByteArray.Count
			$EmbeddedItemIDs = [System.Collections.ArrayList]::new()
			$idx = 4
			while ($idx -lt $ShellinkSize)
			{
				$itemSize = [Bitconverter]::ToUInt16($ByteArray[($idx) .. ($idx + 1)], 0)
				if ($itemSize -eq 0 -or $itemSize -gt ($ShellinkSize - $idx)) { break }
				$null = $EmbeddedItemIDs.Add([ShellLink.Structures.ItemID]::FromByteArray($ByteArray[$idx .. ($idx + $itemSize - 1)]))
				$idx = $idx + $itemSize
				if ($idx -ge $ShellinkSize) { break }
			} # End while
			
			if ($EmbeddedItemIDs.Count -ge 1)
			{
				$EmbeddedIdList = [System.Collections.ArrayList]::new()
				foreach ($EmbeddedItemID in $EmbeddedItemIDs)
				{
					$linkItem = Get-LinkTargetIDList -ItemIdListItem $EmbeddedItemID
					$null = $EmbeddedIdList.Add($linkItem)
				}
			}
		}
		catch
		{
			$EmbeddedIdList = $null
		}
		Return $EmbeddedIdList
	} # End Get-DelegateIDlist
	
	function Populate-SPS1
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$Node,
			[Parameter(Mandatory = $true)]
			$SPS1properties
		)
		try
		{
			if ($SPS1properties.Count -ge 1)
			{
				for ($ps = 0; $ps -lt $SPS1properties.Count; $ps++)
				{
					# Add Serialised Property Node
					if ($SPS1properties.Count -gt 1)
					{
						$SPS1Node = $Node.Nodes.Add("Entension$($ps)", "Serialized Property #$($ps)")
					}
					else
					{
						$SPS1Node = $Node.Nodes.Add("Entension$($ps)", "Serialized Property")
					}
					$SPS1Node.ForeColor = 'Gold'
					# Add SPS1 entry info
					$null = $SPS1Node.Nodes.Add("Storage Size", "Storage Size: $($SPS1properties[$ps].'Storage Size')")
					$null = $SPS1Node.Nodes.Add("FormatID", "Format ID: $($SPS1properties[$ps].FormatID)")
					
					if ($SPS1properties[$ps].TypedProperty.count -ge 1)
					{
						
						for ($t = 0; $t -lt $SPS1properties[$ps].TypedProperty.count; $t++)
						{
							if ($SPS1properties[$ps].TypedProperty.count -gt 1)
							{
								$TypedPropertyNodes = $SPS1Node.Nodes.Add("TypedProperty$($t)", "TypedProperty Entry #$($t)")
							}
							else
							{
								$TypedPropertyNodes = $SPS1Node.Nodes.Add("TypedProperty$($t)", "TypedProperty Entry")
							}
							$TypedPropertyNodes.ForeColor = 'Plum'
							
							if ($null -ne $SPS1properties[$ps].TypedProperty[$t].ID)
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyTypeID$($t)", "ID: $($SPS1properties[$ps].TypedProperty[$t].ID)")
							}
							$null = $TypedPropertyNodes.Nodes.Add("ValueSize$($t)", "ValueSize: $($SPS1properties[$ps].TypedProperty[$t].ValueSize)")
							if ($SPS1properties[$ps].TypedProperty[$t].NameSize -gt 0)
							{
								$null = $TypedPropertyNodes.Nodes.Add("NameSize$($t)", "NameSize: $($SPS1properties[$ps].TypedProperty[$t].NameSize)")
								$null = $TypedPropertyNodes.Nodes.Add("Name$($t)", "Name: $($SPS1properties[$ps].TypedProperty[$t].Name)")
								$TypedPropertyNodes.Nodes["Name$($t)"].ForeColor = 'LightGreen'
								
								if (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes -and $SPS1properties[$ps].TypedProperty[$t].Name -eq 'ViewItemsFolder')
								{
									$BlobIDList = @(Get-EmbeddedIDList -ByteArray $SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes)
									if ($BlobIDList.count -ge 1)
									{
										$EmbeddedIDListNode = $TypedPropertyNodes.Nodes.Add("EmbeddedIDList($t)", "Embedded ID List")
										$EmbeddedIDListNode.ForeColor = 'GreenYellow'
										Populate-ItemIdListItems -ItemIDListNode $EmbeddedIDListNode -ItemIdList $BlobIDList
									}
								}
							}
							$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyType$($t)", "Type: $($SPS1properties[$ps].TypedProperty[$t].TypedProp.Type)")
							if ($null -ne $SPS1properties[$ps].TypedProperty[$t].Description)
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyDescription$($t)", "Description: $($SPS1properties[$ps].TypedProperty[$t].Description)")
								if (!!$SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes -and $SPS1properties[$ps].TypedProperty[$t].Description -eq 'Delegate ID List [28636AA6-953D-11D2-B5D6-00C04FD918D0\32]')
								{
									$DelegateIDList = @(Get-DelegateIDlist -ByteArray $SPS1properties[$ps].TypedProperty[$t].TypedProp.TBytes)
									if ($DelegateIDList.count -ge 1)
									{
										$DelegateNode = $TypedPropertyNodes.Nodes.Add("DelegateIDList$($t)", "Delegate ID List")
										$DelegateNode.ForeColor = 'GreenYellow'
										Populate-ItemIdListItems -ItemIDListNode $DelegateNode -ItemIdList $DelegateIDList
									}
								}
							}
							if (!$SPS1properties[$ps].TypedProperty[$t].TypedProp.Raw)
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyValue$($t)", "Value: $($SPS1properties[$ps].TypedProperty[$t].TypedProp.Value)")
								$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].ForeColor = 'LightGreen'
							}
							else
							{
								$null = $TypedPropertyNodes.Nodes.Add("TypedPropertyValue$($t)", "Raw (Hex) Value")
								$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].Tag = @($SPS1properties[$ps].TypedProperty[$t].TypedProp.Raw)
								$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].ToolTipText = "Right click to copy the raw (Hex) data ($($SPS1properties[$ps].TypedProperty[$t].TypedProp.Raw.length))"
								$TypedPropertyNodes.Nodes["TypedPropertyValue$($t)"].ForeColor = 'Peru'
							}
						}
					}
					else
					{
						# Show-WarningMessage -WarningMessage ($SPS1properties[$ps]|Out-String)
					}
				} #end for each SPS entry
			}
			else
			{
				# Show-ErrorMessage -ErrorMessage ($SPS1properties | Out-String)
			}
		}
		catch {Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message }
	} # end Populate-SPS1
	
	function Populate-ItemIdListItems
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.TreeNode]$ItemIDListNode,
			[Parameter(Mandatory = $true)]
			$ItemIdList
		)
		
		if ($ItemIdList)
		{
			$IDListItemsNode = $ItemIDListNode.Nodes.Add("$('IDList Items')", "IDList Items")
			$IDListItemsNode.ForeColor = 'Violet'
			for ($ic = 0; $ic -lt $ItemIdList.count; $ic++)
			{
				$IDListEntry = $IDListItemsNode.Nodes.Add("IDListItem$($ic)", "IDList Entry #$($ic.ToString('D3')) [$($ItemIdList[$ic].ItemIDType)]")
				$IDListEntry.ForeColor = 'Red'
				$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Size", "ItemID Size: $($ItemIdList[$ic].ItemIDSize)")
				$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ItemIDType", "ItemID Type: $($ItemIdList[$ic].ItemIDType)")
				$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["ItemIDType"].ForeColor = 'Violet'
				if ($null -ne $ItemIdList[$ic].DisplayName)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("DisplayName", "ItemID Display Name: $($ItemIdList[$ic].DisplayName)")
				}
				if ($null -ne $ItemIdList[$ic].Signature)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Signature", "Signature: $($ItemIdList[$ic].Signature)")
				}
				if ($null -ne $ItemIdList[$ic].CPcategory)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("CPcategory", "Control Panel Category: $($ItemIdList[$ic].CPcategory)")
				}
				if ($null -ne $ItemIdList[$ic].DriveLetter)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("DriveLetter", "Drive Letter: $($ItemIdList[$ic].DriveLetter)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["DriveLetter"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Timestamp)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Timestamp", "Timestamp: $($ItemIdList[$ic].Timestamp)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Timestamp"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].Port)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Port", "Port: $($ItemIdList[$ic].Port)")
				}
				if ($null -ne $ItemIdList[$ic].UriSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("UriSize", "Uri length: $($ItemIdList[$ic].UriSize)")
				}
				if ($null -ne $ItemIdList[$ic].URI)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("URI", "URI: $($ItemIdList[$ic].URI)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["URI"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].UserSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("UserSize", "Username size: $($ItemIdList[$ic].UserSize)")
				}
				if ($null -ne $ItemIdList[$ic].Username)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Username", "Username: $($ItemIdList[$ic].Username)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Username"].ForeColor = 'GreenYellow'
				}
				if ($null -ne $ItemIdList[$ic].PassSize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("PassSize", "Password size: $($ItemIdList[$ic].PassSize)")
				}
				if ($null -ne $ItemIdList[$ic].Password)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Password", "Password: $($ItemIdList[$ic].Password)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Password"].ForeColor = 'GreenYellow'
				}
				if ($null -ne $ItemIdList[$ic].'Subfolder Ansi')
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Subfolder Ansi", "Subfolder Ansi: $($ItemIdList[$ic].'Subfolder Ansi')")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Subfolder Ansi"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].'Subfolder Unicode')
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Subfolder Unicode", "Subfolder Unicode: $($ItemIdList[$ic].'Subfolder Unicode')")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Subfolder Unicode"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Flags)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Flags", "Flags: $($ItemIdList[$ic].Flags)")
				}
				if ($null -ne $ItemIdList[$ic].Name)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Name", "Name: $($ItemIdList[$ic].Name)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Name"].ForeColor = 'LightGreen'
				}
				if ($null -ne $ItemIdList[$ic].Description)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Description", "Description: $($ItemIdList[$ic].Description)")
				}
				if ($null -ne $ItemIdList[$ic].NetworkProvider)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NetworkProvider", "Network Provider: $($ItemIdList[$ic].NetworkProvider)")
				}
				if ($null -ne $ItemIdList[$ic].Path)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Path", "Path: $($ItemIdList[$ic].Path)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Path"].ForeColor = 'LightGreen'
				}
				if (!!$ItemIdList[$ic].NetworkType -and $null -ne $ItemIdList[$ic].NetworkType)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NetworkType", "Network Type: $($ItemIdList[$ic].NetworkType)")
				}
				if (!!$ItemIdList[$ic].Device -and $null -ne $ItemIdList[$ic].Device)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Device", "Device: $($ItemIdList[$ic].Device)")
				}
				if ($null -ne $ItemIdList[$ic].'SortOrderIndex')
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("SortOrderIndex", "Sort Order Index: $($ItemIdList[$ic].'SortOrderIndex')")
				}
				if ($null -ne $ItemIdList[$ic].GUID)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("GUID", "GUID: $($ItemIdList[$ic].GUID)")
				}
				if ($null -ne $ItemIdList[$ic].CLSID)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("CLSID", "CLSID: $($ItemIdList[$ic].CLSID)")
				}
				if ($null -ne $ItemIdList[$ic].ShellName)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ShellName", "Shell Name: $($ItemIdList[$ic].ShellName)")
				}
				if ($null -ne $ItemIdList[$ic].Filesize)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Filesize", "File Size: $($ItemIdList[$ic].Filesize)")
				}
				if ($null -ne $ItemIdList[$ic].Attributes)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Attributes", "Attributes: $($ItemIdList[$ic].Attributes)")
				}
				if ($null -ne $ItemIdList[$ic].TargetAttributes)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("TargetAttributes", "Target Attributes: $($ItemIdList[$ic].TargetAttributes)")
				}
				if ($null -ne $ItemIdList[$ic].Ansi_Name)
				{
					$Ansi_Name = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Ansi_Name", "Ansi Name: $($ItemIdList[$ic].Ansi_Name)")
					$Ansi_Name.ForeColor = 'PaleGreen'
				}
				if ($null -ne $ItemIdList[$ic].w32Modified -and $ItemIdList[$ic].w32Modified -ne '' )
				{
					$w32Modifiednode = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("w32Modified", "Modified: $($ItemIdList[$ic].w32Modified)")
					$w32Modifiednode.ForeColor = 'Cyan'
				}
				if (!!$ItemIdList[$ic].ItemIdExtensions -and $ItemIdList[$ic].ItemIdExtensions.count -ge 1)
				{
					$x = 0
					Foreach ($extension in $ItemIdList[$ic].ItemIdExtensions)
					{
						if (!!$extension.itemIdExtType)
						{
							$extensionNode = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("itemIdExtType$($x)", "Extension #$($x) Type: [$($extension.itemIdExtType)]")
							if ($extension.NewExtension -eq $true)
							{
								$extensionNode.BackColor = 'Yellow'
							}
						}
						else
						{
							$extensionNode = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("itemIdExtType$($x)", "Extension #$($x)")
						}
						$extensionNode.ForeColor = 'Tomato'
						if ($null -ne $extension.extLength)
						{
							$null = $extensionNode.Nodes.Add("ExtentionSize", "Extension Size: $($extension.extLength)")
						}
						if ($null -ne $extension.extversion)
						{
							$null = $extensionNode.Nodes.Add("ExtentionVersion", "Extension Version: $($extension.extversion)")
						}
						if ($null -ne $extension.Host)
						{
							$null = $extensionNode.Nodes.Add("HostOS", "Host OS: $($extension.Host)")
						}
						if ($null -ne $extension.Filesystem)
						{
							$null = $extensionNode.Nodes.Add("Filesystem", "Host Filesystem: $($extension.Filesystem)")
						}
						if ($null -ne $extension.GUID)
						{
							$null = $extensionNode.Nodes.Add("GUID", "GUID: $($extension.GUID)")
						}
						if ($null -ne $extension.CLSID)
						{
							$null = $extensionNode.Nodes.Add("CLSID", "CLSID: $($extension.CLSID)")
						}
						if ($null -ne $extension.UriEntries)
						{
							foreach ($uri_entry in $extension.UriEntries.PSobject.Properties)
							{
								$null = $extensionNode.Nodes.Add("$($uri_entry.Name)", "$($uri_entry.Name): $($uri_entry.Value)")
							}
						}
						if ($null -ne $extension.TargetPath)
						{
							$null = $extensionNode.Nodes.Add("TargetPath", "Target Path: $($extension.TargetPath)")
						}
						if ($null -ne $extension.Component)
						{
							$null = $extensionNode.Nodes.Add("Component", "Component: $($extension.Component)")
						}
						if ($null -ne $extension.ComponentParameters)
						{
							$null = $extensionNode.Nodes.Add("ComponentParameters", "Component Parameters: $($extension.ComponentParameters)")
						}
						if ($null -ne $extension.ExtraPath)
						{
							$null = $extensionNode.Nodes.Add("ExtraPath", "Target Path: $($extension.ExtraPath)")
						}
						if ($null -ne $extension.UserName)
						{
							$null = $extensionNode.Nodes.Add("UserName", "UserName: $($extension.UserName)")
							$extensionNode.Nodes["UserName"].ForeColor = 'PaleTurquoise'
						}
						if ($null -ne $extension.Unicode_Name)
						{
							$Unicode_Name = $extensionNode.Nodes.Add("Unicode_Name", "Unicode Name: $($extension.Unicode_Name)")
							$Unicode_Name.ForeColor = 'PaleGreen'
						}
						if ($null -ne $extension.Localized_Name -and $extension.Localized_Name -ne '')
						{
							$Localized_Name = $extensionNode.Nodes.Add("Localized_Name", "Localized Name: $($extension.Localized_Name)")
							$Localized_Name.ForeColor = 'PaleGreen'
						}
						if ($null -ne $extension.Application)
						{
							$null = $extensionNode.Nodes.Add("Application", "Application: $($extension.Application)")
							$extensionNode.Nodes["Application"].ForeColor = 'LightGreen'
						}
						if ($null -ne $extension.DocumentType)
						{
							$null = $extensionNode.Nodes.Add("DocumentType", "Document Type: $($extension.DocumentType)")
							$extensionNode.Nodes["DocumentType"].ForeColor = 'LightGreen'
							if ($extension.itemIdExtType -eq 'BEEF001A')
							{
								$extensionNode.Nodes["DocumentType"].ToolTipText = '[SOFTWARE] Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Extensions\ProgIDs'
							}
						}
						if ($null -ne $extension.Selection)
						{
							$null = $extensionNode.Nodes.Add("Selection", "Selection: $($extension.Selection)")
							$extensionNode.Nodes["Selection"].ForeColor = 'LightGreen'
						}
						if ($null -ne $extension.Attributes)
						{
							$null = $extensionNode.Nodes.Add("Attributes", "Attributes: $($extension.Attributes)")
						}
						if ($null -ne $extension.TargetCreated)
						{
							$null = $extensionNode.Nodes.Add("TargetCreated", "Target Created: $($extension.TargetCreated)")
							$extensionNode.Nodes["TargetCreated"].ForeColor = 'Cyan'
						}
						if ($null -ne $extension.TargetAccessed)
						{
							$null = $extensionNode.Nodes.Add("TargetAccessed", "Target Accessed: $($extension.TargetAccessed)")
							$extensionNode.Nodes["TargetAccessed"].ForeColor = 'Cyan'
						}
						if ($null -ne $extension.ShortCutCreated)
						{
							$null = $extensionNode.Nodes.Add("ShortCutCreated", "LNK Created: $($extension.ShortCutCreated)")
							$extensionNode.Nodes["ShortCutCreated"].ForeColor = 'Cyan'
						}
						if ($null -ne $extension.Created)
						{
							$CreatedNode = $extensionNode.Nodes.Add("Created", "Created (UTC): $($extension.Created)")
							$CreatedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.Modified)
						{
							$ModifiedNode = $extensionNode.Nodes.Add("Modified", "Modified (UTC): $($extension.Modified)")
							$ModifiedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.Accessed)
						{
							$AccessedNode = $extensionNode.Nodes.Add("Accessed", "Accessed (UTC): $($extension.Accessed)")
							$AccessedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.w32Created)
						{
							$w32CreatedNode = $extensionNode.Nodes.Add("w32Created", "Created: $($extension.w32Created)")
							$w32CreatedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.w32Accessed)
						{
							$w32AccessedNode = $extensionNode.Nodes.Add("w32Accessed", "Accessed: $($extension.w32Accessed)")
							$w32AccessedNode.ForeColor = 'Cyan'
						}
						if ($null -ne $extension.MFTRecordNr)
						{
							$MFTRecordNrNode = $extensionNode.Nodes.Add("MFTRecordNr", "MFT Record Nr: $($extension.MFTRecordNr)")
							$MFTRecordNrNode.ForeColor = 'Orange'
							$MFTRecordSeqNr = $extensionNode.Nodes.Add("MFTRecordSeqNr", "MFT Record Sequence Nr: $($extension.MFTRecordSeqNr)")
							$MFTRecordSeqNr.ForeColor = 'Orange'
						}
						if ($null -ne $extension.Unknown -and $extension.Unknown -ne '0x00000000')
						{
							$null = $extensionNode.Nodes.Add("Unknown", "Unknown value: $($extension.Unknown)")
						}
						if ($null -ne $extension.EntryNr)
						{
							$null = $extensionNode.Nodes.Add("EntryNr", "Entry Nr: #$($extension.EntryNr)")
						}
						if ($null -ne $extension.PropertyStoreEntries)
						{
							Populate-SPS1 -Node $extensionNode -SPS1properties @($extension.PropertyStoreEntries)
						}
						if ($null -ne $extension.EmbeddedIdList)
						{
							Populate-ItemIdListItems -ItemIDListNode $extensionNode -ItemIdList $extension.EmbeddedIdList
						}
						if ($null -ne $extension.extData)
						{
							$rawext = $extensionNode.Nodes.Add("extData", "Extension Data")
							$rawext.Tag = @($extension.extData)
							$rawext.ToolTipText = "Right click to copy the raw (Hex) data ($($extension.extData.length))"
							$rawext.ForeColor = 'Peru'
						}
						$x++
					}
				}
				if ($null -ne $ItemIdList[$ic].PropertyStoreEntries)
				{
					Populate-SPS1 -Node $IDListItemsNode.Nodes["IDListItem$($ic)"] -SPS1properties @($ItemIdList[$ic].PropertyStoreEntries)
				}
				if ($null -ne $ItemIdList[$ic].EmbeddedIdList)
				{
					Populate-ItemIdListItems -ItemIDListNode $IDListItemsNode.Nodes["IDListItem$($ic)"] -ItemIdList $ItemIdList[$ic].EmbeddedIdList
				}
				if ($null -ne $ItemIdList[$ic].ExtType)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ExtType", "Extension Type: $($ItemIdList[$ic].ExtType)")
				}
				if ($null -ne $ItemIdList[$ic].TargetCreated)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("TargetCreated", "Target Created: $($ItemIdList[$ic].TargetCreated)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["TargetCreated"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].TargetAccessed)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("TargetAccessed", "Target Accessed: $($ItemIdList[$ic].TargetAccessed)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["TargetAccessed"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].ShortCutCreated)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ShortCutCreated", "LNK Created: $($ItemIdList[$ic].ShortCutCreated)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["ShortCutCreated"].ForeColor = 'Cyan'
				}
				if ($null -ne $ItemIdList[$ic].ZipIndex)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ZipIndex", "ZipIndex: $($ItemIdList[$ic].ZipIndex)")
				}
				if ($null -ne $ItemIdList[$ic].NameLength -and $ItemIdList[$ic].NameLength -gt 0)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("NameLength", "Name Length: $($ItemIdList[$ic].NameLength)")
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Name", "Name: $($ItemIdList[$ic].Name)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Name"].ForeColor = 'Yellow'
				}
				if ($null -ne $ItemIdList[$ic].ParentLength -and $ItemIdList[$ic].ParentLength -gt 0)
				{
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("ParentLength", "Parent Name Length: $($ItemIdList[$ic].ParentLength)")
					$null = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("Parent", "Parent Name: $($ItemIdList[$ic].Parent)")
					$IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes["Parent"].ForeColor = 'PaleGreen'
				}
				if (!!$ItemIdList[$ic].EmbeddedItems -and $ItemIdList[$ic].EmbeddedItems.count -ge 1)
				{
					$e = 0
					foreach ($embeddeditem in $ItemIdList[$ic].EmbeddedItems)
					{
						$embedded = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("EmbeddedItem$($e)", "Embedded Item: #$($e) Type: [$($embeddeditem.ItemIDType)]")
						$embedded.ForeColor = 'Violet'
						foreach ($embeddedproperty in $embeddeditem.psobject.Properties)
						{
							if ($embeddedproperty.Name -eq 'ItemIdExtensions')
							{
								$x = 0
								Foreach ($extension in $embeddedproperty.Value)
								{
									$extensionNode = $embedded.Nodes.Add("itemIdExtType", "Extension #$($x) Type: [$($extension.itemIdExtType)]")
									$extensionNode.ForeColor = 'Plum'
									if ($extension.NewExtension -eq $true)
									{
										$extensionNode.BackColor = 'Yellow'
									}
									$null = $extensionNode.Nodes.Add("ExtentionSize", "Extension Size: $($extension.extLength)")
									$null = $extensionNode.Nodes.Add("ExtentionVersion", "Extension Version: $($extension.extversion)")
									if ($null -ne $extension.Unicode_Name)
									{
										$Unicode_Name = $extensionNode.Nodes.Add("Unicode_Name", "Unicode Name: $($extension.Unicode_Name)")
										$Unicode_Name.ForeColor = 'PaleGreen'
									}
									if ($null -ne $extension.DocumentType)
									{
										$null = $extensionNode.Nodes.Add("DocumentType", "Document Type: $($extension.DocumentType)")
									}
									if ($null -ne $extension.w32Created)
									{
										$w32CreatedNode = $extensionNode.Nodes.Add("w32Created", "Created: $($extension.w32Created)")
										$w32CreatedNode.ForeColor = 'Cyan'
									}
									if ($null -ne $extension.w32Accessed)
									{
										$w32AccessedNode = $extensionNode.Nodes.Add("w32Accessed", "Accessed: $($extension.w32Accessed)")
										$w32AccessedNode.ForeColor = 'Cyan'
									}
									if ($null -ne $extension.MFTRecordNr)
									{
										$MFTRecordNrNode = $extensionNode.Nodes.Add("MFTRecordNr", "MFT Record Nr: $($extension.MFTRecordNr)")
										$MFTRecordNrNode.ForeColor = 'Orange'
										$MFTRecordSeqNr = $extensionNode.Nodes.Add("MFTRecordSeqNr", "MFT Record Sequence Nr: $($extension.MFTRecordSeqNr)")
										$MFTRecordSeqNr.ForeColor = 'Orange'
									}
									if ($null -ne $extension.Unknown -and $extension.Unknown -ne '0x00000000')
									{
										$null = $extensionNode.Nodes.Add("Unknown", "Unknown value: $($extension.Unknown)")
									}
									$x++
								}
							}
							
							elseif ($embeddedproperty.Name -eq 'Timestamp')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'Cyan'
							}
							elseif ($embeddedproperty.Name -eq 'Parent')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'PaleGreen'
							}
							elseif ($embeddedproperty.Name -eq 'Name')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'Yellow'
							}
							elseif ($embeddedproperty.Name -eq 'w32Modified' -and $null -ne $embeddedproperty.Value)
							{
								$w32Modifiednode = $embedded.Nodes.Add("w32Modified", "Modified): $($embeddedproperty.Value)")
								$w32Modifiednode.ForeColor = 'Cyan'
							}
							elseif ($embeddedproperty.Name -eq 'Data')
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "Embedded Item $($embeddedproperty.Name)")
								$embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'Peru'
								$embedded.Nodes["$($embeddedproperty.Name)"].Tag = @($embeddedproperty.Value)
								$embedded.Nodes["$($embeddedproperty.Name)"].ToolTipText = "Right click to copy the raw (Hex) data ($($embeddedproperty.Value.length))"
							}
							elseif ($embeddedproperty.Name -eq 'Filesize' -and $embeddedproperty.Value -eq $null)
							{
								continue
							}
							else
							{
								$null = $embedded.Nodes.Add("$($embeddedproperty.Name)", "$($embeddedproperty.Name): $($embeddedproperty.Value)")
								if ($embeddedproperty.Name -eq 'Ansi_Name') { $embedded.Nodes["$($embeddedproperty.Name)"].ForeColor = 'PaleGreen' }
							}
						}
						$e++
					}
				}
				$raw = $IDListItemsNode.Nodes["IDListItem$($ic)"].Nodes.Add("RawHexData", "ItemID Data") # : $($ItemIdList[$ic].Data)
				$raw.Tag = @($ItemIdList[$ic].Data)
				$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($ItemIdList[$ic].Data.length))"
				$raw.ForeColor = 'Peru'
			}
		}
	}
	
	<#
		.SYNOPSIS
			Decodes an ObjectID GUID
		
		.DESCRIPTION
			Decodes an ObjectID GUID to:
			
			- Formatted ObjectID GUID
			- Version
			- Variant
			- Sequence Nr
			- Created Timestamp (UTC)
			- MAC Address
		
		.PARAMETER Hex
			A description of the Hex parameter.
		
		.EXAMPLE
			PS C:\> Get-ObjectIdFromHex
		
		.OUTPUTS
			System.Management.Automation.PSObject
		
		.NOTES
			Additional information about the function.
	#>
	function Get-ObjectIdFromHex
	{
		[CmdletBinding()]
		[OutputType([pscustomobject])]
		param
		(
			[Parameter(Mandatory = $true)]
			[string]$Hex
		)
		
		try
		{
			# remove 0x and extra spaces
			$Hex = $Hex -replace " ", ""
			$Hex = $Hex.trim() -replace '\s', ''
			
			# check length
			if ($hex.length -ne 32) { return }
			
			# prepare output pscustomobject	
			$PS_ObjectID = [PSCustomObject]@{ }
			
			# Object ID
			$objid = $Hex -replace '(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)', '$4$3$2$1-$6$5-$8$7-$9$10-'
			$ObjectID = [System.GUID]::Parse($objid).Guid.ToUpper()
			
			# Add to pscustomobject			
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'ObjectID' -Value $ObjectID
			
			$version = [Convert]::ToUInt64("0x$($hex.Substring(14, 1))", 16)
			$vs = [convert]::ToString("0x$($objid.Substring(19, 4))", 2)
			$variant = [Convert]::ToInt16($vs.Substring(0, 2), 2)
			$Sequence = [Convert]::ToInt16($vs.Substring(2, 14), 2)
			
			# Add to pscustomobject		
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Version' -Value $version
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Variant' -Value $variant
			$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Sequence' -Value $Sequence
			
			# Get MAC address & Timestamp
			if ($objid.Substring(14, 1) -eq 1)
			{
				# Get the Date
				# Get the first 16 bytes 
				$tm = $hex.Substring(0, 16)
				# Replace the Version nimble (14) with 0
				$tm = $tm.Remove(14, 1).Insert(14, '0')
				# Reverse Endianess
				$tm = $tm -split "(..)" -ne ""
				[Array]::Reverse($tm)
				$tm = $tm -join ""
				# Convert to Decimal
				$timedec = [Convert]::ToUInt64("0x$($tm)", 16)
				# Get offsets from 1582 & 1601
				$1582offset = (New-Object DateTime(1582, 10, 15, 0, 0, 0)).Ticks
				$1601offset = (New-Object DateTime(1601, 1, 1, 0, 0, 0)).Ticks
				# Calculate the Date after substracting the two Date offsets
				$ObjectIdCreated = [datetime]::FromFileTimeUtc($timedec - ($1601offset - $1582offset)).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
				
				# Add to pscustomobject	
				$PS_ObjectID | Add-Member -Type NoteProperty -Name 'Created' -Value $ObjectIdCreated
				
				# Format MAC
				$mac = ($hex.Substring(20, 12) -split "(..)" -ne "") -join ":"
				
				# Add to pscustomobject	
				$PS_ObjectID | Add-Member -Type NoteProperty -Name 'MAC' -Value $mac
			}
			# output
			$PS_ObjectID
		}
		catch { $null }
	}
	
	function Get-GUIDfromHexString
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$Hex
		)
		
		if ($Hex.Length -in (32,47) -and !![System.Text.RegularExpressions.Regex]::IsMatch($Hex, '[a-fA-F1-9]'))
		{
			
			try
			{
				# remove 0x and extra spaces
				$Hex = $Hex -replace " ", ""
				$Hex = $Hex.trim() -replace '\s', ''
				# Convert Hex String to GUID
				$guidhex = $Hex.Replace('-', '') -replace '(..)(..)(..)(..)(..)(..)(..)(..)(..)(..)', '$4$3$2$1-$6$5-$8$7-$9$10-'
				$GUID = [System.GUID]::Parse($guidhex).Guid.ToUpper()
				Return $GUID
			}
			catch { return $null }
		}
		else { return $null }
	}
	
	function DosDateTime-FromHex
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$Hex
		)
		
		$hex_time = "0x$(($hex -split "(....)")[1])"
		$hex_date = "0x$(($hex -split "(....)")[3])"
		
		$bin_t = [Convert]::ToString($hex_time, 2).padleft(16, '0')
		$bin_d = [Convert]::ToString($hex_date, 2).padleft(16, '0')
		
		$hour = $bin_t.substring(0, 5)
		$minutes = $bin_t.substring(5, 6)
		$seconds = $bin_t.substring(11, 5)
		$Time = "$([Convert]::toInt32($hour, 2)):$([Convert]::toInt32($minutes, 2)):$([Convert]::toInt32($seconds, 2) * 2)"
		
		$year = $bin_d.substring(0, 7)
		$month = $bin_d.substring(7, 4)
		$day = $bin_d.substring(11, 5)
		$Date = "$([Convert]::toInt32($day, 2))/$([Convert]::toInt32($month, 2))/$([Convert]::toInt32($year, 2) + 1980)"
		try	{ $DosDate = [System.DateTime]::Parse("$($Date) $($Time)")	} #	Get-Date "$($Date) $($Time)" -Format s
		catch { $DosDate = $null }
		
		return $DosDate
	}
	
	# https://learn.microsoft.com/en-us/dotnet/api/system.io.fileattributes?view=net-7.0
	# https://learn.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants 
	$FileAttributesEnum = [Ordered]@{
		'1'		     = 'ReadOnly'
		'2'		     = 'Hidden'
		'4'		     = 'System'
		'16'		 = 'Directory'
		'32'		 = 'Archive'
		'64'		 = 'Device'
		'128'	     = 'Normal'
		'256'	     = 'Temporary'
		'512'	     = 'Sparse_File'
		'1024'	     = 'Reparse_Point'
		'2048'	     = 'Compressed'
		'4096'	     = 'Offline'
		'8192'	     = 'Not_Content_Indexed'
		'16384'	     = 'Encrypted'
		'32768'	     = 'Integrity_Stream'
		'65536'	     = 'Virtual'
		'131072'	 = 'No_Scrub_Data'
		'524288'	 = 'Pinned'
		'262144'	 = 'Recall_On_Open'
		'1048576'    = 'Unpinned'
		'4194304'    = 'Recall_On_DataAccess'
		'2147483648' = 'TxF_flag'
	}
	
	# Source https://github.com/EricZimmerman/ExtensionBlocks/blob/e0cef99c81776641e68a3f436bfcde21f6807334/ExtensionBlocks/Utils.cs
	$formatIDHashTable = [Ordered]@{
		"46588ae2-4cbc-4338-bbfc-139326986dce\4"	 = "SID"
		"dabd30ed-0043-4789-a7f8-d013a4736622\100"   = "Item Folder Path Display Narrow"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\0"	 = "Find Data"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\1"	 = "Network Resource"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\2"	 = "Description ID"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\3"	 = "Which Folder"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\4"	 = "Network Location"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\5"	 = "Computer Name"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\6"	 = "Namespace CLSID"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\8"	 = "Item Path Display Narrow"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\9"	 = "Perceived Type"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\10"    = "Computer Simple Name"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\11"    = "Item Type"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\12"    = "File Count"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\14"    = "Total File Size"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\22"    = "Max Stack Count"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\23"    = "List Description"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\24"    = "Parsing Name"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\25"    = "SFGAO Flags"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\26"    = "Order"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\27"    = "Computer Description"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\29"    = "Contained Items"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\30"    = "Parsing Path"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\31"    = "Network Provider"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\32"    = "Delegate ID List"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\33"    = "Is SendTo Target"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\34"    = "Hide On Desktop"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\35"    = "Network Places Default Name"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\36"    = "Storage System Type"
		"28636aa6-953d-11d2-b5d6-00c04fd918d0\37"    = "Item SubType"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\2"	 = "App User Model Relaunch Command"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\3"	 = "App User Model Relaunch Icon Resource"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\4"	 = "App User Model Relaunch Display Name Resource"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\5"	 = "App User Model ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\6"	 = "App User Model Is DestList Separator"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\7"	 = "App User Model Is DestList Link"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\8"	 = "App User Model Exclude From Show In New Install"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\9"	 = "App User Model Prevent Pinning"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\10"    = "App User Model Best Shortcut"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\11"    = "App User Model Is Dual Mode"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\12"    = "App User Model Start Pin Option"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\13"    = "App User Model Relevance"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\14"    = "App User Model Host Environment"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\15"    = "App User Model Package Install Path"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\16"    = "App User Model Record State"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\17"    = "App User Model Package Family Name"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\18"    = "App User Model Installed By"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\19"    = "App User Model Parent ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\20"    = "App User Model Activation Context"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\21"    = "App User Model Package Full Name"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\22"    = "App User Model Package Relative Application ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\23"    = "App User Model Excluded From Launcher"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\24"    = "App User Model AppCompat ID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\25"    = "App User Model Run Flags"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\26"    = "App User Model Toast Activator CLSID"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\27"    = "App User Model DestList Provided Title"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\28"    = "App User Model DestList Provided Description"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\29"    = "App User Model DestList Logo Uri"
		"9f4c2855-9f79-4b39-a8d0-e1d42de1d5f3\30"    = "App User Model DestList Provided Group Name"
		"446d16b1-8dad-4870-a748-402ea43d788c\100"   = "Thumbnail Cache Id"
		"446d16b1-8dad-4870-a748-402ea43d788c\104"   = "Volume Id"
		"446d16b1-8dad-4870-a748-402ea43d788c\105"   = "Tooltip Thumbnail Stream"
		"fb8d2d7b-90d1-4e34-bf60-6eac09922bbf\2"	 = "WinX Hash"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\3"	 = "Subject"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\4"	 = "Author"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\5"	 = "Keywords"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\6"	 = "Comment"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\7"	 = "Document Template"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\8"	 = "Document Last Author"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\9"	 = "Document Revision Number"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\10"    = "Document Total Editing Time"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\11"    = "Document Date Printed"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\12"    = "Document Date Created"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\13"    = "Document Date Saved"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\14"    = "Document Page Count"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\15"    = "Document Word Count"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\16"    = "Document Character Count"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\17"    = "Thumbnail"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\18"    = "Application Name"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\19"    = "Document Security"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\24"    = "High Keywords"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\25"    = "Low Keywords"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\26"    = "Medium Keywords"
		"f29f85e0-4ff9-1068-ab91-08002b27b3d9\27"    = "Thumbnail Stream"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\2"	 = "Publisher Display Name"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\3"	 = "Software Registered Owner"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\4"	 = "Software Registered Company"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\5"	 = "Software AppId"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\6"	 = "Software Support Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\7"	 = "Software Support Telephone"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\8"	 = "Software Help Link"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\9"	 = "Software Install Location"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\10"    = "Software Install Source"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\11"    = "Software Date Installed"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\12"    = "Software Support Contact Name"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\13"    = "Software ReadMe Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\14"    = "Software Update Info Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\15"    = "Software Times Used"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\16"    = "Software Date Last Used"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\17"    = "Software Tasks File Url"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\18"    = "Software Parent Name"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\19"    = "Software Product ID"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\20"    = "Software Comments"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\997"   = "Software Null Preview Total Size"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\998"   = "Software Null Preview Subtitle"
		"841e4f90-ff59-4d16-8947-e81bbffab36d\999"   = "Software Null Preview Title"
		"86d40b4d-9069-443c-819a-2a54090dccec\2"	 = "Tile Small Image Location"
		"86d40b4d-9069-443c-819a-2a54090dccec\4"	 = "Tile Background Color"
		"86d40b4d-9069-443c-819a-2a54090dccec\5"	 = "Tile Foreground Color"
		"86d40b4d-9069-443c-819a-2a54090dccec\11"    = "Tile Display Name"
		"86d40b4d-9069-443c-819a-2a54090dccec\12"    = "Tile Image Location"
		"86d40b4d-9069-443c-819a-2a54090dccec\13"    = "Tile Wide 310x150 Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\14"    = "Tile Unknown Flags"
		"86d40b4d-9069-443c-819a-2a54090dccec\15"    = "Tile Badge Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\16"    = "Tile Suite Display Name"
		"86d40b4d-9069-443c-819a-2a54090dccec\17"    = "Tile Suite Sor tName"
		"86d40b4d-9069-443c-819a-2a54090dccec\18"    = "Tile Display Name Language"
		"86d40b4d-9069-443c-819a-2a54090dccec\19"    = "Tile Square 310x310 Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\20"    = "Tile Square 70x70 Logo Path"
		"86d40b4d-9069-443c-819a-2a54090dccec\21"    = "Tile Fence Post"
		"86d40b4d-9069-443c-819a-2a54090dccec\22"    = "Tile Install Progress"
		"86d40b4d-9069-443c-819a-2a54090dccec\23"    = "Tile Encoded Target Path"
		"b725f130-47ef-101a-a5f1-02608c9eebac\2"	 = "Item Folder Name Display"
		"b725f130-47ef-101a-a5f1-02608c9eebac\3"	 = "Search ClassID"
		"b725f130-47ef-101a-a5f1-02608c9eebac\4"	 = "Item Type Text"
		"b725f130-47ef-101a-a5f1-02608c9eebac\8"	 = "File Index"
		"b725f130-47ef-101a-a5f1-02608c9eebac\9"	 = "Search Last Change USN"
		"b725f130-47ef-101a-a5f1-02608c9eebac\10"    = "Item Name Display"
		"b725f130-47ef-101a-a5f1-02608c9eebac\12"    = "Size"
		"b725f130-47ef-101a-a5f1-02608c9eebac\13"    = "File Attributes"
		"b725f130-47ef-101a-a5f1-02608c9eebac\14"    = "Date Modified"
		"b725f130-47ef-101a-a5f1-02608c9eebac\15"    = "Date Created"
		"b725f130-47ef-101a-a5f1-02608c9eebac\16"    = "Date Accessed"
		"b725f130-47ef-101a-a5f1-02608c9eebac\18"    = "File Allocation Size"
		"b725f130-47ef-101a-a5f1-02608c9eebac\19"    = "Search Contents"
		"b725f130-47ef-101a-a5f1-02608c9eebac\20"    = "Search ShortName"
		"b725f130-47ef-101a-a5f1-02608c9eebac\21"    = "File FRN"
		"b725f130-47ef-101a-a5f1-02608c9eebac\22"    = "Search Scope"
		"b725f130-47ef-101a-a5f1-02608c9eebac\23"    = "Item Name Sort Override"
		"b725f130-47ef-101a-a5f1-02608c9eebac\24"    = "Item Name Display Without Extension"
		"b725f130-47ef-101a-a5f1-02608c9eebac\25"    = "Folder Name Display"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\2"	 = "Message Bcc Address"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\3"	 = "Message Bcc Name"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\4"	 = "Message Cc Address"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\5"	 = "Message Cc Name"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\6"	 = "Item Folder Path Display"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\7"	 = "Item Path Display"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\9"	 = "Communication Account Name"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\10"    = "Is Read"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\11"    = "Importance"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\12"    = "Flag Status"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\13"    = "Message From Address"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\14"    = "Message From Name"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\15"    = "Message Store"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\16"    = "Message To Address"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\17"    = "Message To Name"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\18"    = "Contact Web Page"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\19"    = "Message Date Sent"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\20"    = "Message Date Received"
		"e3e0584c-b788-4a5a-bb20-7f5a44c9acdd\21"    = "Message Attachment Names"
		"00000000-0000-0000-0000-000000000000\0"	 = "Null"
		"000214a1-0000-0000-c000-000000000046}\9"    = "Status"
		"00bc20a3-bd48-4085-872c-a88d77f5097e\105"   = "Music Composer Sort Override"
		"00f58a38-c54b-4c40-8696-97235980eae1\100"   = "Calendar Resources"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\101"   = "Contact Job Info1 Yomi Company Name"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\102"   = "Contact Job Info1 Company Name"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\103"   = "Contact Job Info1 Title"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\104"   = "Contact Job Info1 Office Location"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\105"   = "Contact Job Info1 Manager"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\106"   = "Contact Job Info1 Department"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\107"   = "Contact Job Info2 Yomi Company Name"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\108"   = "Contact Job Info2 Company Name"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\109"   = "Contact Job Info2 Title"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\110"   = "Contact Job Info2 Office Location"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\112"   = "Contact Job Info2 Manager"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\113"   = "Contact Job Info2 Department"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\114"   = "Contact Job Info3 Yomi Company Name"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\115"   = "Contact Job Info3 Company Name"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\116"   = "Contact Job Info3 Title"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\117"   = "Contact Job Info3 Office Location"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\118"   = "Contact Job Info3 Manager"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\119"   = "Contact Job Info3 Department"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\120"   = "Contact Job Info1 Company Address"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\121"   = "Contact Job Info2 Company Address"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\123"   = "Contact Job Info3 Company Address"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\124"   = "Contact Webpage 2"
		"00f63dd8-22bd-4a5d-ba34-5cb0b9bdcb03\125"   = "Contact Webpage 3"
		"026e516e-b814-414b-83cd-856d6fef4822\3"	 = "Devices Interface Enabled"
		"026e516e-b814-414b-83cd-856d6fef4822\4"	 = "Devices Interface Class Guid"
		"026e516e-b814-414b-83cd-856d6fef4822\6"	 = "Devices Restricted Interface"
		"029c0252-5b86-46c7-aca0-2769ffc8e3d4\100"   = "GPS Latitude Ref"
		"02b0f689-a914-4e45-821d-1dda452ed2c4\100"   = "GPS Longitude Numerator"
		"03089873-8ee8-4191-bd60-d31f72b7900b\100"   = "Contact Display Other Phone Numbers"
		"0337ecec-39fb-4581-a0bd-4c4cc51e9914\100"   = "Photo Aperture Numerator"
		"048658ad-2db8-41a4-bbb6-ac1ef1207eb1\100"   = "Item Class Type"
		"05e932b1-7ca2-491f-bd69-99b4cb266cbb\2"	 = "Connected Search Disambiguation Text"
		"06704b0c-e830-4c81-9178-91e4e95a80a0\2"	 = "Devices Notification Store"
		"06704b0c-e830-4c81-9178-91e4e95a80a0\3"	 = "Devices Notification"
		"084d8a0a-e6d5-40de-bf1f-c8820e7c877c\100"   = "Task CompletionStatus"
		"08a65aa1-f4c9-43dd-9ddf-a33d8e7ead85\100"   = "Contact HomeAddressCountry"
		"08c7cc5f-60f2-4494-ad75-55e3e0b5add0\100"   = "Task Owner"
		"08f6d7c2-e3f2-44fc-af1e-5aa5c81a2d3e\100"   = "Photo MaxAperture"
		"09329b74-40a3-4c68-bf07-af9a572f607c\100"   = "Is Folder"
		"0933f3f5-4786-4f46-a8e8-d64dd37fa521\100"   = "Photo Focal Plane X Resolution Denominator"
		"09429607-582d-437f-84c3-de93a2b24c3c\100"   = "Calendar Optional AttendeeNames"
		"09736039-456b-4219-ba3e-ec573b58cf97\2"	 = "Secondary Tile Is Uninstalled"
		"09edd5b6-b301-43c5-9990-d00302effd46\100"   = "Media Average Level"
		"0a7b84ef-0c27-463f-84ef-06c5070001be\10"    = "Device Interface Printer Name"
		"0abe4d16-9384-426b-b41a-eac3c8e0f147\2"	 = "Search Content Snippet"
		"0adef160-db3f-4308-9a21-06237b16fa2a\100"   = "Contact Home Address Street"
		"0b48f35a-be6e-4f17-b108-3c4073d1669a\15"    = "Device Printer URL"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\2"	 = "Search Url To Index"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\12"    = "Search Url To Index With Modification Time"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\23"    = "Search Is Closed Directory"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\24"    = "Search Is Fully Contained"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\25"    = "Search Provider Class"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\26"    = "Search Provider Web Domain"
		"0b63e343-9ccc-11d0-bcdb-00805fccce04\27"    = "Search Provider Result Limit"
		"0b63e350-9ccc-11d0-bcdb-00805fccce04\5"	 = "MIME Type"
		"0b63e350-9ccc-11d0-bcdb-00805fccce04\8"	 = "Search Gather Time"
		"0b63e350-9ccc-11d0-bcdb-00805fccce04\9"	 = "Search Access Count"
		"0b63e350-9ccc-11d0-bcdb-00805fccce04\11"    = "Search Last Indexed Total Time"
		"0b8bb018-2725-4b44-92ba-7933aeb2dde7\2"	 = "Contact Account Picture Dynamic Video"
		"0b8bb018-2725-4b44-92ba-7933aeb2dde7\3"	 = "Contact Account Picture Large"
		"0b8bb018-2725-4b44-92ba-7933aeb2dde7\4"	 = "Contact Account Picture Small"
		"0ba7d6c3-568d-4159-ab91-781a91fb71e5\100"   = "Calendar Required Attendee Addresses"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\2"	 = "Devices AepContainer Children"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\3"	 = "Devices AepContainer Can Pair"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\4"	 = "Devices AepContainer Is Paired"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\6"	 = "Devices AepContainer Manufacturer"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\7"	 = "Devices AepContainer Model Name"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\8"	 = "Devices AepContainer Model Ids"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\9"	 = "Devices AepContainer Categories"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\11"    = "Devices AepContainer Is Present"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\12"    = "Devices AepContainer Container Id"
		"0bba1ede-7566-4f47-90ec-25fc567ced2a\13"    = "Devices AepContainer Protocol Ids"
		"0be1c8e7-1981-4676-ae14-fdd78f05a6e7\100"   = "Message Sender Address"
		"0be3fd71-3f87-40e0-aead-0294cf674635\2"	 = "Shell Is Dav Resource"
		"0c73b141-39d6-4653-a683-cab291eaf95b\2"	 = "Supplemental Album Id"
		"0c73b141-39d6-4653-a683-cab291eaf95b\3"	 = "Supplemental Resource Id"
		"0c840a88-b043-466d-9766-d4b26da3fa77\100"   = "Photo Subject Distance Denominator"
		"0cb2bf5a-9ee7-4a86-8222-f01e07fdadaf\100"   = "PropGroup Photo Advanced"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\3"	 = "File Description"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\4"	 = "File Version"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\5"	 = "Internal Name"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\6"	 = "Original File Name"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\7"	 = "Software Product Name"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\8"	 = "Software Product Version"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\9"	 = "Trademarks"
		"0cef7d53-fa64-11d1-a203-0000f81fedee\11"    = "Platform"
		"0cf8fb02-1837-42f1-a697-a7017aa289b9\100"   = "GPS DOP"
		"0da41cfa-d224-4a18-ae2f-596158db4b3a\100"   = "Message Sender Name"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\2"	 = "Launcher Order"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\3"	 = "Launcher Group ID"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\6"	 = "Launcher View ID"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\7"	 = "Launcher App State"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\8"	 = "Launcher Tile Size"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\9"	 = "Launcher Group Name"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\10"    = "Launcher Splash Screen Image"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\11"    = "Launcher TileSize Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\12"    = "Launcher ItemPosition Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\13"    = "Launcher View ID Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\14"    = "Launcher Group Membership Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\15"    = "Launcher Group Name Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\16"    = "Launcher Default Tile Size"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\17"    = "Launcher Placeholder Expiry Candidate"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\18"    = "Launcher Placeholder Expiry Candidate Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\19"    = "Launcher Item Flags"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\20"    = "Launcher Group Position Timestamp"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\21"    = "Launcher Store Category"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\22"    = "Launcher Win Store Category Name"
		"0ded77b3-c614-456c-ae5b-285b38d7b01b\23"    = "Launcher SubgroupID"
		"0f55cde2-4f49-450d-92c1-dcd16301b1b7\100"   = "GPS Latitude Decimal"
		"10984e0a-f9f2-4321-b7ef-baf195af4319\100"   = "Parental Rating Reason"
		"10b24595-41a2-4e20-93c2-5761c1395f32\100"   = "GPS Img Direction Denominator"
		"10dabe05-32aa-4c29-bf1a-63e2d220587f\100"   = "Image Image Id"
		"1173f62a-2a55-4f62-aed6-8c7112e0f7a3\5"	 = "Force Full Text"
		"11d6336b-38c4-4ec9-84d6-eb38d0b150af\100"   = "Contact Other Email Addresses"
		"125491f4-818f-46b2-91b5-d537753617b2\100"   = "GPS Status"
		"12ea418f-d8cd-4cdf-9b23-457eaac7ff0d\100"   = "Communication Directory Server"
		"12fa14f5-c6fe-4545-bce2-1ed6cb6b8422\2"	 = "Connected Search Link Text"
		"13673f42-a3d6-49f6-b4da-ae46e0c5237c\2"	 = "Devices DevObject Type"
		"13eb7ffc-ec89-4346-b19d-ccc6f1784223\101"   = "Music Album Title Sort Override"
		"14977844-6b49-4aad-a714-a4513bf60460\100"   = "Contact First Name"
		"149c0b69-2c2d-48fc-808f-d318d78c4636\2"	 = "Volume Is Mapped Drive"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\259"   = "Image Compression"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\271"   = "Photo Camera Manufacturer"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\272"   = "Photo Camera Model"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\273"   = "Photo Camera Serial Number"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\274"   = "Photo Orientation"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\305"   = "Software Used"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\18248" = "Photo Event"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\18258" = "Date Imported"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\33432" = "Image Copyright"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\33434" = "Photo Exposure Time"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\33437" = "Photo FNumber"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\34850" = "Photo Exposure Program"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\34855" = "Photo ISO Speed"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\36867" = "Photo Date Taken"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37377" = "Photo Shutter Speed"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37378" = "Photo Aperture"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37380" = "Photo Exposure Bias"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37382" = "Photo Subject Distance"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37383" = "Photo Metering Mode"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37384" = "Photo Light Source"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37385" = "Photo Flash"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\37386" = "Photo Focal Length"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\40096" = "Image Property Bag"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\40961" = "Image Color Space"
		"14b81da1-0135-4d31-96d9-6cbfc9671a99\41483" = "Photo Flash Energy"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\2"	 = "Devices WiFi Direct Interface Address"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\3"	 = "Devices WiFi Direct Interface Guid"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\4"	 = "Devices WiFi Direct Group Id"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\5"	 = "Devices WiFi Direct Is Connected"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\6"	 = "Devices WiFi Direct Is Visible"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\7"	 = "Devices WiFi Direct Is Legacy Device"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\8"	 = "Devices WiFi Direct Miracast Version"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\9"	 = "Devices WiFi Direct Is Miracast Lcp Supported"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\10"    = "Devices WiFi Direct Services"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\11"    = "Devices WiFi Direct Supported ChannelList"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\12"    = "Devices WiFi Direct Information Elements"
		"1506935d-e3e7-450f-8637-82233ebe5f6e\13"    = "Devices WiFi Direct Device Address"
		"16473c91-d017-4ed9-ba4d-b6baa55dbcf8\100"   = "GPS Img Direction"
		"16cbb924-6500-473b-a5be-f1599bcbe413\100"   = "Photo Digital Zoom Numerator"
		"16e634ee-2bff-497b-bd8a-4341ad39eeb9\100"   = "GPS Latitude Denominator"
		"16ea4042-d6f4-4bca-8349-7c78d30fb333\100"   = "Photo Shutter Speed Numerator"
		"176dc63c-2688-4e89-8143-a347800f25e9\6"	 = "Contact Job Title"
		"176dc63c-2688-4e89-8143-a347800f25e9\7"	 = "Contact Office Location"
		"176dc63c-2688-4e89-8143-a347800f25e9\20"    = "Contact Home Telephone"
		"176dc63c-2688-4e89-8143-a347800f25e9\25"    = "Contact Primary Telephone"
		"176dc63c-2688-4e89-8143-a347800f25e9\35"    = "Contact Mobile Telephone"
		"176dc63c-2688-4e89-8143-a347800f25e9\47"    = "Contact Birthday"
		"176dc63c-2688-4e89-8143-a347800f25e9\48"    = "Contact Primary Email Address"
		"176dc63c-2688-4e89-8143-a347800f25e9\65"    = "Contact Hom eAddress City"
		"176dc63c-2688-4e89-8143-a347800f25e9\69"    = "Contact Personal Title"
		"176dc63c-2688-4e89-8143-a347800f25e9\70"    = "Contact Given Name"
		"176dc63c-2688-4e89-8143-a347800f25e9\71"    = "Contact Middle Name"
		"176dc63c-2688-4e89-8143-a347800f25e9\73"    = "Contact Suffix"
		"176dc63c-2688-4e89-8143-a347800f25e9\74"    = "Contact Nick Name"
		"176dc63c-2688-4e89-8143-a347800f25e9\75"    = "Contact Prefix"
		"1804d1fb-9fa4-441d-a536-76468ac43307\100"   = "WebDav Path"
		"182c1ea6-7c1c-4083-ab4b-ac6c9f4ed128\100"   = "GPS Dest Longitude Ref"
		"188c1f91-3c40-4132-9ec5-d8b03b72a8a2\100"   = "Calendar Response Status"
		"18bbd425-ecfd-46ef-b612-7b4a6034eda0\100"   = "Contact Primary Address Postal Code"
		"19b51fa6-1f92-4a5c-ab48-7df0abd67444\100"   = "Image Resolution Unit"
		"1a701bf6-478c-4361-83ab-3701bb053c58\100"   = "Photo Brightness"
		"1a9ba605-8e7c-4d11-ad7d-a50ada18ba1b\2"	 = "Message Participants"
		"1b5439e7-eba1-4af8-bdd7-7af1d4549493\100"   = "RecordedTV Station Name"
		"1b97738a-fdfc-462f-9d93-1957e08be90c\100"   = "Photo FNumber Numerator"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\2"	 = "Home Grouping"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\3"	 = "Home Sort Order"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\4"	 = "Home Is Pinned"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\5"	 = "Home PropList Sort"
		"30c8eef4-a832-41e2-ab32-e3c3ca28fd29\6"	 = "Home Item Folder Path Display"
		"3143bf7c-80a8-4854-8880-e2e40189bdd0\100"   = "Message Attachment Contents"
		"315b9c8d-80a9-4ef9-ae16-8e746da51d70\100"   = "Calendar Is Recurring"
		"318a6b45-087f-4dc2-b8cc-05359551fc9e\100"   = "Photo Related Sound File"
		"31b37743-7c5e-4005-93e6-e953f92b82e9\2"	 = "Devices WiFi Direct Services Service Address"
		"31b37743-7c5e-4005-93e6-e953f92b82e9\3"	 = "Devices WiFi Direct Services Service Name"
		"31b37743-7c5e-4005-93e6-e953f92b82e9\4"	 = "Devices WiFi Direct Services Service Information"
		"31b37743-7c5e-4005-93e6-e953f92b82e9\5"	 = "Devices WiFi Direct Services Advertisement Id"
		"31b37743-7c5e-4005-93e6-e953f92b82e9\6"	 = "Devices WiFi Direct Services Service Config Methods"
		"31b37743-7c5e-4005-93e6-e953f92b82e9\7"	 = "Devices WiFi Direct Services Request Service Information"
		"328d8b21-7729-4bfc-954c-902b329d56b0\2"	 = "Sync Copy In"
		"32bcb03c-7f34-4e3f-bbb2-ebe63629f5e4\100"   = "Is Simple Item"
		"33dcf22b-28d5-464c-8035-1ee9efd25278\100"   = "GPS Longitude Ref"
		"341796f1-1df9-4b1c-a564-91bdefa43877\100"   = "Photo PhotometricInterpretation"
		"346c8bd1-2e6a-4c45-89a4-61b78e8e700f\100"   = "Is Incomplete"
		"35dbe6fe-44c3-4400-aaae-d2c799c407e8\100"   = "GPS Track Ref"
		"3602c812-0f3b-45f0-85ad-603468d69423\100"   = "GPS Date"
		"3633de59-6825-4381-a49b-9f6ba13a1471\2"	 = "Devices Playback State"
		"3633de59-6825-4381-a49b-9f6ba13a1471\3"	 = "Devices Playback Title"
		"3633de59-6825-4381-a49b-9f6ba13a1471\4"	 = "Devices Remaining Duration"
		"3633de59-6825-4381-a49b-9f6ba13a1471\5"	 = "Devices Playback Position Percent"
		"364028da-d895-41fe-a584-302b1bb70a76\100"   = "Contact Display Business Phone Numbers"
		"364b6fa9-37ab-482a-be2b-ae02f60d4318\100"   = "Image Compressed Bits Per  Pixel"
		"37ebd11f-7e72-4ebc-9d4c-c790f8c277c2\2"	 = "Device Interface Spb Controller Friendly Name"
		"38965063-edc8-4268-8491-b7723172cf29\100"   = "Contact Email Address 2"
		"38d43380-d418-4830-84d5-46935a81c5c6\32"    = "Security Allowed Enterprise Data Protection Identities"
		"39a7f922-477c-48de-8bc8-b28441e342e3\100"   = "Project"
		"39b77f4f-a104-4863-b395-2db2ad8f7bc1\100"   = "Contact Connected Service Display Name"
		"3a372292-7fca-49a7-99d5-e47bb2d4e7ab\100"   = "GPS Dest Latitude Denominator"
		"3b2ce006-5e61-4fde-bab8-9b8aac9b26df\5"	 = "Devices Aep Protocol Id"
		"3b2ce006-5e61-4fde-bab8-9b8aac9b26df\8"	 = "Devices Aep Id"
		"3c8cee58-d4f0-4cf9-b756-4e5d24447bcd\100"   = "Contact Gender"
		"3c8cee58-d4f0-4cf9-b756-4e5d24447bcd\101"   = "Contact Gender Value"
		"3d658d4d-bc38-464a-b555-418d554a8df8\100"   = "Fonts Description"
		"3d75e4f5-a391-4952-81f7-c7072fe53025\100"   = "File Reparse Point Tag"
		"3f08e66f-2f44-4bb9-a682-ac35d2562322\100"   = "Image Compression Text"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\2"	 = "Extensions Type"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\3"	 = "Extensions Date Last Used"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\4"	 = "Extensions Used Count"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\5"	 = "Extensions Blocked Count"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\6"	 = "Extensions CLSID"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\7"	 = "Extensions Status"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\8"	 = "Check State"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\9"	 = "Extensions Suspect"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\10"    = "Extensions File Name"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\11"    = "Extensions File Path"
		"3f5d9b45-5e9f-4d5c-8a5e-403181bf177b\12"    = "Extensions Flags"
		"3f8472b5-e0af-4db2-8071-c53fe76ae7ce\100"   = "Due Date"
		"402b5934-ec5a-48c3-93e6-85e86a2d934e\100"   = "Contact Business Address City"
		"41cf5ae0-f75a-4806-bd87-59c7d9248eb9\100"   = "File Name"
		"425d69e5-48ad-4900-8d80-6eb6b8d0ac86\100"   = "GPS Dest Longitude Denominator"
		"428040ac-a177-4c8a-9760-f6f761227f9a\100"   = "Communication Date Item Expires"
		"42864dfd-9da4-4f77-bded-4aad7b256735\100"   = "Photo Gain Control Denominator"
		"4340a6c5-93fa-4706-972c-7b648008a5a7\8"	 = "Devices Parent"
		"4340a6c5-93fa-4706-972c-7b648008a5a7\9"	 = "Devices Children"
		"436f2667-14e2-4feb-b30a-146c53b5b674\100"   = "Link Arguments"
		"43f8d7b7-a444-4f87-9383-52271c9b915c\100"   = "DateArchived"
		"446f787f-10c4-41cb-a6c4-4d0343551597\100"   = "Contact Business Address State"
		"4530d076-b598-4a81-8813-9b11286ef6ea\2"	 = "Fonts Font Embeddability"
		"4530d076-b598-4a81-8813-9b11286ef6ea\5"	 = "Fonts Type"
		"4530d076-b598-4a81-8813-9b11286ef6ea\7"	 = "Fonts File Names"
		"4596208c-32fa-41d2-9695-af0cb9e8dcfe\100"   = "Stack Thumbnail Cache Ids"
		"45eae747-8e2a-40ae-8cbf-ca52aba6152a\100"   = "Flag Color Text"
		"4679c1b5-844d-4590-baf5-f322231f1b81\100"   = "GPS Longitude Decimal"
		"467ee575-1f25-4557-ad4e-b8b58b0d9c15\100"   = "GPS Satellites"
		"4684fe97-8765-4842-9c13-f006447b178c\100"   = "Recorded TV Original Broadcast Date"
		"46ac629d-75ea-4515-867f-6dc4321c5844\100"   = "GPS Altitude Ref"
		"46b4e8de-cdb2-440d-885c-1658eb65b914\100"   = "Note Color Text"
		"47166b16-364f-4aa0-9f31-e2ab3df449c3\100"   = "GPS DOP Numerator"
		"4776cafa-bce4-4cb1-a23e-265e76d8eb11\100"   = "Note Color"
		"47a96261-cb4c-4807-8ad3-40b9d9dbc6bc\100"   = "GPS DestLongitude"
		"48fd6ec8-8a12-4cdf-a03e-4ec5a511edde\100"   = "Start Date"
		"49237325-a95a-4f67-b211-816b2d45d2e0\100"   = "Photo Saturation"
		"49691c90-7e17-101a-a91c-08002b2ecda9\2"	 = "Search Results Rank"
		"49691c90-7e17-101a-a91c-08002b2ecda9\3"	 = "Search Rank"
		"49691c90-7e17-101a-a91c-08002b2ecda9\4"	 = "Search Hit Count"
		"49691c90-7e17-101a-a91c-08002b2ecda9\5"	 = "Search Entry Id"
		"49691c90-7e17-101a-a91c-08002b2ecda9\8"	 = "Search Reverse File Name"
		"49691c90-7e17-101a-a91c-08002b2ecda9\9"	 = "Item Url"
		"49691c90-7e17-101a-a91c-08002b2ecda9\10"    = "Content Url"
		"49691c90-7e17-101a-a91c-08002b2ecda9\15"    = "Search Row Id"
		"49691c90-7e17-101a-a91c-08002b2ecda9\21"    = "Search Query Property Hits"
		"49691c90-7e17-101a-a91c-08002b2ecda9\22"    = "Search Completion"
		"49691c90-7e17-101a-a91c-08002b2ecda9\28"    = "Search Result Set Aggregate Attributes"
		"49753869-849c-4323-a41f-26d73f28b53b\100"   = "Fonts Vendors"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\2"	 = "Devices Signal Strength"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\3"	 = "Devices Text Messages"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\4"	 = "Devices New Pictures"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\5"	 = "Devices Missed Calls"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\6"	 = "Devices Voicemail"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\7"	 = "Devices Network Name"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\8"	 = "Devices Network Type"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\9"	 = "Devices Roaming"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\10"    = "Devices Battery Life"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\11"    = "Devices Charging State"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\12"    = "Devices Storage Capacity"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\13"    = "Devices Storage Free Space"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\14"    = "Devices Storage Free Space Percent"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\22"    = "Devices Battery Plus Charging"
		"49cd1f76-5626-4b17-a4e8-18b4aa1a2213\23"    = "Devices Battery Plus Charging Text"
		"49d1091f-082e-493f-b23f-d2308aa9668c\100"   = "PropList Non Personal"
		"49eb6558-c09c-46dc-8668-1f848c290d0b\1"	 = "Shell Exclusion"
		"49eb6558-c09c-46dc-8668-1f848c290d0b\3"	 = "Shell Item Offline Status"
		"4ac903f8-e780-4e4b-b7b8-4d00a99804fc\100"   = "Home Group Sharing Status"
		"4b486401-5468-4381-9b5a-42df4cb49f53\100"   = "Fonts Category"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\100"   = "Start Menu Group"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\101"   = "Start Menu Run Command"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\102"   = "Start Menu Query"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\103"   = "Start Menu Group Item"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\104"   = "Start Menu Include In Scope"
		"4bd13b3d-e68b-44ec-89ee-7611789d4070\105"   = "Start Menu Result Source Id"
		"4c6bf15c-4c03-4aac-91f5-64c0f852bcf4\2"	 = "Device Interface Serial Usb Vendor Id"
		"4c6bf15c-4c03-4aac-91f5-64c0f852bcf4\3"	 = "Device Interface Serial Usb Product Id"
		"4c6bf15c-4c03-4aac-91f5-64c0f852bcf4\4"	 = "Device Interface Serial Port Name"
		"4d1ebee8-0803-4774-9842-b77db50265e9\2"	 = "Storage Portable"
		"4d1ebee8-0803-4774-9842-b77db50265e9\3"	 = "Storage Removable Media"
		"4d1ebee8-0803-4774-9842-b77db50265e9\4"	 = "Storage System Critical"
		"4e9cfc01-5d36-406a-83cd-4e7423923604\2"	 = "Offline Sync Time"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\2"	 = "Lzh Folder Compressed Size"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\3"	 = "Lzh Folder CRC16"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\4"	 = "Lzh Folder Method"
		"4f289a46-2bbb-4ae8-9eda-e5e034707a71\5"	 = "Lzh Folder Ratio"
		"4fffe4d0-914f-4ac4-8d6f-c9c61de169b1\100"   = "Photo Focal Plane Y Resolution"
		"502cfeab-47eb-459c-b960-e6d8728f7701\100"   = "Zone Identifier"
		"502cfeab-47eb-459c-b960-e6d8728f7701\101"   = "Last Writer Package Family Name"
		"502cfeab-47eb-459c-b960-e6d8728f7701\102"   = "App Zone Identifier"
		"5068bcdf-d697-4d85-8c53-1f1cdab01763\100"   = "Contact Display Home Phone Numbers"
		"508161fa-313b-43d5-83a1-c1accf68622c\100"   = "Contact Other Address"
		"51236583-0c4a-4fe8-b81f-166aec13f510\100"   = "Devices App Package Family Name"
		"51236583-0c4a-4fe8-b81f-166aec13f510\123"   = "Devices Glyph Icon"
		"51ec3f47-dd50-421d-8769-334f50424b1e\100"   = "Photo Sharpness Text"
		"53da57cf-62c0-45c4-81de-7610bcefd7f5\100"   = "Calendar Show Time As Text"
		"540b947e-8b40-45bc-a8a2-6a0b894cbda2\5"	 = "Devices Present"
		"540b947e-8b40-45bc-a8a2-6a0b894cbda2\6"	 = "Devices Device Has Problem"
		"540b947e-8b40-45bc-a8a2-6a0b894cbda2\9"	 = "Devices Physical Device Location"
		"54b3a473-59aa-445b-aecd-77541ba8b7c9\2"	 = "User Name"
		"54b3a473-59aa-445b-aecd-77541ba8b7c9\3"	 = "User Display Name"
		"54b3a473-59aa-445b-aecd-77541ba8b7c9\5"	 = "User Profile Path"
		"5567bf77-2be2-4222-befa-d0c9c9cc4b6e\2"	 = "Velocity Feature Id"
		"55e98597-ad16-42e0-b624-21599a199838\100"   = "Photo Exposure Time Denominator"
		"560c36c0-503a-11cf-baa1-00004c752a9a\2"	 = "Search Auto Summary"
		"560c36c0-503a-11cf-baa1-00004c752a9a\3"	 = "Search Query Focused Summary"
		"560c36c0-503a-11cf-baa1-00004c752a9a\4"	 = "Search Query Focused Summary With Fallback"
		"56310920-2491-4919-99ce-eadb06fafdb2\100"   = "Contact Business Home Page"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\2"	 = "Music Artist"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\4"	 = "Music Album Title"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\5"	 = "Media Year"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\7"	 = "Music Track Number"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\11"    = "Music Genre"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\12"    = "Music Lyrics"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\13"    = "Music Album Artist"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\33"    = "Music Content Group Description"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\34"    = "Music Initial Key"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\35"    = "Music Beats Per Minute"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\36"    = "Music Conductor"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\37"    = "Music Part Of Set"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\38"    = "Media Sub Title"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\39"    = "Music Mood"
		"56a3372e-ce9c-11d2-9f0e-006097c686f6\100"   = "Music Album Id"
		"56c90e9d-9d46-4963-886f-2e1cd9a694ef\100"   = "Contact Home Email Addresses"
		"57086c23-86c6-478f-afb2-236188c8f47f\2"	 = "Taskbar Tab Active"
		"57086c23-86c6-478f-afb2-236188c8f47f\3"	 = "Taskbar Tab List"
		"5741cf9c-56fe-485b-8901-4786449e188d\100"   = "Fonts Designed For"
		"59569556-0a08-4212-95b9-fae2ad6413db\2"	 = "Devices Notifications New Voicemail"
		"596fd41b-af9b-4ba8-9b49-33b16f16678c\100"   = "Fonts Styles"
		"59d49e61-840f-4aa9-a939-e2099b7f6399\100"   = "GPS Processing Method"
		"59dde9f2-5253-40ea-9a8b-479e96c6249a\100"   = "Photo Contrast Text"
		"5ab5c75f-15e1-4d65-924a-04754567243c\2"	 = "Setting Host Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\3"	 = "Setting Setting Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\4"	 = "Setting Page Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\5"	 = "Setting Group Id"
		"5ab5c75f-15e1-4d65-924a-04754567243c\6"	 = "Setting Condition"
		"5ab5c75f-15e1-4d65-924a-04754567243c\7"	 = "Setting Glyph"
		"5ab5c75f-15e1-4d65-924a-04754567243c\8"	 = "Setting Glyph Rtl"
		"5bf396d4-5eb2-466f-bde9-2fb3f2361d6e\100"   = "Calendar Show Time As"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\1"	 = "History Url Hash"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\2"	 = "Link Target Url"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\3"	 = "Url Scheme"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\4"	 = "Url HostName"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\5"	 = "History Url Extra Info"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\6"	 = "History Code Page"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\7"	 = "History Visit Count"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\8"	 = "History Is History"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\9"	 = "History I sDownload"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\10"    = "History Download Location"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\11"    = "History Download Size"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\12"    = "History Favorite IconKey"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\13"    = "History Is Favorite"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\14"    = "History Is Offline Favorite"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\15"    = "History Is Pinned Favorite"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\16"    = "History Is Typed Url"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\17"    = "History Is Top Level"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\18"    = "History Is Feed"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\19"    = "History Keywords"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\20"    = "History User Keywords"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\21"    = "Link Description"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\22"    = "History User Description"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\23"    = "Link Date Visited"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\24"    = "History Icon Bits"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\25"    = "Icon Path"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\26"    = "Icon Index"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\27"    = "History Icon Date"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\28"    = "History Points"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\29"    = "History Sessions"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\33"    = "History Subscription Cookie"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\34"    = "History Tracking"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\35"    = "Link Working Folder Path"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\36"    = "Link Hot Key"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\37"    = "Link Show Cmd"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\38"    = "Link Whats New"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\39"    = "History Date Changed"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\40"    = "History Flags"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\41"    = "History Watch"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\42"    = "History Favorite Icon Hash"
		"5cbf2787-48cf-4208-b90e-ee5e5d420294\43"    = "Icon Secondary Stream Name"
		"5cda5fc8-33ee-4ff3-9094-ae7bd8868c4d\100"   = "Is Deleted"
		"5cde9f0e-1de4-4453-96a9-56e8832efa3d\1"	 = "Computer Domain Name"
		"5cde9f0e-1de4-4453-96a9-56e8832efa3d\2"	 = "Computer Workgroup"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\2"	 = "Is Pinned To Name Space Tree"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\3"	 = "Is Default Save Location"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\4"	 = "Is Search Only Item"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\5"	 = "Is Default Non Owner Save Location"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\6"	 = "Owner SID"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\7"	 = "Is Default Save Location For Display"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\8"	 = "Is Location Supported"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\9"	 = "Library Location Support Status"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\10"    = "Default Save Location Display"
		"5d76b67f-9b3d-44bb-b6ae-25da4f638a67\11"    = "Default Save Location Icon Container"
		"5da84765-e3ff-4278-86b0-a27967fbdd03\100"   = "Is Flagged"
		"5dc2253f-5e11-4adf-9cfe-910dd01e3e70\100"   = "Contact Hobbies"
		"5f5aff6a-37e5-4780-97ea-80c7565cf535\34"    = "Security Encryption Owners"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\2"	 = "Devices Aep Bluetooth Cod Major"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\3"	 = "Devices Aep Bluetooth Cod Minor"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\4"	 = "Devices Aep Bluetooth Cod Services Limited Discovery"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\5"	 = "Devices Aep Bluetooth Cod Services Positioning"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\6"	 = "Devices Aep Bluetooth Cod Services Networking"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\7"	 = "Devices Aep Bluetooth Cod Services Rendering"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\8"	 = "Devices Aep Bluetooth Cod Services Capturing"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\9"	 = "Devices Aep Bluetooth Cod Services Object Xfer"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\10"    = "Devices Aep Bluetooth Cod Services Audio"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\11"    = "Devices Aep Bluetooth Cod Services Telephony"
		"5fbd34cd-561a-412e-ba98-478a6b0fef1d\12"    = "Devices Aep Bluetooth Cod Services Information"
		"61478c08-b600-4a84-bbe4-e99c45f0a072\100"   = "Photo Saturation Text"
		"61872cf7-6b5e-4b4b-ac2d-59da84459248\100"   = "PropGroup Media"
		"62d2d9ab-8b64-498d-b865-402d4796f865\3"	 = "Location Empty String"
		"6336b95e-c7a7-426d-86fd-7ae3d39c84b4\100"   = "Photo White Balance Text"
		"635e9051-50a5-4ba2-b9db-4ed056c77296\100"   = "Contact Full Name"
		"63c25b20-96be-488f-8788-c09c407ad812\100"   = "Contact Primary Address Street"
		"641064ba-9329-47e6-8f36-5fa81aa461a0\2"	 = "OneNote Page Edit History"
		"641064ba-9329-47e6-8f36-5fa81aa461a0\3"	 = "OneNote Tagged Notes"
		"641064ba-9329-47e6-8f36-5fa81aa461a0\4"	 = "OneNote Linked Note Uri"
		"6444048f-4c8b-11d1-8b70-080036b11a03\3"	 = "Image Horizontal Size"
		"6444048f-4c8b-11d1-8b70-080036b11a03\4"	 = "Image Vertical Size"
		"6444048f-4c8b-11d1-8b70-080036b11a03\5"	 = "Image Horizontal Resolution"
		"6444048f-4c8b-11d1-8b70-080036b11a03\6"	 = "Image Vertical Resolution"
		"6444048f-4c8b-11d1-8b70-080036b11a03\7"	 = "Image Bit Depth"
		"6444048f-4c8b-11d1-8b70-080036b11a03\12"    = "Media Frame Count"
		"6444048f-4c8b-11d1-8b70-080036b11a03\13"    = "Image Dimensions"
		"64440490-4c8b-11d1-8b70-080036b11a03\2"	 = "Audio Format"
		"64440490-4c8b-11d1-8b70-080036b11a03\3"	 = "Media Duration"
		"64440490-4c8b-11d1-8b70-080036b11a03\4"	 = "Audio Encoding Bitrate"
		"64440490-4c8b-11d1-8b70-080036b11a03\5"	 = "Audio Sample Rate"
		"64440490-4c8b-11d1-8b70-080036b11a03\6"	 = "Audio Sample Size"
		"64440490-4c8b-11d1-8b70-080036b11a03\7"	 = "Audio Channel Count"
		"64440490-4c8b-11d1-8b70-080036b11a03\8"	 = "Audio Stream Number"
		"64440490-4c8b-11d1-8b70-080036b11a03\9"	 = "Audio Stream Name"
		"64440490-4c8b-11d1-8b70-080036b11a03\10"    = "Audio Compression"
		"64440491-4c8b-11d1-8b70-080036b11a03\2"	 = "Video Stream Name"
		"64440491-4c8b-11d1-8b70-080036b11a03\3"	 = "Video Frame Width"
		"64440491-4c8b-11d1-8b70-080036b11a03\4"	 = "Video Frame Height"
		"64440491-4c8b-11d1-8b70-080036b11a03\6"	 = "Video Frame Rate"
		"64440491-4c8b-11d1-8b70-080036b11a03\8"	 = "Video Encoding Bitrate"
		"64440491-4c8b-11d1-8b70-080036b11a03\9"	 = "Video Sample Size"
		"64440491-4c8b-11d1-8b70-080036b11a03\10"    = "Video Compression"
		"64440491-4c8b-11d1-8b70-080036b11a03\11"    = "Video Stream Number"
		"64440491-4c8b-11d1-8b70-080036b11a03\42"    = "Video Horizontal Aspect Ratio"
		"64440491-4c8b-11d1-8b70-080036b11a03\43"    = "Video Total Bitrate"
		"64440491-4c8b-11d1-8b70-080036b11a03\44"    = "Video Four CC"
		"64440491-4c8b-11d1-8b70-080036b11a03\45"    = "Video Vertical Aspect Ratio"
		"64440491-4c8b-11d1-8b70-080036b11a03\46"    = "Video Transcoded For Sync"
		"64440491-4c8b-11d1-8b70-080036b11a03\98"    = "Video Is Stereo"
		"64440491-4c8b-11d1-8b70-080036b11a03\99"    = "Video Orientation"
		"64440491-4c8b-11d1-8b70-080036b11a03\100"   = "Video Is Spherical"
		"64440492-4c8b-11d1-8b70-080036b11a03\7"	 = "Media Status"
		"64440492-4c8b-11d1-8b70-080036b11a03\9"	 = "Rating"
		"64440492-4c8b-11d1-8b70-080036b11a03\11"    = "Copyright"
		"64440492-4c8b-11d1-8b70-080036b11a03\12"    = "Share User Rating"
		"64440492-4c8b-11d1-8b70-080036b11a03\13"    = "Media Class Primary Id"
		"64440492-4c8b-11d1-8b70-080036b11a03\14"    = "Media Class Secondary Id"
		"64440492-4c8b-11d1-8b70-080036b11a03\15"    = "Media DVDID"
		"64440492-4c8b-11d1-8b70-080036b11a03\16"    = "Media MCDI"
		"64440492-4c8b-11d1-8b70-080036b11a03\17"    = "Media Metadata Content Provider"
		"64440492-4c8b-11d1-8b70-080036b11a03\18"    = "Media Content Distributor"
		"64440492-4c8b-11d1-8b70-080036b11a03\19"    = "Music Composer"
		"64440492-4c8b-11d1-8b70-080036b11a03\20"    = "Video Director"
		"64440492-4c8b-11d1-8b70-080036b11a03\21"    = "Parental Rating"
		"64440492-4c8b-11d1-8b70-080036b11a03\22"    = "Media Producer"
		"64440492-4c8b-11d1-8b70-080036b11a03\23"    = "Media Writer"
		"64440492-4c8b-11d1-8b70-080036b11a03\24"    = "Media Collection Group Id"
		"64440492-4c8b-11d1-8b70-080036b11a03\25"    = "Media Collection Id"
		"64440492-4c8b-11d1-8b70-080036b11a03\26"    = "Media Content Id"
		"64440492-4c8b-11d1-8b70-080036b11a03\27"    = "Media Creator Application"
		"64440492-4c8b-11d1-8b70-080036b11a03\28"    = "Media Creator Application Version"
		"64440492-4c8b-11d1-8b70-080036b11a03\30"    = "Media Publisher"
		"64440492-4c8b-11d1-8b70-080036b11a03\31"    = "Music Period"
		"64440492-4c8b-11d1-8b70-080036b11a03\32"    = "Media Author Url"
		"64440492-4c8b-11d1-8b70-080036b11a03\33"    = "Media Promotion Url"
		"64440492-4c8b-11d1-8b70-080036b11a03\34"    = "Media User Web Url"
		"64440492-4c8b-11d1-8b70-080036b11a03\35"    = "Media Unique File Identifier"
		"64440492-4c8b-11d1-8b70-080036b11a03\36"    = "Media Encoded By"
		"64440492-4c8b-11d1-8b70-080036b11a03\37"    = "Media Encoding Settings"
		"64440492-4c8b-11d1-8b70-080036b11a03\38"    = "Media Protection Type"
		"64440492-4c8b-11d1-8b70-080036b11a03\39"    = "Media Provider Rating"
		"64440492-4c8b-11d1-8b70-080036b11a03\40"    = "Media Provider Style"
		"64440492-4c8b-11d1-8b70-080036b11a03\41"    = "Media User No Auto Info"
		"64440492-4c8b-11d1-8b70-080036b11a03\42"    = "Media Series Name"
		"64440492-4c8b-11d1-8b70-080036b11a03\47"    = "Media Thumbnail Large Path"
		"64440492-4c8b-11d1-8b70-080036b11a03\48"    = "Media Thumbnail Large Uri"
		"64440492-4c8b-11d1-8b70-080036b11a03\49"    = "Media ThumbnailSmallPath"
		"64440492-4c8b-11d1-8b70-080036b11a03\50"    = "Media Thumbnail Small Uri"
		"64440492-4c8b-11d1-8b70-080036b11a03\100"   = "Media Episode Number"
		"64440492-4c8b-11d1-8b70-080036b11a03\101"   = "Media Season Number"
		"644d37b4-e1b3-4bad-b099-7e7c04966aca\100"   = "Contact Email Address3"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\8192"  = "Devices Manufacturer"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\8194"  = "Devices Model Name"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\8195"  = "Devices Model Number"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\8198"  = "Devices Presentation Url"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12288" = "Devices Friendly Name"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\12297" = "Devices Ip Address"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\16384" = "Devices Service Address"
		"656a3bb3-ecc0-43fd-8477-4ae0404a96cd\16385" = "Devices Service Id"
		"65a98875-3c80-40ab-abbc-efdaf77dbee2\100"   = "Acquisition Id"
		"660e04d6-81ab-4977-a09f-82313113ab26\100"   = "Contact Home Fax Number"
		"6614ef48-4efe-4424-9eda-c79f404edf3e\2"	 = "Devices Notifications Missed Call"
		"668cdfa5-7a1b-4323-ae4b-e527393a1d81\100"   = "Source Item"
		"67df94de-0ca7-4d6f-b792-053a3e4f03cf\100"   = "Flag Color"
		"6845cc72-1b71-48c3-af86-b09171a19b14\3"	 = "Devices Dial Protocol Installed Applications"
		"68dd6094-7216-40f1-a029-43fe7127043f\100"   = "PropGroup Music"
		"6a15e5a0-0a1e-4cd7-bb8c-d2f1b0c929bc\100"   = "Contact Business Telephone"
		"6af55d45-38db-4495-acb0-d4728a3b8314\2"	 = "Devices AepContainer Supports Audio"
		"6af55d45-38db-4495-acb0-d4728a3b8314\3"	 = "Devices AepContainer Supports Video"
		"6af55d45-38db-4495-acb0-d4728a3b8314\4"	 = "Devices AepContainer Supports Images"
		"6af55d45-38db-4495-acb0-d4728a3b8314\5"	 = "Devices AepContainer Supported Uri Schemes"
		"6af55d45-38db-4495-acb0-d4728a3b8314\6"	 = "Devices AepContainer Dial Protocol Installed Applications"
		"6af55d45-38db-4495-acb0-d4728a3b8314\7"	 = "Devices AepContainer Supports Limited Discovery"
		"6af55d45-38db-4495-acb0-d4728a3b8314\8"	 = "Devices AepContainer Supports Positioning"
		"6af55d45-38db-4495-acb0-d4728a3b8314\9"	 = "Devices AepContainer Supports Networking"
		"6af55d45-38db-4495-acb0-d4728a3b8314\10"    = "Devices AepContainer Supports Rendering"
		"6af55d45-38db-4495-acb0-d4728a3b8314\11"    = "Devices AepContainer Supports Capturing"
		"6af55d45-38db-4495-acb0-d4728a3b8314\12"    = "Devices AepContainer Supports Object Transfer"
		"6af55d45-38db-4495-acb0-d4728a3b8314\13"    = "Devices AepContainer Supports Telephony"
		"6af55d45-38db-4495-acb0-d4728a3b8314\14"    = "Devices AepContainer Supports Information"
		"6afe7437-9bcd-49c7-80fe-4a5c65fa5874\104"   = "Music Disc Number"
		"6b223b6a-162e-4aa9-b39f-05d678fc6d77\100"   = "Music Synchronized Lyrics"
		"6b8b68f6-200b-47ea-8d25-d8050f57339f\100"   = "Photo Flash Text"
		"6b8da074-3b5c-43bc-886f-0a2cdce00b6f\100"   = "Item Name"
		"6bdd1fc6-810f-11d0-bec7-08002be2092f\2"	 = "Devices Wia Device Type"
		"6ccd0131-c397-4744-b2d8-d2c13f457026\80"    = "Game Type"
		"6d217f6d-3f6a-4825-b470-5f03ca2fbe9b\100"   = "Photo Program Mode"
		"6d24888f-4718-4bda-afed-ea0fb4386cd8\100"   = "Offline Status"
		"6d6d5d49-265d-4688-9f4e-1fdd33e7cc83\100"   = "Identity Internet Sid"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\2"	 = "RecordedTV Episode Name"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\3"	 = "RecordedTV Program Description"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\4"	 = "RecordedTV Credits"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\5"	 = "RecordedTV Station Call Sign"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\7"	 = "RecordedTV Channe' Number"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\10"    = "RecordedTV Video Quality"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\12"    = "RecordedTV Is Closed Captioning Available"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\13"    = "RecordedTV Is Repeat Broadcast"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\14"    = "RecordedTV Is SAP"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\15"    = "RecordedTV Date Content Expires"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\16"    = "RecordedTV Is ATSC Content"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\17"    = "RecordedTV Is DTV Content"
		"6d748de2-8d38-4cc3-ac60-f009b057c557\18"    = "RecordedTV Is HD Content"
		"6e682923-7f7b-4f0c-a337-cfca296687bf\100"   = "Contact Other Address City"
		"6ebe6946-2321-440a-90f0-c043efd32476\100"   = "Photo Brightness Denominator"
		"6fa20de6-d11c-4d9d-a154-64317628c12d\100"   = "Expand oProperties"
		"702926f4-44a6-43e1-ae71-45627116893b\100"   = "GPS Track Numerator"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\102"   = "Structured Query Before"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\103"   = "Structured Query After"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\104"   = "Structured Query File"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\105"   = "Structured Query Custom Property Boolean"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\106"   = "Structured Query Custom Property Integer"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\107"   = "Structured Query Custom Property Floating Point"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\108"   = "Structured Query Custom Property String"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\109"   = "Structured Query Custom Property DateTime"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\110"   = "Structured Query Has"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\111"   = "Structured Query Is"
		"7036dcfc-69ab-4316-b5ac-50de702447b0\112"   = "Structured Query Null"
		"705ccb0f-5a0d-41ea-b2ca-2c9b5cc7db41\100"   = "Verb Restrictions"
		"705d8364-7547-468c-8c88-84860bcbed4c\2"	 = "SAM Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\3"	 = "SAM Version"
		"705d8364-7547-468c-8c88-84860bcbed4c\4"	 = "SAM Date Changed"
		"705d8364-7547-468c-8c88-84860bcbed4c\5"	 = "SAM Password Last Set"
		"705d8364-7547-468c-8c88-84860bcbed4c\6"	 = "SAM Date Account Expires"
		"705d8364-7547-468c-8c88-84860bcbed4c\7"	 = "SAM Password Can Change"
		"705d8364-7547-468c-8c88-84860bcbed4c\8"	 = "SAM Password Must Change"
		"705d8364-7547-468c-8c88-84860bcbed4c\9"	 = "SAM Full Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\10"    = "SAM Home Directory"
		"705d8364-7547-468c-8c88-84860bcbed4c\11"    = "SAM Home Directory Drive"
		"705d8364-7547-468c-8c88-84860bcbed4c\12"    = "SAM Script Path"
		"705d8364-7547-468c-8c88-84860bcbed4c\13"    = "SAM Profile Path"
		"705d8364-7547-468c-8c88-84860bcbed4c\14"    = "SAM Admin Comment"
		"705d8364-7547-468c-8c88-84860bcbed4c\15"    = "SAM Workstations"
		"705d8364-7547-468c-8c88-84860bcbed4c\16"    = "SAM User Comment"
		"705d8364-7547-468c-8c88-84860bcbed4c\17"    = "SAM Password"
		"705d8364-7547-468c-8c88-84860bcbed4c\18"    = "SAM Security Id"
		"705d8364-7547-468c-8c88-84860bcbed4c\19"    = "SAM User Account Control"
		"705d8364-7547-468c-8c88-84860bcbed4c\20"    = "SAM Logon Hours"
		"705d8364-7547-468c-8c88-84860bcbed4c\21"    = "SAM Country Code"
		"705d8364-7547-468c-8c88-84860bcbed4c\22"    = "SAM Code Page"
		"705d8364-7547-468c-8c88-84860bcbed4c\23"    = "SAM Password Expired"
		"705d8364-7547-468c-8c88-84860bcbed4c\24"    = "SAM User Picture"
		"705d8364-7547-468c-8c88-84860bcbed4c\25"    = "SAM Password Hint"
		"705d8364-7547-468c-8c88-84860bcbed4c\26"    = "SAM Domain"
		"705d8364-7547-468c-8c88-84860bcbed4c\31"    = "SAM Groups"
		"705d8364-7547-468c-8c88-84860bcbed4c\32"    = "SAM Type"
		"705d8364-7547-468c-8c88-84860bcbed4c\36"    = "SAM Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\37"    = "SAM Network Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\38"    = "SAM Batch Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\39"    = "SAM Service Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\40"    = "SAM Remote Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\41"    = "SAM Deny Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\42"    = "SAM Deny Network Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\43"    = "SAM Deny Batch Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\44"    = "SAM Deny Service Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\45"    = "SAM Deny Remote Interactive Login"
		"705d8364-7547-468c-8c88-84860bcbed4c\46"    = "SAM Dont Show In Logon UI"
		"705d8364-7547-468c-8c88-84860bcbed4c\47"    = "SAM Shell Admin Object Props"
		"705d8364-7547-468c-8c88-84860bcbed4c\50"    = "SAM Password Is Empty"
		"705d8364-7547-468c-8c88-84860bcbed4c\102"   = "SAM Group Members"
		"705d8364-7547-468c-8c88-84860bcbed4c\103"   = "SAM Residual Id"
		"705d8364-7547-468c-8c88-84860bcbed4c\200"   = "LOGON LU Id"
		"705d8364-7547-468c-8c88-84860bcbed4c\201"   = "LOGON Authentication Package"
		"705d8364-7547-468c-8c88-84860bcbed4c\202"   = "LOGON TS Session"
		"705d8364-7547-468c-8c88-84860bcbed4c\203"   = "LOGON Logon Time"
		"705d8364-7547-468c-8c88-84860bcbed4c\204"   = "LOGON Logon Server"
		"705d8364-7547-468c-8c88-84860bcbed4c\205"   = "LOGON Dns Domain Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\206"   = "LOGON UPN"
		"705d8364-7547-468c-8c88-84860bcbed4c\207"   = "LOGON Client Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\208"   = "LOGON WinS tation Name"
		"705d8364-7547-468c-8c88-84860bcbed4c\209"   = "LOGON Status"
		"705d8364-7547-468c-8c88-84860bcbed4c\500"   = "PROFILE Path"
		"705d8364-7547-468c-8c88-84860bcbed4c\501"   = "PROFILE GUID"
		"71724756-3e74-4432-9b59-e7b2f668a593\2"	 = "Devices AepService Friendly Name"
		"71724756-3e74-4432-9b59-e7b2f668a593\3"	 = "Devices AepService Service Class Id"
		"71724756-3e74-4432-9b59-e7b2f668a593\4"	 = "Devices AepService Container Id"
		"71b377d6-e570-425f-a170-809fae73e54e\100"   = "Contact Other Address State"
		"720eb626-dbe4-4113-835c-9315e1e2ff77\2"	 = "Actions Action Name"
		"720eb626-dbe4-4113-835c-9315e1e2ff77\3"	 = "Actions Activation Context"
		"7268af55-1ce4-4f6e-a41f-b6e4ef10e4a9\100"   = "Contact Profession"
		"72fab781-acda-43e5-b155-b2434f85e678\100"   = "Date Completed"
		"72fc5ba4-24f9-4011-9f3f-add27afad818\100"   = "Calendar Reminder Time"
		"730fb6dd-cf7c-426b-a03f-bd166cc9ee24\100"   = "Contact Business Address"
		"73389854-0b42-4ea6-bc67-847d430899fd\2"	 = "Connected Search Require Template"
		"733cb147-8b1f-4c48-9966-192fde353c75\100"   = "Music Stack Thumbnail Cache Ids"
		"738bf284-1d87-420b-92cf-5834bf6ef9ed\100"   = "Photo Exposure Bias Numerator"
		"744c8242-4df5-456c-ab9e-014efb9021e3\100"   = "Calendar Organizer Address"
		"745baf0e-e5c1-4cfb-8a1b-d031a0a52393\100"   = "Photo Digital Zoom Denominator"
		"74a7de49-fa11-4d3d-a006-db7e08675916\100"   = "Identity Provider Id"
		"75ee72ae-7d5f-482f-9487-f1c46ca819c1\100"   = "Camera Roll Deduplication Id"
		"76c09943-7c33-49e3-9e7e-cdba872cfada\100"   = "GPS Track"
		"776b6b3b-1e3d-4b0c-9a0e-8fbaf2a8492a\100"   = "Photo Focal Lengt hNumerator"
		"78342dcb-e358-4145-ae9a-6bfe4e0f9f51\100"   = "GPS Altitude Denominator"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\52"    = "Devices Discovery Method"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\55"    = "Devices Connected"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\56"    = "Devices Paired"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\57"    = "Devices Icon"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\70"    = "Devices Local Machine"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\71"    = "Devices Metadata Path"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\77"    = "Devices Launch Device Stage From Explorer"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\81"    = "Devices Device Description1"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\82"    = "Devices Device Description2"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\83"    = "Devices NotWorking Properly"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\84"    = "Devices Is Shared"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\85"    = "Devices Is Network Connected"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\86"    = "Devices Is Default"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\90"    = "Devices Category Ids"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\91"    = "Devices Category"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\92"    = "Devices Category Plural"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\94"    = "Devices Category Group"
		"78c34fc8-104a-4aca-9ea4-524d52996e57\256"   = "Devices Device Instance Id"
		"79486778-4c6f-4dde-bc53-cd594311af99\2"	 = "Connected Search Local Weights"
		"79d94e82-4d79-45aa-821a-74858b4e4ca6\2"	 = "Devices AepService IoT Service Interfaces"
		"7a55582b-bd8c-4475-b94c-b87a388a7899\100"   = "Status Icons"
		"7a7d76f4-b630-4bd7-95ff-37cc51a975c9\2"	 = "Link Target Extension"
		"7abcf4f8-7c3f-4988-ac91-8d2c2e97eca5\100"   = "GPS Dest Bearing Denominator"
		"7b9f6399-0a3f-4b12-89bd-4adc51c918af\100"   = "Contact Home Address Post Office Box"
		"7ba3535d-69aa-4525-a938-f3ec79485377\2"	 = "SAM Allowed Logon"
		"7ba3535d-69aa-4525-a938-f3ec79485377\3"	 = "SAM Dont Enumerate For Logon"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\2"	 = "Sync Handler CollectionId"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\3"	 = "Sync Handler Id"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\4"	 = "Sync Event Description"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\5"	 = "Sync Progress"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\6"	 = "Sync Item Id"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\7"	 = "Sync Date Synchronized"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\8"	 = "Sync Handler Type"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\9"	 = "Sync Handler Type Label"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\10"    = "Sync Status"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\11"    = "Sync Conflict Count"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\12"    = "Sync Error Count"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\13"    = "Sync Comments"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\14"    = "Sync Enabled"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\15"    = "Sync Hidden"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\16"    = "Sync Connected"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\17"    = "Sync Link"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\19"    = "Sync Context"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\20"    = "Sync Event Level"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\21"    = "Sync Event Flags"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\22"    = "Sync Sync Results"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\23"    = "Sync Progress Percentage"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\24"    = "Sync State"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\25"    = "Sync Item State"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\26"    = "Sync Item Status Text"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\27"    = "Sync Item Status Description"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\28"    = "Sync Item Status Action"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\29"    = "Sync Global Activity Message"
		"7bd5533e-af15-44db-b8c8-bd6624e1d032\30"    = "Sync Last Synced Message"
		"7d122d5a-ae5e-4335-8841-d71e7ce72f53\100"   = "GPS Speed Denominator"
		"7d683fc9-d155-45a8-bb1f-89d19bcb792f\100"   = "Identity Display Name"
		"7ddaaad1-ccc8-41ae-b750-b2cb8031aea2\100"   = "GPS Latitude Numerator"
		"7fd7259d-16b4-4135-9f97-7c96ecd2fa9e\100"   = "PropGroup Message"
		"7fe3aa27-2648-42f3-89b0-454e5cb150c3\100"   = "Photo Program Mode Text"
		"807b653a-9e91-43ef-8f97-11ce04ee20c5\100"   = "Communication Suffix"
		"80d81ea6-7473-4b0c-8216-efc11a2c4c8b\2"	 = "Devices Model Id"
		"80f41eb8-afc4-4208-aa5f-cce21a627281\100"   = "Contact Connected Service Identities"
		"813f4124-34e6-4d17-ab3e-6b1f3c2247a1\100"   = "Photo Maker Note Offset"
		"821437d6-9eab-4765-a589-3b1cbbd22a61\100"   = "Photo Photometric Interpretation Text"
		"827edb4f-5b73-44a7-891d-fdffabea35ca\100"   = "GPS Altitude"
		"83914d1a-c270-48bf-b00d-1c4e451b0150\100"   = "Default Group Order"
		"83a6347e-6fe4-4f40-ba9c-c4865240d1f4\100"   = "Communication Followup Icon Index"
		"83da6326-97a6-4088-9453-a1923f573b29\9"	 = "Devices Is Software Installing"
		"847c66de-b8d6-4af9-abc3-6f4f926bc039\14"    = "Device Interface Printer Driver Directory"
		"84d8f337-981d-44b3-9615-c7596dba17e3\100"   = "Contact Email Addresses"
		"8589e481-6040-473d-b171-7fa89c2708ed\100"   = "Contact Company Main Telephone"
		"8619a4b6-9f4d-4429-8c0f-b996ca59e335\100"   = "Communication Security Flags"
		"86407db8-9df7-48cd-b986-f999adc19731\2"	 = "Share Target Description"
		"8727cfff-4868-4ec6-ad5b-81b98521d1ab\100"   = "GPS Latitude"
		"880f70a2-6082-47ac-8aab-a739d1a300c3\151"   = "Devices Shared Tooltip"
		"880f70a2-6082-47ac-8aab-a739d1a300c3\152"   = "Devices Networked Tooltip"
		"880f70a2-6082-47ac-8aab-a739d1a300c3\153"   = "Devices Default Tooltip"
		"8859a284-de7e-4642-99ba-d431d044b1ec\100"   = "PropGroup Media Advanced"
		"8943b373-388c-4395-b557-bc6dbaffafdb\2"	 = "Devices Audio Device Raw Processing Supported"
		"8943b373-388c-4395-b557-bc6dbaffafdb\3"	 = "Devices Audio Device Microphone Sensitivity In Dbfs"
		"8943b373-388c-4395-b557-bc6dbaffafdb\4"	 = "Devices Audio Device Microphone Signal To Noise Ratio In Db"
		"8969b275-9475-4e00-a887-ff93b8b41e44\100"   = "PropGroup Description"
		"897b3694-fe9e-43e6-8066-260f590c0100\2"	 = "Contact JA Company Name Phonetic"
		"897b3694-fe9e-43e6-8066-260f590c0100\3"	 = "Contact JA First Name Phonetic"
		"897b3694-fe9e-43e6-8066-260f590c0100\4"	 = "Contact JA Last Name Phonetic"
		"8a2f99f9-3c37-465d-a8d7-69777a246d0c\2"	 = "Link Feed Item Local Id"
		"8a2f99f9-3c37-465d-a8d7-69777a246d0c\5"	 = "Link Target Url Host Name"
		"8a2f99f9-3c37-465d-a8d7-69777a246d0c\6"	 = "Link Target Url Path"
		"8af4961c-f526-43e5-aa81-db768219178d\100"   = "Photo SubjectDistanceNumerator"
		"8afcc170-8a46-4b53-9eee-90bae7151e62\100"   = "Contact Home Address Postal Code"
		"8b26ea41-058f-43f6-aecc-4035681ce977\100"   = "Contact Other Address Post Office Box"
		"8bf6b9f6-b4f5-482f-a2c2-44bdad2fcfa9\51"    = "SAM Account Is Disabled For Logon UI"
		"8c3b93a4-baed-1a83-9a32-102ee313f6eb\100"   = "Identity Blob"
		"8c7ed206-3f8a-4827-b3ab-ae9e1faefc6c\2"	 = "Devices Container Id"
		"8c7ed206-3f8a-4827-b3ab-ae9e1faefc6c\4"	 = "Devices In Local Machine Container"
		"8d72aca1-0716-419a-9ac1-acb07b18dc32\2"	 = "File Attributes Display"
		"8e531030-b960-4346-ae0d-66bc9a86fb94\100"   = "Communication Direction"
		"8e8ecf7c-b7b8-4eb8-a63f-0ee715c96f9e\100"   = "Photo Gain Control Numerator"
		"8f167568-0aae-4322-8ed9-6055b7b0e398\100"   = "Contact Other Address Country"
		"8f367200-c270-457c-b1d4-e07c5bcd90c7\100"   = "Contact Last Name"
		"8fdc6dea-b929-412b-ba90-397a257465fe\100"   = "Contact Car Telephone"
		"900a403b-097b-4b95-8ae2-071fdaeeb118\100"   = "PropGroup Advanced"
		"90197ca7-fd8f-4e8c-9da3-b57e1e609295\100"   = "Rating Text"
		"908696c7-8f87-44f2-80ed-a8c1c6894575\2"	 = "Library Locations Count"
		"908696c7-8f87-44f2-80ed-a8c1c6894575\4"	 = "Library Locations List"
		"9098f33c-9a7d-48a8-8de5-2e1227a64e91\100"   = "Message Proof In Progress"
		"90e5e14e-648b-4826-b2aa-acaf790e3513\10"    = "Is Encrypted"
		"916d17ac-8a97-48af-85b7-867a88fad542\2"	 = "Connected Search Auto Complete"
		"91eff6f3-2e27-42ca-933e-7c999fbe310b\100"   = "Contact Business Fax Number"
		"93112f89-c28b-492f-8a9d-4be2062cee8a\100"   = "Photo Exposure Index Denominator"
		"95beb1fc-326d-4644-b396-cd3ed90e6ddf\100"   = "Journal Entry Type"
		"95c656c1-2abf-4148-9ed3-9ec602e3b7cd\100"   = "Contact Other Address Postal Code"
		"95e127b5-79cc-4e83-9c9e-8422187b3e0e\2"	 = "Device Interface Win Usb Usb Vendor Id"
		"95e127b5-79cc-4e83-9c9e-8422187b3e0e\3"	 = "Device Interface Win Usb Usb Product Id"
		"95e127b5-79cc-4e83-9c9e-8422187b3e0e\4"	 = "Device Interface Win Usb Usb Class"
		"95e127b5-79cc-4e83-9c9e-8422187b3e0e\5"	 = "Device Interface Win Usb Usb Sub Class"
		"95e127b5-79cc-4e83-9c9e-8422187b3e0e\6"	 = "Device Interface Win Usb Usb Protocol"
		"95e127b5-79cc-4e83-9c9e-8422187b3e0e\7"	 = "Device Interface Win Usb Device Interface Classes"
		"9660c283-fc3a-4a08-a096-eed3aac46da2\100"   = "Contact Data Suppliers"
		"967b5af8-995a-46ed-9e11-35b3c5b9782d\100"   = "Photo Exposure Index"
		"972e333e-ac7e-49f1-8adf-a70d07a9bcab\100"   = "GPS Area Information"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\1"	 = "Devices Aep Bluetooth Issue Inquiry"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\2"	 = "Devices Aep Bluetooth Le Active Scanning"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\3"	 = "Devices Aep Bluetooth Le Scan Interval"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\4"	 = "Devices Aep Bluetooth Le Scan Window"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\5"	 = "Devices AepService Bluetooth Cache Mode"
		"9744311e-7951-4b2e-b6f0-ecb293cac119\6"	 = "Devices AepService Bluetooth Target Device"
		"97b0ad89-df49-49cc-834e-660974fd755b\100"   = "Contact Label"
		"98f920d1-51e2-4722-9069-3c4b5cff5165\100"   = "Is Barricade Page"
		"98f98354-617a-46b8-8560-5b1b64bf1f89\100"   = "Contact Home Address"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\1"	 = "Devices Aep Bluetooth Le Appearance"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\2"	 = "Devices Aep Bluetooth Le Advertisement"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\3"	 = "Devices Aep Bluetooth Le Scan Response"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\4"	 = "Devices Aep Bluetooth Le Address Type"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\5"	 = "Devices Aep Bluetooth Le Appearance Category"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\6"	 = "Devices Aep Bluetooth Le Appearance Subcategory"
		"995ef0b0-7eb3-4a8b-b9ce-068bb3f4af69\8"	 = "Devices Aep Bluetooth Le Is Connectable"
		"9973d2b5-bfd8-438a-ba94-5349b293181a\100"   = "PropGroup Calendar"
		"9a8ebb75-6458-4e82-bacb-35c0095b03bb\100"   = "Photo Transcoded For Sync"
		"9a93244d-a7ad-4ff8-9b99-45ee4cc09af6\100"   = "Contact Assistant Telephone"
		"9a9bc088-4f6d-469e-9919-e705412040f9\100"   = "Message Is Fwd Or Reply"
		"9ab84393-2a0f-4b75-bb22-7279786977cb\100"   = "GPS Dest Bearing Ref"
		"9ad5badb-cea7-4470-a03d-b84e51b9949e\100"   = "Contact Anniversary"
		"9aebae7a-9644-487d-a92c-657585ed751a\100"   = "Media Subscription Content Id"
		"9b174b33-40ff-11d2-a27e-00c04fc30871\2"	 = "Recycle Deleted From"
		"9b174b33-40ff-11d2-a27e-00c04fc30871\3"	 = "Recycle Date Deleted"
		"9b174b34-40ff-11d2-a27e-00c04fc30871\4"	 = "File Owner"
		"9b174b34-40ff-11d2-a27e-00c04fc30871\8"	 = "New Menu Preferred Types"
		"9b174b34-40ff-11d2-a27e-00c04fc30871\10"    = "New Menu Allowed Types"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\2"	 = "Free Space"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\3"	 = "Capacity"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\4"	 = "Volume File System"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\5"	 = "Percent Full"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\7"	 = "Computer Decorated FreeSpace"
		"9b174b35-40ff-11d2-a27e-00c04fc30871\10"    = "Volume Is Root"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\2"	 = "Wireless Profile Name"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\4"	 = "Wireless Security"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\5"	 = "Wireless Radio Type"
		"9b34bbb9-949c-488d-9a6d-eeb47c847a2f\9"	 = "Wireless Connection Mode"
		"9bc2c99b-ac71-4127-9d1c-2596d0d7dcb7\100"   = "GPS Dest Distance Denominator"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\5"	 = "Priority"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\7"	 = "Communication Newsgroup Name"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\8"	 = "Message Has Attachments"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\10"    = "SAM Account Name"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\13"    = "Message Type"
		"9c1fcf74-2d97-41ba-b4ae-cb2e3661a6e4\17"    = "Message Received"
		"9cb0c358-9d7a-46b1-b466-dcc6f1a3d93d\100"   = "Contact Display Mobile Phone Numbers"
		"9d1d7cc5-5c39-451c-86b3-928e2d18cc47\100"   = "GPS Dest Latitude"
		"9d2408b6-3167-422b-82b0-f583b7a7cfe3\100"   = "Contact Spouse Name"
		"9e7d118f-b314-45a0-8cfb-d654b917c9e9\100"   = "Photo Brightness Numerator"
		"a00742a1-cd8c-4b37-95ab-70755587767a\3"	 = "Device Interface Printer Enumeration Flag"
		"a015ed5d-aaea-4d58-8a86-3c586920ea0b\100"   = "GPS Measure Mode"
		"a06992b3-8caf-4ed7-a547-b259e32ac9fc\100"   = "Search Store"
		"a09f084e-ad41-489f-8076-aa5be3082bca\100"   = "Simple Rating"
		"a0be94c5-50ba-487b-bd35-0654be8881ed\100"   = "GPS DOP Denominator"
		"a0e00ee1-f0c7-4d41-b8e7-26a7bd8d38b0\2"	 = "Devices Notifications Storage Full"
		"a0e00ee1-f0c7-4d41-b8e7-26a7bd8d38b0\3"	 = "Devices Notifications Storage Full Link Text"
		"a0e74609-b84d-4f49-b860-462bd9971f98\100"   = "Photo Focal Length In Film"
		"a11c005a-ff95-4785-8617-beaf92399c3c\100"   = "HasLeafContainers"
		"a1829ea2-27eb-459e-935d-b2fad7b07762\2"	 = "Devices Microphone Array Geometry"
		"a19fb7a9-024b-4371-a8bf-4d29c3e4e9c9\100"   = "Contact Connected Service Supported Actions"
		"a26f4afc-7346-4299-be47-eb1ae613139f\16"    = "Identity Key Provider Name"
		"a26f4afc-7346-4299-be47-eb1ae613139f\17"    = "Identity Key Provider Context"
		"a26f4afc-7346-4299-be47-eb1ae613139f\100"   = "Identity"
		"a2e541c5-4440-4ba8-867e-75cfc06828cd\100"   = "Photo Focal Plane Y Resolution Numerator"
		"a3250282-fb6d-48d5-9a89-dbcace75cccf\100"   = "GPS Dest Longitude Numerator"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\3"	 = "Devices Aep Model Name"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\4"	 = "Devices Aep Model Id"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\5"	 = "Devices Aep Manufacturer"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\6"	 = "Devices Aep Signal Strength"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\7"	 = "Devices Aep Is Connected"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\9"	 = "Devices Aep Is Present"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\12"    = "Devices Aep Device Address"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\16"    = "Devices Aep Is Paired"
		"a35996ab-11cf-4935-8b61-a6761081ecdf\17"    = "Devices Aep Category"
		"a399aac7-c265-474e-b073-ffce57721716\2"	 = "Devices AepService Bluetooth Service Guid"
		"a3b29791-7713-4e1d-bb40-17db85f01831\100"   = "Importance Text"
		"a40294ef-d2b1-40ed-9512-dd3853b431f5\2"	 = "Connected Search Defer Image Prefetch"
		"a4108708-09df-4377-9dfc-6d99986d5a67\100"   = "Identity Is Me Identity"
		"a45c254e-df1c-4efd-8020-67d146a850e0\3"	 = "Devices Hardware Ids"
		"a45c254e-df1c-4efd-8020-67d146a850e0\4"	 = "Devices Compatible Ids"
		"a45c254e-df1c-4efd-8020-67d146a850e0\10"    = "Devices Class Guid"
		"a45c254e-df1c-4efd-8020-67d146a850e0\13"    = "Devices Device Manufacturer"
		"a45c254e-df1c-4efd-8020-67d146a850e0\17"    = "Devices Device Capabilities"
		"a45c254e-df1c-4efd-8020-67d146a850e0\29"    = "Devices Device Characteristics"
		"a45c254e-df1c-4efd-8020-67d146a850e0\37"    = "Devices Location Paths"
		"a4790b72-7113-4348-97ea-292bbc1f6770\5"	 = "Visio Masters Keywords"
		"a4790b72-7113-4348-97ea-292bbc1f6770\6"	 = "Visio Masters Details"
		"a4aaa5b7-1ad0-445f-811a-0f8f6e67f6b5\100"   = "GPS Img Direction Ref"
		"a5477f61-7a82-4eca-9dde-98b69b2479b3\100"   = "Recorded TV Recording Time"
		"a63b464f-2ace-4d83-87ae-abaf011cc6ac\1720"  = "Volume BitLocker Can Change Passphrase By Proxy"
		"a6744477-c237-475b-a075-54f34498292a\100"   = "Communication Task Status Text"
		"a6f360d2-55f9-48de-b909-620e090a647c\100"   = "Is Flagged Complete"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\101"   = "Contact Home Address1 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\102"   = "Contact Home Address1 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\103"   = "Contact Home Address1 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\104"   = "Contact Home Address1 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\105"   = "Contact Home Address1 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\106"   = "Contact Home Address2 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\107"   = "Contact Home Address2 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\108"   = "Contact Home Address2 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\109"   = "Contact Home Address2 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\110"   = "Contact Home Address2 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\111"   = "Contact Home Address3 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\112"   = "Contact Home Address3 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\113"   = "Contact Home Address3 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\114"   = "Contact Home Address3 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\115"   = "Contact Home Address3 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\116"   = "Contact Business Address1 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\117"   = "Contact Business Address1 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\118"   = "Contact Business Address1 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\119"   = "Contact Business Address1 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\120"   = "Contact Business Address1 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\121"   = "Contact Business Address2 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\122"   = "Contact Business Address2 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\123"   = "Contact Business Address2 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\124"   = "Contact Business Address2 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\125"   = "Contact Business Address2 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\126"   = "Contact Business Address3 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\127"   = "Contact Business Address3 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\128"   = "Contact Business Address3 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\129"   = "Contact Business Address3 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\130"   = "Contact Business Address3 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\131"   = "Contact Other Address1 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\132"   = "Contact Other Address1 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\133"   = "Contact Other Address1 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\134"   = "Contact Other Address1 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\135"   = "Contact Other Address1 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\136"   = "Contact Other Address2 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\137"   = "Contact Other Address2 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\138"   = "Contact Other Address2 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\139"   = "Contact Other Address2 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\140"   = "Contact Other Address2 Postal Code"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\141"   = "Contact Other Address3 Street"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\142"   = "Contact Other Address3 Locality"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\143"   = "Contact Other Address3 Region"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\144"   = "Contact Other Address3 Country"
		"a7b6f596-d678-4bc1-b05f-0203d27e8aa1\145"   = "Contact Other Address3 Postal Code"
		"a7fe0840-1344-46f0-8d37-52ed712a4bf9\100"   = "Parental Ratings Organization"
		"a82d9ee7-ca67-4312-965e-226bcea85023\100"   = "Message Flags"
		"a8a74b92-361b-4e9a-b722-7c4a7330a312\100"   = "Identity Provider Data"
		"a8a7a412-1927-4a34-b1d4-45f67cc672fb\2"	 = "Connected Search Referrer Id"
		"a93eae04-6804-4f24-ac81-09b266452118\100"   = "GPS Dest Distance"
		"a94688b6-7d9f-4570-a648-e3dfc0ab2b3f\100"   = "Offline Availability"
		"a9ea193c-c511-498a-a06b-58e2776dcc28\100"   = "Photo Orientation Text"
		"aaa660f9-9865-458e-b484-01bc7fe3973e\100"   = "Calendar Organizer Name"
		"aabaf6c9-e0c5-4719-8585-57b103e584fe\100"   = "Photo Flash Manufacturer"
		"aaf16bac-2b55-45e6-9f6d-415eb94910df\100"   = "Contact TTY TDD Telephone"
		"aaf4ee25-bd3b-4dd7-bfc4-47f77bb00f6d\100"   = "GPS Differential"
		"ab205e50-04b7-461c-a18c-2f233836e627\100"   = "Photo Exposure Bias Denominator"
		"acc9ce3d-c213-4942-8b48-6d0820f21c6d\100"   = "GPS Speed Numerator"
		"ad763ac7-f1ed-4039-9fb4-b7b84ef33cef\2"	 = "Search Provider Attributes"
		"aeac19e4-89ae-4508-b9b7-bb867abee2ed\2"	 = "DRM Is Protected"
		"aeac19e4-89ae-4508-b9b7-bb867abee2ed\3"	 = "DRM Description"
		"aeac19e4-89ae-4508-b9b7-bb867abee2ed\4"	 = "DRM Play Count"
		"aeac19e4-89ae-4508-b9b7-bb867abee2ed\5"	 = "DRM Date Play Starts"
		"aeac19e4-89ae-4508-b9b7-bb867abee2ed\6"	 = "DRM Date Play Expires"
		"aeac19e4-89ae-4508-b9b7-bb867abee2ed\7"	 = "DRM Is Disabled"
		"afc47170-14f5-498c-8f30-b0d19be449c6\11"    = "DeviceInterface Printer Driver Name"
		"afd97640-86a3-4210-b67c-289c41aabe55\2"	 = "Devices Safe Removal Required"
		"b0b87314-fcf6-4feb-8dff-a50da6af561c\100"   = "Contact Business Address Country"
		"b180ad60-ed3f-4d16-bd43-f5b4fcf325a9\2"	 = "Sync Conflict ItemS hort Location"
		"b180ad60-ed3f-4d16-bd43-f5b4fcf325a9\3"	 = "Sync Conflict Item Full Location"
		"b2f9b9d6-fec4-4dd5-94d7-8957488c807b\2"	 = "File Placeholder Status"
		"b2f9b9d6-fec4-4dd5-94d7-8957488c807b\3"	 = "Storage Provider File Identifier"
		"b2f9b9d6-fec4-4dd5-94d7-8957488c807b\4"	 = "Storage Provider File Version"
		"b2f9b9d6-fec4-4dd5-94d7-8957488c807b\5"	 = "Storage Provider File Checksum"
		"b2f9b9d6-fec4-4dd5-94d7-8957488c807b\6"	 = "Storage Provider File Version Waterline"
		"b2f9b9d6-fec4-4dd5-94d7-8957488c807b\7"	 = "Storage Provider Caller Version Information"
		"b33af30b-f552-4584-936c-cb93e5cda29f\100"   = "Calendar Required Attendee Names"
		"b5c84c9e-5927-46b5-a3cc-933c21b78469\100"   = "Contact Connected Service Name"
		"b769d0fe-bc33-421a-8ce6-45add82ec756\2"	 = "Connected Search Suppress Local Hero"
		"b771b352-8692-42e6-ac33-cc7b062ad950\100"   = "Game Win SPR Recommended"
		"b7b4d61c-5a64-4187-a52e-b1539f359099\2"	 = "Devices Win Phone8 Camera Flags"
		"b812f15d-c2d8-4bbf-bacd-79744346113f\100"   = "Photo Tag View Aggregate"
		"b96eff7b-35ca-4a35-8607-29e3a54c46ea\100"   = "Identity Provider Name"
		"b9b4b3fc-2b51-4a42-b5d8-324146afcf25\2"	 = "Link Target Parsing Path"
		"b9b4b3fc-2b51-4a42-b5d8-324146afcf25\3"	 = "Link Status"
		"b9b4b3fc-2b51-4a42-b5d8-324146afcf25\5"	 = "Link Comment"
		"b9b4b3fc-2b51-4a42-b5d8-324146afcf25\6"	 = "Item After"
		"b9b4b3fc-2b51-4a42-b5d8-324146afcf25\8"	 = "Link Target SFGAO Flags"
		"ba3b1da9-86ee-4b5d-a2a4-a271a429f0cf\100"   = "GPS Dest Bearing Numerator"
		"bb44403b-1399-4650-95eb-03c53a57c2cf\60"    = "Game Int Update Status"
		"bc4e71ce-17f9-48d5-bee9-021df0ea5409\100"   = "Contact Business Address Post Office Box"
		"bccc8a3c-8cef-42e5-9b1c-c69079398bc7\100"   = "Message To Do Title"
		"bceee283-35df-4d53-826a-f36a3eefc6be\100"   = "Search Container Hash"
		"be1a72c6-9a1d-46b7-afe7-afaf8cef4999\100"   = "Communication Task Status"
		"be6e176c-4534-4d2c-ace5-31dedac1606b\100"   = "GPS Longitude Denominator"
		"bebe0920-7671-4c54-a3eb-49fddfc191ee\100"   = "PropGroup Video"
		"bf53d1c3-49e0-4f7f-8567-5a821d8ac542\100"   = "Contact Callback Telephone"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\2"	 = "Devices Dnssd Service Name"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\3"	 = "Devices Dnssd Domain"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\4"	 = "Devices Dnssd Instance Name"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\5"	 = "Devices Dnssd Full Name"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\6"	 = "Devices Dnssd Text Attributes"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\7"	 = "Devices Dnssd Host Name"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\8"	 = "Devices Dnssd Weight"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\9"	 = "Devices Dnssd Priority"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\10"    = "Devices Dnssd Ttl"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\11"    = "Devices Dnssd Network Adapte rId"
		"bf79c0ab-bb74-4cee-b070-470b5ae202ea\12"    = "Devices Dnssd Port Number"
		"bfee9149-e3e2-49a7-a862-c05988145cec\100"   = "Calendar Is Online"
		"c06238b2-0bf9-4279-a723-25856715cb9d\100"   = "Photo Gain Control Text"
		"c0ac206a-827e-4650-95ae-77e2bb74fcc9\100"   = "Contact Mailing Address"
		"c107e191-a459-44c5-9ae6-b952ad4b906d\100"   = "Photo Max Aperture Numerator"
		"c2ea046e-033c-4e91-bd5b-d4942f6bbe49\2"	 = "Creator App Id"
		"c2ea046e-033c-4e91-bd5b-d4942f6bbe49\3"	 = "Creator Open With UI Options"
		"c4322503-78ca-49c6-9acc-a68e2afd7b6b\100"   = "Identity User Name"
		"c449d5cb-9ea4-4809-82e8-af9d59ded6d1\100"   = "Music Is Compilation"
		"c4c07f2b-8524-4e66-ae3a-a6235f103beb\2"	 = "Devices Notifications Low Battery"
		"c4c4dbb2-b593-466b-bbda-d03d27d5e43a\100"   = "GPS Longitude"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\600"   = "Activity App Display Name"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\601"   = "Activity App Image Uri"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\602"   = "Activity Background Color"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\603"   = "Activity Content Image Uri"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\604"   = "Activity Content Uri"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\605"   = "Activity Description"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\606"   = "Activity Display Text"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\607"   = "Activity Tilexml"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\608"   = "Activity History Active Days"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\609"   = "Activity History Active Duration"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\610"   = "Activity History Active Hours"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\611"   = "Activity History App Activity Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\612"   = "Activity History App Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\613"   = "Activity History Device Display Name"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\614"   = "Activity History Device Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\615"   = "Activity History Display Text"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\616"   = "Activity History End Time"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\617"   = "Activity History Id"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\618"   = "Activity History Start Time"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\619"   = "Activity History Type"
		"c5043536-932e-219e-5fb9-1c2807d7b03e\620"   = "Activity Activity Id"
		"c53e42a9-db3c-4bc7-b0f3-83a524adf0ec\1719"  = "Volume BitLocker Can Change Pin"
		"c554493c-c1f7-40c1-a76c-ef8c0614003e\100"   = "Contact Telex Number"
		"c64a866e-41ae-4c8c-b3d5-dd6dbf70c9c1\100"   = "Is Group"
		"c66d4b3c-e888-47cc-b99f-9dca3ee34dea\100"   = "GPS Dest Bearing"
		"c6f039e7-f6a4-4185-ae48-07938262c274\100"   = "Hide In Grep Search"
		"c75faa05-96fd-49e7-9cb4-9f601082d553\100"   = "End Date"
		"c77724d4-601f-46c5-9b89-c53f93bceb77\100"   = "Photo Max Aperture Denominator"
		"c89a23d0-7d6d-4eb8-87d4-776a82d493e5\100"   = "Contact Home Address State"
		"c8d1920c-01f6-40c0-ac86-2f3a4ad00770\100"   = "GPS Track Denominator"
		"c8ea94f0-a9e3-4969-a94b-9c62a95324e0\100"   = "Contact Primary Address City"
		"c9944a21-a406-48fe-8225-aec7e24c211b\2"	 = "PropList Full Details"
		"c9944a21-a406-48fe-8225-aec7e24c211b\3"	 = "PropList Tile Info"
		"c9944a21-a406-48fe-8225-aec7e24c211b\4"	 = "PropList Info Tip"
		"c9944a21-a406-48fe-8225-aec7e24c211b\5"	 = "PropList Quick Tip"
		"c9944a21-a406-48fe-8225-aec7e24c211b\6"	 = "PropList Preview Title"
		"c9944a21-a406-48fe-8225-aec7e24c211b\8"	 = "PropList Preview Details"
		"c9944a21-a406-48fe-8225-aec7e24c211b\9"	 = "PropList Extended Tile Info"
		"c9944a21-a406-48fe-8225-aec7e24c211b\10"    = "PropList File Operation Prompt"
		"c9944a21-a406-48fe-8225-aec7e24c211b\11"    = "PropList Conflict Prompt"
		"c9944a21-a406-48fe-8225-aec7e24c211b\12"    = "PropList Set Defaults For"
		"c9944a21-a406-48fe-8225-aec7e24c211b\13"    = "PropList Content View Mode For Browse"
		"c9944a21-a406-48fe-8225-aec7e24c211b\14"    = "PropList Content View Mode For Search"
		"c9944a21-a406-48fe-8225-aec7e24c211b\16"    = "PropList Status Icons"
		"c9944a21-a406-48fe-8225-aec7e24c211b\17"    = "Info Tip Text"
		"c9944a21-a406-48fe-8225-aec7e24c211b\18"    = "PropList Status Icons Display Flag"
		"c9944a21-a406-48fe-8225-aec7e24c211b\500"   = "Layout Pattern Content View Mode For Browse"
		"c9944a21-a406-48fe-8225-aec7e24c211b\501"   = "Layout Pattern Content View Mode For Search"
		"c9944a21-a406-48fe-8225-aec7e24c211b\502"   = "Layout Pattern Place Holder"
		"c9944a21-a406-48fe-8225-aec7e24c211b\503"   = "Layout Pattern Tiles View Mode"
		"c9944a21-a406-48fe-8225-aec7e24c211b\504"   = "Layout Pattern Group"
		"c9944a21-a406-48fe-8225-aec7e24c211b\510"   = "PropList Details Pane Null Select"
		"c9944a21-a406-48fe-8225-aec7e24c211b\511"   = "PropList Details Pane Null Select Title"
		"c9b88dba-04db-4887-a200-cf0d3afe1146\99"    = "Game Update Status"
		"c9c141a9-1b4c-4f17-a9d1-f298538cadb8\2"	 = "Devices Aep Service Service Id"
		"c9c141a9-1b4c-4f17-a9d1-f298538cadb8\5"	 = "Devices Aep Service Protocol Id"
		"c9c141a9-1b4c-4f17-a9d1-f298538cadb8\6"	 = "Devices Aep Service Aep Id"
		"c9c141a9-1b4c-4f17-a9d1-f298538cadb8\7"	 = "Devices Aep Service Parent Aep Is Paired"
		"c9c34f84-2241-4401-b607-bd20ed75ae7f\100"   = "Communication Header Item"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\2"	 = "Device Interface Hid Usage Page"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\3"	 = "Device Interface Hid Usage Id"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\4"	 = "Device Interface Hid Is Read Only"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\5"	 = "Device Interface Hid Vendor Id"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\6"	 = "Device Interface Hid Product Id"
		"cbf38310-4a17-4310-a1eb-247f0b67593b\7"	 = "Device Interface Hid Version Number"
		"cc158e89-6581-4311-9637-a8da9002f118\2"	 = "Connected Search Require Install"
		"cc301630-b192-4c22-b372-9f4c6d338e07\100"   = "PropGroup General"
		"cc6f4f24-6083-4bd4-8754-674d0de87ab8\100"   = "Contact Email Name"
		"cd102c9c-5540-4a88-a6f6-64e4981c8cd1\100"   = "Contact Assistant Name"
		"cd9ed458-08ce-418f-a70e-f912c7bb9c5c\103"   = "Message Message Class"
		"cdbfc167-337e-41d8-af7c-8c09205429c7\100"   = "Application Defined Properties"
		"cdedcf30-8919-44df-8f4c-4eb2ffdb8d89\100"   = "Photo Exposure Index Numerator"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\2"	 = "Sync Handler Name"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\3"	 = "Sync Item Name"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\4"	 = "Sync Conflict Description"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\6"	 = "Sync Conflict First Location"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\7"	 = "Sync Conflict Second Location"
		"ce50c159-2fb8-41fd-be68-d3e042e274bc\10"    = "Sync Conflict Unresolvable"
		"cea820b9-ce61-4885-a128-005d9087c192\100"   = "GPS Dest Latitude Ref"
		"cebf9b37-26ae-466b-9fe9-c7550c4b0ce8\100"   = "Transfer Path"
		"cf5751fd-f4b3-443d-b31c-9a34740759ec\100"   = "Search Scope"
		"cfa31b45-525d-4998-bb44-3f7d81542fa4\100"   = "Media Dlna Profile Id"
		"cfc08d97-c6f7-4484-89dd-ebef4356fe76\100"   = "Photo Focal Plane X Resolution"
		"d042d2a1-927e-40b5-a503-6edbd42a517e\100"   = "Contact Phone Numbers Canonical"
		"d08dd4c0-3a9e-462e-8290-7b636b2576b9\2"	 = "Devices Interface Paths"
		"d08dd4c0-3a9e-462e-8290-7b636b2576b9\3"	 = "Devices Function Paths"
		"d08dd4c0-3a9e-462e-8290-7b636b2576b9\10"    = "Devices Primary Category"
		"d08dd4c0-3a9e-462e-8290-7b636b2576b9\257"   = "Devices Status 1"
		"d08dd4c0-3a9e-462e-8290-7b636b2576b9\258"   = "Devices Status 2"
		"d08dd4c0-3a9e-462e-8290-7b636b2576b9\259"   = "Devices Status"
		"d0a04f0a-462a-48a4-bb2f-3706e88dbd7d\100"   = "Item Authors"
		"d0c7f054-3f72-4725-8527-129a577cb269\100"   = "Sensitivity Text"
		"d0dab0ba-368a-4050-a882-6c010fd19a4f\100"   = "PropGroup Content"
		"d21a7148-d32c-4624-8900-277210f79c0f\100"   = "Image Compressed Bits Per Pixel Numerator"
		"d35f743a-eb2e-47f2-a286-844132cb1427\100"   = "Photo EXIF Version"
		"d37d52c6-261c-4303-82b3-08b926ac6f12\100"   = "Task Billing Information"
		"d4729704-8ef1-43ef-9024-2bd381187fd5\100"   = "Contact Children"
		"d4bf61b3-442e-4ada-882d-fa7b70c832d9\6"	 = "Devices Aep Point Of Service Connection Types"
		"d4d0aa16-9948-41a4-aa85-d97ff9646993\100"   = "Item Participants"
		"d55bae5a-3892-417a-a649-c6ac5aaaeab3\100"   = "Calendar Optional Attendee Addresses"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\1"	 = "Codepage"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\2"	 = "Category"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\3"	 = "Document Presentation Format"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\4"	 = "Document ByteC ount"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\5"	 = "Document Line Count"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\6"	 = "Document Paragraph Count"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\7"	 = "Document Slide Count"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\8"	 = "Document Note Count"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\9"	 = "Document Hidden Slide Count"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\10"    = "Document Multimedia Clip Count"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\11"    = "Scale"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\12"    = "Headingpair"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\13"    = "Document Parts"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\14"    = "Document Manager"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\15"    = "Company"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\16"    = "Document Links Dirty"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\26"    = "Content Type"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\27"    = "Content Status"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\28"    = "Language"
		"d5cdd502-2e9c-101b-9397-08002b2cf9ae\29"    = "Document Version"
		"d6304e01-f8f5-4f45-8b15-d024a6296789\100"   = "Contact Pager Telephone"
		"d68dbd8a-3374-4b81-9972-3ec30682db3d\100"   = "Contact IM Address"
		"d6942081-d53b-443d-ad47-5e059d9cd27a\2"	 = "Shell SFGAOFlagsStrings"
		"d6942081-d53b-443d-ad47-5e059d9cd27a\3"	 = "Link TargetSFGAOFlagsStrings"
		"d6b5b883-18bd-4b4d-b2ec-9e38affeda82\2"	 = "Devices SmartCards ReaderKind"
		"d6cf9145-d365-471b-bcb8-f0b4a96b891c\100"   = "Fonts ActiveStatus"
		"d7313ff1-a77a-401c-8c99-3dbdd68add36\100"   = "Item Name Prefix"
		"d76e7ba8-dfa6-48e7-9670-d62dfb07206b\2"	 = "Connected Search Contract Id"
		"d76e7ba8-dfa6-48e7-9670-d62dfb07206b\3"	 = "Connected Search App Min Version"
		"d76e7ba8-dfa6-48e7-9670-d62dfb07206b\4"	 = "Connected Search App Installed State"
		"d7750ee0-c6a4-48ec-b53e-b87b52e6d073\100"   = "Image Parsing Name"
		"d7b61c70-6323-49cd-a5fc-c84277162c97\100"   = "Photo Flash Energy Denominator"
		"d98be98b-b86b-4095-bf52-9d23b2e0a752\100"   = "Priority Text"
		"d9c22960-532c-4bc6-9876-7b12b52593d7\2"	 = "Protocol Name"
		"da520e51-f4e9-4739-ac82-02e0a95c9030\100"   = "Identity Qualified User Name"
		"da5d0862-6e76-4e1b-babd-70021bd25494\100"   = "GPS Speed"
		"dc54fd2e-189d-4871-aa01-08c2f57a4abc\100"   = "Flag Status Text"
		"dc5877c7-225f-45f7-bac7-e81334b6130a\100"   = "GPS Img Direction Numerator"
		"dc8f80bd-af1e-4289-85b6-3dfc1b493992\100"   = "Message Conversation Id"
		"dc8f80bd-af1e-4289-85b6-3dfc1b493992\101"   = "Message Conversation Index"
		"dccb10af-b4e2-4b88-95f9-031b4d5ab490\100"   = "Photo Focal Plane X Resolution Numerator"
		"dce33a78-aa18-4b3d-b1df-a6621ac8bdd2\2"	 = "Connected Search Bypass View Action"
		"dd141766-313a-4a30-90f0-056a7c968437\2"	 = "Print Status Document Count"
		"dd141766-313a-4a30-90f0-056a7c968437\3"	 = "Print Status Error Status"
		"dd141766-313a-4a30-90f0-056a7c968437\4"	 = "Print Status Location"
		"dd141766-313a-4a30-90f0-056a7c968437\5"	 = "Print Status Comment"
		"dd141766-313a-4a30-90f0-056a7c968437\6"	 = "Print Status Preferences"
		"dd141766-313a-4a30-90f0-056a7c968437\7"	 = "Print Status Warning Status"
		"dd141766-313a-4a30-90f0-056a7c968437\8"	 = "Print Status Info Status"
		"dd141766-313a-4a30-90f0-056a7c968437\9"	 = "Scan Status Profile"
		"ddd1460f-c0bf-4553-8ce4-10433c908fb0\100"   = "Contact Business Address Street"
		"de00de32-547e-4981-ad4b-542f2e9007d8\100"   = "PropGroup Camera"
		"de35258c-c695-4cbc-b982-38b0ad24ced0\2"	 = "Shell Omit From View"
		"de41cc29-6971-4290-b472-f59f2e2f31e2\100"   = "Media Date Released"
		"de5ef3c7-46e1-484e-9999-62c5308394c1\100"   = "Contact Primary Address Post Office Box"
		"de621b8f-e125-43a3-a32d-5665446d632a\25"    = "Security Encryption Owners Display"
		"de9e220b-41d4-4690-8b6b-3d89e231eef1\100"   = "Fonts Family Name"
		"dea7c82c-1d89-4a66-9427-a4e3debabcb1\100"   = "Journal Contacts"
		"debda43a-37b3-4383-91e7-4498da2995ab\5"	 = "WNET Local Name"
		"debda43a-37b3-4383-91e7-4498da2995ab\6"	 = "WNET Remote Name"
		"debda43a-37b3-4383-91e7-4498da2995ab\7"	 = "WNET Comment"
		"debda43a-37b3-4383-91e7-4498da2995ab\8"	 = "WNET Provider"
		"deeb2db5-0696-4ce0-94fe-a01f77a45fb5\102"   = "Music Artist Sort Override"
		"df975fd3-250a-4004-858f-34e29a3e37aa\100"   = "Prop Group Contact"
		"dfb9a04d-362f-4ca3-b30b-0254b17b5b84\100"   = "Parsing Bind Context"
		"e08805c8-e395-40df-80d2-54f0d6c43154\100"   = "Document Document ID"
		"e1277516-2b5f-4869-89b1-2e585bd38b7a\100"   = "Photo Len sModel"
		"e13d8975-81c7-4948-ae3f-37cae11e8ff7\100"   = "Photo Shutter Speed Denominator"
		"e1a9a38b-6685-46bd-875e-570dc7ad7320\100"   = "Photo Aperture Denominator"
		"e1ad4953-a752-443c-93bf-80c7525566c2\2"	 = "Connected Search Type"
		"e1ad4953-a752-443c-93bf-80c7525566c2\3"	 = "Connected Search Rendering Template"
		"e1ad4953-a752-443c-93bf-80c7525566c2\4"	 = "Connected Search Fallback Template"
		"e1ad4953-a752-443c-93bf-80c7525566c2\5"	 = "Connected Search Telemetry Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\6"	 = "Connected Search Impression Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\7"	 = "Connected Search Is Visibility Tracked"
		"e1ad4953-a752-443c-93bf-80c7525566c2\8"	 = "Connected Search Telemetry Data"
		"e1ad4953-a752-443c-93bf-80c7525566c2\9"	 = "Connected Search Application Search Scope"
		"e1ad4953-a752-443c-93bf-80c7525566c2\10"    = "Connected Search Parent Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\11"    = "Connected Search Child Count"
		"e1ad4953-a752-443c-93bf-80c7525566c2\12"    = "Connected Search Top Level Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\13"    = "Connected Search Is Visible By Default"
		"e1ad4953-a752-443c-93bf-80c7525566c2\14"    = "Connected Search Is Activatable"
		"e1ad4953-a752-443c-93bf-80c7525566c2\15"    = "Connected Search Suggestion Context"
		"e1ad4953-a752-443c-93bf-80c7525566c2\16"    = "Connected Search Region Id"
		"e1ad4953-a752-443c-93bf-80c7525566c2\17"    = "Connected Search Item Source"
		"e1ad4953-a752-443c-93bf-80c7525566c2\18"    = "Connected Search Activation Command"
		"e1ad4953-a752-443c-93bf-80c7525566c2\19"    = "Connected Search Is History Item"
		"e1ad4953-a752-443c-93bf-80c7525566c2\20"    = "Connected Search Is App Available"
		"e1ad4953-a752-443c-93bf-80c7525566c2\21"    = "Connected Search History Title"
		"e1ad4953-a752-443c-93bf-80c7525566c2\22"    = "Connected Search History Description"
		"e1ad4953-a752-443c-93bf-80c7525566c2\23"    = "Connected Search History Glyph"
		"e1ad4953-a752-443c-93bf-80c7525566c2\27"    = "Connected Search Requires Consent"
		"e1ad4953-a752-443c-93bf-80c7525566c2\28"    = "Connected Search Copy Text"
		"e1ad4953-a752-443c-93bf-80c7525566c2\29"    = "Connected Search Add Open In Browser Command"
		"e1ad4953-a752-443c-93bf-80c7525566c2\30"    = "Connected Search Image Url"
		"e1ad4953-a752-443c-93bf-80c7525566c2\31"    = "Connected Search Image Prefetch Stage"
		"e1ad4953-a752-443c-93bf-80c7525566c2\32"    = "Connected Search Is Local Item"
		"e1d4a09e-d758-4cd1-b6ec-34a8b5a73f80\100"   = "Contact Business Address Postal Code"
		"e2d40928-632c-4280-a202-e0c2ad1ea0f4\2"	 = "Connected Search Qs Code"
		"e2d40928-632c-4280-a202-e0c2ad1ea0f4\3"	 = "Connected Search Jump List"
		"e2d40928-632c-4280-a202-e0c2ad1ea0f4\4"	 = "Connected Search Voice Command Examples"
		"e32596b0-1163-4e02-867a-12132db4ba06\2"	 = "IE FeedItem Local Id"
		"e3690a87-0fa8-4a2a-9a9f-fce8827055ac\100"   = "Prop Group Image"
		"e3a7d2c1-80fc-4b40-8f34-30ea111bdc2e\100"   = "Prop Group File System"
		"e4f10a3c-49e6-405d-8288-a23bd4eeaa6c\100"   = "File Extension"
		"e53d799d-0f3f-466e-b2ff-74634a3cb7a4\100"   = "Contact Primary Address Country"
		"e5473742-4611-4aaf-9c49-a3417748cbc8\100"   = "Invalid Path Value"
		"e55fc3b0-2b60-4220-918e-b21e8bf16016\100"   = "Identity Unique Id"
		"e6822fee-8c17-4d62-823c-8e9cfcbd1d5c\100"   = "Audio Is Variable Bit Rate"
		"e6c3d9ad-7b32-4efe-a167-0a868ffdf3af\100"   = "Game WinSPR Minimum"
		"e6ddcaf7-29c5-4f0a-9a68-d19412ec7090\100"   = "Photo Lens Manufacturer"
		"e77e90df-6271-4f5b-834f-2dd1f245dda4\2"	 = "Storage Provider UI Status"
		"e77e90df-6271-4f5b-834f-2dd1f245dda4\3"	 = "Storage Provider State"
		"e77e90df-6271-4f5b-834f-2dd1f245dda4\4"	 = "Storage Provider Transfer Progress"
		"e7b33238-6584-4170-a5c0-ac25efd9da56\100"   = "Prop Group Recorded TV"
		"e7c3fb29-caa7-4f47-8c8b-be59b330d4c5\2"	 = "Devices Aep Container Id"
		"e7c3fb29-caa7-4f47-8c8b-be59b330d4c5\3"	 = "Devices Aep Can Pair"
		"e8309b6e-084c-49b4-b1fc-90a80331b638\100"   = "Photo PeopleNames"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\2"	 = "Zip Folder Encrypted"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\3"	 = "Zip Folder Method"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\4"	 = "Zip Folder Ratio"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\5"	 = "Zip Folder CRC32"
		"e88dcce0-b7b3-11d1-a9f0-00aa0060fa31\6"	 = "Zip Folder Compressed Size"
		"e92a2496-223b-4463-a4e3-30eabba79d80\100"   = "Photo FNumber Denominator"
		"e9641eff-af25-4db7-947b-4128929f8ef5\2"	 = "Connected Search Suggestion Detail Text"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\102"   = "Structured Query Virtual Bcc"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\103"   = "Structured Query Virtual Cc"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\104"   = "Structured Query Virtual From"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\105"   = "Structured Query Virtual To"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\106"   = "Structured Query Virtual Organizer"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\107"   = "Structured Query Virtual Required Attendees"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\108"   = "Structured Query Virtual Optional Attendees"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\109"   = "Structured Query Virtual Resources"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\110"   = "Structured Query Virtual Date Created"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\111"   = "Structured Query Virtual Phone"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\112"   = "Structured Query Virtual Message Size"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\113"   = "Structured Query Virtual About"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\114"   = "Structured Query Virtual Is Read"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\115"   = "Structured Query Virtual Journal Duration"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\116"   = "Structured Query Virtual Is Encrypted"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\117"   = "Structured Query Virtual Type"
		"e9edd392-0b4c-4cf2-82c0-b0d139666245\118"   = "Structured Query Virtual Artist"
		"ea810849-87ff-4b54-abd6-5b71adf466f8\1"	 = "Dui Control Resource"
		"ec0b4191-ab0b-4c66-90b6-c6637cdebbab\100"   = "Communication Policy Tag"
		"ecf4b6f6-d5a6-433c-bb92-4076650fc890\100"   = "GPS Dest Latitude Numerator"
		"ecf7f4c9-544f-4d6d-9d98-8ad79adaf453\100"   = "GPS Speed Ref"
		"ed4df2d3-8695-450b-856f-f5c1c53acb66\100"   = "GPS Des tDistance Ref"
		"ee31306c-fb9b-4d62-8621-3575d972a9f9\1718"  = "Volume BitLocker Requires Admin"
		"ee3d3d8a-5381-4cfa-b13b-aaf66b5f4ec9\100"   = "Photo White Balance"
		"eec7b761-6f94-41b1-949f-c729720dd13c\12"    = "Device Interface Printer Port Name"
		"ef1167eb-cbfc-4341-a568-a7c91a68982c\2"	 = "Devices WiFi Interface Guid"
		"ef884c5b-2bfe-41bb-aae5-76eedf4f9902\100"   = "Is Shared"
		"ef884c5b-2bfe-41bb-aae5-76eedf4f9902\200"   = "Shared With"
		"ef884c5b-2bfe-41bb-aae5-76eedf4f9902\300"   = "Sharing Status"
		"ef884c5b-2bfe-41bb-aae5-76eedf4f9902\400"   = "Share Scope"
		"f04bef95-c585-4197-a2b7-df46fdc9ee6d\100"   = "Kind Text"
		"f0f7984d-222e-4ad2-82ab-1dd8ea40e57e\300"   = "Title Sort Override"
		"f1176dfe-7138-4640-8b4c-ae375dc70a6d\100"   = "Contact Primary Address State"
		"f18dedf3-337f-42c0-9e03-cee08708a8c3\100"   = "Identity Logon Status String"
		"f1a24aa7-9ca7-40f6-89ec-97def9ffe8db\100"   = "Contact File As Name"
		"f1fdb4af-f78c-466c-bb05-56e92db0b8ec\103"   = "Music Album Artist Sort Override"
		"f21d9941-81f0-471a-adee-4e74b49217ed\100"   = "Provider Item Id"
		"f2275480-f782-4291-bd94-f13693513aec\0"	 = "Prop List XP Details Panel"
		"f23f425c-71a1-4fa8-922f-678ea4a60408\100"   = "Is Attachment"
		"f271c659-7e5e-471f-ba25-7f77b286f836\100"   = "Contact Business Email Addresses"
		"f27abe3a-7111-4dda-8cb2-29222ae23566\2"	 = "Connected Search Disambiguation Id"
		"f334115e-da1b-4509-9b3d-119504dc7abb\100"   = "Document Contributor"
		"f3713ada-90e3-4e11-aae5-fdc17685b9be\100"   = "Prop Group GPS"
		"f3aecac4-5b8d-436a-ad0c-64ab194fdaf3\100"   = "Fonts Collection Name"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\2"	 = "App Contract Pinned"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\3"	 = "App Contract Hidden"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\4"	 = "App Contract Pinned Order"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\5"	 = "App Contract Relevance"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\6"	 = "App Contract Category"
		"f3c9b698-be85-47ce-888f-83874d9abcb4\7"	 = "App Contract Supported File Types"
		"f3d8f40d-50cb-44a2-9718-40cb9119495d\100"   = "Contact Initials"
		"f50d2f5d-dda0-48d4-8d2b-e83729fb69a4\100"   = "Item Query Condition"
		"f6272d18-cecc-40b1-b26a-3911717aa7bd\100"   = "Calendar Location"
		"f628fd8c-7ba8-465a-a65b-c5aa79263a9e\100"   = "Photo Metering Mode Text"
		"f7db74b4-4287-4103-afba-f1b13dcd75cf\100"   = "Item Date"
		"f8245476-2ec6-44be-b2f7-82ec2537fa2e\100"   = "Condition"
		"f8245476-2ec6-44be-b2f7-82ec2537fa2e\101"   = "Condition Key"
		"f85bf840-a925-4bc2-b0c4-8e36b598679e\100"   = "Photo Digital Zoom"
		"f8d3f6ac-4874-42cb-be59-ab454b30716a\100"   = "Sensitivity"
		"f8fa7fa3-d12b-4785-8a4e-691a94f7a3e7\100"   = "Contact Email Address"
		"fa303353-b659-4052-85e9-bcac79549b84\100"   = "Photo Maker Note"
		"fa304789-00c7-4d80-904a-1e4dcc7265aa\100"   = "Photo Gain Control"
		"fb1de864-e06d-47f4-82a6-8a0aef44493c\2"	 = "Devices Audio Device Speech Processing Supported"
		"fb3842cd-9e2a-4f83-8fcc-4b0761139ae9\2"	 = "Device Interface Proximity Supports Nfc"
		"fc6976db-8349-4970-ae97-b3c5316a08f0\100"   = "Photo Sharpness"
		"fc9f7306-ff8f-4d49-9fb6-3ffe5c0951ec\100"   = "Contact Department"
		"fcad3d3d-0858-400f-aaa3-2f66cce2a6bc\100"   = "Photo Flash Energy Numerator"
		"fcc16823-baed-4f24-9b32-a0982117f7fa\100"   = "Identity Primary Email Address"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\100"   = "File Offline Availability Status"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\101"   = "Folder Kind"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\103"   = "Sync Transfer Status"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\104"   = "Transfer Position"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\105"   = "Transfer Size"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\106"   = "Transfer Order"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\107"   = "Last Sync Error"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\108"   = "Storage Provider Id"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\109"   = "Storage Provider Error"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\110"   = "Storage Provider Status"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\111"   = "Storage Provider Share Statuses"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\112"   = "Storage Provider File Remote Uri"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\113"   = "Cached File Updater Content Id For Stream"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\114"   = "Cached File Updater Content Id For Conflict Resolution"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\115"   = "Remote Conflicting File"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\116"   = "Storage Provider Thumbnail Dimensions"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\117"   = "Storage Provider Sharing Status"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\118"   = "Storage Provider Descendant Sharing Status"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\119"   = "Storage Provider Fully Qualified Id"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\120"   = "Storage Provider Custom States"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\121"   = "Item Custom State State List"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\122"   = "Item Custom State Values"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\123"   = "Item Custom State Icon References"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\124"   = "Storage Provider Aggregated Custom States"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\125"   = "Storage Provider Network Connected"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\126"   = "Storage Provider Warning Error State"
		"fceff153-e839-4cf3-a9e7-ea22832094b8\127"   = "Storage Provider Protection Mode"
		"fcfb52aa-c1e5-4cd8-88bc-f80fd7390f20\100"   = "Not User Content"
		"fd122953-fa93-4ef7-92c3-04c946b2f7c8\100"   = "Music Display Artist"
		"fd9d9fc7-38ec-436d-8fc6-ec39bad301e6\100"   = "Computer Processor"
		"fd9d9fc7-38ec-436d-8fc6-ec39bad301e6\101"   = "Computer Memory"
		"fdf84370-031a-4add-9e91-0d775f1c6605\100"   = "Mileage Information"
		"fe83bb35-4d1a-42e2-916b-06f3e1af719e\100"   = "Photo Flash Model"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\3"	 = "Printer Default"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\4"	 = "Printer Location"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\5"	 = "Printer Model"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\6"	 = "Printer Queue Size"
		"fe9e4c12-aacb-4aa3-966d-91a29e6128b5\7"	 = "Printer Status"
		"fec690b7-5f30-4646-ae47-4caafba884a3\100"   = "Photo Exposure Program Text"
		"fec7952b-4bf0-4c03-b6e1-2796818b7ca9\100"   = "Fonts Version"
		"ff1167eb-cbfc-4341-a568-a7c91a68982c\2"	 = "Devices Wwan Interface Guid"
		"ff962609-b7d6-4999-862d-95180d529aea\100"   = "Contact Other Address Street"
		"ffae9db7-1c8d-43ff-818c-84403aa3732d\100"   = "Source Package Family Name"
	}
	
	$Host_OS = [Ordered]@{
		'46' = 'Windows 8.1+'
		'42' = 'Windows 2000/7/8'
		'38' = 'Windows Vista'
		'20' = 'Windows XP/2003'
	}
	
	$CPitems = [ordered]@{
		"00" = "All Control Panel Items"
		"01" = "Appearance and Personalization"
		"02" = "Hardware and Sound"
		"03" = "Network and Internet"
		"04" = "Sound, Speech and Audio Devices"
		"05" = "System and Security"
		"06" = "Clock, Language, and Region"
		"07" = "Ease of Access"
		"08" = "Programs"
		"09" = "User Accounts"
		"10" = "Security Center"
		"11" = "Mobile PC"
	}
	
	# https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775141(v=vs.85)
	$UriEntryTypes = [ordered]@{
		'1'  = 'Authority'
		'2'  = 'Display URI'
		'3'  = 'Domain'
		'4'  = 'Extension'
		'5'  = 'Fragment'
		'6'  = 'Host'
		'7'  = 'Password'
		'8'  = 'Path'
		'9'  = 'Path & Query'
		'10' = 'Query'
		'11' = 'Raw URI'
		'12' = 'Scheme Name'
		'13' = 'User Info'
		'14' = 'User Name'
		'15' = 'Host Type'
		'16' = 'Port'
		'17' = 'Scheme'
		'18' = 'Zone'
	}
	
	function Get-Attributes
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[Byte[]]$Bytes
		)
		
		$attr = [System.Collections.ArrayList]::new()
		$attrINt = if ($bytes.Count -eq 2) { [System.BitConverter]::ToUInt16($Bytes, 0) }
			   elseif ($bytes.Count -eq 4) { [System.BitConverter]::ToUInt32($Bytes, 0) }
			     else { return }
		$FileAttributesEnum.GetEnumerator().foreach{ if (($attrINt -band $_.key) -eq $_.key) { $null = $attr.Add($FileAttributesEnum[$_.key]) } }
		Return "$($attr -join ', ') ($($attrINt))"
	}
	
	function Get-CLSID
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.String]$CLSIDstring
		)
		
		function Get-MyCompCLSISD
		{
			param
			(
				[Parameter(Mandatory = $true)]
				[AllowEmptyString()]
				[AllowNull()]
				[System.String]$CLSIDstring
			)
			$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
			$registrykey = $Registry.OpenSubKey('Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace')
			$registrySubKeyNames = $registrykey.GetSubKeyNames()
			$registrykey.Close()
			$registrykey.Dispose()
			$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
			if (!!$CLSID)
			{
				$registrykey = $Registry.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\$($CLSID)")
				$Value = $registrykey.GetValue('')
				$registrykey.Close()
				$registrykey.Dispose()
				$Name = if (!!$Value) { "$($Value) [$($CLSIDstring)]" } else { $CLSIDstring }
			}
			else { $Name = $CLSIDstring }
					
			Return $Name
		} # End Get-MyCompCLSISD
			
		try
		{
			$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
			$registrykey = $Registry.OpenSubKey('Software\Classes\CLSID')
			$registrySubKeyNames = $registrykey.GetSubKeyNames()
			$registrykey.Close()
			$registrykey.Dispose()
			$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
			if (!!$CLSID)
			{
				$registrykey = $Registry.OpenSubKey("Software\Classes\CLSID\$($CLSID)")
				$Value = $registrykey.GetValue('')
				$Registry.Close()
				$Registry.Dispose()
				
				if (!!$Value)
				{
					$Name = "$($Value) [$($CLSIDstring)]"
					$registrykey.Close()
					$registrykey.Dispose()
				}
				else
				{
					$Name = Get-MyCompCLSISD -CLSIDstring $CLSIDstring
				}
			}
			else
			{
				$Name = Get-MyCompCLSISD -CLSIDstring $CLSIDstring
			}
		
			return $Name
		}
		catch { $null }
	} # End Get-CLSID
	
	function Get-FolderDescription
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$CLSIDstring
		)
		
		try
		{
			$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
			$registrykey = $Registry.OpenSubKey('Software\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions')
			$registrySubKeyNames = $registrykey.GetSubKeyNames()
			$registrykey.Close()
			$registrykey.Dispose()
			$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
			if (!!$CLSID)
			{
				$registrykey = $Registry.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\$($CLSID)")
				$Name = "$($registrykey.GetValue('Name')) [$($CLSIDstring)]"
				$registrykey.Close()
				$registrykey.Dispose()
			}
			else
			{
				$registrykey = $Registry.OpenSubKey('Software\Microsoft\Windows\CurrentVersion\Explorer\FolderTypes')
				$registrySubKeyNames = $registrykey.GetSubKeyNames()
				$registrykey.Close()
				$registrykey.Dispose()
				$CLSID = $registrySubKeyNames.Where{ $_ -match $CLSIDstring }
				if (!!$CLSID)
				{
					$registrykey = $Registry.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Explorer\FolderTypes\$($CLSID)")
					$Name = "$($registrykey.GetValue('CanonicalName')) [$($CLSIDstring)]"
					$registrykey.Close()
					$registrykey.Dispose()
				}
				else
				{ $Name = $CLSIDstring }
			}
			
			$Registry.Close()
			$Registry.Dispose()
			
			return $Name
		}
		catch { $null }
	} # End Get-FolderDescription
	
	function Get-XAppName
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.String]$XAppName
		)
		
		try
		{
			$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, [Microsoft.Win32.RegistryView]::Default)
			$registrykey = $Registry.OpenSubKey('Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Extensions\ProgIDs')
			$registrySubKeyNames = $registrykey.GetSubKeyNames()
			$registrykey.Close()
			$registrykey.Dispose()
			$XApp = $registrySubKeyNames.Where{ $_ -eq $XAppName }
			if (!!$XApp)
			{
				$registrykey = $Registry.OpenSubKey("Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Extensions\ProgIDs\$($XApp)")
				$ValueNames = $registrykey.GetValueNames()
				$name = if ($ValueNames.count -ge 1)
				{
					"$($ValueNames[($ValueNames.count - 1)]) [$($XAppName)]" # Get the (latest version) name string
				}
				else { $XAppName }
				$registrykey.Close()
				$registrykey.Dispose()
			}
			else { $Name = $XAppName }
			
			$Registry.Close()
			$Registry.Dispose()
		}
		catch { $Name = $XAppName }
		return $Name
	} # End Get-XAppName
	
	function Get-Ext_00 # Variant
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		$Signature = [System.BitConverter]::ToString($ByteArray[2 .. 5]) -replace '-', ''
		if ($Signature -eq '47465349') # GFSI
		{
			$CLSID = if ($ByteArray -ge 22) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[6 .. 21]))" }
			else { $null }
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'CLSID'	     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
			}
		}
		elseif ($Signature -eq '4175674D') # Embedded ITemID items
		{
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'CLSID'	     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
			}
			
			if ($ItemIdListItem.ItemIDSize -ge 18)
			{
				$EmbeddedItemIDs = [System.Collections.ArrayList]::new()
				$idx = 14
				while ($idx -lt ($ItemIdListItem.ItemIDSize - 14))
				{
					$itemSize = [Bitconverter]::ToUInt16($ByteArray[($idx) .. ($idx + 1)], 0)
					if ($itemSize -eq 0) { break }
					$null = $EmbeddedItemIDs.Add([ShellLink.Structures.ItemID]::FromByteArray($ByteArray[$idx .. ($idx + $itemSize - 1)]))
					$idx = $idx + $itemSize + 2
					if ($idx -ge ($ItemIdListItem.ItemIDSize - 14)) { break }
				}
				if ($EmbeddedItemIDs.Count -ge 1)
				{
					$EmbeddedIdList = [System.Collections.ArrayList]::new()
					foreach ($EmbeddedItemID in $EmbeddedItemIDs)
					{
						$linkItem = Get-LinkTargetIDList -ItemIdListItem $EmbeddedItemID
						$null = $EmbeddedIdList.Add($linkItem)
					}
					$ItemIdListProperties| Add-Member -MemberType NoteProperty -Name 'EmbeddedIdList' -Value $EmbeddedIdList
				}
			}
			
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq '338B0123') # PropertyStore 1
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$CLSID = if ($ByteArray -ge 28) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }
			else { $null }
			$CLSID0 = if ($ByteArray -ge 43) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[28 .. 43]))" }
			else { $null }
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
				'GUID'	     = if ($CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else { $null }
				'CLSID'	     = if ($CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else { $null }
			}
			if ($ItemIDSize -ge 56 -and [System.Text.Encoding]::ASCII.GetString($ByteArray[52..55]) -eq '1SPS')
			{
				$ExtraData = $ByteArray[44 .. ($ItemIDSize - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq '81191410') # PropertyStore 2
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			if ($ItemIDSize -gt 48)
			{
				$ExtraData = $ByteArray[40 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
			
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq '1F00A104') # PropertyStore 3
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			
			if ($ItemIDSize -gt 27)
			{
				$ExtraData = $ByteArray[16 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -in ('00EEEBBE', 'BBAF933B')) # PropertyStore 4
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			
			if ($ItemIDSize -gt 23)
			{
				$ExtraData = $ByteArray[12 .. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq '41505053') # PropertyStore 4 # APPS
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
			if ($ItemIDSize -gt 28)
			{
				$ExtraData = $ByteArray[16.. ($ByteArray.count - 1)]
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray $ExtraData
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
			
		}
		elseif (([System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', '') -eq 'EEBBFE23' -and [System.BitConverter]::ToString($ByteArray[2]) -eq '1A')
		{
			$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }
			else { $ClassType }
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
			$CLSID0 = if ($ItemIdListItem.ItemIDSize -ge 27) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }
			else { $null }
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'	 = $ItemIDSize
				'ItemIDType'	 = $ItemIDType
				'SortOrderIndex' = $Class
				'Signature'	     = "0x$($Signature)"
				'Atrributes'	 = $Attributes
				'GUID'		     = if ($CLSID0) { Get-FolderDescription -CLSIDstring $CLSID0 }else { $null }
			}
			if ($ItemIDSize -ge 38)
			{
				$idx = 30
				$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'ItemIdExtensions' -Value $ItemIdExtensions
			} # end if 
		} # End of 0x1A
		elseif ($Signature -eq '00000000' -and $ByteArray[18 .. 19].Contains([byte]16)) # if Attribute => Directory
		{
			$type = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
			$Attributes = Get-Attributes -Bytes $ByteArray[18..21]
			$Timestamp = [System.Text.Encoding]::Unicode.GetString($ByteArray[22 .. 53])
			$ZipIndex = [System.BitConverter]::ToUInt16($ByteArray[54 .. 55], 0)
			$ParentLength = [System.BitConverter]::ToUInt16($ByteArray[62 .. 63], 0)
			$NameLength = [System.BitConverter]::ToUInt16($ByteArray[58 .. 59], 0)
			$Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[66 .. (66 + $NameLength * 2 - 1)])
			$pidx = 66 + $NameLength * 2 + 2
			$Parent = if ($ParentLength -gt 0)
			{
				[System.Text.Encoding]::Unicode.GetString($ByteArray[$pidx .. ($pidx + $ParentLength * 2 - 1)])
			}
			else { $null }
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'   = $ItemIDSize
				'ItemIDType'   = $ItemIDType
				'DisplayName'  = $ItemIdListItem.DisplayName
				'Type'		   = $type
				'Attributes'   = $Attributes
				'Timestamp'    = $Timestamp
				'ZipIndex'	   = $ZipIndex
				'ParentLength' = $ParentLength
				'NameLength'   = $NameLength
				'Name'		   = $Name
				'Parent'	   = $Parent
			}
			
			$idx = $pidx + $ParentLength * 2 + 2
			if ($ByteArray.Count -gt $idx)
			{
				try
				{
					$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
				}
				catch{$null}
			}
		}
		else
		{
			$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Signature'  = "0x$($Signature)"
			}
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_00
	
	function Get-Ext_1F # GUID
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ClassType = [System.BitConverter]::ToString($ByteArray[1])
		$ItemIDSize = $ByteArray.count
		
		if ($ItemIDSize -eq 18)
		{
			$CLSID0 = Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))"
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'GUID'	     = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else{ $CLSID0 }
			}
		}
		else
		{
			Switch ($ClassType)
			{
				'50'{
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }	else { $ClassType }
					$CLSID = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }	else { $null }
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ItemIDSize
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
						}
					} # End of 50
				'00'{
						if ([System.BitConverter]::ToString($ByteArray[2]) -eq '2F')
						{
							$Signature = [System.BitConverter]::ToString($ByteArray[4 .. 7]) -replace '-', ''
							$ItemIDType2 = [System.BitConverter]::ToString($ByteArray[8])
							$ClassType2 = [System.BitConverter]::ToString($ByteArray[9])
							$DriveLetter = [System.Text.Encoding]::UTF8.GetString($ByteArray[11 .. 13])
							$idx = 14 + 37
							$CLSID = if ($ByteArray.count -ge 66) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[$idx .. ($idx + 15)]))" }else { $null }
							$CLSID0 = if ($ByteArray.count -ge 83) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($idx + 16) .. ($idx + 31)]))" }else { $null }
							
							$ItemIdListProperties = [PSCustomObject]@{
								'ItemIDSize' = $ByteArray.Count
								'ItemIDType' = $ItemIDType
								'Class Type' = $ClassType
								'Signature'  = if ($Signature) { "0x$($Signature)" }else { $null }
								'DriveLetter' = $DriveLetter
								'GUID'	     = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else{ $CLSID0 }
								'CLSID'	     = if (!!$CLSID) { Get-FolderDescription -CLSIDstring $CLSID }else{ $CLSID }
							}
						} # End of 0x2F
						elseif ([System.BitConverter]::ToString($ByteArray[24..25]) -eq 'EF-BE')
						{
							$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }else { $ClassType }
							$CLSID = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }	else { $null }
							$ItemIdListProperties = [PSCustomObject]@{
								'ItemIDSize'	 = $ItemIDSize
								'ItemIDType'	 = $ItemIDType
								'SortOrderIndex' = $Class
								'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
							}
							$1stextensionlength = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
							if ($1stextensionlength -ne 0)
							{
								$idx = 18
								# Get the extension(s)
								$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
							} # End extentions
						} # End of 0x05
						elseif ([System.BitConverter]::ToString($ByteArray[20 .. 23]) -eq '31-53-50-53') # 1SPS
						{
							$ItemIdListProperties = [PSCustomObject]@{
								'ItemIDSize'	 = $ItemIDSize
								'ItemIDType'	 = $ItemIDType
								'SortOrderIndex' = $Class
								'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
							}
							
							if ($ItemIDSize -gt 23)
							{
								
								$ExtraData = $ByteArray[12 .. ($ItemIDSize - 1)]
								$PropertyStoreEntries = [System.Collections.ArrayList]::new()
								$Items = Get-Ext_SPS1 -ByteArray $ExtraData
								foreach ($property in $items)
								{
									$PropertyStoreEntry = [PSCustomObject]::new()
									$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
									$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
									$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
									$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
								}
								$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
							}
							
						} # end 1SPS
					} # End of 00
				{ $_ -in ('41' ,'42','44', '48') }{
					
					$Class = if ($SortOrderIndex[[String]$ClassType]) { "$($SortOrderIndex[[String]$ClassType]) [$($ClassType)]" }
					else { $ClassType }
					$CLSID = if ($ByteArray.Count -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
					else { $null }
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ByteArray.count
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
					}
					$1stextensionlength = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
					if ($1stextensionlength -ne 0)
					{
						$idx = 18
						# Get the extension(s)
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
					} # End extentions
				} # End of 44/48
				default {
					try
					{
						$CLSID = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }	else { $null }
					}
					catch { $CLSID = $null }
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'	 = $ItemIDSize
						'ItemIDType'	 = $ItemIDType
						'SortOrderIndex' = $Class
						'CLSID'		     = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
					}
				}
			} # End Switch
		} # end else
		if (!!$ItemIdExtensions)
		{
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_1F
	
	function Get-Ext_2E_2F # Dates
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		if ($ItemIDType -eq '2F') # Driveletter
		{
			try
			{
				$DriveLetter = [System.Text.Encoding]::UTF8.GetString($ByteArray[1 .. 4])
				$CLSID0 = if ($ItemIDSize -ge 20 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[5 .. 19] -join ''), '[(0){16}]')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[5 .. 19]))" }	else { $null }
				$CLSID = if ($ItemIDSize -ge 39) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[23 .. 39]))" }	else { $null }
				
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize'   = $ItemIDSize
					'ItemIDType'   = $ItemIDType
					'DriveLetter'  = $DriveLetter
				}
				if ($null -ne $CLSID0)
				{
					$ItemIdListProperties| Add-Member -MemberType NoteProperty -Name 'GUID' -Value (Get-FolderDescription -CLSIDstring $CLSID0)
				}
				if ($null -ne $CLSID)
				{
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'CLSID' -Value (Get-FolderDescription -CLSIDstring $CLSID)
				}
			}
			catch { $null }
		}
		elseif ($ItemIDType -eq '2E') # CLSID etc
		{
			try
			{
				<#$Signature = [System.BitConverter]::ToString($ByteArray[4..7]) -replace '-', ''#>
				<#if ($Signature -eq '06203108') # Shell Ext Volume (Portable Volume) <============= Not Added Yet
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIDSize
						'ItemIDType' = $ItemIDType
					}
				}
				else#>if ($ByteArray[2] -eq [byte]12) # 0x0C
				{
					$CLSID0 = if ($ItemIDSize -ge 32) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[16 .. 31]))" }
					else { $null }
					$CLSID = if ($ItemIDSize -ge 48) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[32 .. 47]))" }
					else { $null }
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIDSize
						'ItemIDType'  = $ItemIDType
					}
					if ($null -ne $CLSID0)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'GUID' -Value (Get-FolderDescription -CLSIDstring $CLSID0)
					}
					if ($null -ne $CLSID)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'CLSID' -Value (Get-CLSID -CLSIDstring $CLSID)
					}
				}
				else
				{
					$CLSID0 = if ($ItemIDSize -ge 18) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[2 .. 17]))" }
					else { $null }
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIDSize
						'ItemIDType' = $ItemIDType
						'GUID'	     = if ($CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }else { $null }
					}
					
					if ($ItemIDSize -ge 25)
					{
						# Get the extension(s)
						$idx = 18
						$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value $ItemIdExtensions
					} # end if
				}
			}
			catch
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIDSize
					'ItemIDType' = $ItemIDType
				}
			}
		}
		else
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
			}
		}
			
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
		
	} # End Get-Ext_2
	
	function Get-Ext_B1 
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[9 .. 6]) -replace '-', '')
		if (!!$w32Modified) { $w32Modified = $w32Modified.ToString("dd/MM/yyyy HH:mm:ss.ff") }
		$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
		$idx = $ByteArray[12 .. (12 + $ItemIDSize - 1)].IndexOf([byte]'0')
		$Ansi_Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[12 .. ($idx + 12 - 1)])
		
		$idx = 12 + $Ansi_Name.Length + 2
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDType" -Value $ItemIDType
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDSize" -Value $ItemIDSize
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
		
		# Get the extension(s)
		$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_B1 
	
	function Get-Ext_C3
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		try
		{
			$Flags = "0x$([System.BitConverter]::ToString($ByteArray[2]))"
			$TargetString = [System.Text.Encoding]::UTF8.GetString($ByteArray[3 .. ($ItemIDSize - 3)])
			$String = ($TargetString -split '\0')
			
			$Name = $String[0]
			$Desription = $String[1]
			
			$start = $TargetString.IndexOf($String[1]) + 3
			$idx = $start + $String[1].Length
			$NetworkProviderType = [System.BitConverter]::ToString($ByteArray[($idx + 3) .. ($idx)]) -replace '-', ''
			$NetworkProvider = if (!!$($Vendors[$NetworkProviderType])) { "0x$($NetworkProviderType) ($($Vendors[$NetworkProviderType]))" }	else { "0x$($NetworkProviderType)" }
			$idx = $idx + 4
					
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'	  = $ItemIDSize
				'ItemIDType'	  = $ItemIDType
				'Flags'		      = $Flags
				'Name'		      = $Name
				'Desription'	  = $Desription
				'NetworkProvider' = $NetworkProvider
			}
			
			if ($ItemIDSize -gt $idx)
			{
				# Get the extension(s)
				$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
				
				$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
			}
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
			<#$Flags = "0x$([System.BitConverter]::ToString($ByteArray[2]))"
			$idx = $ByteArray[3 .. (3 + $ItemIDSize - 1)].IndexOf([byte]'0')
			$Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[3 .. (3 + $idx - 1)])
			$next = 3 + $idx + 1
			if ($next -lt $ItemIDSize)
			{
				$idx = $ByteArray[$next .. ($ItemIDSize - 1)].IndexOf([byte]'0')
				$Desription = [System.Text.Encoding]::UTF8.GetString($ByteArray[$next .. ($next + $idx - 1)])
				$NetworkProviderType = [System.BitConverter]::ToString($ByteArray[($next + $idx + 3) .. ($next + $idx)]) -replace '-', ''
				$NetworkProvider = if (!!$($Vendors[$NetworkProviderType])) { "0x$($NetworkProviderType) ($($Vendors[$NetworkProviderType]))" }
			}
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize'      = $ItemIDSize
				'ItemIDType'      = $ItemIDType
				'Flags'           = $Flags
				'Name'	          = $Name
				'Desription'      = $Desription
				'NetworkProvider' = $NetworkProvider
				'Data'		      = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
			}#>
		}
		catch
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIDSize
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
			}
		}
		
		return $ItemIdListProperties
		
	} # End Get-Ext_C3
	
	function Get-Ext_31_32 # Folder / File
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		if ($ItemIDType -eq '32')
		{
			$Filesize = [System.BitConverter]::ToUInt32($ByteArray[2 .. 5], 0)
		}
		$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[9 .. 6]) -replace '-', '')
		if(!!$w32Modified){$w32Modified = $w32Modified.ToString("dd/MM/yyyy HH:mm:ss.ff")}
		$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
		$idx = $ByteArray[12 .. (12 + $ByteArray.Count - 1)].IndexOf([byte]'0')
		$Ansi_Name = [System.Text.Encoding]::UTF8.GetString($ByteArray[12 .. ($idx + 12 - 1)])
		$padding = if (($Ansi_Name.Length % 2) -eq 0) { 2 }
		else { 1 }
		
		if ($ByteArray[($idx + 12 + 1) .. ($idx + 12 + 1 + 8)][0] -ne [byte]0)
		{
			$padding = 0
			$idx = 12 + $Ansi_Name.Length + 1
		}
		else { $idx = 12 + $Ansi_Name.Length + $padding + 2 }
		
		
		if (!(($ByteArray[$idx .. ($idx + 15)] -join '') -match '40239190'))
		{
			
			$CLSID0 = if ($ByteArray.Count -ge 47 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[$idx .. ($idx + 15)] -join ''), '(0){16}')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[$idx .. ($idx + 15)]))" }
			else { $null }
			$CLSID = if ($ByteArray.Count -ge 63 -and ![System.Text.RegularExpressions.Regex]::IsMatch(($ByteArray[($idx + 16) .. ($idx + 31)] -join ''), '(0){16}')) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($idx + 16) .. ($idx + 31)]))" }
			else { $null }
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "GUID" -Value "$(Get-CLSID -CLSIDstring $CLSID0)"
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "CLSID" -Value "$(Get-CLSID -CLSIDstring $CLSID)"
			$idx = $idx + 32
		}
		elseif ($padding -eq 0) { $idx = $idx }
		else { $idx = $idx - 2 }
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDType" -Value $ItemIDType
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDSize" -Value $ItemIDSize
		if ($null -ne $Filesize)
		{
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Filesize" -Value $Filesize
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
		
		# Get the extension(s)
		$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_31_32
	
	function Get-Ext_35_36  # Folder / File with Unicode ANSI name
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		$w32Modified = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[9 .. 6]) -replace '-', '')
		if (!!$w32Modified) { $w32Modified = $w32Modified.ToString("dd/MM/yyyy HH:mm:ss.ff") }
		$Attributes = Get-Attributes -Bytes $ByteArray[10..11]
		$TargetString = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[12 .. ($ByteArray.Count - 1)])
		$idx = [System.Text.RegularExpressions.Regex]::Match($TargetString, "(\x00\x00)").index
		if($ByteArray[(12+$idx+2)] -eq 0){$idx=$idx+1}
		$Ansi_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[12 .. ($idx + 12-1)])
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDType" -Value $ItemIDType
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIDSize" -Value $ItemIDSize
		if ($null -ne $Filesize)
		{
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Filesize" -Value $Filesize
		}
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "w32Modified" -Value $w32Modified
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Ansi_Name" -Value $Ansi_Name
		
		$idx = 12 + $idx + 2
		
		# Get the extension(s)
		$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		
		return $ItemIdListProperties
	} # End Get-Ext_35_36
	
	function Get-Ext_61
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$Flags = [System.BitConverter]::ToString($ByteArray[1]) -replace '-', ''
		if ($Flags -eq '80') # Unicode string
		{
			$TargetString = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[6 .. ($ByteArray.Count - 1)])
			$end = 6 + [System.Text.RegularExpressions.Regex]::Match($TargetString, "(\x00\x00\x00\x00)").index
			if ($end % 2 -eq 1)
			{
				$idx = $end + 5
			}
			else
			{
				$idx = $end + 4
				$end = $end + 1
			}
			$uri = [System.Text.Encoding]::Unicode.GetString($ByteArray[6 .. $end])
		#	$idx = $end + 5
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ByteArray.Count
				'ItemIDType' = $ItemIDType
				'URI'	     = if ($uri) { $uri }else { $null }
			}
			
			# Get the extension(s)
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
		}
		elseif ($Flags -eq '03') #FTP
		{
			try { $Timestamp = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[12 .. 19], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
			catch { $Timestamp = $null }
			$Port = [System.BitConverter]::ToUInt16($ByteArray[36 .. 37], 0)
			$end = $ByteArray[44 .. ($ByteArray.Count - 1)].IndexOf([byte]'0')
			$urilength = [System.BitConverter]::ToUInt16($ByteArray[40 .. 41], 0)
			$Uri = [System.Text.Encoding]::UTF8.GetString($ByteArray[44 .. (44 + $end - 1)])
			$idx = 44 + $end + 1
			try
			{
				$userlength = [System.BitConverter]::ToUInt32($ByteArray[$idx .. ($idx + 3)], 0)
				$username = ([System.Text.Encoding]::GetEncoding(1252).GetString($ByteArray[($idx + 4) .. ($idx + 4 + $userlength - 1)]) -Split '\0')[0]
				# [System.Text.Encoding]::UTF8.GetString($ByteArray[($idx + 4) .. ($idx + 4 + $userlength - 1)])
				try
				{
					$idx = $idx + 4 + $userlength
					$passSize = [System.BitConverter]::ToUInt32($ByteArray[$idx .. ($idx + 3)], 0)
					$Password = ([System.Text.Encoding]::GetEncoding(1252).GetString($ByteArray[($idx + 4) .. ($idx + 4 + $passSize - 1)]) -Split '\0')[0]
					# [System.Text.Encoding]::UTF8.GetString($ByteArray[($idx + 4) .. ($idx + 4 + $passSize - 1)])
				}
				catch { $passSize = $Password = $null }
			}
			catch{ $userlength = $username = $null}
			
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ByteArray.Count
				'ItemIDType' = $ItemIDType
				'TimeStamp'  = $Timestamp
				'Port'	     = $Port
				'UriSize'    = $urilength
				'URI'	     = $Uri
				'UserSize'   = $userlength
				'Username'   = $username
				'PassSize'   = $passSize
				'Password'   = $Password
			}
		}
		else
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ByteArray.Count
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
			}
		}
		
		return $ItemIdListProperties
	} # End Get-Ext_61
	
	function Get-Ext_71 #Property Store
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIdListProperties = [PSCustomObject]::new()
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		
		$CLSID = if ($ItemIDSize -ge 28) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[12 .. 27]))" }
		else { $null }
		$ItemIdListProperties = [PSCustomObject]@{
			'ItemIDSize'  = $ItemIdListItem.ItemIDSize
			'ItemIDType'  = $ItemIDType
			'CLSID'	      = if ($CLSID) { Get-CLSID -CLSIDstring $CLSID }else { $null }
		}
		
		if ($ItemIDSize -ge 36)
		{
			$idx = 28
			# Get the extension(s)
			$ItemIdExtensions = Get-ItemIdExtensions -ByteArray $ByteArray -idx $idx
			
			$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "ItemIdExtensions" -Value @($ItemIdExtensions)
		}
		
		$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name "Data" -Value "$([System.BitConverter]::ToString($ByteArray) -replace '-', '')"
	
		
		return $ItemIdListProperties
	} # End Get-Ext_71
	
	function Get-Ext_SPS1 # Serialized Property Store 
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		# Property types:
		# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-oleps/2a4589eb-9a23-4a8b-adbd-3e368233c099
		# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-propstore/3453fb82-0e4f-4c2c-bc04-64b4bd2c51ec
		try
		{
			$pc = [PropertyStore.SerializedPropertyStore]::FromByteArray($ByteArray)
			$ItemIdExtensions = [System.Collections.ArrayList]::new()
			
			# https://learn.microsoft.com/en-us/windows/win32/stg/predefined-property-set-format-identifiers
			$FormatIdentifiers = [System.Collections.Hashtable]@{
				'F29F85E0-4FF9-1068-AB91-08002B27B3D9' = 'SummaryInformation'
				'D5CDD502-2E9C-101B-9397-08002B2CF9AE' = 'DocSummaryInformation'
				'D5CDD505-2E9C-101B-9397-08002B2CF9AE' = 'UserDefinedProperties'
			}
			
			if ($pc.PropertyStorage.Count -ge 1)
			{
				for ($t = 0; $t -lt $pc.PropertyStorage.Count; $t++)
				{
					$SPropertyStore = [System.Collections.ArrayList]::new()
				#	$sproperty = $pc.PropertyStorage[$t]
					$formatID = if (!!$FormatIdentifiers[$pc.PropertyStorage[$t].FormatID.Guid.ToUpper()]) { "$($FormatIdentifiers[$pc.PropertyStorage[$t].FormatID.Guid.ToUpper()]) [$($pc.PropertyStorage[$t].FormatID.Guid.ToUpper())]" }
								else { $pc.PropertyStorage[$t].FormatID.Guid.ToUpper() }
					
					if ($pc.PropertyStorage[$t].PropertyStorage.Count -ge 1)
					{
						for ($p = 0; $p -lt $pc.PropertyStorage[$t].PropertyStorage.Count; $p++)
						{
							$typed = $pc.PropertyStorage[$t].PropertyStorage[$p].TypedPropertyValue
							$tpbytes = $null
							if ($typed.Type.ToString().Contains('VT_BSTR') -and $null -ne $typed.Value )
							{
								try
								{
									$vl = [Bitconverter]::ToUInt32($typed.Value[0 .. 3], 0)
									if (($vl + 4) -le $typed.Value.length)
									{
										$tpvalue = [System.Text.Encoding]::Unicode.GetString($typed.Value[4 .. (4 + $vl - 1)])
										$tpraw = $null
									}
									else
									{
										$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										$tpraw = $null
									}
								}
								catch
								{
									$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
									$tpraw = $null
								}
							}
							elseif (($typed.Type.ToString().Contains('VT_VERSIONED_STREAM') -or $typed.Type.ToString().Contains('VT_LPWSTR, VT_VECTOR')) -and $null -ne $typed.Value)
							{
								if ($typed.Value.length -gt 8)
								{
									try
									{
										$tpvalue = ([System.Text.Encoding]::Unicode.GetString($typed.Value[8 .. ($typed.Value.length - 1)]) -Split '\0')[0]
										$tpraw = $null
									}
									catch
									{
										$tpvalue = $null
										$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
									}
								}
								else
								{
									$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
									$tpraw = $null
								}
							}
							elseif ($typed.Value.GetType().FullName -eq 'System.DateTime' -and $null -ne $typed.Value)
							{
								try
								{
									$utc = $typed.Value.ToFileTimeUtc()
									$tpvalue = [datetime]::FromFileTimeUtc($utc).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
								}
								catch
								{
									$tpvalue = $typed.Value
									$tpraw = $null
								}
							}
							elseif ($typed.Value.GetType().FullName -eq 'System.Byte[]')
							{
								$tpvalue = $null
								$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
								# Get Delegate ID List [28636AA6-953D-11D2-B5D6-00C04FD918D0\32] bytes
								if ($pc.PropertyStorage[$t].PropertyStorage[$p].ID -eq 32 -and $pc.PropertyStorage[$t].FormatID.Guid.ToUpper() -eq '28636AA6-953D-11D2-B5D6-00C04FD918D0')
								{
									$tpbytes = $typed.Value
								}
								elseif ($pc.PropertyStorage[$t].PropertyStorage[$p].Name -eq 'ViewItemsFolder') # AutoList ??
								{
									$tpbytes = $typed.Value
								}
								elseif($pc.PropertyStorage[$t].PropertyStorage[$p].Name -eq 'AutolistCacheKey') # Unicode string
								{
									if ($typed.Value.length -gt 8)
									{
										try
										{
											$tpvalue = [System.Text.Encoding]::Unicode.GetString($typed.Value[8 .. ($typed.Value.length - 1)])
											$tpraw = $null
										}
										catch
										{
											$tpvalue = $null
											$tpraw = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										}
									}
									else
									{
										$tpvalue = [System.BitConverter]::ToString($typed.Value) -replace '-', ''
										$tpraw = $null
									}
								}
							}
							elseif ($typed.Value.GetType().FullName.Contains('System.UInt'))
							{
								$tpvalue = $typed.Value
								$tpraw = $null
							}
							elseif ($typed.Value.GetType().FullName -eq 'System.Guid' -and $null -ne $typed.Value)
							{
								try
								{
									$tpvalue = $typed.Value.Guid.ToUpper()
									$tpraw = $null
								}
								catch
								{
									$tpvalue = $typed.Value
									$tpraw = $null
								}
							}
							else
							{
								$tpvalue = $typed.Value
								$tpraw = $null
							}
							
							# Get any other Format Identifier Descriptions
							$fmid = "$($pc.PropertyStorage[$t].FormatID.Guid.ToUpper())\$($pc.PropertyStorage[$t].PropertyStorage[$p].ID)"
							$Description = if(!!$formatIDHashTable[$fmid]){ "$($formatIDHashTable[$fmid]) [$($fmid)]"}else{$null}
							
							$TProperty = [PSCustomObject]@{
								'Type'  = "$($typed.Type) [0x$($typed.Type.value__.ToString('X4'))]"
								'Value' = $tpvalue
								'TBytes'= $tpbytes
								'Raw'   = $tpraw
							}
							
							$PropertyStoreValues = [PSCustomObject]@{
								'ValueSize' = $pc.PropertyStorage[$t].PropertyStorage[$p].ValueSize
								'NameSize'  = $pc.PropertyStorage[$t].PropertyStorage[$p].NameSize
								'Name'	    = $pc.PropertyStorage[$t].PropertyStorage[$p].Name
								'ID'	    = $pc.PropertyStorage[$t].PropertyStorage[$p].ID
								'Description' = $Description
								'TypedProp' = $TProperty
							}
							
							$null = $SPropertyStore.Add($PropertyStoreValues)
						} # End for
					} # end if
									
					$ItemIdExtension = [PSCustomObject]@{
						'Storage Size'  = $pc.PropertyStorage[$t].StorageSize
						'FormatID'	    = $formatID
						'PropertyStore' = $SPropertyStore
					}
					
					$null = $ItemIdExtensions.Add($ItemIdExtension)
				} # end for
				
			} #end if PC >= 1
		}
		catch{ $ItemIdExtensions = $null}
		
		return $ItemIdExtensions
		
	} # Get-Ext_SPS1
	
	function Get-Compressed_w32 # Compressed 
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[System.Byte[]]$ByteArray
		)
		
		$ItemIDType = [System.BitConverter]::ToString($ByteArray[0])
		$ItemIDSize = $ByteArray.Count
		$type = [System.BitConverter]::ToUInt16($ByteArray[18 .. 19], 0)
		$Attributes = Get-Attributes -Bytes $ByteArray[18..21]
		$Timestamp = [System.Text.Encoding]::Unicode.GetString($ByteArray[22 .. 53])
		$ZipIndex = [System.BitConverter]::ToUInt16($ByteArray[54 .. 55], 0)
		$ParentLength = [System.BitConverter]::ToUInt16($ByteArray[56 .. 57], 0)
		$NameLength = [System.BitConverter]::ToUInt16($ByteArray[58 .. 59], 0)
		$Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[66 .. (66 + $NameLength * 2 - 1)])
		$pidx = 66 + $NameLength * 2 + 2
		$Parent = if ($ParentLength -gt 0)
		{
			[System.Text.Encoding]::Unicode.GetString($ByteArray[$pidx .. ($pidx + $ParentLength * 2 - 1)])
		}
		else { $null }
		
		$ItemIdListProperties = [PSCustomObject]@{
			'ItemIDSize'   = $ItemIDSize
			'ItemIDType'   = $ItemIDType
			'Type'		   = $type
			'Attributes'   = $Attributes
			'Timestamp'    = $Timestamp
			'ZipIndex'	   = $ZipIndex
			'ParentLength' = $ParentLength
			'NameLength'   = $NameLength
			'Name'		   = $Name
			'Parent'	   = $Parent
			'Data'		   = [System.BitConverter]::ToString($ByteArray) -replace '-', ''
		}
		Return $ItemIdListProperties
		
	} # End Get-Compressed_w32
	
	Function Get-ItemIdExtensions
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[System.Byte[]]$ByteArray,
			[Parameter(Mandatory = $true)]
			$idx
		)
		
		# Get the extension(s)
		$ItemIdExtensions = [System.Collections.ArrayList]::new()
		
		While ($ByteArray.Count -gt $idx)
		{
			if($idx -ge $ByteArray.Count){break}
			$extStart = $idx
			$extLength = [System.BitConverter]::ToUInt16($ByteArray[($extStart) .. ($extStart + 1)], 0)
			$extversion = [System.BitConverter]::ToUInt16($ByteArray[($extStart + 2) .. ($extStart + 3)], 0)
			$itemIdExtType = [System.BitConverter]::ToString($ByteArray[($extStart + 7) .. ($extStart + 4)]) -replace '-', ''
			
			$ItemIdExtension = [PSCustomObject]::new()
			$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extLength" -Value $extLength
			$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extversion" -Value $extversion
			$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "itemIdExtType" -Value $itemIdExtType
			
			if ($itemIdExtType -eq 'BEEF0001')
			{
				try
				{
					$Selection = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Selection" -Value $Selection
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$null
				}
			} # End BEEF0001
			elseif ($itemIdExtType -eq 'BEEF0003')
			{
				try
				{
					$CLSID0 = Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart + 8) .. ($extStart + 23)]))"
					$GUID = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }
					else { $CLSID0 }
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0003
			elseif ($itemIdExtType -eq 'BEEF0004') #File/Folder
			{
				try
				{
					$idx = $extStart + 8
					$w32Created = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[($idx + 3) .. ($idx)]) -replace '-', '')
					if (!!$w32Created) { $w32Created = $w32Created.ToString("dd/MM/yyyy HH:mm:ss.ff") }
					$w32AccessedDate = DosDateTime-FromHex -Hex ([System.BitConverter]::ToString($ByteArray[($idx + 7) .. ($idx + 4)]) -replace '-', '')
					if (!!$w32AccessedDate) { $w32Accessed = $w32AccessedDate.ToString("dd/MM/yyyy HH:mm:ss.ff") }
					$os = [System.BitConverter]::ToUInt16($ByteArray[($idx + 8) .. ($idx + 9)], 0)
					$OSHost = if ($Host_OS[[String]$os]) { $Host_OS[[String]$os] }
					else { "Unknown OS [$($os)]" }
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "w32Created" -Value $w32Created
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "w32Accessed" -Value $w32Accessed
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Host" -Value $OSHost
					
					if ($extversion -ge 9)
					{
						$MFTrecordNr = [System.BitConverter]::ToUInt64(($ByteArray[($idx + 12) .. ($idx + 17)] + $ByteArray[($idx + 10) .. $($idx + 11)]), 0)
						$MFTrecordSeqNr = [System.BitConverter]::ToUInt16($ByteArray[($idx + 18) .. ($idx + 19)], 0)
						$idx = $idx + 20 + 14 # skip null bytes
						$unknownyet = "0x$([System.BitConverter]::ToString($ByteArray[($idx) .. ($idx + 3)]) -replace '-', '')"
						<#$Unicode_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx + 4) .. ($idx + 4 + ($extstart + $extlength - ($idx + 4) - 1))])#>
						$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extstart + 46) .. ($extstart + $extlength - 3)])
						$Unicode_Name = ($TargetString -split '\0')[0]
						$Localized_Name = ($TargetString -split '\0')[1]
					}
					elseif ($extversion -eq 7)
					{
						$MFTrecordNr = [System.BitConverter]::ToUInt64(($ByteArray[($idx + 12) .. ($idx + 17)] + $ByteArray[($idx + 10) .. $($idx + 11)]), 0)
						$MFTrecordSeqNr = [System.BitConverter]::ToUInt16($ByteArray[($idx + 18) .. ($idx + 19)], 0)
						$idx = $idx + 20 + 10 # skip null bytes
						<#$Unicode_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + ($extstart + $extlength - ($idx) - 1))])#>
						$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($extstart + $extlength - 3)])
						$Unicode_Name = ($TargetString -split '\0')[0]
						$Localized_Name = ($TargetString -split '\0')[1]
					}
					elseif ($extversion -eq 8)
					{
						$TargetString = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extstart + 42) .. ($extstart + $extlength - 3)])
						$Unicode_Name = ($TargetString -split '\0')[0]
						$Localized_Name = ($TargetString -split '\0')[1]
						<#$ends = [System.Text.RegularExpressions.Regex]::Match($TargetString, "(\x00\x00)")
						$idx = $extstart + $extlength - 5 - [System.Text.RegularExpressions.Regex]::Match($TargetString, "(\x00\x00)").index + 1
						$Unicode_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + ($extstart + $extlength - $idx - 1))])#>
						
						if ($extlength - $extStart - 14 - $unicodename.length -ge 8 -and ($extStart + 26) -lt $idx)
						{
							$MFTrecordNr = [System.BitConverter]::ToUInt64(($ByteArray[($extStart+8 + 12) .. ($extStart+8 + 17)] + $ByteArray[($extStart+8 + 10) .. $($extStart+8 + 11)]), 0)
							$MFTrecordSeqNr = [System.BitConverter]::ToUInt16($ByteArray[($extStart+8 + 18) .. ($extStart+8 + 19)], 0)
						}
					}
					elseif ($extversion -eq 3)
					{
						$idx = $idx + 12 # skip null bytes
						#	$Unicode_Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + ($extstart + $extlength - ($idx) - 1))])
						$Unicode_Name = ([System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + ($extstart + $extlength - 1))]) -Split '\0')[0]
						$idx = $idx + ($Unicode_Name.Length * 2) + 2
						if(($extStart+$extLength-3) -gt $idx)
							{
								$TargetString = [System.Text.Encoding]::UTF8.GetString($ByteArray[($idx) .. ($extstart + $extlength - 3)])
								$Localized_Name = ($TargetString -split '\0')[0]
							}
						}
						
						$FileSystem = if ($MFTrecordNr -gt 0 -and $MFTrecordSeqNr -gt 0) { 'NTFS' }
								elseif ($MFTrecordNr -gt 0 -and ($MFTrecordSeqNr -eq 0 -or $MFTrecordSeqNr -eq $null))
								{
									if (!!$w32AccessedDate)
									{
										if ($w32AccessedDate.Minute -eq 0 -and $w32AccessedDate.Second -eq 0 -and $w32AccessedDate.Millisecond -eq 0) { 'FAT' }
										else { 'exFAT' }
									}
								}
								else{$null}
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "FileSystem" -Value $FileSystem
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "MFTrecordNr" -Value $MFTrecordNr
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "MFTrecordSeqNr" -Value $MFTrecordSeqNr
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unknown" -Value $unknownyet
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Unicode_Name" -Value $Unicode_Name
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Localized_Name" -Value $Localized_Name
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0004
			elseif ($itemIdExtType -eq 'BEEF0005') # Embedded IDlist
			{
				try
				{
					$EmbeddedIdList = @(Get-EmbeddedIDList -ByteArray $ByteArray[($extStart+20)..($extStart + $extLength - 1)])
					
					# Add the embedded items
					if ($EmbeddedIdList.Count -ge 1)
					{
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "EmbeddedIdList" -Value $EmbeddedIdList
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
						
					} # end embedded items 
					else
					{
						$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					}
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				
			} # End BEEF0005
			elseif ($itemIdExtType -eq 'BEEF0006')
			{
				try
				{
					$UserName = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 8) .. ($extStart + $extLength - 3)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "UserName" -Value $UserName
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0006
			elseif ($itemIdExtType -eq 'BEEF0010')
			{
				try
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
					$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 16) .. ($extStart + $extLength - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0010
			elseif ($itemIdExtType -eq 'BEEF0014') # Uri_PROPERTY
			{
				try
				{
					$CLSID = if ($extLength -ge 23) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart + 8) .. ($extStart + 8 + 15)]))" }else { $null }
					$GUID = if (!!$CLSID) { Get-CLSID -CLSIDstring $CLSID }	else { $CLSID }
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
					if ($extLength -ge 55)
					{
						$datalength = [System.BitConverter]::ToUInt32($ByteArray[($extStart + 24) .. ($extStart + 27)], 0)
						$NrOfEntries = [System.BitConverter]::ToUInt32($ByteArray[($extStart + 52) .. ($extStart + 55)], 0)
	
						if ((24 + $datalength) -gt $extLength -or $NrOfEntries -eq 0) { return }
						
						$UriEntries = [PSCustomObject]@{ }
						$ix = $extStart + 56
						$n = 0
						while ($n -lt $NrOfEntries )
						{
							$EntryType = [System.BitConverter]::ToUInt32($ByteArray[$ix .. ($ix + 3)], 0)
							$Type = if (!!$UriEntryTypes[[System.String]$EntryType]) { "$($UriEntryTypes[[System.String]$EntryType]) [$($EntryType)]" }	else { $EntryType }
							
							$EntryLength = [System.BitConverter]::ToUInt32($ByteArray[($ix + 4) .. ($ix + 7)], 0)
							
							if (($EntryLength -eq 0) -or (($ix + $EntryLength) -gt ($extStart + $extLength))) { break }
							
							$ix = $ix + 8
							$Entry = if ($EntryType -eq 16 -and $EntryLength -eq 4)
										{
											[System.BitConverter]::ToUInt32($ByteArray[($ix) .. ($ix + 3)], 0)
										}
										else
										{
								[System.Text.Encoding]::Unicode.GetString($ByteArray[($ix) .. ($ix + $EntryLength - 3)])
							}
							$UriEntries | Add-Member -MemberType NoteProperty -Name $Type -Value $Entry
							
							# Get the next entry
							$ix = $ix + $EntryLength
							if ($ix -gt ($extStart+$extLength)) { break }
							$n++
						} # End While 
						
						$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "UriEntries" -Value $UriEntries
					}
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0014
			elseif ($itemIdExtType -eq 'BEEF000A')
			{
				try
				{
					$EntryNr = [System.BitConverter]::ToInt32($ByteArray[($extStart + 8) .. ($extStart + 11)], 0)
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "EntryNr" -Value $EntryNr
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF000A
			elseif ($itemIdExtType -eq 'BEEF000B')
			{
				try
				{
					# Target Path		
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($extStart + 16) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					
					if ((($extStart + 16) .. ($extStart + 16 + $UnicodeEnd)).count % 2 -eq 0)
					{
						$TargetPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 16) .. ($extStart + 16 + $UnicodeEnd)])
						$idx = $extStart + 16 + $UnicodeEnd + 2 + 1
					}
					else
					{
						$TargetPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 16) .. ($extStart + 16 + $UnicodeEnd - 1)])
						$idx = $extStart + 16 + $UnicodeEnd + 2
					}
					$idx = $idx + 4
					
					# Component
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($idx) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					if ((($idx) .. ($idx + $UnicodeEnd)).count % 2 -eq 0)
					{
						$Component = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd)])
						$idx = $idx + $UnicodeEnd + 2 + 1
					}
					else
					{
						$Component = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd - 1)])
						$idx = $idx + $UnicodeEnd + 2
					}
					
					
					# Component Parameters
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($idx) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					if ((($idx) .. ($idx + $UnicodeEnd)).count % 2 -eq 0)
					{
						$ComponentParameters = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd)])
						$idx = $idx + $UnicodeEnd + 2 + 1
					}
					else
					{
						$ComponentParameters = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd - 1)])
						$idx = $idx + $UnicodeEnd + 2
					}
					
					try { $TargetCreated = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($idx) .. ($idx + 7)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $TargetCreated = $null }
					try { $ShortCutCreated = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($idx + 8) .. ($idx + 15)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $ShortCutCreated = $null }
					
					$idx = $idx + 16 + (16 - (($idx + 16) % 16))
					
					# Extra Path
					$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($ByteArray[($idx) .. ($extStart + $extLength - 1)])
					$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
					if ((($idx) .. ($idx + $UnicodeEnd)).count % 2 -eq 0)
					{
						$ExtraPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd)])
						$idx = $idx + $UnicodeEnd + 2 + 1
					}
					else
					{
						$ExtraPath = [System.Text.Encoding]::Unicode.GetString($ByteArray[($idx) .. ($idx + $UnicodeEnd - 1)])
						$idx = $idx + $UnicodeEnd + 2
					}
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "TargetPath" -Value $TargetPath
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Component" -Value $Component
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ComponentParameters" -Value $ComponentParameters
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "TargetCreated" -Value $TargetCreated
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ShortCutCreated" -Value $ShortCutCreated
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "ExtraPath" -Value $ExtraPath
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF000B
			elseif ($itemIdExtType -eq 'BEEF001A') # Document Type
			{
				try
				{
					$DocType = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$DocumentType = if ($DocType.StartsWith('AppX')) { Get-XAppName -XAppName $DocType }
					else { $DocType }
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "DocumentType" -Value $DocumentType
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF001A
			elseif ($itemIdExtType -eq 'BEEF001B') # Application
			{
				try
				{
					$Application = [System.Text.Encoding]::Unicode.GetString($ByteArray[($extStart + 10) .. ($extStart + $extLength - 5)])
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Application" -Value $Application
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF001B
			elseif ($itemIdExtType -eq 'BEEF0019')
			{
				try
				{
					$CLSID = if ($extLength -ge 23) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart+8) .. ($extStart+8 + 15)]))" }
					else { $null }
					$CLSID0 = if ($extLength -ge 39) { Get-GUIDfromHexString -Hex "$([System.BitConverter]::ToString($ByteArray[($extStart+8 + 16) .. ($extStart+8 + 31)]))" }
					else { $null }
					
					$GUID = if (!!$CLSID0) { Get-CLSID -CLSIDstring $CLSID0 }
					else { $CLSID0 }
					$FolderDesc = if (!!$CLSID) { Get-FolderDescription -CLSIDstring $CLSID }
					else { $CLSID }
					
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "GUID" -Value $GUID
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "CLSID" -Value $FolderDesc
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} # End Try
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} #end catch
			} # end BEEF0019
			elseif ($itemIdExtType -eq 'BEEF0024') # Serialized Property Store
			{
				try
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
					$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 8) .. ($extStart + $extLength - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0024
			elseif ($itemIdExtType -eq 'BEEF0025')
			{
				try
				{
					$idx = $extStart + 8
					$Attributes = Get-Attributes -Bytes $ByteArray[($idx) .. ($idx + 3)]
					try { $Created = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($idx + 4) .. ($idx + 11)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $Created = $null }
					try { $Accessed = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($idx + 12) .. ($idx + 19)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $Accessed = $null }
					
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Created" -Value $Created
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Accessed" -Value $Accessed
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0025
			elseif ($itemIdExtType -eq 'BEEF0026')
			{
				try
				{
					$Attributes = Get-Attributes -Bytes $ByteArray[($extStart+8) .. ($extStart+8 + 3)]
					try { $Created = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($extStart+8 + 4) .. ($extStart+8 + 11)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $Created = $null }
					try { $Modified = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($extStart+8 + 12) .. ($extStart+8 + 19)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $Modified = $null }
					try { $Accessed = [datetime]::FromFileTimeUtc([System.BitConverter]::ToUInt64($ByteArray[($extStart+8 + 20) .. ($extStart+8 + 27)], 0)).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
					catch { $Accessed = $null }
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Created" -Value $Created
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Modified" -Value $Modified
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Accessed" -Value $Accessed
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
				} # end try
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} #end catch
			} # End BEEF0026
			elseif ($itemIdExtType -eq 'BEEF0027') # Serialized Property Store
			{
				try
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
					
					$ExtraData = [System.Byte[]](1, 0, 0, 0) + $ByteArray[($extStart + 8) .. ($extStart + $extLength - 1)]
					$PropertyStoreEntries = [System.Collections.ArrayList]::new()
					$Items = Get-Ext_SPS1 -ByteArray $ExtraData
					foreach ($property in $items)
					{
						$PropertyStoreEntry = [PSCustomObject]::new()
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
						$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
						$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
					}
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0027
			elseif ($itemIdExtType -eq 'BEEF0029')
			{
				try
				{
					$Attributes = Get-Attributes -Bytes $ByteArray[($extStart + 8) .. ($extStart + 8 + 1)]
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "Attributes" -Value $Attributes
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
			} # End BEEF0029
			elseif ($itemIdExtType -eq 'BEEF0000') # Removed extension
			{
				try
				{
					$ItemIdExtension.itemIdExtType = "Removed Extension Block [$($itemIdExtType)]"
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} # end try
				catch
				{
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				} # end catch
			} # End BEEF0000
			else
			{
				if($itemIdExtType.StartsWith('BEEF'))
				{
					$NewExtension = $true
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "NewExtension" -Value $NewExtension
					$extData = [System.BitConverter]::ToString($ByteArray[($extStart) .. ($extStart + $extLength - 1)]) -replace '-', ''
					$ItemIdExtension | Add-Member -MemberType NoteProperty -Name "extData" -Value $extData
				}
				else
				{
					break
				}
				
			} # End Else
			
			if (!!$ItemIdExtension)
			{
				$null = $ItemIdExtensions.Add($ItemIdExtension)
			}
			if (($ByteArray.Count - ($extstart + $extLength)) -lt 4) { break }
			$idx = $extStart + $extLength
			
		} # End While
		
		return $ItemIdExtensions
	}
	
	function Get-LinkTargetIdList
	{
		param
		(
			[Parameter(Mandatory = $true)]
			[AllowEmptyString()]
			[AllowNull()]
			[ShellLink.Structures.ItemID]$ItemIdListItem
		)
		
		$ItemIDType = if ($ItemIdListItem.Data) { [System.BitConverter]::ToString($ItemIdListItem.Data[0]) }else { $null }
		
		try
		{
			if ($ItemIDType -eq '01') # Control Panel Category
			{
				$Signature = if ($ItemIdListItem.Data.length -ge 5) { [System.BitConverter]::ToString($ItemIdListItem.Data[2 .. 5]) -replace '-', '' }
				else { $null }
				$CP = [System.BitConverter]::ToString($ItemIdListItem.Data[6])
				$CPcategory = if (!!$CPitems[[System.String]$CP]) { "$($CPitems[[System.String]$CP]) [$0x$($CP)]" }
				else { "$0x$($CP)" }
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIdListItem.ItemIDSize
					'ItemIDType' = $ItemIDType
					'Signature'  = if ($Signature) { "0x$($Signature)" }else { $null }
					'CPcategory' = $CPcategory
					'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
				}
			}
			elseif ($ItemIDType -eq '1F') # Root Shell item
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_1F -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType.Startswith('2')) # -in ('2E', '2F')) # Volume shell item
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_2E_2F -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value @($property.Value)
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq 'B1')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{}
					$Items = Get-Ext_B1 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value @($property.Value)
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -in ('31', '32')) # Folder / File
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{}
					$Items = Get-Ext_31_32 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value @($property.Value)
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -in ('35', '36')) # Folder / File with Unicode ANSI name
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{}
					$Items = Get-Ext_35_36 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value @($property.Value)
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '61') # CLSID_Internet - URI shell item
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_61 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value @($property.Value)
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '71') # GUID
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_71 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value @($property.Value)
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq '74') # Network location shell item - Compound
			{
				$Signature = [System.BitConverter]::ToString($ItemIdListItem.Data[4 .. 7]) -replace '-', ''
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize'  = $ItemIdListItem.ItemIDSize
					'ItemIDType'  = $ItemIDType
					'DisplayName' = $ItemIdListItem.DisplayName
					'Signature'   = "0x$($Signature)"
					'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
				}
				
				if ($Signature -eq '43465346') # CFSF
				{
					$embsize = [System.BitConverter]::ToUInt16($ItemIdListItem.Data[8 .. 9], 0)
					$embtype = [System.BitConverter]::ToString($ItemIdListItem.Data[10])
					
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Embedded Type' -Value $embtype
					$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Embedded Size' -Value $embsize
					
					if ($embtype -in ('31', '32')) # file/folder
					{
						try
						{
							$Items = Get-Ext_31_32 -ByteArray $ItemIdListItem.Data[10..($ItemIdListItem.ItemIDSize - 7)]
							foreach ($property in $items.psobject.Properties)
							{
								if ($property.Name -in ('Data', 'ItemIDSize', 'ItemIDType')) { continue }
								$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
							}
						}
						catch
						{ $null }
					}
					elseif ($embtype -in ('35', '36')) # file/folder
					{
						try
						{
							$Items = Get-Ext_35_36 -ByteArray $ItemIdListItem.Data[10..($ItemIdListItem.ItemIDSize - 7)]
							foreach ($property in $items.psobject.Properties)
							{
								if ($property.Name -in ('Data', 'ItemIDSize', 'ItemIDType')) { continue }
								$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
							}
						}
						catch
						{ $null }
					}
				}
				else { $null }
			}
			elseif ($ItemIDType -in ('0F', '09', '16', '52') -and $ItemIdListItem.Data[8 .. 9].Contains([byte]16))
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Compressed_w32 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -in ('00', '10', '0E', '08') -and $ItemIdListItem.Data[8 .. 9].Contains([byte]144))
			{
				try
				{
					$ByteArray = $ItemIdListItem.Data
					# Find first not null byte index after byte 8
					$bdata = $ByteArray[9 .. ($ByteArray.Count - 1)]
					$idx = $bdata.IndexOf(($bdata -ne [byte]0)[0])
					$end = $ByteArray[(9 + $idx) .. ($ByteArray.Count - 1)].IndexOf([byte]'0')
					$foldernameAnsi = [System.Text.Encoding]::UTF8.GetString($ByteArray[(9 + $idx) .. (9 + $idx + $end - 1)])
					
					$unidx = 9 + $idx + $end
					$bdata = $ByteArray[$unidx .. ($ByteArray.Count - 1)]
					$idx = $bdata.IndexOf(($bdata -ne [byte]0)[0])
					$foldernameunicode = ([System.Text.Encoding]::Unicode.GetString($ByteArray[($unidx+$idx) .. ($ByteArray.Count - 1)]) -Split '\0')[0]
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Subfolder Ansi'    = $foldernameAnsi
						'Subfolder Unicode' = $foldernameunicode
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
					
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif (($ItemIDType -eq '47' -and $ItemIdListItem.Data[2] -eq [byte]02 ) -or
					($ItemIDType -in ('47', '46', '41', '42') -and $ItemIdListItem.Data[2] -eq [byte]130) -or
					($ItemIDType -eq '42' -and $ItemIdListItem.Data[2] -eq [byte]194) )
			{
				try
				{
					$ByteArray = $ItemIdListItem.Data
					
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
					
					$Items = ([System.Text.Encoding]::GetEncoding(1252).GetString($ByteArray[3 .. ($ByteArray.Count - 1)]) -Split '\0')
					
					if ($items.count -ge 1)
					{
						$Path = $items[0]
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Path' -Value $Path
					}
					if ($items.count -ge 2)
					{
						$Network = $items[1]
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'NetworkType' -Value $Network
					}
					if ($items.count -ge 3 -and $items[2] -ne [System.Text.Encoding]::UTF8.GetString([byte[]](2, 0)))
					{
						$Device = $items[2]
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name 'Device' -Value $Device
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			elseif ($ItemIDType -eq 'C3')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_C3 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize' = $ItemIdListItem.ItemIDSize
						'ItemIDType' = $ItemIDType
						'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
		<#	elseif ($ItemIDType -eq '4C' -and $ItemIdListItem.Data[1] -eq [byte]80)
			{
				$ByteArray = $ItemIdListItem.Data
				$Namelength = [System.BitConverter]::ToUInt16($ByteArray[26 .. 27], 0)*2
				$Name = [System.Text.Encoding]::Unicode.GetString($ByteArray[26..(24+ $Namelength-1)])
				
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIdListItem.ItemIDSize
					'ItemIDType' = $ItemIDType
					'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					'Name'       = $Name
				}
			}#>
			elseif ($ItemIDType -eq '00')
			{
				try
				{
					$ItemIdListProperties = [PSCustomObject]@{ }
					$Items = Get-Ext_00 -ByteArray $ItemIdListItem.Data
					foreach ($property in $items.psobject.Properties)
					{
						$ItemIdListProperties | Add-Member -MemberType NoteProperty -Name $property.Name -Value $Property.Value
					}
				}
				catch
				{
					$ItemIdListProperties = [PSCustomObject]@{
						'ItemIDSize'  = $ItemIdListItem.ItemIDSize
						'ItemIDType'  = $ItemIDType
						'DisplayName' = $ItemIdListItem.DisplayName
						'Data'	      = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
					}
				}
			}
			else
			{
				$ItemIdListProperties = [PSCustomObject]@{
					'ItemIDSize' = $ItemIdListItem.ItemIDSize
					'ItemIDType' = $ItemIDType
					'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
				}
			}
		}
		catch
		{
			$ItemIdListProperties = [PSCustomObject]@{
				'ItemIDSize' = $ItemIdListItem.ItemIDSize
				'ItemIDType' = $ItemIDType
				'Data'	     = [System.BitConverter]::ToString($ItemIdListItem.Data) -replace '-', ''
			}
		}
		
		return $ItemIdListProperties
	}
	
	function Get-ShellLinkfrombyteArray
	{
		[OutputType([string])]
		param
		(
			[Parameter(Mandatory = $true)]
			[Byte[]]$ByteArray
		)
		# Check the Header Size
		if ($ByteArray[0] -ne '76')
		{
			[System.Console]::Beep(500,150)
			Show-ErrorMessage -ErrorMessage "The LNK Header Size is not 76"
			$ShortcutInfo = $null
			return
		}
		
	try{
		
		#=============================================#
		# Load PropertyStore .Net lib into memory     #
		# --------------------------------------------#
		# Author => @securifybv/@yorickkoster         #
		# https://github.com/securifybv/PropertyStore #
		# --------------------------------------------#
		# .Net Framework Compat: 4.0+                 #
		#=============================================#
		try { !![Reflection.Assembly]::GetAssembly([PropertyStore.SerializedPropertyStore]) | Out-Null }
		catch
		{
			$EncodedCompressedFile = @'
		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
'@
			$DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile), [IO.Compression.CompressionMode]::Decompress)
			$UncompressedFileBytes = New-Object Byte[](13312)
			$null = $DeflatedStream.Read($UncompressedFileBytes, 0, 13312)
			$null = [Reflection.Assembly]::Load($UncompressedFileBytes)
		}
		
		#=========================================#
		# Load ShellLink .Net lib into memory     #
		# ----------------------------------------#
		# Author => @securifybv/@yorickkoster     #
		# https://github.com/securifybv/ShellLink #
		# ----------------------------------------#
		# .Net Framework Compat: 4.0+             #
		#=========================================#
		try { !![Reflection.Assembly]::GetAssembly([ShellLink.Shortcut]) | Out-Null }
		catch
		{
			$EncodedCompressedFile = @'
		
'@
			$DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile), [IO.Compression.CompressionMode]::Decompress)
			$UncompressedFileBytes = New-Object Byte[](80384)
			$null = $DeflatedStream.Read($UncompressedFileBytes, 0, 80384)
			$null = [Reflection.Assembly]::Load($UncompressedFileBytes)
		}
		try { $ShortcutInfo = [ShellLink.Shortcut]::FromByteArray($ByteArray) }
		catch [System.Management.Automation.MethodInvocationException]{
				Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message
				$Error.Clear()
				$ShortcutInfo = $null
				return
			}
		catch {
				[System.Console]::Beep(500, 150)
				Show-ErrorMessage -ErrorMessage "Invalid LNK"
				$ShortcutInfo = $null
				return
			}
			
		# LNK Header Size must be 76 ############		
		if ($ShortcutInfo.HeaderSize -ne 76)
		{
				[System.Console]::Beep(500, 150)
				Show-ErrorMessage -ErrorMessage "The LNK Header Size is not 76"
				$ShortcutInfo = $null
				return 
		}
		# Get Shell Folders
		# $ShellFolders = Get-KnownFolders
			
		# https://github.com/libyal/libfwsi/blob/main/documentation/Windows%20Shell%20Item%20format.asciidoc#31-class-type-indicator	
			
		$SortOrderIndex = [Ordered]@{
		#	'00' = 'Internet Explorer'
			'40' = 'Home (MSGraphHomeFolder)'
			'42' = 'Libraries/Box/Dropbox'
			'44' = 'Other Users Folder'
			'4C' = 'Public Folder'
			'48' = 'Documents'
			'50' = 'This PC'
			'52' = 'Unknown'
			'54' = 'Users Libraries'
			'58' = 'Computers and Devices/Device Center'
			'60' = 'Recycle Bin'
			'68' = 'The Internet'
			'70' = 'Unknown'
			'77' = 'Linux'
			'78' = 'Recycle Bin'
			'80' = 'All Tasks/My Games'
		}
			
		# Get Shotcut Flags
		$LinkFlags = $ShortcutInfo.LinkFlags.ToString()
		
		# Header - Timestamps are stored in UTC
		$fileattributes = if ($ShortcutInfo.FileAttributes -ne 0) { $ShortcutInfo.FileAttributes.ToString().split(',').foreach{ $_.replace('FILE_ATTRIBUTE_', '') } }	else { $null }
		$creation = if ($ShortcutInfo.creationTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.creationTime).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }	else { $null }
		$access = if ($ShortcutInfo.AccessTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.AccessTime).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }	else { $null }
		$write = if ($ShortcutInfo.WriteTime -ne 0) { [DateTime]::FromFileTimeUtc($ShortcutInfo.WriteTime).ToString("dd/MM/yyyy HH:mm:ss.fffffff") }	else { $null }
		$HotKey = if ($ShortcutInfo.HotKey.Highbyte -eq 0 -and $ShortcutInfo.HotKey.Lowbyte -eq 0) { "----" }	else{ "$($ShortcutInfo.HotKey.Highbyte) + $($ShortcutInfo.HotKey.Lowbyte)"	}
		$LnkSize = ($ShortcutInfo.ShellLinkHeader.HeaderSize +
			 		 $ShortcutInfo.LinkInfo.LinkInfoSize +
					 $ShortcutInfo.LinkTargetIDList.IDListSize +
					 $ShortcutInfo.StringData.StringDataSize +
					 $ShortcutInfo.ExtraData.ExtraDataSize)
		$LS = if ($ByteArray.Count -gt $ShortcutInfo.Size) { $ByteArray[($ShortcutInfo.Size - 1) .. $ByteArray.Count] } else { $null }
		$LinkSlackLength =	if (!!$LS) { $ls.length } else{$null}
		$LinkSlack = if (!!$LS) { [System.BitConverter]::ToString($LS) -replace '-', '' } else{''}
			
		$LinkInfoData = if (!!$ShortcutInfo.LinkInfo) { $ShortcutInfo.LinkInfo.GetBytes() }
		else { $null }
		$LinkTargetIDListData = if (!!$ShortcutInfo.LinkTargetIDList) { $ShortcutInfo.LinkTargetIDList.GetBytes() }
		else { $null }
		$StringDataData = if (!!$ShortcutInfo.StringData) { $ShortcutInfo.StringData.GetBytes() }
		else { $null }
		$ExtraDataData = if (!!$ShortcutInfo.ExtraData) { $ShortcutInfo.ExtraData.GetBytes() }
		else { $null }
		
		$linktargets = [PSCustomObject]@{
			# Header
			'Shortcut Size'    = $ShortcutInfo.Size
			'Header Block Size'= $ShortcutInfo.ShellLinkHeader.HeaderSize
			'LinkCLSID'	       = $ShortcutInfo.LinkCLSID
			'Link_Flags'	   = $LinkFlags
			'FileAttributes'   = $fileattributes
			'CreationTime'	   = $creation
			'AccessTime'	   = $access
			'WriteTime'	       = $write
			'Target File Size' = $ShortcutInfo.FileSize
			'Icon Idx'		   = $ShortcutInfo.IconIndex
			'ShowCommand'	   = $ShortcutInfo.ShowCommand.ToString()
			'HotKey'		   = $HotKey
			'LinkSlackLength'  = $LinkSlackLength
			'LinkSlack'		   = $LinkSlack
			'LinkInfoData'	   = $LinkInfoData
			'LinkTargetIDListData' = $LinkTargetIDListData
			'StringDataData'	   = $StringDataData
			'ExtraDataData'        = $ExtraDataData
		}
		# ShowCommand:	
		# https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow	
			
		# LinkTargetIDList
		if ($LinkFlags.contains('HasLinkTargetIDList'))
		{
			$targetidlistSize = $ShortcutInfo.LinkTargetIDList.IDListSize
			$len = $ShortcutInfo.LinkTargetIDList.Path.Length
			$dcount = $ShortcutInfo.LinkTargetIDList.ItemIDList.displayname.Count
			if ($len -eq 3 -and $dcount -eq 1)
			{
				$linkpath = $displayname = $ShortcutInfo.LinkTargetIDList.Path.ToString()
			}
			elseif ($len -gt 0 -and $dcount -ge 1)
			{
				foreach ($known in $ShellFolders)
				{
					if ($ShortcutInfo.LinkTargetIDList.Path.Contains("$($known.Value)"))
					{
						$linkpath = $ShortcutInfo.LinkTargetIDList.Path.Replace("$($known.Value)", "[$($known.Name)]")
						break
					}
					else { $linkpath = $ShortcutInfo.LinkTargetIDList.Path.ToString() }
				}
				try
				{
					$displayname = if ($dcount -gt 1)
					{
						$ShortcutInfo.LinkTargetIDList.ItemIDList.displayname[$dcount - 1]
					}
					else { $ShortcutInfo.LinkTargetIDList.ItemIDList.displayname }
				}
				catch { $displayname = $ShortcutInfo.LinkTargetIDList.ItemIDList.displayname }
			}
			else
			{
				foreach ($known in $ShellFolders)
				{
					if ($ShortcutInfo.LinkTargetIDList.Path.Contains("$($known.Value)"))
					{
						$linkpath = $ShortcutInfo.LinkTargetIDList.Path.Replace("$($known.Value)", "[$($known.Name)]")
						break
					}
					else { $linkpath = $ShortcutInfo.LinkTargetIDList.Path.ToString() }
				}
				$displayname = $ShortcutInfo.LinkTargetIDList.displayname
			}
			$linktargets | Add-Member -MemberType NoteProperty -Name "TargetID Block Size" -Value $targetidlistSize
			$linktargets | Add-Member -MemberType NoteProperty -Name "Display Name" -Value $displayname
			$linktargets | Add-Member -MemberType NoteProperty -Name "Path" -Value $linkpath
				
			# Add the raw data	
			$ItemIdListItems = [System.Collections.ArrayList]::new()
			if ($ShortcutInfo.LinkTargetIDList.ItemIDList.Count -ge 1)
			{
				foreach ($ItemIdListItem in $ShortcutInfo.LinkTargetIDList.ItemIDList)
				{
					$linkItem =	Get-LinkTargetIDList -ItemIdListItem $ItemIdListItem
					$null = $ItemIdListItems.Add($linkItem)
				} # End for each#>
			} # end if count ge 1
			else { $ItemIdListItems = $null }
			$linktargets | Add-Member -MemberType NoteProperty -Name "ItemIdListItems" -Value $ItemIdListItems
		}
		else { $linkpath = $displayname = $null }
			
			# StringData:
		if (!!$ShortcutInfo.StringData)
		{
			$StringDataBlockSize = $ShortcutInfo.StringData.StringDataSize
			$linktargets | Add-Member -MemberType NoteProperty -Name "StringData Block Size" -Value $StringDataBlockSize
			#		HasName
			if ($LinkFlags.contains('HasName'))
			{
				$name = $ShortcutInfo.StringData.NameString
				$linktargets | Add-Member -MemberType NoteProperty -Name "NameString" -Value $name
			}
			# 		HasWorkingDir
			if ($LinkFlags.contains('HasWorkingDir'))
			{
				$WorkingDir = $ShortcutInfo.StringData.WorkingDir
				$linktargets | Add-Member -MemberType NoteProperty -Name "Working Dir." -Value $WorkingDir
			}
			#		HasRelativePath
			if ($LinkFlags.contains('HasRelativePath'))
			{
				$RelativePath = $ShortcutInfo.StringData.RelativePath
				$linktargets | Add-Member -MemberType NoteProperty -Name "Relative Path" -Value $RelativePath
			}
			# HasArguments
			if ($LinkFlags.contains('HasArguments'))
			{
				$CommandLineArguments = $ShortcutInfo.StringData.CommandLineArguments
				$linktargets | Add-Member -MemberType NoteProperty -Name "Command Args" -Value $CommandLineArguments
			}
			
			# HasIconLocation
			if ($LinkFlags.contains('HasIconLocation'))
			{
				$iconlocation = $ShortcutInfo.StringData.IconLocation
				$linktargets | Add-Member -MemberType NoteProperty -Name "Icon Location" -Value $iconlocation
			}
		}
			
		# LinkInfo
		if ($LinkFlags.contains('HasLinkInfo'))
		{
			$LinkInfoSize = $ShortcutInfo.LinkInfo.LinkInfoSize
			$LinkInfoFlags = $ShortcutInfo.LinkInfo.LinkInfoFlags.ToString()
			$linktargets | Add-Member -MemberType NoteProperty -Name "Link Info Block Size" -Value $LinkInfoSize
			$linktargets | Add-Member -MemberType NoteProperty -Name "Link Info Flags" -Value $LinkInfoFlags
			
			# VolumeID
			if ($LinkInfoFlags.contains('VolumeID'))
			{
				$DriveSerialNumber = $ShortcutInfo.LinkInfo.VolumeID.DriveSerialNumber.tostring('X3')
				$DriveType = $ShortcutInfo.LinkInfo.VolumeID.DriveType.ToString().replace('DRIVE_', '').replace(' ', '')
				$VolumeLabel = $ShortcutInfo.LinkInfo.VolumeID.VolumeLabel
				$linktargets | Add-Member -MemberType NoteProperty -Name "Drive Type" -Value $DriveType
				$linktargets | Add-Member -MemberType NoteProperty -Name "Volume Label" -Value $VolumeLabel
				$linktargets | Add-Member -MemberType NoteProperty -Name "Drive s/n" -Value $DriveSerialNumber
			}
			# LocalBasePath
			if ($LinkInfoFlags.contains('LocalBasePath'))
			{
				$LocalBasePath = $ShortcutInfo.LinkInfo.LocalBasePath
				$LocalBasePathUnicode = $ShortcutInfo.LinkInfo.LocalBasePathUnicode
				$linktargets | Add-Member -MemberType NoteProperty -Name "Local Base Path" -Value $LocalBasePath
				$linktargets | Add-Member -MemberType NoteProperty -Name "Local Base Path Unicode" -Value $LocalBasePathUnicode
			}
			# CommonPathSuffix
			if (!!$ShortcutInfo.LinkInfo.CommonPathSuffix)
			{
				$CommonPathSuffix = $ShortcutInfo.LinkInfo.CommonPathSuffix
				$CommonPathSuffixUnicode = $ShortcutInfo.LinkInfo.CommonPathSuffixUnicode
				$linktargets | Add-Member -MemberType NoteProperty -Name "CommonPathSuffix" -Value $CommonPathSuffix
				$linktargets | Add-Member -MemberType NoteProperty -Name "CommonPathSuffixUnicode" -Value $CommonPathSuffixUnicode
			}
			# CommonNetworkRelativeLink
			if ($LinkInfoFlags.contains('CommonNetworkRelativeLink'))
			{
				$CommonNetworkRelativeLinkFlags = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.CommonNetworkRelativeLinkFlags.ToString()
				$linktargets | Add-Member -MemberType NoteProperty -Name "Common Network Relative Link Flags" -Value $CommonNetworkRelativeLinkFlags
				
				# ValidNetType
				if ($CommonNetworkRelativeLinkFlags.Contains('ValidNetType'))
				{
					$NetworkProviderType = ($ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.NetworkProviderType).ToString('X')
					$NetworkProvider = if (!!$($Vendors[$NetworkProviderType])) { "0x$($NetworkProviderType) ($($Vendors[$NetworkProviderType]))" }
					else { "0x$($NetworkProviderType)" }
					$linktargets | Add-Member -MemberType NoteProperty -Name "NetworkProviderType" -Value $NetworkProvider
				}
				$NetName = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.NetName
				$NetNameUnicode = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.NetNameUnicode
				$linktargets | Add-Member -MemberType NoteProperty -Name "NetName" -Value $NetName
				$linktargets | Add-Member -MemberType NoteProperty -Name "NetName Unicode" -Value $NetNameUnicode
				
				# ValidDevice
				if ($CommonNetworkRelativeLinkFlags.Contains('ValidDevice'))
				{
					$DeviceName = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.DeviceName
					$DeviceNameUnicode = $ShortcutInfo.LinkInfo.CommonNetworkRelativeLink.DeviceNameUnicode
					$linktargets | Add-Member -MemberType NoteProperty -Name "Device Name" -Value $DeviceName
					$linktargets | Add-Member -MemberType NoteProperty -Name "Device Name Unicode" -Value $DeviceNameUnicode
				}
			}
		}
			
		# ExtraData Block
		if (!!$ShortcutInfo.Extradata)
		{
			$ExtraDataBlockSize = $ShortcutInfo.ExtraData.ExtraDataSize
			$linktargets | Add-Member -MemberType NoteProperty -Name "ExtraData Block Size" -Value $ExtraDataBlockSize
			
			# HasDarwinID
			if ($LinkFlags.contains('HasDarwinID'))
			{
				$DarwinDataAnsi = $ShortcutInfo.ExtraData.DarwinDataBlock.DarwinDataAnsi
				$DarwinDataUnicode = $ShortcutInfo.ExtraData.DarwinDataBlock.DarwinDataUnicode
				$linktargets | Add-Member -MemberType NoteProperty -Name "DarwinDataAnsi" -Value $DarwinDataAnsi
				$linktargets | Add-Member -MemberType NoteProperty -Name "DarwinDataUnicode" -Value $DarwinDataUnicode
			}
			
			# RunWithShimLayer
			if ($LinkFlags.contains('RunWithShimLayer'))
			{
				$LayerName = $ShortcutInfo.ExtraData.ShimDataBlock.LayerName
				$linktargets | Add-Member -MemberType NoteProperty -Name "ShimLayerName" -Value $LayerName
			}
				
			# EnableTargetMetadata - PropertyStore
			if (!!$ShortcutInfo.ExtraData.PropertyStoreDataBlock.PropertyStore.PropertyStorage)
			{
				# Get All PropertyStore Properties
				$propertystoredata = $ShortcutInfo.ExtraData.PropertyStoreDataBlock.GetBytes()
				$PropertyStoreEntries = [System.Collections.ArrayList]::new()
				$Items = Get-Ext_SPS1 -ByteArray ([byte[]](0, 0, 0, 0) + $propertystoredata[8 .. ($propertystoredata.count - 1)])
				foreach ($property in $items)
				{
					$PropertyStoreEntry = [PSCustomObject]::new()
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'Storage Size' -Value $property.'Storage Size'
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'FormatID' -Value $property.FormatID
					$PropertyStoreEntry | Add-Member -MemberType NoteProperty -Name 'TypedProperty' -Value $property.PropertyStore
					$null = $PropertyStoreEntries.Add($PropertyStoreEntry)
				}
				$linktargets | Add-Member -MemberType NoteProperty -Name "PropertyStoreEntries" -Value $PropertyStoreEntries
			}
				
				# KnownFolderDataBlock
			if ($ShortcutInfo.ExtraData.KnownFolderDataBlock)
			{
				$KnBlockSignature = $ShortcutInfo.ExtraData.KnownFolderDataBlock.BlockSignature
				$KnownFolderID = $ShortcutInfo.ExtraData.KnownFolderDataBlock.KnownFolderID
				
				$kfguid = $ShortcutInfo.ExtraData.KnownFolderDataBlock.KnownFolderID.Guid
				$KnownFolderDisplayName = if (!!$knownfolders.Where{ $_.GUID -eq "{$($kfguid)}" })
				{ "$($knownfolders.Where{ $_.GUID -eq "{$($kfguid)}" }.Name)" }
				else { "----" }
				$KnownFolderIDOffset = $ShortcutInfo.ExtraData.KnownFolderDataBlock.Offset
				$linktargets | Add-Member -MemberType NoteProperty -Name "Known Folder BlockSignature" -Value $KnBlockSignature
				$linktargets | Add-Member -MemberType NoteProperty -Name "Known Folder ID" -Value $KnownFolderID
				$linktargets | Add-Member -MemberType NoteProperty -Name "Known Folder DisplayName" -Value $KnownFolderDisplayName
				$linktargets | Add-Member -MemberType NoteProperty -Name "Known FolderID Offset" -Value $KnownFolderIDOffset
			}
			
			# SpecialFolderDataBlock
			if ($ShortcutInfo.ExtraData.SpecialFolderDataBlock)
			{
				$SpBlockSignature = $ShortcutInfo.ExtraData.SpecialFolderDataBlock.BlockSignature
				$SpecialFolderID = $ShortcutInfo.ExtraData.SpecialFolderDataBlock.SpecialFolderID
				$SpecialFolderIDOffset = $ShortcutInfo.ExtraData.SpecialFolderDataBlock.Offset
				$linktargets | Add-Member -MemberType NoteProperty -Name "Special Folder BlockSignature" -Value $SpBlockSignature
				$linktargets | Add-Member -MemberType NoteProperty -Name "Special Folder ID" -Value $SpecialFolderID
				$linktargets | Add-Member -MemberType NoteProperty -Name "Special Folder Offset" -Value $SpecialFolderIDOffset
			}
				
			# EnvironmentVariableDataBlock # HasExpString
			if ($LinkFlags.contains('HasExpString') -and $ShortcutInfo.ExtraData.EnvironmentVariableDataBlock)
			{
				$EnvBlockSignature = $ShortcutInfo.ExtraData.EnvironmentVariableDataBlock.BlockSignature
					
				$Bytes = $ShortcutInfo.ExtraData.EnvironmentVariableDataBlock.GetBytes()
				
				$BlockLength = [System.BitConverter]::ToUInt32($Bytes[0 .. 3], 0)
				$BlockSignature = [System.BitConverter]::ToString($Bytes[7 .. 4]) -replace '-', ''
				if ($BlockSignature -ne 'A0000001') { return }
				
				$TargetAnsi = [System.Text.Encoding]::UTF8.GetString($bytes[8 .. 267], 0, $bytes[8 .. 267].IndexOf([byte]0)) #(260 bytes)
				
				$TargetUnicodeHex = [System.Text.Encoding]::GetEncoding(28591).GetString($bytes[268 .. (268 + 519)])
				$UnicodeEnd = [System.Text.RegularExpressions.Regex]::Match($TargetUnicodeHex, "(\x00\x00)").index + 1
				$TargetUnicode = [System.Text.Encoding]::Unicode.GetString($bytes[268 .. (268 + 519)], 0, $UnicodeEnd) #(520 bytes)	
	
				$linktargets | Add-Member -MemberType NoteProperty -Name "Environment Variable BlockSignature" -Value $EnvBlockSignature
				$linktargets | Add-Member -MemberType NoteProperty -Name "TargetAnsi" -Value $TargetAnsi
				$linktargets | Add-Member -MemberType NoteProperty -Name "TargetUnicode" -Value $TargetUnicode
			}
			# ConsoleDataBlock
			if ($ShortcutInfo.ExtraData.ConsoleDataBlock)
			{
				$ConsoleDataBlock = $ShortcutInfo.ExtraData.ConsoleDataBlock
				if ($ConsoleDataBlock.count -ge 1)
				{
					$ConsoleData = [PSCustomObject]@{ }
					foreach ($consoleentry in ($ConsoleDataBlock | Get-Member -MemberType Property).Name)
					{
						$Centry = if ($ConsoleDataBlock.$consoleentry.GetType().BaseType.Name -match 'Array') { $ConsoleDataBlock.$consoleentry -join ',' }
						else { ($ConsoleDataBlock.$consoleentry.ToString()).Replace('\\s+', ',') }
						$ConsoleData | Add-Member -MemberType NoteProperty -Name $consoleentry -Value $Centry
					}
				}
				$linktargets | Add-Member -MemberType NoteProperty -Name "Console Data Block" -Value $ConsoleData
			}
			
			# ConsoleFEDataBlock
			if ($ShortcutInfo.ExtraData.ConsoleFEDataBlock)
			{
				# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/63d3d639-7fd2-4afb-abbe-0d5b5551eef8
				$CodePage = $ShortcutInfo.ExtraData.ConsoleFEDataBlock.CodePage
				$linktargets | Add-Member -MemberType NoteProperty -Name "Console CodePage ID" -Value $CodePage
			}
			
			# TrackerDataBlock
			if ($ShortcutInfo.ExtraData.TrackerDataBlock)
			{
				# MachineID
				if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.MachineID)
				{
					$machineid = $ShortcutInfo.ExtraData.TrackerDataBlock.MachineID.ToUpper()
					$linktargets | Add-Member -MemberType NoteProperty -Name "Machine Id" -Value $machineid
				}
				
				# GUIDs
				if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[0])
				{
					$g1b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[0] -replace "-", '')).ToByteArray()
					$g1h = [System.BitConverter]::ToString($g1b) -replace '-', ''
					$Guid1 = Get-ObjectIdFromHex -Hex $g1h
					$linktargets | Add-Member -MemberType NoteProperty -Name "Guid 1" -Value $Guid1
				}
				if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[0])
				{
					$bg1b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[0] -replace "-", '')).ToByteArray()
					$bg1h = [System.BitConverter]::ToString($bg1b) -replace '-', ''
					$BGuid1 = Get-ObjectIdFromHex -Hex $bg1h
					$linktargets | Add-Member -MemberType NoteProperty -Name "Birth Guid 1" -Value $BGuid1
				}
				if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[1])
				{
					$g2b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.Droid.guid[1] -replace "-", '')).ToByteArray()
					$g2h = [System.BitConverter]::ToString($g2b) -replace '-', ''
					$Guid2 = Get-ObjectIdFromHex -Hex $g2h
					$linktargets | Add-Member -MemberType NoteProperty -Name "Guid 2" -Value $Guid2
				}
				if (!!$ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[1])
				{
					$bg2b = ([GUID]($ShortcutInfo.ExtraData.TrackerDataBlock.DroidBirth.guid[1] -replace "-", '')).ToByteArray()
					$bg2h = [System.BitConverter]::ToString($bg2b) -replace '-', ''
					$BGuid2 = Get-ObjectIdFromHex -Hex $bg2h
					$linktargets | Add-Member -MemberType NoteProperty -Name "Birth Guid 2" -Value $BGuid2
				}
			}
				
			# ExtraData.VistaAndAboveIDListDataBlock 
			if (!!$ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock)
			{
				$VistaDisplayName = $ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.DisplayName
				$VistaPath = $ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.Path
				$linktargets | Add-Member -MemberType NoteProperty -Name "Vista_Path" -Value $VistaPath
				$linktargets | Add-Member -MemberType NoteProperty -Name "Vista_DisplayName" -Value $VistaDisplayName
					
					# Add the raw data	
					$VistaItemIdListItems = [System.Collections.ArrayList]::new()
					if ($ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.ItemIDList.Count -ge 1)
					{
						foreach ($VistaItemIdListItem in $ShortcutInfo.ExtraData.VistaAndAboveIDListDataBlock.IDList.ItemIDList)
						{
							$VistalinkItem = Get-LinkTargetIDList -ItemIdListItem $VistaItemIdListItem
							$null = $VistaItemIdListItems.Add($VistalinkItem)
						} # End for each#>
					} # end if count ge 1
					else { $VistaItemIdListItems = $null }
					$linktargets | Add-Member -MemberType NoteProperty -Name "VistaItemIdListItems" -Value $VistaItemIdListItems
			}
				
			# HasExpIcon
			if ($LinkFlags.contains('HasExpIcon'))
			{
				$iconbytes = $ShortcutInfo.ExtraData.IconEnvironmentDataBlock.GetBytes()
				if ($iconbytes.count -ge 788)
				{
					$iconTargetAnsi = ([System.Text.Encoding]::GetEncoding(1252).GetString($iconbytes[8 .. 267]) -Split '\0')[0]
					$iconTargetUnicode = ([System.Text.Encoding]::Unicode.GetString($iconbytes[268 .. (268 + 520 - 1)]) -Split '\0')[0]
					$linktargets | Add-Member -MemberType NoteProperty -Name "iconTargetAnsi" -Value $iconTargetAnsi
					$linktargets | Add-Member -MemberType NoteProperty -Name "iconTargetUnicode" -Value $iconTargetUnicode
				}
				
			}
		}
		# For debug	
		# Show-InfoMessage -InfoMessage ($linktargets|Out-String)
		}
		catch
		{
			$linktargets = $null
		}
	
	return $linktargets
		
	} # End function Get-ShellLinkfrombyteArray
	
	function Get-SafePath
	{
		param
		(
			[Parameter(Mandatory = $true,
					   ValueFromPipeline = $true,
					   Position = 0)]
			[object]$Path
		)
		
		process
		{
			$pattern = "[" + (([System.IO.Path]::GetInvalidPathChars().foreach{ "\x" + ([int]$_).ToString('X2') }) -join '') + "]+"
			[regex]::Replace($Path, $pattern, '~')
		}
	} # Get-SafePath
	
	# Replaced:
	# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/23bb5877-e3dd-4799-9f50-79f05f938537
	# with these:
	# https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_remote_protocol_info
	$Vendors = [Ordered]@{
		"00010000" = "WNNC_NET_MSNET"
		"00020000" = "WNNC_NET_LANMAN"
		"00030000" = "WNNC_NET_NETWARE"
		"00040000" = "WNNC_NET_VINES"
		"00050000" = "WNNC_NET_10NET"
		"00060000" = "WNNC_NET_LOCUS"
		"00070000" = "WNNC_NET_SUN_PC_NFS"
		"00080000" = "WNNC_NET_LANSTEP"
		"00090000" = "WNNC_NET_9TILES"
		"000A0000" = "WNNC_NET_LANTASTIC"
		"000B0000" = "WNNC_NET_AS400"
		"000C0000" = "WNNC_NET_FTP_NFS"
		"000D0000" = "WNNC_NET_PATHWORKS"
		"000E0000" = "WNNC_NET_LIFENET"
		"000F0000" = "WNNC_NET_POWERLAN"
		"00100000" = "WNNC_NET_BWNFS"
		"00110000" = "WNNC_NET_COGENT"
		"00120000" = "WNNC_NET_FARALLON"
		"00130000" = "WNNC_NET_APPLETALK"
		"00140000" = "WNNC_NET_INTERGRAPH"
		"00150000" = "WNNC_NET_SYMFONET"
		"00160000" = "WNNC_NET_CLEARCASE"
		"00170000" = "WNNC_NET_FRONTIER"
		"00180000" = "WNNC_NET_BMC"
		"00190000" = "WNNC_NET_DCE"
		"001A0000" = "WNNC_NET_AVID"
		"001B0000" = "WNNC_NET_DOCUSPACE"
		"001C0000" = "WNNC_NET_MANGOSOFT"
		"001D0000" = "WNNC_NET_SERNET"
		"001E0000" = "WNNC_NET_RIVERFRONT1"
		"001F0000" = "WNNC_NET_RIVERFRONT2"
		"00200000" = "WNNC_NET_DECORB"
		"00210000" = "WNNC_NET_PROTSTOR"
		"00220000" = "WNNC_NET_FJ_REDIR"
		"00230000" = "WNNC_NET_DISTINCT"
		"00240000" = "WNNC_NET_TWINS"
		"00250000" = "WNNC_NET_RDR2SAMPLE"
		"00260000" = "WNNC_NET_CSC"
		"00270000" = "WNNC_NET_3IN1"
		"00290000" = "WNNC_NET_EXTENDNET"
		"002A0000" = "WNNC_NET_STAC"
		"002B0000" = "WNNC_NET_FOXBAT"
		"002C0000" = "WNNC_NET_YAHOO"
		"002D0000" = "WNNC_NET_EXIFS"
		"002E0000" = "WNNC_NET_DAV"
		"002F0000" = "WNNC_NET_KNOWARE"
		"00300000" = "WNNC_NET_OBJECT_DIRE"
		"00310000" = "WNNC_NET_MASFAX"
		"00320000" = "WNNC_NET_HOB_NFS"
		"00330000" = "WNNC_NET_SHIVA"
		"00340000" = "WNNC_NET_IBMAL"
		"00350000" = "WNNC_NET_LOCK"
		"00360000" = "WNNC_NET_TERMSRV"
		"00370000" = "WNNC_NET_SRT"
		"00380000" = "WNNC_NET_QUINCY"
		"00390000" = "WNNC_NET_OPENAFS"
		"003A0000" = "WNNC_NET_AVID1"
		"003B0000" = "WNNC_NET_DFS"
		"003C0000" = "WNNC_NET_KWNP"
		"003D0000" = "WNNC_NET_ZENWORKS"
		"003E0000" = "WNNC_NET_DRIVEONWEB"
		"003F0000" = "WNNC_NET_VMWARE"
		"00400000" = "WNNC_NET_RSFX"
		"00410000" = "WNNC_NET_MFILES"
		"00420000" = "WNNC_NET_MS_NFS"
		"00430000" = "WNNC_NET_GOOGLE"
		"00440000" = "WNNC_NET_NDFS"
	}
	$AppIDs = @{
		"0006F647F9488D7A" = "AIM 7.5.11.9 (custom AppID + JL support)"
		"01B29F0DC90366BB" = "AIM 5.9.3857"
		"044A50E6C87BC012" = "Classic FTP Plus 2.15"
		"06059DF4B02360AF" = "Kadu 0.10.0 / 0.6.5.5"
		"0A1D19AFE5A80F80" = "FileZilla 2.2.32"
		"0A79A7CE3C45D781" = "CuteFTP 7.1 (Build 06.06.2005.1)"
		"0CFAB0EC14B6F953" = "Express NewsPictures 2.41 (Build 08.05.07.0)"
		"0EF606B196796EBB" = "HP MediaSmart Photo"
		"1A89D1BEFE8E90E3" = "Adobe Acrobat Distiller Pro XI 32-bit 11.0.0779"
		"1B29F0DC90366BB"  = "AIM 5.9.3857"
		"1CF97C38A5881255" = "MediaPortal 1.1.3"
		"1CFFBE973A437C74" = "DSPlayer 0.889 Lite"
		"1EB796D87C32EFF9" = "Firefox 5.0"
		"2D61CCCB4338DFC8" = "BitTorrent 5.0.0 / 6.0.0 / 7.2.1 (Build 25548)"
		"2DB8E25112AB4453" = "Deluge 1.3.12 / 1.3.3"
		"2FF9DC8FB7E11F39" = "I2P 0.8.8 (no window)"
		"3C93A049A30E25E6" = "J. River Media Center 16.0.149"
		"3DC02B55E44D6697" = "7-Zip 3.13 / 4.20"
		"3E9850346F375D41" = "Foxit Phantom PDF 7.2.2.929"
		"3ED70EF3495535F7" = "Gravity 3.0.4"
		"3EDF100B207E2199" = "digiKam 1.7.0 (KDE 4.4.4)"
		"4FC234E682FA0FFF" = "Fineprint  pdfFactory"
		"4A7E4F6A181D3D08" = "broolzShare"
		"4A49906D074A3AD3" = "Media Go 1.8 (Build 121)"
		"4AA2A5710DA3EFE0" = "DCSharpHub 2.0.0"
		"4AC866364817F10C" = "Microsoft Edge (Chromium)"
		"4B8A4727AA452343" = "Firefox 56.0.2"
		"4B6925EFC53A3C08" = "BCWipe Task Manager 3.02.3 / 3.06.5.5"
		"4C58CF9096EF3EFD" = "Kindle for PC 1.24.3 "
		"4CB9C5750D51C07F" = "Microsoft Movies & TV (Microsoft.ZuneVideo)"
		"4CDF7858C6673F4B" = "Bullet Proof FTP 1.26"
		"4DD48F858B1A6BA7" = "Free Download Manager 3.0 (Build 852)"
		"4FCEEC8E021AC978" = "CoffeeCup Free FTP 3.5.0.0"
		"4FD44F9938892CAA" = "CDBurnerXP"
		"5E877DB63DEC2F8"  = "JetBrains dotPeek"
		"5B186FC4A0B40504" = "Dtella 1.2.5 (Purdue network only)"
		"5BB830F67194431A" = "7-Zip 18.05 (x64)"
		"5C450709F7AE4396" = "Firefox 1.0 / 2.0 / 3.0 (32-bit)"
		"5D6F13ED567AA2DA" = "Microsoft Office Outlook 2010 x64"
		"5DA8F997FD5F9428" = "Internet Explorer x64"
		"5DF4765359170E26" = "Firefox 4.0.1"
		"6DED8E6DAA05CB0C" = "Cyberlink PhotoDirector 8"
		"6A316AA67A46820B" = "Core FTP LE 1.3c (Build 1437) / 2.2 (Build 1689)"
		"6B3A5CE7AD4AF9E4" = "IceChat 9 RC2"
		"6BB98FB8CDC26D69" = "Calculator (Windows built-in)"
		"6BC3383CB68A3E37" = "iTunes 7.6.0.29 / 8.0.0.35"
		"6E855C85DE07BC6A" = "Microsoft Office Excel 2010 x64"
		"6F647F9488D7A"    = "AIM 7.5.11.9 (custom AppID + JL support)"
		"7A4BA998575FF2A4" = "FreeCommander XE 2016 Build 715 32-bit"
		"7B7F65AAECA20A8C" = "Dropbox App 5.4.24"
		"7C2916AFD6F116A6" = "LibreOffice 5.1.0.3 Base"
		"7CB0735D45243070" = "CDisplay 1.8.1.0"
		"7DCA40FD2A5A971F" = "LibreOffice 5.1.0.3"
		"7E4DCA80246863E3" = "Windows Control Panel"
		"8A461F82E9EB4102" = "Foxit Reader 7.2.0.722"
		"8BD5C6433CA967E9" = "ACDSee Photo Manager 2009 (v11.0 Build 113)"
		"8DCCA8B24A5E822E" = "CDBurnerXP 4.5.7.6623"
		"8DEB27DFA31C5C2A" = "CoffeeCup Free FTP 4.4 (Build 1904)"
		"8F3D7202AA5D4C01" = "ImgBurn 2.5.8.0"
		"8F852307189803B8" = "Far Manager 2.0.1807"
		"8FD1364019DC2115" = "Calibre E-Book Manager 2.33"
		"9A464053CD82DE6D" = "LINE Messenger"
		"9AD1EC169BF2DA7F" = "FlylinkDC++ r405 (Build 7358)"
		"9AD84C52EFEAE190" = "1Password 4.6.0.604"
		"9C32E2313792E6E8" = "Microsoft Built-in Disk Cleanup (Win10)"
		"9CE6555426F54B46" = "HxD 1.7.7.0"
		"9D1F905CE5044AEE" = "Edge Browser"
		"9D78513A8998829C" = "Microsoft Built-in Run Dialog (Win7 + Win10)"
		"9E0B3F677A26BBC4" = "BitKinex 3.2.3"
		"9EDAFE4BA4B22CE7" = "Eclipse IDE Oxygen (4.7.3a)"
		"9FDB10E18CDD0101" = "Cisco AnyConnect Secure Mobility Client 3.1.02040"
		"13EB0E5D9A49EAEF" = "Binjet 3.0.2"
		"19E6043495A5B4DA" = "Edit Pad Pro"
		"20EF367747C22564" = "Bullet Proof FTP 2010.75.0.75"
		"22C4D315E96389E0" = "FastCopy 3.12"
		"22CEFA022402327D" = "Meca Messenger 5.3.0.52"
		"27ECECD8D89B6767" = "AIM 6.2.14.2 / 6.5.3.12 / 6.9.17.2"
		"28C8B86DEAB549A1" = "Internet Explorer 8 / 9 / 10 (32-bit)"
		"28EFB5B6D2E28389" = "EA Origin"
		"30D23723BDD5D908" = "Digsby (Build 30140) (JL support)"
		"31E8AC6B0784ED7D" = "Foxit Reader 9.4.0.16811"
		"36F6BC3EFE1D99E0" = "Alt.Binz 0.25.0 (Build 27.09.2007)"
		"44A50E6C87BC012"  = "Classic FTP Plus 2.15"
		"44A398496ACC926D" = "Adobe Premiere Pro CS5 (64-bit)"
		"49DB7ED4F2703C22" = "LogMeIn Client 1.3.1835"
		"50C5E019818564E3" = "Microsoft Excel Viewer 12.0.6219.1000"
		"59E86071B87AC1C3" = "CuteFTP 8.3 (Build 8.3.4.0007)"
		"59F56184C796CFD4" = "ACDSee Photo Manager 10 (Build 219)"
		"65F7DD884B016AB2" = "LimeChat 2.39"
		"70D9ADA92108D731" = "IrfanView 4.51 (x64)"
		"70FFD305907C983B" = "7zip 18.05"
		"73C6A317412687C2" = "Google Talk 1.0.0.104"
		"75FDACD8330BAC18" = "AnyDesk"
		"76F6F1BD18C19698" = "aMule 2.2.6"
		"78F0AFB5BD4BB278" = "Microsoft Lync 2016 64-bit (Skype for Business)"
		"83B03B46DCD30A0E" = "iTunes"
		"83DD64E7FA560BD5" = "LibreOffice 5.1.0.3 Calc"
		"84F066768A22CC4F" = "Adobe Photoshop CS5 (64-bit)"
		"89B0D939F117F75C" = "Adobe Acrobat 9 Pro Extended (32-bit)"
		"169B3BE0BC43D592" = "FastPictureViewer Professional 1.6 (Build 211)"
		"174C2C811C286C58" = "InfraRecorder 0.53.0.0 64-bit"
		"177AEB41DEB606AE" = "Adobe Photoshop CS6 (64 Bit)"
		"188F5EC9D11DED56" = "Microsoft Edge (Chromium)"
		"223BF0F360C6FEA5" = "I2P 0.8.8 (restartable)"
		"271E609288E1210A" = "Microsoft Office Access 2010 x86"
		"319F01BF9FE00F2D" = "Microsoft Access 2013/2016 x64"
		"353E9052CCCBEC5D" = "Kindle for PC 1.21.0"
		"386A2F6AA7967F36" = "EyeBrowse 2.7"
		"454EF7DCA3BB16B2" = "Exodus 0.10.0.0"
		"558C5BD9F906860A" = "BearShare Lite 5.2.5.1"
		"560D789A6A42AD5A" = "DC++ 0.261 / 0.698 / 0.782 (r2402.1)"
		"606A33F5A27B57D4" = "Microsoft Built-in Computer Management 10.0.10011.16384 (Win10)"
		"714B179E552596DF" = "Bullet Proof FTP 2.4.0 (Build 31)"
		"817E5AD5BE351574" = "Microsoft Built-in Services 10.0.10011.16384 (Win10)"
		"905C98E216107AA1" = "Microsoft Lync 2013 15.0.4753.1000"
		"930CF1DD2266E2CB" = "DB Browser for SQLite"
		"966FA7C312D9B10"  = "Eraser 6.2.0.2970"
		"977A5D147AA093F4" = "Lphant 3.51"
		"989D7545C2B2E7B2" = "IMVU 465.8.0.0"
		"1110D9896DCEDDB3" = "imgSeek 0.8.5"
		"1434D6D62D64857D" = "BitLord 1.2.0-66"
		"2417CAA1F2A881D4" = "ICQ 7.6 (Build 5617)"
		"2437D4D14B056114" = "EiskaltDC++ 2.2.3"
		"3094CDB43BF5E9C2" = "Microsoft Office OneNote 2010 x86"
		"3198E37206F28DC7" = "CuteFTP 8.3 Professional (Build 8.3.4.0007)"
		"3353B940C074FD0C" = "Microsoft Built-in Snipping Tool"
		"3917DD550D7DF9A8" = "Konvertor 4.06 (Build 10)"
		"4975D6798A8BDF66" = "7-Zip 4.65 / 9.20"
		"6059DF4B02360AF"  = "Kadu 0.10.0 / 0.6.5.5"
		"6824F4A902C78FBD" = "Firefox 64.0"
		"7010C278903C2B0F" = "Adobe Acrobat XI Pro 32-bit"
		"7111C0CE965B7246" = "Battle.net"
		"7494A606A9EEF18E" = "Crystal Player 1.98"
		"7526DE4A8B5914D9" = "Forte Agent 6.00 (Build 32.1186)"
		"8628E76FD9020E81" = "Fling File Transfer Plus 2.24"
		"8904A5FD2D98B546" = "IceChat 7.70 20101031"
		"9077B9C9CF187CC2" = "KeePass 1.36"
		"9749CEA96D411F37" = "HexChat 2.10.2 64-bit"
		"9839AEC31243A928" = "Microsoft Office Excel 2010 x86"
		"26753C97EA000ECD" = "LibreOffice 5.1.0.3 Math"
		"43886BA3395ACDCC" = "Easy Post 3.0"
		"58170C92FA4B91A1" = "MediaMonkey"
		"76689FF502A1FD9E" = "Imagine Image and Animation Viewer 1.0.7"
		"86781FE8437DB23E" = "Messenger Pro 2.66.6.3353"
		"96252DAFF039437A" = "Lphant 7.0.0.112351"
		"689319B6547CDA85" = "emesene 2.11.7"
		"1461132E553E2E6C" = "Firefox 6.0"
		"2519133D6D830F7E" = "IMatch 3.6.0.113"
		"3643905FCEAB2635" = "Cyberlink PowerDVD 16"
		"6224453D9701A612" = "BinTube 3.7.1.0 (requires VLC 10.5!)"
		"8172865A9D5185CB" = "Binreader 1.0 (Beta 1)"
		"9560577FD87CF573" = "LeechFTP 1.3 (Build 207)"
		"23646679AACCFAE0" = "Adobe Reader 9 x64"
		"26717493B25AA6E1" = "Adobe Dreamweaver CS5 (32-bit)"
		"36801066F71B73C5" = "Binbot 2.0"
		"65009083BFA6A094" = "(app launched via XPMode)"
		"728008617BC3E34B" = "eM Client 3.0.10206.0"
		"780732558F827A42" = "AutoPix 5.3.3"
		"784182360DE0C5B6" = "Kazaa Lite 1.7.1"
		"226400522157FE8B" = "FileZilla Server 0.9.39 beta"
		"BE2FD48BE71F4560" = "Autodesk DWG TrueView"
		"C88C76A215679365" = "Axialis IconWorkshop 6"
		"D1D9B843A81139C6" = "KeePass"
		"D4E1769E47FFDE26" = "Cyberlink PhotoDirector 9"
		"E4EA035065B5789A" = "Maël Hörz HxD Hex Editor 2.5"
		"E353DE90C46ECF50" = "Hex-Rays IDA Pro"
		"A1D19AFE5A80F80"  = "FileZilla 2.2.32"
		"A3E0D98F5653B539" = "Instantbird 1.0 (20110623121653) (JL support)"
		"A5DB18F617E28A51" = "ICQ 6.5 (Build 2024)"
		"A7BA40025DAC9A67" = "Microsoft Office Hub"
		"A8DF13A46D66F6B5" = "Kommute (Calypso) 0.24"
		"A31EC95FDD5F350F" = "BitComet"
		"A75B276F6E72CF2A" = "Kazaa Lite Tools K++ 2.7.0 / WinMX 3.53"
		"A79A7CE3C45D781"  = "CuteFTP 7.1 (Build 06.06.2005.1)"
		"A746F9625F7695E8" = "HeXHub 5.07"
		"A777AD264B54ABAB" = "JetVideo 8.0.2.200 Basic"
		"AC3A63B839AC9D3A" = "Azureus Vuze Bittorrent Client 4.6.0.4 / 5.7.1.0"
		"AC8920ED05001800" = "DMDirc 0.6.5 (Profile store: C:\Users\%username%\AppData\Roaming\DMDirc\)"
		"ACCCA100973EF8DC" = "Azureus 2.0.8.4"
		"ACE8715529916D31" = "40tude Dialog 2.0.15.1 (Beta 38)"
		"AE6DF75DF512BD06" = "Microsoft Groove Music (Microsoft.ZuneMusic)"
		"B7CB1D1C1991ACCF" = "FlashFXP 4.0.0 (Build 1548)"
		"B8AB77100DF80AB2" = "Microsoft Office Excel 2016 x64"
		"B8C29862D9F95832" = "Microsoft Office InfoPath 2010 x86"
		"B39C5F226977725D" = "ACDSee Pro 8.1.99"
		"B223C3FFBC0A7A42" = "Bersirc 2.2.14"
		"B0236D03C0627AC4" = "ICQ 5.1 / ICQLite Build 1068"
		"B868D9201B866D96" = "Microsoft Lync 4.0.7577.0"
		"B3016B8DA2077262" = "eMule 0.50a"
		"B3965C840BF28EF4" = "AIM 4.8.2616"
		"B7173093B23B9A6A" = "Beyond Compare 4"
		"BA3A45F7FD2583E1" = "Blubster 3.1.1"
		"BA132E702C0147EF" = "KCeasy 0.19-rc1"
		"BAEA31EACD87186B" = "BinaryBoy 1.97 (Build 55)"
		"BBA8A4896F0D26F"  = "Ares Chat Client (3.1.9.4045)"
		"BC2F88ECCD3461B4" = "Microsoft Built-in Event Viewer 1.0 (Win10)"
		"BC03160EE1A59FC1" = "Foxit PDF Reader 5.4.5"
		"BCC705F705D8132B" = "Instan-t 5.2 (Build 2824)"
		"BCD7BA75303ACBCF" = "BitLord 1.1"
		"BE4875BB3E0C158F" = "CrossFTP 1.75a"
		"BF483B423EBBD327" = "Binary Vortex 5.0"
		"BFC1D76F16FA778F" = "Ares (Galaxy) 1.8.4 / 1.9.8 / 2.1.0 / 2.1.7.3041 / 3.1.9.4045"
		"C01D68E40226892B" = "ClicksAndWhistles 2.7.146"
		"C02BAF50D02056FC" = "FotoVac 1.0"
		"C2D349A0E756411B" = "Adobe Reader 8.1.2"
		"C04F69101C131440" = "CuteFTP 5.0 (Build 50.6.10.2)"
		"C5EF839D8D1C76F4" = "LimeWire 5.2.13"
		"C6F7B5BF1B9675E4" = "BitWise IM 1.7.3a"
		"C8E4C10E5460B00C" = "iMesh 6.5.0.16898"
		"C312E260E424AE76" = "Mail.Ru Agent 5.8 (JL support)"
		"C845F3A6022D647C" = "Another File 2.03 (Build 2/7/2004)"
		"C997D2E1A0F0929"  = "BCWipe 6.08.6"
		"C8112AC53C5ED250" = "Jetico Log Viewer 1.1"
		"C634153E7F5FCE9C" = "IrfanView 3.10 / 4.30 / 4.41 32-bit"
		"C765823D986857BA" = "Adobe Illustrator CS5 (32-bit)"
		"C9374251EDB4C1A8" = "BitTornado T-0.3.17"
		"CA942805559495E9" = "aMSN 0.98.4"
		"CB5250EAEF7E3213" = "ApexDC++ 1.4.3.957"
		"CBBE886ECA4BFC2D" = "ExoSee 1.0.0"
		"CC76755E0F925CE6" = "AllPicturez 1.2"
		"CCB36FF8A8C03B4B" = "Azureus 2.5.0.4 / Vuze 3.0.5.0"
		"CCBA5A5986C77E43" = "Microsoft Edge (Chromium)"
		"CCC0FA1B9F86F7B3" = "CCleaner 5.15.5513 64-bit"
		"CD2ACD4089508507" = "AbsoluteTelnet 9.18 Lite"
		"CDF30B95C55FD785" = "Microsoft Office Excel 2007"
		"CF6379A9A987366E" = "Digibin 1.31"
		"CFAB0EC14B6F953"  = "Express NewsPictures 2.41 (Build 08.05.07.0)"
		"D2D0FC95675FB2C8" = "Microsoft Built-in Print Management (Win10)"
		"D5C3931CAAD5F793" = "Adobe Soundbooth CS5 (32-bit)"
		"D22AD6D9D20E6857" = "ALLPlayer 4.7"
		"D28EE773B2CEA9B2" = "3D-FTP 9.0 build 7"
		"D38A3EA7EC79FBED" = "LibreOffice 5.1.0.3 Writer"
		"D38ADEC6953449BA" = "Microsoft Office OneNote 2010 x64"
		"D53B52FB65BDE78C" = "Android Newsgroup Downloader 6.2"
		"D64D36B238C843A3" = "Microsoft Office InfoPath 2010 x86"
		"D97EFDF3888FE7EB" = "KeePass 2.31"
		"D838AAC097ABECE7" = "ACDSee Photo Manager 12 (Build 344)"
		"D3530C5294441522" = "HydraIRC 0.3.165"
		"D8081F151F4BD8A5" = "CuteFTP 8.3 Lite (Build 8.3.4.0007)"
		"D78150E0484A4E1D" = "Evernote 5.9.6.9494"
		"D460280B17628695" = "Java Binary"
		"DB3B8D985F0668E"  = "FreeFileSync 10.7"
		"DC64DE6C91C18300" = "Brosix Communicator 3.1.3 (Build 110719 nid 1)"
		"DD7C3B1ADB1C168B" = "Microsoft Game Bar"
		"DE48A32EDCBE79E4" = "Acrobat Reader 15.x"
		"E0F7A40340179171" = "imule 1.4.5 (rev. 749)"
		"E1D47CB031DAFB9F" = "BearShare 6.0.0.22717 / 8.1.0.70928 / 10.0.0.112380"
		"E2A593822E01AED3" = "Adobe Flash CS5 (32-bit)"
		"E6EF42224B845020" = "ALFTP 5.20.0.4"
		"E9A39DFBA105EA23" = "Faststone Image Viewer 4.6 / 5.5"
		"E31A6A8A7506F733" = "Image AXS Pro 4.1"
		"E73D9F534ED5618A" = "BitSpirit"
		"E76A4EF13FBF2BB1" = "Manolito 3.1.1"
		"E107946BB682CE47" = "Filezilla 3.5.1 / 3.16"
		"EA83017CDD24374D" = "IrfanView Thumbnails"
		"EAB25958DBDDBAA4" = "Binary News Reaper 2 (Beta 0.14.7.448)"
		"EBD8C95D87F25154" = "Carrier 2.5.5"
		"ECD1A5E2C3AF9C46" = "LibreOffice 5.1.0.3 Press"
		"ED7A5CC3CCA8D52A" = "CCleaner 1.32.345 / 1.41.544 / 2.36.1233 / 3.10.1525"
		"EDC786643819316C" = "HoneyView3 #5834"
		"EE0C103672A7A2B9" = "ManyCam 6.7.0"
		"EE462C3B81ABB6F6" = "Adobe Reader X 10.1.0"
		"EF606B196796EBB"  = "HP MediaSmart Photo"
		"EFBB2BF3C1D06466" = "Auslogics Disk Defrag 6.2.1.0"
		"F0C7BD3E0584A65A" = "InfraRecorder 0.53.0.0 32-bit"
		"F1A4C04EEBEF2906" = "[i2p] Robert 0.0.29 Preferences"
		"F001EA668C0AA916" = "Cabos 0.8.2"
		"F5E4E50707BCD215" = "Microsoft Message Analyzer 1.4"
		"F6FD5D99E2B6E178" = "LibreOffice 5.1.0.3 Draw"
		"F09B920BFB781142" = "Camfrog 4.0.47 / 5.5.0 / 6.1 (build 146) (JL support)"
		"F61B65550A84027E" = "iMesh 11.0.0.112351"
		"F91FD0C57C4FE449" = "ExpanDrive 2.1.0"
		"F214CA2DD40C59C1" = "FrostWire 4.20.9"
		"F0275E8685D95486" = "Microsoft Office Excel 2013 x86"
		"F0468CE1AE57883D" = "Adobe Reader 7.1.0"
		"F82607A219AF2999" = "Cyberduck 4.1.2 (Build 8999)"
		"F784591FF7F60F76" = "Microsoft Built-in Defragment and Optimize Drives (Win10)"
		"FA02AA2C575837A6" = "Microsoft Built-in Task Scheduler 1.0 (Win10)"
		"FA496FE13DD62EDF" = "KVIrc 3.4.2.1 / 4.0.4"
		"FA7144034D7D083D" = "Directory Opus 10.0.2.0.4269 (JL tasks supported)"
		"FAC3AA4105C6C466" = "Microsoft Built-in System Restore (Win7)"
		"FB1F39D1F230480A" = "Bopup Messenger 5.6.2.9178"
		"FC98C00F85D4CE77" = "EditPad Pro 8"
		"FE5E840511621941" = "JetAudio"
		"FF103E2CC310D0D"  = "Adobe Reader XI"
		"6274FF22C2061C60" = "Google PhotoViewer (Picasa)"
		"00098B0EF1C84088" = "fulDC 6.78"
		"03D877EC11607FE4" = "Thunderbird 6.0.2"
		"05E01ECAF82F7D8E" = "Scour Exchange 0.0.0.228"
		"070B52CF73249257" = "Sococo 1.5.0.2274"
		"0B3F13480C2785AE" = "Paint 6.1 (build 7601: SP1)"
		"0B48CE76EDA60B97" = "Shareaza 8.0.0.112300"
		"1A60B1067913516A" = "Psi 0.14"
		"1B4DD67F29CB1962" = "Windows Explorer Pinned and Recent."
		"1BC9BBBE61F14501" = "OneNote"
		"1BC392B8E104A00E" = "Remote Desktop Connection"
		"1C7A9BE1B15A03BA" = "Microsoft Snip & Sketch"
		"1C30573BDFCE4155" = "Zenmap GUI 6.49BETA4"
		"1CED32D74A95C7BC" = "Microsoft Visual Studio Code"
		"1D12F965B876DC87" = "Snagit 2021"
		"1DA3C90A72BF5527" = "Safari 4.0.5 (531.22.7) / 5.1 (7534.50)"
		"2A5A615382A84729" = "X-Chat 2 2.8.6-2"
		"2AA756186E21B320" = "RealTimeQuery 3.2"
		"2B53C4DDF69195FC" = "Zune x64"
		"2B164F512891AE37" = "NewsWolf NSListGen"
		"2B5841989B3857DA" = "RealVNC Server 5.3.0 64-bit (Chat)"
		"2CA2A1A69DC5465F" = "UltraVNC 1.2.1.0 Server Property Page"
		"2D1658D5DC3CBE2D" = "MySpaceIM 1.0.823.0 Beta"
		"2FA14C7753239E4C" = "Paint.NET 2.72 / 3.5.8.4081.24580"
		"3C355482CB54F75B" = "Microsoft.GetHelp"
		"3E4D62CF2C569BDF" = "MPC-HC (Media Player Classic - Home Cinema)"
		"3A5148BF2288A434" = "Secure FTP 2.6.1 (Build 20101209.1254)"
		"3B94415067DD2C5D" = "GOG Galaxy"
		"3BE7B307DFCCB58F" = "NiouzeFire 0.8.7.0"
		"3C0022D9DE573095" = "QuteCom 2.2"
		"3C309C17F7E8FFE1" = "GIMP 2.8.16"
		"3C3871276E149215" = "PowerShell 7"
		"3CF13D83B0BD3867" = "RevConnect 0.674p (based on DC++)"
		"3D877EC11607FE4"  = "Thunderbird 6.0.2"
		"3DF22B7648CEC4C1" = "TeamViewer 11.0.55321"
		"3F2CD46691BBEE90" = "GOIM 1.1.0"
		"3F97341A65BAC63A" = "Ozum 6.07 (Build 6070)"
		"4ACAE695C73A28C7" = "VLC 0.3.0 / 0.4.6"
		"4B632CF2CECEAC35" = "Robo-FTP Server 3.2.5"
		"4D7BDAEA55AD352"  = "PeaZip 6.0.0"
		"4D8BDACF5265A04F" = "The KMPlayer 2.9.4.1434"
		"4D72CFA1D0A67418" = "Newsgroup Image Collector"
		"4E0AC37DB19CBA15" = "Xfire 1.138 (Build 44507)"
		"4E538FDE985A3C01" = "Torch Browser 65.0.0.1614 (x86)"
		"4F24A7B84A7DE5A6" = "Palringo 2.6.3 (r45983)"
		"5E852F5F576F812C" = "MiTec JSON Viewer (JSONView.exe)"
		"5B7F3287093C1623" = "Total Commander 8.52a 64-bit"
		"5B72F67ADCCE9045" = "UltraVNC 1.2.1.0 Settings"
		"5D7B4175AFDCC260" = "Shareaza 2.0.0.0"
		"5D696D521DE238C3" = "Google Chrome"
		"5E01ECAF82F7D8E"  = "Scour Exchange 0.0.0.228"
		"5EA2A50C7979FBDC" = "TrustyFiles 3.1.0.22"
		"5F6E7BC0FB699772" = "Microsoft Office PowerPoint 2010 x64"
		"5F7B5F1E01B83767" = "Quick Access"
		"5F218922E0901EBF" = "MusicBee"
		"5FB817CD5A8CAD21" = "Google Drive"
		"5FD959F6FE6B8AE7" = "PuTTY 0.70 (x64)"
		"6DC04F5CCC522861" = "Microsoft.Windows.ShellExperienceHost"
		"6A8B377D0F5CB666" = "WinSCP 2.3.0 (Build 146)"
		"6AA18A60024620AE" = "GCN 2.9.1"
		"6BB54D82FA42128D" = "WinSCP 4.3.4 (Build 1428)"
		"6D2BAC8F1EDF6668" = "Microsoft Outlook 2013/2016/365"
		"6E9A79992DA9EA2"  = "Nokia PC Suite 7.1"
		"6E9D40A4C63BB562" = "Real Player Alternative 1.25 (Media Player Classic 6.4.8.2 / 6.4.9.0)"
		"6FEE01BD55A634FE" = "Smuxi 0.8.0.0"
		"7A7C60EFD66817A2" = "Spotnet 1.7.4"
		"7A8DB574299C8568" = "Windows Movie Maker 2012 (build 16.4.3528.0331)"
		"7B2B4F995B54387D" = "News Reactor 20100224.16"
		"7B4D500E147E4391" = "Tor Browser 8.0.4 (x64)"
		"7FD04185AF357BD5" = "UltraLeeacher 1.7.0.2969 / 1.8 Beta (Build 3490)"
		"8F4AE1DF7D39F816" = "X-Ways WinHex x64"
		"8A1C1C7C389A5320" = "Safari 3.2.3 (525.29)"
		"8B87640A40EC9FC"  = "Snagit 2020"
		"8BCE06A9E923E1F9" = "Slack 4.10.3"
		"8C816C711D66A6B5" = "MSN Messenger 6.2.0137 / 7.0.0820"
		"8E4E81D9ADC545B8" = "Microsoft Your Phone"
		"8EAFBD04EC8631CE" = "VMware Workstation 9/11 x64"
		"8FB5CE5E2B049CE"  = "Windows Defender (Win10 built-in)"
		"8FDB062F1E486CAC" = "Microsoft Powerpoint 2013 32-bit"
		"9A3BDAE86D5576EE" = "WinSCP 3.2.1 (Build 174) / 3.8.0 (Build 312)"
		"9A165F62EDBFA161" = "Microsoft Store"
		"9C7CC110FF56D1BD" = "Microsoft Office PowerPoint 2010 x86"
		"9C08AD74AD8708DF" = "Microsoft Publisher 2016 64-bit"
		"9D91276B0BE3E46B" = "Windows Help and Support (Built-in) Win7"
		"9DACEBAA9AC8CA4E" = "TLNews Newsreader 2.2.0 (Build 2430)"
		"9EFF0B23D51FE003" = "XMind 201807140020"
		"9F03AE476AD461FA" = "GroupsAloud 1.0"
		"9F5C7755804B850A" = "Windows Script Host - wscript.exe (64-bit)"
		"9FDA41B86DDCF1DB" = "VLC Media Player"
		"10F5A20C21466E85" = "FTP Voyager 15.2.0.17"
		"12DC1EA8E34B5A6"  = "Microsoft Paint"
		"13D1F3EA8D0E7308" = "Tracker Software PDF-Xchange Viewer"
		"16D71406474462B5" = "Snagit Editor 12.4.1"
		"16EC093B8F51508F" = "Opera 8.54 build 7730 / 9.64 build 10487 / 11.50 build 1074"
		"16F2F0042DDBE0E8" = "Windows Terminal"
		"17D3EB086439F0D7" = "TrueCrypt 7 x64"
		"19CCEE0274976DA8" = "mIRC 4.72 / 5.61"
		"23EF200CA6364EFF" = "Oracle VM VirtualBox 5.0.16"
		"23F08DAB0F6AAF30" = "SoMud 1.3.3"
		"27DA120D7E75CF1F" = "pbFTPClient 6.1"
		"36C36598B08891BF" = "Vovox 2.5.3.4250"
		"40F2ACA05D8A33F2" = "Minitab 16"
		"44A3621B32122D64" = "Microsoft Office Word 2010 x64"
		"46E77B87767B92"   = "Opera Browser 75"
		"46F433176BC0B3D2" = "WinRAR 5.30 beta 64-bit"
		"49B5EDBD92D8CD58" = "FTP Commander 8.02"
		"51DCEBA79099D8D2" = "Sapien PowerShell Studio"
		"54C803DFC87B52BA" = "Nettalk 6.7.12"
		"56C5204009D2B915" = "uTorrent 3.5.5"
		"62BFF50B969C2575" = "Quintessential Media Player 5.0"
		"62DBA7FB39BB0ADC" = "Yahoo Messenger"
		"70B52CF73249257"  = "Sococo 1.5.0.2274"
		"73CE3745A843C0A4" = "FrostWire 5.1.4"
		"74D7F43C1561FC1E" = "Windows Media Player 12"
		"74EA779831912E30" = "Skype 7"
		"86B804F7A28A3C17" = "Miranda IM 0.6.8 / 0.7.6 / 0.8.27 / 0.9.9 / 0.9.29"
		"90E5E8B21D7E7924" = "Winamp 3.0d (Build 488)"
		"92F1D5DB021CD876" = "NewsLeecher 4.0 / 5.0 Beta 6"
		"93B18ADF1D948FA3" = "qutIM 0.2"
		"98AAEA517363A6FA" = "Microsoft.DiagnosticDataViewer"
		"98B0EF1C84088"    = "fulDC 6.78"
		"99C15CF3E6D52B61" = "mldonkey 3.1.0"
		"135DF2A440ABE9BB" = "SoulSeek 156c"
		"186B5CCADA1D986B" = "NewsGrabber 3.0.36"
		"292A746334889A7E" = "SQLiteSpy 1.9.13"
		"315E29A36E961336" = "Roboform 7.8"
		"337ED59AF273C758" = "Microsoft Sticky Notes"
		"352FD027C0E8F0E5" = "Zoom"
		"387D72EB9C9AA960" = "UltraVNC 1.2.1.0 Launcher"
		"409B67100697BCC0" = "Revo Uninstaller Pro 3.1.5"
		"431A5B43435CC60B" = "Python (.pyc)"
		"435A2F986B404EB7" = "SmartFTP 4.0.1214.0 / 7.0.2200.0"
		"447E6AA2BBDFBC8A" = "Slack 4.11.3"
		"466D339D8F21CFBF" = "Microsoft Snip & Sketch"
		"469E4A7982CEA4D4" = "Microsoft Windows Wordpad"
		"490C000889535727" = "WinMX 4.9.3.0"
		"497F749B9F1A5D16" = "Microsoft.GamingApp"
		"497B42680F564128" = "Zoner PhotoStudio 13 (Build 7)"
		"500B8C1D5302FC9C" = "Python (.pyw)"
		"521A29E5D22C13B4" = "Skype"
		"550ABC1CB58EB92C" = "VeraCrypt 1.16 / 1.19 x64"
		"590AEE7BDD69B59B" = "Windows Powershell 5.0 x64"
		"624C8EB4922C2308" = "Modern CSV"
		"770ECEBB12DFF1CA" = "Microsoft.Windows.CloudExperienceHost"
		"776BEB1FCFC6DFA5" = "Thunderbird 1.0.6 (20050716) / 3.0.2"
		"817BB211C92FD254" = "GOM Player 2.0.12.3375 / 2.1.28.5039"
		"884FD37E05659F3A" = "VZOchat 6.3.5"
		"888F2FA044591EDA" = "Twitter - Trusted Microsoft Store App (Win10)"
		"918E0ECB43D17E23" = "Notepad (32-bit)"
		"939C10C2C101C1B0" = "Stickies 9.0d"
		"954EA5F70258B502" = "Windows Script Host - wscript.exe (32-bit)"
		"971CC6AD207F36CB" = "PaintShopPro (X9)"
		"2544FF74641B639D" = "WiseFTP 6.1.5"
		"3168CC975B354A01" = "Slypheed 3.1.2 (Build 1120)"
		"3461E4D1EB393C9C" = "WTW 0.8.18.2852 / 0.8.19.2940"
		"3594AAB44BCA414B" = "Windows Photo Viewer"
		"3866FF352D7719E1" = "Paint.NET 4.0.9"
		"4278D3DC044FC88A" = "Gaim 1.5.0"
		"4700FF5AE80A6713" = "PDFCreator 2.2"
		"6728DD69A3088F97" = "Windows Command Processor - cmd.exe (64-bit)"
		"7192F2DE78FD9E96" = "TIFNY 5.0.3"
		"7593AF37134FD767" = "RealPlayer 6.0.6.99 / 7 / 8 / 10.5"
		"7937DF3C65790919" = "FTP Explorer 10.5.19 (Build 001)"
		"9027FE24326910D2" = "Thunderbird 38.6.0"
		"9149D0F5EBF7F710" = "Microsoft Outlook (15)"
		"9390EE5B658E96E"  = "PuTTY 0.72 / 0.73"
		"14354E216395983A" = "Remote Desktop Manager 2.1.0.0 FREE"
		"18434D518C3A61EB" = "Minitab 17"
		"20513CDF29D09C0E" = "Hex Editor Neo"
		"23709F6439B9F03D" = "Hex Editor Neo 5.14"
		"28493D9D08E13AA6" = "UltraVNC Viewer 1.2.1.0"
		"50620FE75EE0093"  = "VMware Player"
		"67730E20CF5D43F7" = "MiTec JSON Viewer (JSONView.exe)"
		"69639DF789022856" = "Google Chrome 86.0.4240.111"
		"79370F660AB51725" = "UploadFTP 2.0.1.0"
		"411447F7DE177C68" = "Windows DVD Maker 64-bit (Win7)"
		"669967F27AFDEBEC" = "NirSoft PstPassword 1.20 (x86)"
		"777483D3CDAC1727" = "Gajim 0.14.4"
		"792699A1373F1386" = "Piolet 3.1.1"
		"959668A81D4F220E" = "Sublime Text 3.2.1 (Build 3207)"
		"969252CE11249FDD" = "Mozilla Firefox 40.0 / 44.0.2"
		"7904145AF324576E" = "Total Commander 7.56a (Build 16.12.2010) / 8.52a 32-bit"
		"8211531A7918B389" = "Newsbin Pro 6.00 (Build 1019) (JL support)"
		"43578521D78096C6" = "Windows Media Player Classic Home Cinema 1.3 (32-bit)"
		"573770283DC3D854" = "Microsoft Windows SecHealthUI (Defender)"
		"37392221756DE927" = "RealPlayer SP 12"
		"134620458666CCB0" = "TeraCopy 2.3 64-bit"
		"290532160612E071" = "WinRAR 2.90 / 3.60 / 4.01 x64"
		"A61657A5E5DFBDC"  = "Microsoft.WindowsNotepad"
		"CF02284227526D80" = "Powershell ISE"
		"DFE3790E91D3A22F" = "Tracker Software PDF-XChange Editor"
		"F1DFE90245A04467" = "MPC-BE 64 (Media Player Classic - Black Edition)"
		"F7699CF2EED599AC" = "Microsoft.SecHealthUI"
		"F039446000B1B829" = "SweetScape 010 Editor"
		"FBB3E7490BA71A30" = "SQLite Expert"
		"A0D6B1B874C6E9D2" = "TOR Browser 6.0.2"
		"A2B95CA27B6C33D9" = "Windows Live Photo Gallery"
		"A2C73C383525F1BB" = "RealVNC Viewer 5.3.0 64-bit"
		"A4A5324453625195" = "Microsoft Office Word 2013 x86"
		"A4DEF57EE99D77E9" = "Nomad News 1.43"
		"A6D4DFEC09C69409" = "Microsoft Word Viewer 11.8169.8172"
		"A7BD71699CD38D1C" = "Microsoft Office Word 2010 x86"
		"A8C43EF36DA523B1" = "Microsoft Office Word 2003 Pinned and Recent."
		"A10B45ADB36C1D27" = "PST Walker 5.54"
		"A18DF73203B0340E" = "Microsoft Word 2016"
		"A028C9DB28AA15A3" = "Piriform Defraggler 2.20.989 64-bit"
		"A52B0784BD667468" = "Microsoft.Windows.Photos"
		"A55ED4FBB973AEFB" = "Microsoft Teams"
		"A581B8002A6EB671" = "WiseFTP 5.5.9"
		"AA11F575087B3BDC" = "Unzbin 2.6.8"
		"AD57BD0F4825CCE"  = "WinRAR 6.01 Russian 64 bit"
		"ADECFB853D77462A" = "Microsoft Office Word 2007 Pinned and Recent."
		"AE3F2ACD395B622E" = "QuickTime Player 6.5.1 / 7.0.3 / 7.5.5 (Build 249.13)"
		"AE069D21DF1C57DF" = "mIRC 6.35 / 7.19"
		"AEDD2DE3901A77F4" = "Pidgin 2.0.0 / 2.10.0 / 2.7.3"
		"AF0FDD562E3F275B" = "Snagit 2020"
		"B3F13480C2785AE"  = "Paint 6.1 (build 7601: SP1)"
		"B06A975B62567622" = "Windows Live Messenger 8.5.1235.0517 BETA"
		"B8C13A5DD8C455A2" = "Titan FTP Server 8.40 (Build 1338)"
		"B17D3D0C9CA7E29"  = "Google Picasa 3.8 / 3.9"
		"B39BC6B590F53961" = "HexChat 2.10.2 32-bit"
		"B48CE76EDA60B97"  = "Shareaza 8.0.0.112300"
		"B50EE40805BD280F" = "QuickTime Alternative 1.9.5 (Media Player Classic 6.4.9.1)"
		"B77EF7F3FC946302" = "Pale Moon Browser 26.1.1 (32-bit)"
		"B0459DE4674AAB56" = "Windows Virtual PC - vmwindow.exe (32- and 64-bit)"
		"B6267F3FCB700B60" = "WiseFTP 4.1.0"
		"B08971C77377BDE3" = "Microsoft Visual Studio Community/Enterprise 2015"
		"B74736C2BD8CC8A5" = "WinZip 15.5"
		"B91050D8B077A4E8" = "Windows Media Center"
		"BAACB5294867B833" = "Notepad++ 7.8.6"
		"BAC8A6B507360131" = "Remote Desktop Connection Manager 2.2"
		"BC0C37E84E063727" = "Windows Command Processor - cmd.exe (32-bit)"
		"BD050AC447F6CD65" = "Microsoft Xbox App"
		"BD249197A6FAEFF2" = "Windows Live Messenger 2011"
		"BE71009FF8BB02A2" = "Microsoft Office Outlook x86"
		"BEC10D3AAF939FFA" = "Pale Moon Browser 26.1.1 (64-bit)"
		"BF9AE1F46BD9C491" = "Nimbuzz 2.0.0 (rev 6266)"
		"BFE841F4D35C92B1" = "QuadSucker/News 5.0"
		"C1EECE5026414C64" = "Recuva 1.52.1086 (64-bit)"
		"C5C24A503B1727DF" = "XnView 1.98.2 Small / 1.98.2 Standard / 2.35"
		"C7A4093872176C74" = "Paint Shop Pro Pinned and Recent."
		"C8AA3EAEE3D4343D" = "Trillian 0.74 / 3.1 / 4.2.0.25 / 5.0.0.35 (JL support)"
		"C31B3D36438B5E2C" = "Visual Studio Enterprise 2017 Version 15.9.10"
		"C54B96F328BDC28D" = "WiseFTP 7.3.0"
		"C71EF2C372D322D7" = "PGP Desktop 10"
		"C91D08DCFC39A506" = "SM Player 0.6.9 r3447"
		"C98AB5CCF25DDA79" = "NewsShark 2.0"
		"C99DDDE925D26DF3" = "Robo-FTP 3.7.9 CronMaker"
		"C01827D56FF89056" = "Microsoft Sticky Notes"
		"C5236FD5824C9545" = "PLAYXPERT 1.0.140.2822"
		"C9950C443027C765" = "WinZip 9.0 SR-1 (6224) / 10.0 (6667)"
		"CA1EB46544793057" = "RetroShare 0.5.2a (Build 4550)"
		"CAEA34D2E74F5C8"  = "uTorrent 3.4.7"
		"CB1D97ACA3FB7E6B" = "Newz Crawler 1.9.0 (Build 4100)"
		"CB984E3BC7FAF234" = "NewsRover 17.0 (Rev.0)"
		"CB996A858D7F15C"  = "PDF Architect 4.0.09.25450 64-bit"
		"CBEB786F0132005D" = "VLC 0.7.2"
		"CC4B36FBFB69A757" = "gtk-gnutella 0.97"
		"CCA6383A507BAC64" = "Gadu-Gadu 10.5.2.13164"
		"CD8CAFB0FB6AFDAB" = "uTorrent 1.7.7 / 1.8.5 / 2.0 / 2.21 / 3.0"
		"CD40EAD0B1EB15AB" = "NNTPGrab 0.6.2"
		"CDB6F0C373F2DA0F" = "stunnel 5.31"
		"CFB56C56FA0F0A54" = "Mozilla 0.9.9"
		"D1FC019238236806" = "Newsgroup Commander Pro 9.05"
		"D3C5CF21E86B28AF" = "SeaMonkey 2.3.3"
		"D4A589CAB4F573F7" = "Microsoft Project 2010 x86"
		"D5C02FC7AFBB3FD4" = "NNTPGrab 0.6.2 Server"
		"D7D647C92CD5D1E6" = "uTalk 2.6.4 r47692"
		"D7DB75DB9CDD7C5D" = "Xnews 5.04.25"
		"D33ECF70F0B74A77" = "Google Picasa 2.2.0"
		"D93F411851D7C929" = "Windows Powershell 5.0 32-bit"
		"D249D9DDD424B688" = "Google Chrome 81.0.4044.138"
		"D0261ED6E16B200B" = "News File Grabber 4.6.0.4"
		"D00655D2AA12FF6D" = "Microsoft Office PowerPoint 2016 x64"
		"D7666C416CBA240C" = "NewsMan Pro 3.0.5.2"
		"D8671C1ED93C75C8" = "Tor Browser 5.5.2"
		"D41746B133D17456" = "Tkabber 0.11.1"
		"D356105FAC5527EF" = "Steam 1/22/2021"
		"D7528034B5BD6F28" = "Windows Live Mail Pinned and Recent."
		"DA7E8DE5B8273A0F" = "Yahoo Messenger 5.0.0.1226 / 6.0.0.1922"
		"DBA909A61476CCEC" = "NewsWolf 1.41"
		"DD658A07478B46C2" = "PIRCH98 1.0.1.1190"
		"DE76415E0060CE13" = "Noworyta News Reader 2.9"
		"DEE18F19C7E3A2EC" = "PopNote 5.21"
		"E4BD2558BFAB368D" = "UltraDefrag 7.0.0"
		"E6EA77A1D4553872" = "Gnucleus 1.8.6.0"
		"E6EE34AC9913C0A9" = "VLC 0.6.2"
		"E26F61AFB0824F2E" = "Photoshop CC 2015"
		"E30BBEA3E1642660" = "Neebly 1.0.4"
		"E36BFC8972E5AB1D" = "XPS Viewer"
		"E40CB5A291AD1A5B" = "Songbird 1.9.3 (Build 1959)"
		"E42A8E0F4D9B8DCF" = "Sysax FTP Automation 5.15"
		"E57CFC995BDC1D98" = "Snagit 11"
		"E70D383B15687E37" = "Notepad++ 5.6.8 / 6.6.7"
		"E93DBDCEDE8623F2" = "Pandion 2.6.106"
		"E0532B20AA26A0C9" = "QQ International 1.1 (2042)"
		"E0246018261A9CCC" = "qutIM 0.2.80.0"
		"EB7E629258D326A1" = "WindowWasher 6.6.1.18"
		"EB3300E672136BC7" = "Stream Reactor 1.0 Beta 9 (uses VLC!)"
		"EC3E36AF0CDCB3E1" = "Steam build 2/4/2016"
		"ECD21B58C2F65A2F" = "StealthNet 0.8.7.9"
		"ECDD9154E84D5544" = "Wickr Top Secret Messenger Desktop 2.3.5"
		"ED49E1E6CCDBA2F5" = "GNUnet 0.8.1a"
		"EF473FAB8120B354" = "uTorrent 3.5.5"
		"EFB08D4E11E21ECE" = "Paltalk Messenger 10.0 (Build 409)"
		"F01B4D95CF55D32A" = "Microsoft Windows Explorer"
		"F2CB1C38AB948F58" = "X-Chat 1.8.10 / 2.6.9 / 2.8.9"
		"F5AC5390B9115FDB" = "Microsoft Office PowerPoint 2007"
		"F64DE962764B9B0F" = "FTPRush 1.1.3 / 2.15"
		"F92E607F9DE02413" = "RealPlayer 14.0.6.666"
		"F674C3A77CFE39D0" = "Winamp 2.95 / 5.1 / 5.621 / 5.666"
		"F18460FDED109990" = "Windows Windows ms-settings"
		"F920768FE275F7F4" = "Grabit 1.5.3 / 1.6.2 / 1.7.2"
		"FAEF7DEF55A1D4B"  = "VLC 2.2.6"
		"FB3B0DBFEE58FAC8" = "Microsoft Office Word 2016/365 x64"
		"FB7CA8059B8F2123" = "ooVoo 3.0.7.21"
		"FB230A9FE81E71A8" = "Yahoo Messenger 11.0.0.2014-us"
		"FC999F29BC5C3560" = "Robo-FTP 3.7.9"
		"FD1AD55E472F20E0" = "Google Earth Pro 7.3.2.5491"
		"FDBACA0A1FCE6055" = "MozBackup 1.5.1"
		"FDBD48D45512DFFC" = "Photoshop 7"
		"FE8BB4692DE7B989" = "Smart Defrag 4.3.0.847"
		"FE9E0F7260000A12" = "RealVNC Server 5.3.0 64-bit (Connect+File Transfer)"
		"FE57F5DF17B45FE"  = "Wireshark 2.6.3"
		"FF99BA2FB2E34B73" = "Microsoft Windows Calculator"
		"FF224628F0E8103C" = "Morpheus 3.0.3.6"
		"14A48FBE3D43239A" = "Windows System Information(msinfo32.exe)"
		"9B9CDC69C1C24E2B" = "Windows Notepad x64 (Notepad.exe)"
		"47592B67DD97A119" = "Windows Notepad x32 (Notepad.exe)"
		"122C907C4DC5911F" = "Mozilla Firefox x32"
		"18FA158A64C9508A" = "Mozilla Firefox x32"
		"33A00252C0FA56DE" = "Mozilla Firefox x32"
		"6B8904E2B6864F0F" = "Mozilla Firefox x32"
		"31B6EBFFF794EF0D" = "Opera Browser (Opera.exe)"
		"A712C324879904B1" = "Malwarebytes (assistant.exe)"
		"B916037C1E115FE0" = "Microsoft Skype (Microsoft.SkypeApp_15)"
		"647853318C96DFA5" = "Microsoft.Windows.Cortana"
		"4B5F45DE9912DE53" = "Microsoft.Office.Desktop.Access_16xxx"
		"1F1F846F76251EA8" = "Microsoft.Office.Desktop.Word_16xxx"
		"3FE28476179FF940" = "Turnipsoft Freda (ebook reader)"
		"40371339AD31A7E6" = "Mozilla Firefox x64"
		"58BEE77C49899591" = "Apple iTunes 12xxx x64"
		"59FE1486D27AA9D0" = "Electronic Arts Origin"
		"607258D66273FF4D" = "Microsoft Edge"
		"6DA48F37C95D6E1"  = "Google Chrome"
		"6F4D358E50595AC1" = "Emsisoft Anti-Malware (a2start.exe)"
		"95962CD8E90977CA" = "Emsisoft Anti-Malware (a2start.exe)"
		"78AA210563284496" = "Windows Performance Toolkit (wpa.exe)"
		"8DE2636CECD37184" = "MusicBee"
		"D014C0BE50851F63" = "MusicBee 3.4.2.0 x86"
		"C08DDE8C94C16B10" = "Cyberlink PowerDVD 18"
		"D788E8BC973B89E9" = "PKWARE PKZIP for Windows 14"
		"EA64CE14E5470C33" = "Microsoft.PowerShell_7.2.1.0 x64"
		"F2D2624B34821C85" = "Opera Browser (Opera.exe)"
		"69BACC0499D41C4"  = "Microsoft Excel 12"
		"B50F4A1D866B4B05" = "Microsoft.Office.Word 16xxx x64"
		"CE0E7345DE1F1E26" = "Microsoft.Windows.PrintQueueActionCenter 1.0.1.0"
		"CF0C5B2C9773BFA4" = "IDA Pro x64"
		"DFC4675A96730EDE" = "Microsoft.WindowsFeedbackHub x64"
		"399FB4899502F372" = "Mozilla Firefox"
		"3476342AAB319002" = "Mozilla Firefox"
		"4D202CABC6786CF7" = "Opera Browser"
		"2A64B26BD99F0D16" = "Shareaza"
		"A850D8ED37504C7C" = "Microsoft.Windows.Cortana"
		"B2A0DF3F22CEC7E0" = "Microsoft.People_10"
		"A97085EBDC30067F" = "microsoft.windowscommunicationsapps"
		"4DDE7D7A7DFC5F29" = "VSCodium"
		"F8F05350C84C9D76" = "Mozilla Thunderbird"
		"4D939776340F1D18" = "LibreOffice Writer"
		"E7F34DEE82980C52" = "LibreOffice Calc"
		"14A989D191548BBC" = "Cyberlink PowerDVD16"
		"2BCEF060ACE5A6DB" = "NordVPN"
		"B8A48BFB1F2F0C8D" = "NordVPN"
		"9E312F4ADEE9107"  = "Opera Browser"
		"43929AE4535C8DEA" = "Microsoft.SkypeApp 15 x86"
		"69D97CDC8D4D5043" = "Microsoft.windowscommunicationsapps"
		"34B9A7AD69FF9C1B" = "Microsoft Access"
		"436EB6EB1BD9F03F" = "Microsoft Visio 15"
		"53F58609D680CDBC" = "Isobuster"
		"58A5AF636F485FF2" = "RegistryExplorer"
		"603EAABE372FB7EE" = "CorelDraw 17"
		"60536F49B49E4689" = "Microsoft XmlNotepad 2007"
		"D992BCC31B3E5727" = "Opera Browser"
	}
	
	# There is a shell API for the SHOpenWithDialog function
	Add-Type -TypeDefinition @'

    using System;
    using System.Runtime.InteropServices;

    public class ShellOpenWith {

        [DllImport("shell32.dll", EntryPoint = "SHOpenWithDialog", CharSet = CharSet.Unicode)]
        private static extern int SHOpenWithDialog(IntPtr hWndParent, ref tagOPENASINFO oOAI);

        // http://msdn.microsoft.com/en-us/library/windows/desktop/bb773363(v=vs.85).aspx
        private struct tagOPENASINFO
        {
            [MarshalAs(UnmanagedType.LPWStr)]
            public string cszFile;

            [MarshalAs(UnmanagedType.LPWStr)]
            public string cszClass;

            [MarshalAs(UnmanagedType.I4)]
            public tagOPEN_AS_INFO_FLAGS oaifInFlags;
        }

        [Flags]
        private enum tagOPEN_AS_INFO_FLAGS
        {
            OAIF_ALLOW_REGISTRATION =  0x00000001,   // Show "Always" checkbox
            OAIF_REGISTER_EXT =    0x00000002,   // Perform registration when user hits OK
            OAIF_EXEC =        0x00000004,   // Exec file after registering
            OAIF_FORCE_REGISTRATION =  0x00000008,   // Force the checkbox to be registration
            OAIF_HIDE_REGISTRATION =   0x00000020,   // Vista+: Hide the "always use this file" checkbox
            OAIF_URL_PROTOCOL =    0x00000040,   // Vista+: cszFile is actually a URI scheme; show handlers for that scheme
            OAIF_FILE_IS_URI =     0x00000080    // Win8+: The location pointed to by the pcszFile parameter is given as a URI
        }

        public static void DoOpenFileWith(string sFilename, IntPtr hwndParent = new IntPtr())
        {
            tagOPENASINFO oOAI = new tagOPENASINFO();
            oOAI.cszFile = sFilename;
            oOAI.cszClass = String.Empty;
            oOAI.oaifInFlags = tagOPEN_AS_INFO_FLAGS.OAIF_ALLOW_REGISTRATION | tagOPEN_AS_INFO_FLAGS.OAIF_EXEC;
            SHOpenWithDialog(hwndParent, ref oOAI);
        }    
    }
'@
	
	function get-files
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			$Folder
		)
	
		try
		{
			$Status.Text = "Please wait ..."
			$dirFiles = [System.IO.Directory]::GetFiles("$($Folder)", "*", 'AllDirectories').Where{ $_.EndsWith('.lnk') -or $_.EndsWith('customDestinations-ms')  -or $_.EndsWith('automaticDestinations-ms') -or $_.EndsWith('TEMP')}
			# Get File Properties
			$files = @(foreach ($file in $dirFiles)
				{
					[System.Windows.Forms.Application]::DoEvents()
					
					# Replace known AppID with it's Name
					$fname = Split-Path -Path $file -leaf
					$AppName = $null
					$AppName = foreach ($i in $AppIDs.Keys)
					{
						 if ( $fname -match "$($i)" )
						{
							$AppIDs[$i].ToString()
							break
						}	
					} # ende for each Appid
				
					[PSCustomObject][Ordered]@{
							'FileName'          = $file
							'Name'	            = $fname
							'AppName'	        = $AppName
							'Parent'            = Split-Path -Path $file -Parent
							'CreationTimeUtc'   = [system.IO.File]::GetCreationTimeUtc($file).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
							'LastAccessTimeUtc' = [system.IO.File]::GetLastAccessTimeUtc($file).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
							'LastWriteTimeUtc'  = [system.IO.File]::GetLastWriteTimeUtc($file).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
							'Attributes'        = [system.IO.File]::GetAttributes($file)
							'Size'	            = [System.IO.FileInfo]::new($file).Length
						}
					
				} # end for each
			)
		} # end try
		catch { $files = $null }
		
		if ($files.Count -ge 1)
		{
			$Status.Text = "LNK/*-ms Files: $($files.count) "
			Add-fileNodes -Files $files -RootFolder "$($Folder)"
			return $true
		}
		else
		{
			$Status.Text = "NO LNK/*-ms Files found in $($Folder)"
			[System.Console]::Beep(500, 150)
			return $false
		}
		
	}
	
	function Add-Directories
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$RootNode,
			[Parameter(Mandatory = $true)]
			$Directories
		)
		
		foreach ($Directory in $Directories)
		{
			$lastNode = $null
			$subPathAgg = ""
			foreach ($subPath in $Directory.split('\\'))
			{
				$subPathAgg += ($subPath + '\')
				$nodes = $RootNode.Nodes.Find($subPathAgg.TrimEnd('\'), $true)
				if ($nodes.Length -eq 0)
				{
					if ($lastNode -eq $null)
					{
						$lastNode = $RootNode.Nodes.Add($subPathAgg.TrimEnd('\'), $subPath)
						$lastNode.TooltipText = "$($subPathAgg.TrimEnd('\'))"
						$lastNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
						$lastNode.ForeColor = 'DodgerBlue'
					}
					else
					{
						$lastNode = $lastNode.Nodes.Add($subPathAgg.TrimEnd('\'), $subPath)
						$lastNode.TooltipText = "$($subPathAgg.TrimEnd('\'))"
						$lastNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
						$lastNode.ForeColor = 'DodgerBlue'
					}
				}
				else
				{
					$lastNode = $nodes[0]
					$lastNode.TooltipText = "$($subPathAgg.TrimEnd('\'))"
					$lastNode.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
					$lastNode.ForeColor = 'DodgerBlue'
				}
			}
		}
	}
	
	
	function Add-fileNodes
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory = $true)]
			$Files,
			[Parameter(Mandatory = $true)]
			$RootFolder
		)
		
		$treeview1.BeginUpdate()
		$treeview1.Nodes.Clear()
		
		$rootfoldername = Split-Path -Path $RootFolder -Leaf
		$Root = $treeview1.Nodes.Add("$($RootFolder)", "$($RootFolder)")
		$Root.NodeFont = New-Object Drawing.Font($treeview1.Font, [Drawing.FontStyle]::Bold)
		$Root.ForeColor = 'DarkTurquoise'
		#	$Root.ImageIndex = 0
		
		if ($files.Count -ge 1)
		{
			# Get Directories
			$dirs = foreach ($dir in $Files.Filename)
			{
				$dir = split-path -path $dir -Parent
				try { $dir.Replace("$(Split-Path -path $RootFolder -Parent)", '').Trimstart("\") }
				catch{continue}
			}
			$dirs | sort -Unique
			# Add Directories
			if ($dirs.count -ge 1)
			{
				Add-Directories -RootNode $Root -Directories $dirs
			}
			else
			{
				$treeview1.EndUpdate()
				[gc]::Collect()
				return
			}
					
			# Add Files
			foreach ($file in $files)
			{
				$fname = $file.Name
				$parent = Split-Path $file.Filename -Parent
				try	{ 	$filep = $parent.Replace("$(Split-Path -path $RootFolder -Parent)", '').Trimstart("\") 	}
				catch{ continue}
				$node = $Root.Nodes.Find("$($filep)",$true)
				if (!!$node) { $parentnode = $node[0] }	else{ $parentnode = $RootFolder}
				
				# Add File
				$filenode = $ParentNode.Nodes.Add("$($file.Filename)", "$($fname)")
				$filenode.Tag = "$($file.Filename)"
				
				if ($file.AppName -ne $null)
				{
					$filenode.ToolTipText = "$($file.AppName)"
					$filenode.ForeColor = 'LightGreen'
					$AppNameNode = $filenode.Nodes.Add("AppName", "AppName: $($file.AppName)")
					$AppNameNode.ForeColor = 'Yellow'
				}
				
				if ($file.Size -lt 76)
				{
					$filenode.ForeColor = 'DimGray'
					$filenode.Tooltiptext = "$($file.Name) is too small"
				}
				# Get FS Properties
				try
				{
					$CreationTimeUtc = $file.CreationTimeUtc
					$LastAccessTimeUtc = $file.LastAccessTimeUtc
					$LastWriteTimeUtc = $file.LastWriteTimeUtc
					$Attributes = $file.Attributes
					$Length = $file.Size
					
					# Add Child Nodes
					$null = $filenode.Nodes.Add("CreationTimeUtc", "CreationTimeUtc: $($CreationTimeUtc)")
					$null = $filenode.Nodes.Add("LastAccessTimeUtc", "LastAccessTimeUtc: $($LastAccessTimeUtc)")
					$null = $filenode.Nodes.Add("LastWriteTimeUtc", "LastWriteTimeUtc: $($LastWriteTimeUtc)")
					$null = $filenode.Nodes.Add("Attributes", "Attributes: $($Attributes) ")
					$null = $filenode.Nodes.Add("Length", "File Size: $($Length)")
				}
				catch { $null }
				
				<#$Root.Nodes["$($file.Filename)"].Nodes["CreationTimeUtc"].ImageIndex = 3
				$Root.Nodes["$($file.Filename)"].Nodes["LastAccessTimeUtc"].ImageIndex = 3
				$Root.Nodes["$($file.Filename)"].Nodes["LastWriteTimeUtc"].ImageIndex = 3
				$Root.Nodes["$($file.Filename)"].Nodes["Attributes"].ImageIndex = 3
				$Root.Nodes["$($file.Filename)"].Nodes["Length"].ImageIndex = 3
				$Root.Nodes["$($file.Filename)"].Nodes["CreationTimeUtc"].SelectedImageindex = 2
				$Root.Nodes["$($file.Filename)"].Nodes["LastAccessTimeUtc"].SelectedImageindex = 2
				$Root.Nodes["$($file.Filename)"].Nodes["LastWriteTimeUtc"].SelectedImageindex = 2
				$Root.Nodes["$($file.Filename)"].Nodes["Attributes"].SelectedImageindex = 2
				$Root.Nodes["$($file.Filename)"].Nodes["Length"].SelectedImageindex = 3#>
			}
		}
		
		
		$treeview1.EndUpdate()
		if (!!$treeview1.Nodes)
		{
			$treeview1.Nodes[0].Expand()
		}else{[System.Console]::Beep(500,150)}
		$Status.Text = 'Ready'
	}
	
	function Process-Link
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$File
		)
		# Clear tree
		$treeview2.Nodes.Clear()
		
		# Get File Size
		$fname = Split-Path -Path "$($File)" -Leaf
		try { $fs = [io.FileInfo]::new("$($File)").Length }
		catch
		{
			$Status.Text = "Can not get the File Size of $($fname)"
			[System.Console]::Beep(500, 150)
			return
		}
		
		if ($fs -lt 76) # Minimum Header Size (0x4C = 76)
		{
			$Status.Text = "$($fname) is too small"
			[System.Console]::Beep(500,150)
			return
		}
		
		# Link Flags 
		$LinkFlagsTT = [Ordered]@{
			"HasLinkTargetIDList"		  = "ShellLinkHeader is followed by a LinkTargetIDList structure"
			"HasLinkInfo"				  = "LinkInfo in file"
			"HasName"					  = "NAME_String in file"
			"HasRelativePath"			  = "RELATIVE_PATH in file"
			"HasWorkingDir"			      = "WORKING_DIR in file"
			"HasArguments"			      = "COMMAND_LINE_ARGUMENTS"
			"HasIconLocation"			  = "ICON_LOCATION"
			"IsUnicode"				      = "Strings are in unicode"
			"ForceNoLinkInfo"			  = "LinkInfo is ignored"
			"HasExpString"			      = "The shell link is saved with an EnvironmentVariableDataBlock"
			"RunInSeparateProcess"	      = "Target runs in a 16-bit virtual machine"
			"HasDarwinID"				  = "The shell link is saved with a DarwinDataBlock"
			"RunAsUser"				      = "The application is run as a different user when the target of the shell link is activated"
			"HasExpIcon"				  = "The shell link is saved with an IconEnvironmentDataBlock"
			"NoPidlAlias"				  = "The file system location is represented in the shell namespace when the path to an item is parsed into an IDList"
			"RunWithShimLayer"		      = "The shell link is saved with a ShimDataBlock"
			"ForceNoLinkTrack"		      = "The TrackerDataBlock is ignored"
			"EnableTargetMetadata"	      = "The shell link attempts to collect target properties and store them in the PropertyStoreDataBlock when the link target is set"
			"DisableLinkPathTracking"	  = "The EnvironmentVariableDataBlock is ignored"
			"DisableKnownFolderTracking"  = "The SpecialFolderDataBlock and the KnownFolderDataBlock are ignored when loading the shell link"
			"DisableKnownFolderAlias"	  = "If the link has a KnownFolderDataBlock, the unaliased form of the known folder IDList SHOULD be used when translating the target IDList at the time that the link is loaded"
			"AllowLinkToLink"			  = "Creating a link that references another link is enabled"
			"UnaliasOnSave"			      = "When saving a link for which the target IDList is under a known folder, either the unaliased form of that known folder or the target IDList SHOULD be used"
			"PreferEnvironmentPath"	      = "The target IDList SHOULD NOT be stored; instead, the path specified in the EnvironmentVariableDataBlock SHOULD be used to refer to the target"
			"KeepLocalIDListForUNCTarget" = "When the target is a UNC name that refers to a location on a local machine, the local path IDList in the PropertyStoreDataBlock SHOULD be stored, so it can be used when the link is loaded on the local machine"
		}
		
		$DriveTypes = [Ordered]@{
			"UNKNOWN"	  = "The drive type cannot be determined."
			"NO_ROOT_DIR" = "The root path is invalid; for example, there is no volume mounted at the path"
			"REMOVABLE"   = "The drive has removable media, such as a floppy drive, thumb drive, or flash card reader."
			"FIXED"	      = "The drive has fixed media, such as a hard drive or flash drive."
			"REMOTE"	  = "The drive is a remote (network) drive."
			"CDROM"	      = "The drive is a CD-ROM drive."
			"RAMDISK"	  = "The drive is a RAM disk."
		}
		
		# Replaced:
		# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/23bb5877-e3dd-4799-9f50-79f05f938537
		# with these:
		# https://learn.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_remote_protocol_info
		$Status.Text = "Selected file: $($fname)"
		#Open file & read the LNK
		$ReadFile = [System.IO.File]::Open("$($File)", ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::ReadWrite))
		$data = [System.Byte[]]::new($fs)
		$null = $ReadFile.Read($data, 0, $fs)
		$ReadFile.Dispose()
		
		if (!!$data)
		{
			# Search for valid header size (0x0000004C) and LinkCLSID (00021401-0000-0000-C000-000000000046)
			# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/c3376b21-0931-45e4-b2fc-a48ac0e60d15
			[System.Text.RegularExpressions.Regex]$regex = "(\x4C\x00\x00\x00\x01\x14\x02\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46)"
			$dataString = [System.Text.Encoding]::GetEncoding(28591).getstring($data)
			$results = $regex.Matches($dataString)
			if ($results.count -ge 1)
			{
				$offsets =	for ($r = 0; $r -lt $results.count; $r++)
				{
					[PSCustomObject]@{
						'Start'  = $results[$r].index
						'Length' = if (($r + 1) -ge $results.count) { $fs - $results[$r].index }else{ $results[$r + 1].index - $results[$r].index }
					}
				}
				# Update Tree
				$treeview2.BeginUpdate()
				# Add Root branch
				$Root2 = $treeview2.Nodes.Add("Root", "$($fname)")
				if ($fname -match '.customDestinations-ms')
				{
					$PathHash = $fname.Replace('.customDestinations-ms','')
					$appidnode = $Root2.Nodes.Add("$($PathHash)", "AppID: $($PathHash.ToUpper())")
					$appidnode.ForeColor = 'LimeGreen'
				}
				
				$o = 0
				foreach ($offset in $offsets)
				{
					try { $LNKData = Get-ShellLinkfrombyteArray -ByteArray $data[($offset.start)..($offset.start + $offset.length)] }
					catch [System.Management.Automation.MethodInvocationException] {
							Show-ErrorMessage -ErrorMessage "$($Error[0].Exception.InnerException.Message)"
							$Error.Clear()
							$LNKData = $null
							$treeview2.EndUpdate()
							continue
						}
					catch {
							$LNKData = $null
							$Status.Text = "Error processing $($fname) as a ShellLNK"
							$treeview2.EndUpdate()
							continue
						}
					
					if (!!$LNKData)
					{
						$LNKNode = $Root2.Nodes.Add("LNK #$($o)", "[$($offset.Start.ToString('D5'))] $($fname) LNK #$($o.ToString('D3')) - $($LNKData.'Display Name')")
						$LNKNode.ForeColor = 'DarkTurquoise'
						# Header
						$SizeNode = $LNKNode.Nodes.Add('Shortcut Size', "Shortcut Size: $($LNKData.'Shortcut Size')")
						$null = $SizeNode.Nodes.Add('Header Block Size', "Header Block Size: $($LNKData.'Header Block Size')")
						$SizeNode.Nodes['Header Block Size'].Tag = @([System.BitConverter]::ToString($data[($offset.start) .. ($offset.start + 76 - 1)]) -replace '-', '')
						$SizeNode.Nodes['Header Block Size'].ToolTipText = "Right click to copy the raw (Hex) data (76)"
						$SizeNode.Nodes['Header Block Size'].ForeColor = 'Peru'
						
						if (!!$LNKData.'Link Info Block Size')
						{
							$null = $SizeNode.Nodes.Add('Link Info Block Size', "Link Info Block Size: $($LNKData.'Link Info Block Size')")
							if ($LNKData.LinkInfoData.count -gt 0)
							{
								$SizeNode.Nodes['Link Info Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkInfoData) -replace '-', '')
								$SizeNode.Nodes['Link Info Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkInfoData.count))"
								$SizeNode.Nodes['Link Info Block Size'].ForeColor = 'Peru'
							}
						}
						if (!!$LNKData.'TargetID Block Size')
						{
							$null = $SizeNode.Nodes.Add('TargetID Block Size', "TargetID Block Size: $($LNKData.'TargetID Block Size')")
							if ($LNKData.LinkTargetIDListData.count -gt 0)
							{
								$SizeNode.Nodes['TargetID Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkTargetIDListData) -replace '-', '')
								$SizeNode.Nodes['TargetID Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkTargetIDListData.count))"
								$SizeNode.Nodes['TargetID Block Size'].ForeColor = 'Peru'
							}
						}
						if (!!$LNKData.'StringData Block Size')
						{
							$null = $SizeNode.Nodes.Add('StringData Block Size', "StringData Block Size: $($LNKData.'StringData Block Size')")
							if ($LNKData.StringDataData.count -gt 0)
							{
								$SizeNode.Nodes['StringData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.StringDataData) -replace '-', '')
								$SizeNode.Nodes['StringData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.StringDataData.count))"
								$SizeNode.Nodes['StringData Block Size'].ForeColor = 'Peru'
							}
						}
						if (!!$LNKData.'ExtraData Block Size')
						{
							$null = $SizeNode.Nodes.Add('ExtraData Block Size', "ExtraData Block Size: $($LNKData.'ExtraData Block Size')")
							if ($LNKData.ExtraDataData.count -gt 0)
							{
								$SizeNode.Nodes['ExtraData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.ExtraDataData) -replace '-', '')
								$SizeNode.Nodes['ExtraData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.ExtraDataData.count))"
								$SizeNode.Nodes['ExtraData Block Size'].ForeColor = 'Peru'
							}
						}
						
						<#
							In customdestinations-ms:
							The Lnk CLSID '0x0114020000000000C000000000000046' precedes each LNK entry
							The end signature of customdestinations-ms is: '0xFBBFBA'
						#>
						
						if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch 'C0000000000000464C' -and $LNKData.LinkSlack -notmatch '(ABFBBFBA)' -and $LNKData.LinkSlack -notmatch '(FBBFBA)')
						{
							$null = $LNKNode.Nodes.Add("$('LinkSlackLength')", "LNK Slack Size: $($LNKData.LinkSlackLength)")
							$LNKNode.Nodes["$('LinkSlackLength')"].ForeColor = 'Tomato'
						}
						$null = $LNKNode.Nodes.Add("$('LinkCLSID')", "Link CLSID: $($LNKData.'LinkCLSID')")
						$flagnodes = $LNKNode.Nodes.Add("Link_Flags", "Link Flags")
						foreach ($flag in $LNKData.Link_Flags.split(','))
						{
							$null = $flagnodes.Nodes.Add("$($flag)", "Link Flag: $($flag.Replace(' ', ''))")
							if (!!$LinkFlagsTT["$($flag.Replace(' ', ''))"]) { $flagnodes.Nodes["$($flag)"].ToolTipText = $LinkFlagsTT["$($flag.Replace(' ', ''))"] }
						}
						$AttributesNode = $LNKNode.Nodes.Add("$('FileAttributes')", "File Attributes")
						foreach ($attribute in $LNKData.'FileAttributes')
						{
							$null = $AttributesNode.Nodes.Add("$($attribute)", "Attribute: $($attribute.replace('FILE_ATTRIBUTE_', '').Replace(' ', ''))")
						}
						$CreationTime = $LNKNode.Nodes.Add("$('CreationTime')", "Creation Time (UTC): $($LNKData.'CreationTime')")
						$CreationTime.ForeColor = 'Cyan'
						$AccessTime = $LNKNode.Nodes.Add("$('AccessTime')", "Access   Time (UTC): $($LNKData.'AccessTime')")
						$AccessTime.ForeColor = 'Cyan'
						$WriteTime = $LNKNode.Nodes.Add("$('WriteTime')", "Write    Time (UTC): $($LNKData.'WriteTime')")
						$WriteTime.ForeColor = 'Cyan'
						$null = $LNKNode.Nodes.Add("$('Target File Size')", "Target File Size: $($LNKData.'Target File Size')")
						$null = $LNKNode.Nodes.Add("$('Icon Idx')", "Icon Idx: $($LNKData.'Icon Idx')")
						$null = $LNKNode.Nodes.Add("$('ShowCommand')", "ShowCommand: $($LNKData.'ShowCommand'.Replace('SW_SHOW', ''))")
						$null = $LNKNode.Nodes.Add("$('HotKey')", "HotKey: $($LNKData.'HotKey')")
						
						# LinkTargetIDList
						if ($LNKData.Link_Flags.contains('HasLinkTargetIDList'))
						{
							$null = $LNKNode.Nodes.Add("$('Display Name')", "Display Name: $($LNKData.'Display Name')")
							$null = $LNKNode.Nodes.Add("$('TargetPath')", "Target Path: $($LNKData.'Path')")
						}
						if ($LNKData.ItemIdListItems)
						{
							Populate-ItemIdListItems -ItemIDListNode $LNKNode -ItemIdList $LNKData.ItemIdListItems
						}
					
						# StringData - HasName
						if ($LNKData.Link_Flags.contains('HasName'))
						{
							$NameStringnode = $LNKNode.Nodes.Add("$('NameString')", "LNK Name: $($LNKData.'NameString')")
							$NameStringnode.ForeColor = 'PaleGreen'
						}
						
						# StringData - HasWorkingDir
						if ($LNKData.Link_Flags.contains('HasWorkingDir'))
						{
							$null = $LNKNode.Nodes.Add("$('Working Dir.')", "Working Dir.: $($LNKData.'Working Dir.')")
						}
						
						# StringData - HasRelativePath
						if ($LNKData.Link_Flags.contains('HasRelativePath'))
						{
							$null = $LNKNode.Nodes.Add("$('Relative Path')", "Relative Path: $($LNKData.'Relative Path')")
						}
						# StringData - HasArguments
						if ($LNKData.Link_Flags.contains('HasArguments'))
						{
							$argsnode = $LNKNode.Nodes.Add("$('Command Args')", "Command Arguments: $($LNKData.'Command Args')")
							$argsnode.ToolTipText = [System.Text.RegularExpressions.Regex]::Replace($LNKData.'Command Args', '(.){100}', "$('$0')`n")
							$argsnode.ForeColor = 'Gold'
						}
						
						# Link Info
						if ($LNKData.Link_Flags.contains('HasLinkInfo'))
						{
							$liflagnodes = $LNKNode.Nodes.Add("$('LinkInfoFlags')", "Link Info Flags")
							if (![System.String]::IsNullOrEmpty($LNKData.'Link Info Flags'))
							{
								$liflags = @($LNKData.'Link Info Flags'.ToString().split(',').foreach{ $_ -split ("And", 2, [System.StringSplitOptions]::RemoveEmptyEntries) })
								foreach ($liflag in $liflags)
								{
									$null = $liflagnodes.Nodes.Add("$($liflag)", "Info Flag: $($liflag.Replace(' ', ''))")
								}
							}
							# VolumeID
							if ($LNKData.'Link Info Flags'.Contains('VolumeID'))
							{
								$null = $LNKNode.Nodes.Add("$('Drive Type')", "Drive Type: $($LNKData.'Drive Type')")
								if (!!$DriveTypes["$($LNKData.'Drive Type')"])
								{
									$LNKNode.Nodes["$('Drive Type')"].ToolTipText = $DriveTypes["$($LNKData.'Drive Type')"]
								}
								$null = $LNKNode.Nodes.Add("$('Drive s/n')", "Drive Serial Number: $($LNKData.'Drive s/n')")
								$null = $LNKNode.Nodes.Add("$('VolumeLabel')", "Volume Label: $($LNKData.'Volume Label')")
							}
							
							# LocalBasePath
							if ($LNKData.'Link Info Flags'.Contains('LocalBasePath'))
							{
								if ($null -ne $LNKData.'Local Base Path')
								{
									$null = $LNKNode.Nodes.Add("$('Local Base Path')", "Local Base Path: $($LNKData.'Local Base Path')")
								}
								if ($null -ne $LNKData.'Local Base Path Unicode')
								{
									$null = $LNKNode.Nodes.Add("$('Local Base Path Unicode')", "Local Base Path Unicode: $($LNKData.'Local Base Path Unicode')")
								}
							}
							# CommonPathSuffix
							if ($LNKData.'Link Info Flags'.Contains('PathSuffix'))
							{
								if ($null -ne $LNKData.CommonPathSuffix)
								{
									$null = $LNKNode.Nodes.Add("$('CommonPathSuffix')", "Common Path Suffix: $($LNKData.CommonPathSuffix)")
								}
								if ($null -ne $LNKData.CommonPathSuffixUnicode)
								{
									$null = $LNKNode.Nodes.Add("$('CommonPathSuffixUnicode')", "Common Path Suffix Unicode: $($LNKData.CommonPathSuffixUnicode)")
								}
							}
							
							# CommonNetworkRelativeLink
							if ($LNKData.'Link Info Flags'.Contains('CommonNetworkRelativeLink'))
							{
								$CommonNetworkRelativeLinkFlagsNode = $LNKNode.Nodes.Add("$('CommonNetworkRelativeLinkFlags')", "Common Network Relative Link Flags")
								if (![System.String]::IsNullOrEmpty($LNKData.'CommonNetworkRelativeLinkFlags'))
								{
									$CommonNetworkflags = @($LNKData.'Common Network Relative Link Flags'.split(',', [System.StringSplitOptions]::RemoveEmptyEntries))
									foreach ($cnflag in $CommonNetworkflags)
									{
										$null = $CommonNetworkRelativeLinkFlagsNode.Nodes.Add("$($cnflag)", "Relative Link Flag: $($cnflag.Replace(' ', ''))")
									}
								}
								# ValidNetType
								if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidNetType'))
								{
									$null = $LNKNode.Nodes.Add("$('NetworkProviderType')", "Network Provider Type: $($LNKData.NetworkProviderType)")
								}
								
								$null = $LNKNode.Nodes.Add("$('NetName')", "NetName: $($LNKData.'NetName')")
								$null = $LNKNode.Nodes.Add("$('NetName Unicode')", "NetName Unicode: $($LNKData.'NetName Unicode')")
								# ValidDevice
								if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidDevice'))
								{
									$null = $LNKNode.Nodes.Add("$('Device Name')", "Device Name: $($LNKData.'Device Name')")
									$null = $LNKNode.Nodes.Add("$('Device Name Unicode')", "Device Name Unicode: $($LNKData.'Device Name Unicode')")
								}
							}
						}
						
						# HasDarwinID
						if ($LNKData.Link_Flags.contains('HasDarwinID'))
						{
							$null = $LNKNode.Nodes.Add("$('DarwinDataAnsi')", "Darwin Data Ansi: $($LNKData.'DarwinDataAnsi')")
							$null = $LNKNode.Nodes.Add("$('DarwinDataUnicode')", "Darwin Data Unicode: $($LNKData.'DarwinDataUnicode')")
						}
						
						# RunWithShimLayer
						if ($LNKData.Link_Flags.contains('RunWithShimLayer'))
						{
							$null = $LNKNode.Nodes.Add("$('ShimLayerName')", "Shim Layer Name: $($LNKData.'ShimLayerName')")
						}
						
						# HasExpString
						if ($LNKData.Link_Flags.contains('HasExpString'))
						{
							if ($null -ne $LNKData.TargetAnsi)
							{
								$null = $LNKNode.Nodes.Add("$('TargetAnsi')", "Target Ansi: $($LNKData.'TargetAnsi')")
							}
							if ($null -ne $LNKData.TargetUnicode)
							{
								$null = $LNKNode.Nodes.Add("$('TargetUnicode')", "Target Unicode: $($LNKData.TargetUnicode)")
							}
						}
						
						# EnableTargetMetadata
						if ($LNKData.Link_Flags.contains('EnableTargetMetadata') -and !!$LNKData.PropertyStoreEntries)
						{
							$TargetMetadataNode = $LNKNode.Nodes.Add("TargetMetadata", "Target Metadata")
							$TargetMetadataNode.ForeColor = 'Violet'
							Populate-SPS1 -Node $TargetMetadataNode -SPS1properties @($LNKData.PropertyStoreEntries)
							
							<#if (($LNKData.PSobject.Properties.where{ $_.name -match "TypedProperty" }).count -ge 1)
							{
								foreach ($TProperty in $LNKData.PSobject.Properties.where{ $_.name -match "TypedProperty" })
								{
									$null = $TargetMetadataNode.Nodes.Add("$($TProperty.Name)", "$($TProperty.Value)")
								}
							}#>
						}
						
						# 	Extradata - KnownFolderDataBlock
						if (!!$LNKData.'Known Folder BlockSignature')
						{
							$null = $LNKNode.Nodes.Add("$('KnBlockSignature')", "Known Folder BlockSignature: $($LNKData.'Known Folder BlockSignature')")
							$null = $LNKNode.Nodes.Add("$('KnownFolderID')", "Known Folder GUID: $($LNKData.'Known Folder ID')")
							$null = $LNKNode.Nodes.Add("$('KnownFolderDisplayName')", "Known Folder Display Name: $($LNKData.'Known Folder DisplayName')")
							$null = $LNKNode.Nodes.Add("$('KnownFolderIDOffset')", "Known FolderID Offset: $($LNKData.'Known FolderID Offset')")
						}
						
						# Extradata - SpecialFolderDataBlock
						if (!!$LNKData.'Special Folder BlockSignature')
						{
							$null = $LNKNode.Nodes.Add("$('SpBlockSignature')", "Special Folder BlockSignature: $($LNKData.'Special Folder BlockSignature')")
							$null = $LNKNode.Nodes.Add("$('SpecialFolderID')", "Special Folder ID: $($LNKData.'Special Folder ID')")
							$null = $LNKNode.Nodes.Add("$('SpecialFolderIDOffset')", "Special Folder Offset: $($LNKData.'Special Folder Offset')")
						}
						
						# Extradata - EnvironmentVariableDataBlock
						if (!!$LNKData.'Environment Variable BlockSignature')
						{
							$null = $LNKNode.Nodes.Add("$('EnvBlockSignature')", "Environment Variable BlockSignature: $($LNKData.'Environment Variable BlockSignature')")
							$null = $LNKNode.Nodes.Add("$('EnvTargetAnsi')", "Environment Variable TargetAnsi: $($LNKData.'Environment Variable TargetAnsi')")
							$null = $LNKNode.Nodes.Add("$('EnvTargetUnicode')", "Environment Variable TargetUnicode: $($LNKData.'Environment Variable TargetUnicode')")
						}
						
						# Extradata - ConsoleDataBlock
						if (!!$LNKData.'Console Data Block')
						{
							$consolenode = $LNKNode.Nodes.Add("ConsoleNode","Console Properties")
							foreach ($consoleprop in ($LNKData.'Console Data Block' | Get-Member -MemberType NoteProperty).Name)
							{
								$null = $consolenode.Nodes.Add("Console$($consoleprop)", "$($consoleprop): $($LNKData.'Console Data Block'.$consoleprop)")
							}
						}
						
						# Extradata - ConsoleFEDataBlock
						if (!!$LNKData.'Console CodePage ID')
						{
							$null = $LNKNode.Nodes.Add("$('CodePage')", "Console Code Page ID: $($LNKData.'Console CodePage ID')")
							$LNKNode.Nodes['CodePage'].ToolTipText = "LCID Structure`nhttps://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/63d3d639-7fd2-4afb-abbe-0d5b5551eef8"
						}
						# Extradata - TrackerDataBlock
						# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/df8e3748-fba5-4524-968a-f72be06d71fc
						if (!!$LNKData.'Machine ID')
						{
							$null = $LNKNode.Nodes.Add("$('Machine ID')", "Machine ID: $($LNKData.'Machine ID')")
						}
						if (!!$LNKData.'Guid 1')
						{
							$Guid1Node = $LNKNode.Nodes.Add("$('Guid 1')", "Guid 1: $($LNKData.'Guid 1'.ObjectID)")
							$Null = $Guid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 1'.version)")
							$Null = $Guid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 1'.variant)")
							$Null = $Guid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 1'.Sequence)")
							if (!!$LNKData.'Guid 1'.MAC)
							{
								# Add to tree
								$Null = $Guid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 1'.Created)")
								$Guid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
								$Null = $Guid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 1'.MAC)")
								$Guid1Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 1'.MAC
								$Guid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
							}
						}
						if (!!$LNKData.'Birth Guid 1')
						{
							$BGuid1Node = $LNKNode.Nodes.Add("$('Birth Guid 1')", "Birth Guid 1: $($LNKData.'Birth Guid 1'.ObjectID)")
							$Null = $BGuid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 1'.version)")
							$Null = $BGuid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 1'.variant)")
							$Null = $BGuid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 1'.Sequence)")
							if (!!$LNKData.'Birth Guid 1'.MAC)
							{
								# Add to tree
								$Null = $BGuid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 1'.Created)")
								$BGuid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
								$Null = $BGuid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 1'.MAC)")
								$BGuid1Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 1'.MAC
								$BGuid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
							}
						}
						if (!!$LNKData.'Guid 2')
						{
							$Guid2Node = $LNKNode.Nodes.Add("$('Guid 2')", "Guid 2: $($LNKData.'Guid 2'.ObjectID)")
							$Null = $Guid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 2'.version)")
							$Null = $Guid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 2'.variant)")
							$Null = $Guid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 2'.Sequence)")
							if (!!$LNKData.'Guid 2'.MAC)
							{
								# Add to tree
								$Null = $Guid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 2'.Created)")
								$Guid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
								$Null = $Guid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 2'.MAC)")
								$Guid2Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 2'.MAC
								$Guid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
							}
						}
						if (!!$LNKData.'Birth Guid 2')
						{
							$BGuid2Node = $LNKNode.Nodes.Add("$('Birth Guid 2')", "Birth Guid 2: $($LNKData.'Birth Guid 2'.ObjectID)")
							$Null = $BGuid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 2'.version)")
							$Null = $BGuid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 2'.variant)")
							$Null = $BGuid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 2'.Sequence)")
							if (!!$LNKData.'Guid 2'.MAC)
							{
								# Add to tree
								$Null = $BGuid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 2'.Created)")
								$BGuid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
								$Null = $BGuid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 2'.MAC)")
								$BGuid2Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 2'.MAC
								$BGuid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
							}
						}
						
						# Extradata -VistaAndAboveIDListDataBlock
						if (!!$LNKData.VistaItemIdListItems)
						{
							$VistaNode = $LNKNode.Nodes.Add("VistaPath", "Vista And Above IDList Items")
							$VistaNode.ForeColor = 'Violet'
							$null = $VistaNode.Nodes.Add("VistaDisplayName", "VistaAndAbove DisplayName: $($LNKData.Vista_DisplayName)")
							$null = $VistaNode.Nodes.Add("VistaPath", "VistaAndAbove Path: $($LNKData.Vista_Path)")
							Populate-ItemIdListItems -ItemIDListNode $VistaNode -ItemIdList $LNKData.VistaItemIdListItems
						}
						
						# HasIconLocation
						if ($LNKData.Link_Flags.contains('HasIconLocation') )
						{
							$null = $LNKNode.Nodes.Add("$('Icon Location')", "Icon Location: $($LNKData.'Icon Location')")
						}
						# HasIconLocation
						if ($LNKData.Link_Flags.contains('HasExpIcon'))
						{
							$null = $LNKNode.Nodes.Add("$('iconTargetAnsi')", "Icon Target Ansi: $($LNKData.iconTargetAnsi)")
							$null = $LNKNode.Nodes.Add("$('iconTargetUnicode')", "Icon Target Unicode: $($LNKData.iconTargetUnicode)")
						}
						
						$raw = $LNKNode.Nodes.Add("RawHexData", "LNK Data")
						$raw.Tag = @([System.BitConverter]::ToString($data[($offset.start) .. ($offset.start + $offset.length)]) -replace '-', '')
						$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($data[($offset.start) .. ($offset.start + $offset.length)].count))"
						$raw.ForeColor = 'Peru'
						<#
							In customdestinations-ms:
							The Lnk CLSID '0x0114020000000000C000000000000046' precedes each LNK entry
							The end signature of customdestinations-ms is: '0xFBBFBA'
						#>
						if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch 'C0000000000000464C' -and $LNKData.LinkSlack -notmatch '(ABFBBFBA)' -and $LNKData.LinkSlack -notmatch '(FBBFBA)')
						{
							$null = $LNKNode.Nodes.Add("$('Link Slack')", "Link Slack")
							$LNKNode.Nodes["$('Link Slack')"].Tag = @($LNKData.LinkSlack)
							$LNKNode.Nodes["$('Link Slack')"].ToolTipText = "Right click to copy the raw (Hex) Link Slack data"
							$LNKNode.Nodes["$('Link Slack')"].ForeColor = 'Tomato'
						}
						
						$Status.Text = $null
					}
					else
					{
						[System.Console]::Beep(500,150)
						$LNKNode = $Root2.Nodes.Add("LNK #$($o)", "LNK #$($o.ToString('D3')) ")
					}
					$o = $o + 1
				}
				$treeview2.EndUpdate()
				$Status.Text = "👍"
				if ($treeview2.Nodes[0].Nodes.Count -ge 1)
				{
					if ($results.count -eq 1)
					{
						$treeview2.Nodes[0].Expand()
						$treeview2.Nodes[0].FirstNode.Expand()
					}
					elseif ($results.count -gt 1)
					{
						$treeview2.Nodes[0].Expand()
						$treeview2.Nodes[0].Nodes[1].FirstNode.Expand()
					}
				}
			}
			else
			{
				[System.Console]::Beep(500,150)
				$Status.Text = "Nothing to see in $($fname)"
			}
		}
		else
		{
			[System.Console]::Beep(500, 150)
			$Status.Text = "Nothing to see in $($fname)"
		}
	
	}
	
	function Process-Automatic
	{
		param
		(
			[Parameter(Mandatory = $true)]
			$File
		)
		# Clear tree
		$treeview2.Nodes.Clear()
		
		$fname = Split-Path -Path "$($File)" -Leaf
		
		#Check file size
		try { $fs = [io.FileInfo]::new("$($File)").Length }
		catch
		{
			[System.Console]::Beep(500, 150)
			Show-ErrorMessage -ErrorMessage "Can not Access $($fname)"
			$Error.Clear()
			[System.Console]::Beep(500, 150)
			return
		}
		if ($fs -lt 512)
		{
			$Status.Text = "$($fname) is too small"
			[System.Console]::Beep(500, 150)
			return
		}
		
		$versions = [Ordered]@{
			"1" = "Windows 7/8"
			"3" = "Windows 10"
			"4" = "Windows 10"
			"5" = "Windows 10"
			"6" = "Windows 11"
		}
		
		$lengths = [Ordered]@{
			"1" = "114"
			"3" = "130"
			"4" = "130"
			"5" = "130"
			"6" = "130"
		}
		
		$LinkFlagsTT = [Ordered]@{
			"HasLinkTargetIDList"		  = "ShellLinkHeader is followed by a LinkTargetIDList structure"
			"HasLinkInfo"				  = "LinkInfo in file"
			"HasName"					  = "NAME_String in file"
			"HasRelativePath"			  = "RELATIVE_PATH in file"
			"HasWorkingDir"			      = "WORKING_DIR in file"
			"HasArguments"			      = "COMMAND_LINE_ARGUMENTS"
			"HasIconLocation"			  = "ICON_LOCATION"
			"IsUnicode"				      = "Strings are in unicode"
			"ForceNoLinkInfo"			  = "LinkInfo is ignored"
			"HasExpString"			      = "The shell link is saved with an EnvironmentVariableDataBlock"
			"RunInSeparateProcess"	      = "Target runs in a 16-bit virtual machine"
			"HasDarwinID"				  = "The shell link is saved with a DarwinDataBlock"
			"RunAsUser"				      = "The application is run as a different user when the target of the shell link is activated"
			"HasExpIcon"				  = "The shell link is saved with an IconEnvironmentDataBlock"
			"NoPidlAlias"				  = "The file system location is represented in the shell namespace when the path to an item is parsed into an IDList"
			"RunWithShimLayer"		      = "The shell link is saved with a ShimDataBlock"
			"ForceNoLinkTrack"		      = "The TrackerDataBlock is ignored"
			"EnableTargetMetadata"	      = "The shell link attempts to collect target properties and store them in the PropertyStoreDataBlock when the link target is set"
			"DisableLinkPathTracking"	  = "The EnvironmentVariableDataBlock is ignored"
			"DisableKnownFolderTracking"  = "The SpecialFolderDataBlock and the KnownFolderDataBlock are ignored when loading the shell link"
			"DisableKnownFolderAlias"	  = "If the link has a KnownFolderDataBlock, the unaliased form of the known folder IDList SHOULD be used when translating the target IDList at the time that the link is loaded"
			"AllowLinkToLink"			  = "Creating a link that references another link is enabled"
			"UnaliasOnSave"			      = "When saving a link for which the target IDList is under a known folder, either the unaliased form of that known folder or the target IDList SHOULD be used"
			"PreferEnvironmentPath"	      = "The target IDList SHOULD NOT be stored; instead, the path specified in the EnvironmentVariableDataBlock SHOULD be used to refer to the target"
			"KeepLocalIDListForUNCTarget" = "When the target is a UNC name that refers to a location on a local machine, the local path IDList in the PropertyStoreDataBlock SHOULD be stored, so it can be used when the link is loaded on the local machine"
		}
		$DriveTypes = [Ordered]@{
			"UNKNOWN"	  = "The drive type cannot be determined."
			"NO_ROOT_DIR" = "The root path is invalid; for example, there is no volume mounted at the path"
			"REMOVABLE"   = "The drive has removable media, such as a floppy drive, thumb drive, or flash card reader."
			"FIXED"	      = "The drive has fixed media, such as a hard drive or flash drive."
			"REMOTE"	  = "The drive is a remote (network) drive."
			"CDROM"	      = "The drive is a CD-ROM drive."
			"RAMDISK"	  = "The drive is a RAM disk."
		}
				
		#Open file & read the Header
		$ReadHeader = [System.IO.File]::Open("$($File)", ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::ReadWrite))
		$Header = [System.Byte[]]::new([Int]8)
		$null = $ReadHeader.Read($Header, 0, 8)
		$ReadHeader.Dispose()
		
		# Check the Header if file is 'Microsoft Compound File Binary File Format, Version 4'
		$filesignature = ([System.BitConverter]::ToString($header) -replace '-', '')
		if ($filesignature -ne 'D0CF11E0A1B11AE1')
		{
			$Status.Text = "$(Split-Path -Path $File -Leaf)'s header $($filesignature) is not a MS Compound File Binary File ('D0CF11E0A1B11AE1')"
			Process-Link -File $File
			return
		}
		else
		{
			$Status.Text = "$(Split-Path -Path $File -Leaf) is a MS Compound File Binary File"
		}
		
		# Open & Read 'Microsoft Compound File Binary File Format, Version 4'
		$methodArgs = @($File, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::Read)
		$storageRootType = [System.IO.Packaging.StorageInfo].Assembly.GetType("System.IO.Packaging.StorageRoot", $true, $false)
		$result = $storageRootType.InvokeMember("Open", [System.Reflection.BindingFlags]::Static -bor [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public -bor [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::InvokeMethod, $null, $null, $methodArgs)
		
		$count = $result.GetStreams().count
		if ($count -ge 1)
		{
			$Status.Text = "$(Split-Path -Path $File -Leaf) has $($count) streams"
			
			# Get each Stream
			$streams = ForEach ($stream in $result.GetStreams())
			{
				$data = $null
				$reader = New-Object System.IO.BinaryReader($stream.GetStream())
				$data = $reader.ReadBytes($reader.BaseStream.Length)
				$shellLnk = if ($data.Length -ge 20 -and $stream.Name -notmatch "DestList"){Get-ShellLinkfrombyteArray -ByteArray $data }else { $null }
				
				[pscustomobject][Ordered]@{
					'Name' = split-path -path $File -Leaf
					'StreamName' = $stream.Name
					'StreamData' = $shellLnk
					'DataLength' = $data.Length
					'Data'       = $data  
				}
				$reader.Close()
			}
			$reader.Dispose()
			$treeview2.BeginUpdate()
			$treeview2.Nodes.Clear()
			$Root2 = $treeview2.Nodes.Add("Root", "$($File)")
			
			# Get Filename Path Hash and add to tree
			if ($fname -match '.automaticDestinations-ms')
			{
				$PathHash = $fname.Replace('.automaticDestinations-ms','')
				$Status.Text = "Reading automaticDestinations-ms file $($PathHash)"
				$appidnode = $Root2.Nodes.Add("$($PathHash)", "AppID: $($PathHash.ToUpper())")
				$appidnode.ForeColor = 'LimeGreen'
			}
			foreach ($streaminf in $streams)
			{
					# Get Link Data
					$LNKData = $streaminf.StreamData
				if ($LNKData -ne $null)
				{
					$streamNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: [$($streaminf.StreamName.ToString())] $($LNKData.'Display Name')")
					$streamNode.ForeColor = 'Orange'
					$streamNode.Tag = @($null, $streaminf.Data)
					$null = $streamNode.Nodes.Add("$('Stream Data Size')", "Stream Size: $($streaminf.DataLength)")
					# Header
					$SizeNode = $streamNode.Nodes.Add("$('Shortcut Size')", "Shortcut Size: $($LNKData.'Shortcut Size')")
					$null = $SizeNode.Nodes.Add('Header Block Size', "Header Block Size: $($LNKData.'Header Block Size')")
					$SizeNode.Nodes['Header Block Size'].Tag = @([System.BitConverter]::ToString($streaminf.Data[0 .. 75]) -replace '-', '')
					$SizeNode.Nodes['Header Block Size'].ToolTipText = "Right click to copy the raw (Hex) data (76)"
					$SizeNode.Nodes['Header Block Size'].ForeColor = 'Peru'
					
					if ($LNKData.'Link Info Block Size')
					{
						$null = $SizeNode.Nodes.Add('Link Info Block Size', "Link Info Block Size: $($LNKData.'Link Info Block Size')")
						if ($LNKData.LinkInfoData.count -gt 0)
						{
							$SizeNode.Nodes['Link Info Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkInfoData) -replace '-', '')
							$SizeNode.Nodes['Link Info Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkInfoData.count))"
							$SizeNode.Nodes['Link Info Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'TargetID Block Size')
					{
						$null = $SizeNode.Nodes.Add('TargetID Block Size', "TargetID Block Size: $($LNKData.'TargetID Block Size')")
						if ($LNKData.LinkTargetIDListData.count -gt 0)
						{
							$SizeNode.Nodes['TargetID Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.LinkTargetIDListData) -replace '-', '')
							$SizeNode.Nodes['TargetID Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.LinkTargetIDListData.count))"
							$SizeNode.Nodes['TargetID Block Size'].ForeColor = 'Peru'
						}
					}
					if ($LNKData.'StringData Block Size')
					{
						$null = $SizeNode.Nodes.Add('StringData Block Size', "StringData Block Size: $($LNKData.'StringData Block Size')")
						if ($LNKData.StringDataData.count -gt 0)
						{
							$SizeNode.Nodes['StringData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.StringDataData) -replace '-', '')
							$SizeNode.Nodes['StringData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.StringDataData.count))"
							$SizeNode.Nodes['StringData Block Size'].ForeColor = 'Peru'
						}
					}
					if (!!$LNKData.'ExtraData Block Size')
					{
						$null = $SizeNode.Nodes.Add('ExtraData Block Size', "ExtraData Block Size: $($LNKData.'ExtraData Block Size')")
						if ($LNKData.ExtraDataData.count -gt 0)
						{
							$SizeNode.Nodes['ExtraData Block Size'].Tag = @([System.BitConverter]::ToString($LNKData.ExtraDataData) -replace '-', '')
							$SizeNode.Nodes['ExtraData Block Size'].ToolTipText = "Right click to copy the raw (Hex) data ($($LNKData.ExtraDataData.count))"
							$SizeNode.Nodes['ExtraData Block Size'].ForeColor = 'Peru'
						}
					}
					
					if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch '4800000081E903DFDA31E64BAB0A85774A0BD1B4')
					{
						$null = $streamNode.Nodes.Add("$('LinkSlackLength')", "LNK Slack Size: $($LNKData.LinkSlackLength)")
						$streamNode.Nodes["$('LinkSlackLength')"].ForeColor = 'Tomato'
					}
					
					$null = $streamNode.Nodes.Add("$('LinkCLSID')", "Link CLSID: $($LNKData.'LinkCLSID')")
					$flagnodes = $streamNode.Nodes.Add("Link_Flags", "Link Flags")
					foreach ($flag in $LNKData.Link_Flags.split(','))
					{
						$null = $flagnodes.Nodes.Add("$($flag)", "Link Flag: $($flag.Replace(' ', ''))")
						if (!!$LinkFlagsTT["$($flag.Replace(' ', ''))"]) { $flagnodes.Nodes["$($flag)"].ToolTipText = $LinkFlagsTT["$($flag.Replace(' ', ''))"] }
					}
					$AttributesNode = $streamNode.Nodes.Add("$('FileAttributes')", "File Attributes")
					foreach ($attribute in $LNKData.'FileAttributes')
					{
						$null = $AttributesNode.Nodes.Add("$($attribute)", "Attribute: $($attribute.replace('FILE_ATTRIBUTE_', '').Replace(' ', ''))")
					}
					$CreationTime = $streamNode.Nodes.Add("$('CreationTime')", "Creation Time (UTC): $($LNKData.'CreationTime')")
					$CreationTime.ForeColor = 'Cyan'
					$AccessTime = $streamNode.Nodes.Add("$('AccessTime')", "Access   Time (UTC): $($LNKData.'AccessTime')")
					$AccessTime.ForeColor = 'Cyan'
					$WriteTime = $streamNode.Nodes.Add("$('WriteTime')", "Write    Time (UTC): $($LNKData.'WriteTime')")
					$WriteTime.ForeColor = 'Cyan'
					$null = $streamNode.Nodes.Add("$('Target File Size')", "Target File Size: $($LNKData.'Target File Size')")
					$null = $streamNode.Nodes.Add("$('Icon Idx')", "Icon Idx: $($LNKData.'Icon Idx')")
					$null = $streamNode.Nodes.Add("$('ShowCommand')", "ShowCommand: $($LNKData.'ShowCommand'.Replace('SW_SHOW', ''))")
					$null = $streamNode.Nodes.Add("$('HotKey')", "HotKey: $($LNKData.'HotKey')")
					
					# LinkTargetIDList
					if ($LNKData.Link_Flags.contains('HasLinkTargetIDList') )
					{
						$null = $streamNode.Nodes.Add("$('Display Name')", "Display Name: $($LNKData.'Display Name')")
						$null = $streamNode.Nodes.Add("$('TargetPath')", "Target Path: $($LNKData.'Path')")
					}
					if ($LNKData.ItemIdListItems)
					{
						Populate-ItemIdListItems -ItemIDListNode $streamNode -ItemIdList $LNKData.ItemIdListItems
					}
					# StringData - HasName
					if ($LNKData.Link_Flags.contains('HasName') )
					{
						$NameStringnode = $streamNode.Nodes.Add("$('NameString')", "LNK Name: $($LNKData.'NameString')")
						$NameStringnode.ForeColor = 'PaleGreen'
					}
					
					# StringData - HasWorkingDir
					if ($LNKData.Link_Flags.contains('HasWorkingDir') )
					{
						$null = $streamNode.Nodes.Add("$('Working Dir.')", "Working Dir.: $($LNKData.'Working Dir.')")
					}
					
					# StringData - HasRelativePath
					if ($LNKData.Link_Flags.contains('HasRelativePath') )
					{
						$null = $streamNode.Nodes.Add("$('Relative Path')", "Relative Path: $($LNKData.'Relative Path')")
					}
					
					# StringData - HasArguments
					if ($LNKData.Link_Flags.Contains('HasArguments'))
					{
						$argsnode = $streamNode.Nodes.Add("$('Command Args')", "Command Arguments: $($LNKData.'Command Args')")
						$argsnode.ToolTipText = [System.Text.RegularExpressions.Regex]::Replace($LNKData.'Command Args', '(.){100}', "$('$0')`n")
						$argsnode.ForeColor = 'Yellow'
					}
					# Link Info
					if ($LNKData.Link_Flags.Contains('HasLinkInfo'))
					{
						if (!!$LNKData.'Link Info Flags')
						{
							$liflagnodes = $streamNode.Nodes.Add("$('LinkInfoFlags')", "Link Info Flags")
							if (![System.String]::IsNullOrEmpty($LNKData.'Link Info Flags'))
							{
								$liflagSS = @($LNKData.'Link Info Flags'.ToString().split(',').foreach{ $_ -split ("And", 2, [System.StringSplitOptions]::RemoveEmptyEntries) })
								foreach ($liflag in $liflagSS)
								{
									$null = $liflagnodes.Nodes.Add("$($liflag)", "Info Flag: $($liflag.Replace(' ', ''))")
								}
							}
						}
						# VolumeID
						if ($LNKData.'Link Info Flags'.Contains('VolumeID'))
						{
							$null = $streamNode.Nodes.Add("$('Drive Type')", "Drive Type: $($LNKData.'Drive Type')")
							if (!!$DriveTypes["$($LNKData.'Drive Type')"])
							{
								$streamNode.Nodes["$('Drive Type')"].ToolTipText = $DriveTypes["$($LNKData.'Drive Type')"]
							}
							$null = $streamNode.Nodes.Add("$('Drive s/n')", "Drive Serial Number: $($LNKData.'Drive s/n')")
							$null = $streamNode.Nodes.Add("$('VolumeLabel')", "Volume Label: $($LNKData.'Volume Label')")
						}
						
						# LocalBasePath
						if ($LNKData.'Link Info Flags'.Contains('LocalBasePath'))
						{
							$null = $streamNode.Nodes.Add("$('Local Base Path')", "Local Base Path: $($LNKData.'Local Base Path')")
							$null = $streamNode.Nodes.Add("$('Local Base Path Unicode')", "Local Base Path Unicode: $($LNKData.'Local Base Path Unicode')")
						}
						# CommonPathSuffix
						if ($LNKData.'Link Info Flags'.Contains('PathSuffix'))
						{
							$null = $streamNode.Nodes.Add("$('CommonPathSuffix')", "Common Path Suffix: $($LNKData.'CommonPathSuffix')")
							$null = $streamNode.Nodes.Add("$('CommonPathSuffixUnicode')", "Common Path Suffix Unicode: $($LNKData.'CommonPathSuffixUnicode')")
						}
						
						# CommonNetworkRelativeLink
						if ($LNKData.'Link Info Flags'.Contains('CommonNetworkRelativeLink'))
						{
							$CommonNetworkRelativeLinkFlagsNode = $streamNode.Nodes.Add("$('CommonNetworkRelativeLinkFlags')", "Common Network Relative Link Flags")
							if (![System.String]::IsNullOrEmpty($LNKData.'CommonNetworkRelativeLinkFlags'))
							{
								$CommonNetworkflags = @($LNKData.'CommonNetworkRelativeLinkFlags'.split(',') )
								foreach ($cnflag in $CommonNetworkflags)
								{
									$null = $CommonNetworkRelativeLinkFlagsNode.Nodes.Add("$($cnflag)", "Relative Link Flag: $($cnflag.Replace(' ', ''))")
								}
							}
							# ValidNetType
							if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidNetType'))
							{
								$null = $streamNode.Nodes.Add("$('NetworkProviderType')", "Network Provider Type: $($LNKData.NetworkProviderType)")
							}
							
							$null = $streamNode.Nodes.Add("$('NetName')", "NetName: $($LNKData.'NetName')")
							$null = $streamNode.Nodes.Add("$('NetName Unicode')", "NetName Unicode: $($LNKData.'NetName Unicode')")
							# ValidDevice
							if ($LNKData.'Common Network Relative Link Flags'.Contains('ValidDevice'))
							{
								$null = $streamNode.Nodes.Add("$('Device Name')", "Device Name: $($LNKData.'Device Name')")
								$null = $streamNode.Nodes.Add("$('Device Name Unicode')", "Device Name Unicode: $($LNKData.'Device Name Unicode')")
							}
						}
					}
					
					# HasDarwinID
					if ($LNKData.Link_Flags.Contains('HasDarwinID'))
					{
						$null = $streamNode.Nodes.Add("$('DarwinDataAnsi')", "Darwin Data Ansi: $($LNKData.'DarwinDataAnsi')")
						$null = $streamNode.Nodes.Add("$('DarwinDataUnicode')", "Darwin Data Unicode: $($LNKData.'DarwinDataUnicode')")
					}
					
					# RunWithShimLayer
					if ($LNKData.Link_Flags.contains('RunWithShimLayer'))
					{
						$null = $streamNode.Nodes.Add("$('ShimLayerName')", "Shim Layer Name: $($LNKData.'ShimLayerName')")
					}
					
					# HasExpString
					if ($LNKData.Link_Flags.contains('HasExpString'))
					{
						$null = $streamNode.Nodes.Add("$('TargetAnsi')", "Target Ansi: $($LNKData.'TargetAnsi')")
						$null = $streamNode.Nodes.Add("$('TargetUnicode')", "Target Unicode: $($LNKData.'TargetUnicode')")
					}
					
					# EnableTargetMetadata
					if ($LNKData.Link_Flags.Contains('EnableTargetMetadata') -and !!$LNKData.PropertyStoreEntries)
					{
						$TargetMetadataNode = $streamNode.Nodes.Add("TargetMetadata", "Target Metadata")
						$TargetMetadataNode.ForeColor = 'Violet'
						Populate-SPS1 -Node $TargetMetadataNode -SPS1properties @($LNKData.PropertyStoreEntries)
						
						<#if (($LNKData.PSobject.Properties.where{ $_.name -match "TypedProperty" }).count -ge 1)
						{
							$TargetMetadataNode = $streamNode.Nodes.Add("TargetMetadata", "Target Metadata")
							$TargetMetadataNode.ForeColor = 'Violet'
							foreach ($TProperty in $LNKData.PSobject.Properties.where{ $_.name -match "TypedProperty" })
							{
								$null = $TargetMetadataNode.Nodes.Add("$($TProperty.Name)", "$($TProperty.Value)")
							}
						}#>
					}
					
					# 	Extradata - KnownFolderDataBlock
					if (!!$LNKData.'Known Folder BlockSignature')
					{
						$null = $streamNode.Nodes.Add("$('KnBlockSignature')", "Known Folder BlockSignature: $($LNKData.'Known Folder BlockSignature')")
						$null = $streamNode.Nodes.Add("$('KnownFolderID')", "Known Folder GUID: $($LNKData.'Known Folder ID')")
						$null = $streamNode.Nodes.Add("$('KnownFolderDisplayName')", "Known Folder Display Name: $($LNKData.'Known Folder DisplayName')")
						$null = $streamNode.Nodes.Add("$('KnownFolderIDOffset')", "Known FolderID Offset: $($LNKData.'Known FolderID Offset')")
					}
					
					# Extradata - SpecialFolderDataBlock
					if (!!$LNKData.'Special Folder BlockSignature')
					{
						$null = $streamNode.Nodes.Add("$('SpBlockSignature')", "Special Folder BlockSignature: $($LNKData.'Special Folder BlockSignature')")
						$null = $streamNode.Nodes.Add("$('SpecialFolderID')", "Special Folder ID: $($LNKData.'Special Folder ID')")
						$null = $streamNode.Nodes.Add("$('SpecialFolderIDOffset')", "Special Folder Offset: $($LNKData.'Special Folder Offset')")
					}
					
					# Extradata - EnvironmentVariableDataBlock
					if (!!$LNKData.'Environment Variable BlockSignature')
					{
						$null = $streamNode.Nodes.Add("$('EnvBlockSignature')", "Environment Variable BlockSignature: $($LNKData.'Environment Variable BlockSignature')")
						$null = $streamNode.Nodes.Add("$('EnvTargetAnsi')", "Environment Variable TargetAnsi: $($LNKData.'Environment Variable TargetAnsi')")
						$null = $streamNode.Nodes.Add("$('EnvTargetUnicode')", "Environment Variable TargetUnicode: $($LNKData.'Environment Variable TargetUnicode')")
					}
					
					# Extradata - ConsoleDataBlock
					if (!!$LNKData.'Console Data Block')
					{
						$consolenode = $streamNode.Nodes.Add("ConsoleNode", "Console Properties")
						foreach ($consoleprop in ($LNKData.'Console Data Block' | Get-Member -MemberType NoteProperty).Name)
						{
							$null = $consolenode.Nodes.Add("Console$($consoleprop)", "$($consoleprop): $($LNKData.'Console Data Block'.$consoleprop)")
						}
					}
					
					# Extradata - ConsoleFEDataBlock
					if (!!$LNKData.'Console CodePage ID')
					{
						$null = $streamNode.Nodes.Add("$('CodePage')", "Console Code Page ID: $($LNKData.'Console CodePage ID')")
						$LNKNode.Nodes['CodePage'].ToolTipText = "LCID Structure`nhttps://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/63d3d639-7fd2-4afb-abbe-0d5b5551eef8"
					}
					
					# Extradata - TrackerDataBlock
					# https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/df8e3748-fba5-4524-968a-f72be06d71fc
					if (!!$LNKData.'Machine ID')
					{
						$null = $streamNode.Nodes.Add("$('Machine ID')", "Machine ID: $($LNKData.'Machine ID')")
					}
					if (!!$LNKData.'Guid 1')
					{
						$Guid1Node = $streamNode.Nodes.Add("$('Guid 1')", "Guid 1: $($LNKData.'Guid 1'.ObjectID)")
						$Null = $Guid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 1'.version)")
						$Null = $Guid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 1'.variant)")
						$Null = $Guid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 1'.Sequence)")
						if (!!$LNKData.'Guid 1'.MAC)
						{
							# Add to tree
							$Null = $Guid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 1'.Created)")
							$Guid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $Guid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 1'.MAC)")
							$Guid1Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 1'.MAC
							$Guid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Birth Guid 1')
					{
						$BGuid1Node = $streamNode.Nodes.Add("$('Birth Guid 1')", "Birth Guid 1: $($LNKData.'Birth Guid 1'.ObjectID)")
						$Null = $BGuid1Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 1'.version)")
						$Null = $BGuid1Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 1'.variant)")
						$Null = $BGuid1Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 1'.Sequence)")
						if (!!$LNKData.'Birth Guid 1'.MAC)
						{
							# Add to tree
							$Null = $BGuid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 1'.Created)")
							$BGuid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $BGuid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 1'.MAC)")
							$BGuid1Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 1'.MAC
							$BGuid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Guid 2')
					{
						$Guid2Node = $streamNode.Nodes.Add("$('Guid 2')", "Guid 2: $($LNKData.'Guid 2'.ObjectID)")
						$Null = $Guid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Guid 2'.version)")
						$Null = $Guid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Guid 2'.variant)")
						$Null = $Guid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Guid 2'.Sequence)")
						if (!!$LNKData.'Guid 2'.MAC)
						{
							# Add to tree
							$Null = $Guid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Guid 2'.Created)")
							$Guid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $Guid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 2'.MAC)")
							$Guid2Node.Nodes["MAC Address"].Tag = $LNKData.'Guid 2'.MAC
							$Guid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					if (!!$LNKData.'Birth Guid 2')
					{
						$BGuid2Node = $streamNode.Nodes.Add("$('Birth Guid 2')", "Birth Guid 2: $($LNKData.'Birth Guid 2'.ObjectID)")
						$Null = $BGuid2Node.Nodes.Add("version", "GUID Version: $($LNKData.'Birth Guid 2'.version)")
						$Null = $BGuid2Node.Nodes.Add("variant", "GUID Variant: $($LNKData.'Birth Guid 2'.variant)")
						$Null = $BGuid2Node.Nodes.Add("Sequence", "GUID Sequence: $($LNKData.'Birth Guid 2'.Sequence)")
						if (!!$LNKData.'Guid 2'.MAC)
						{
							# Add to tree
							$Null = $BGuid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($LNKData.'Birth Guid 2'.Created)")
							$BGuid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
							$Null = $BGuid2Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Birth Guid 2'.MAC)")
							$BGuid2Node.Nodes["MAC Address"].Tag = $LNKData.'Birth Guid 2'.MAC
							$BGuid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
						}
					}
					
					# Extradata -VistaAndAboveIDListDataBlock
					if (!!$LNKData.VistaItemIdListItems)
					{
						$VistaNode = $streamNode.Nodes.Add("VistaPath", "Vista And Above IDList Items")
						$VistaNode.ForeColor = 'Violet'
						$null = $VistaNode.Nodes.Add("VistaDisplayName", "VistaAndAbove DisplayName: $($LNKData.Vista_DisplayName)")
						$null = $VistaNode.Nodes.Add("VistaPath", "VistaAndAbove Path: $($LNKData.Vista_Path)")
						Populate-ItemIdListItems -ItemIDListNode $VistaNode -ItemIdList $LNKData.VistaItemIdListItems
					}
					
					# HasIconLocation
					if ($LNKData.Link_Flags.contains('HasIconLocation') )
					{
						$null = $streamNode.Nodes.Add("$('Icon Location')", "Icon Location: $($LNKData.'Icon Location')")
					}
					# HasIconLocation
					if ($LNKData.Link_Flags.contains('HasExpIcon') )
					{
						$null = $streamNode.Nodes.Add("$('iconTargetAnsi')", "Icon Target Ansi: $($LNKData.iconTargetAnsi)")
						$null = $streamNode.Nodes.Add("$('iconTargetUnicode')", "Icon Target Unicode: $($LNKData.iconTargetUnicode)")
					}
					# Add the Raw Stream (LNK) Hex Data
					if ($streaminf.Data)
					{
						$raw = $streamNode.Nodes.Add("RawHexData", "Stream Data")
						$raw.Tag = @([System.BitConverter]::ToString($streaminf.Data) -replace '-', '')
						$raw.ToolTipText = "Right click to copy the raw (Hex) data ($($streaminf.Data.count))"
						$raw.ForeColor = 'Peru'
					}
					if (!!$LNKData.LinkSlackLength -and $LNKData.LinkSlack -match '[a-fA-F1-9]' -and $LNKData.LinkSlack -notmatch '4800000081E903DFDA31E64BAB0A85774A0BD1B4')
					{
						$null = $streamNode.Nodes.Add("$('Link Slack')", "Link Slack")
						$streamNode.Nodes["$('Link Slack')"].Tag = @($LNKData.LinkSlack)
						$streamNode.Nodes["$('Link Slack')"].ToolTipText = "Right click to copy the raw (Hex) Link Slack data"
						$streamNode.Nodes["$('Link Slack')"].ForeColor = 'Tomato'
					}
				}
				# Process DestList
				elseif ($LNKData -eq $null -and ($streaminf.StreamName -eq 'DestList'))
				{
					$check = $Root2.Nodes.Find("$($streaminf.StreamName)", $true)
					if (!!$check)
						{
							$DestNode = $check[0]
						}
						else
							
						{
							$DestNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: $($streaminf.StreamName)")
						}
						$DestNode.ForeColor = 'Orange'
				try
					{
						if ($streaminf.StreamName -eq "DestList")
						{
							$x = $streaminf
							if($x.Data.length -lt 32){continue}
							$header = [pscustomobject]@{
								'Version' = $versions["$([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0))"] + " ($([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0)))"
								'Current Entries' = [Bitconverter]::ToUInt32($x.Data[4 .. 7], 0)
								'Pinned Entries' = [Bitconverter]::ToUInt32($x.Data[8 .. 11], 0)
								'Counter' = [System.BitConverter]::ToString($x.Data[12 .. 15]) -replace '-', '' # [Bitconverter]::ToUInt32($x.Data[12 .. 15], 0)
								'Last Issued Nr' = [Bitconverter]::ToUInt32($x.Data[16 .. 23], 0)
								'Nr of Actions' = [Bitconverter]::ToUInt32($x.Data[24 .. 31], 0)
							}
							$totalentrysize = ($x.Data.Length - 32)
							$entrylength = $lengths["$([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0))"]/1
							
							# Add to tree
							$headernode = $DestNode.Nodes.Add("$($header)", "Header")
							$headernode.ForeColor = 'DarkTurquoise'
							$null = $headernode.Nodes.Add("Version", "Version: $($header.Version)")
							$null = $headernode.Nodes.Add("Current Entries", "Current Entries: $($header.'Current Entries')")
							$null = $headernode.Nodes.Add("Pinned Entries", "Pinned Entries: $($header.'Pinned Entries')")
							$null = $headernode.Nodes.Add("Entries Counter", "Entries Counter: 0x$($header.'Counter')") # ???
							$null = $headernode.Nodes.Add("Last Issued Nr", "Last Issued Nr: $($header.'Last Issued Nr')")
							$null = $headernode.Nodes.Add("Nr of Actions", "Nr of Actions: $($header.'Nr of Actions')")
							
							# Get Entries
							$entries = for ($start = 32; $start -lt $totalentrysize)
							{
								$lastaccessed = try { [datetime]::FromFileTimeUtc("0x$([System.BitConverter]::ToString($x.data[($start + 107) .. ($start + 100)]) -replace '-', '')").ToString("dd/MM/yyyy HH:mm:ss.fffffff") }
								catch { [System.BitConverter]::ToString($x.data[($start + 107) .. ($start + 100)]) -replace '-', '' }
								
								if (([Bitconverter]::ToUInt32($x.Data[0 .. 3], 0)) -eq 1)
								{
									$stringlength = [Bitconverter]::ToUInt16($x.data[($start + 112) .. ($start + 113)], 0)
								
									[pscustomobject]@{
										'Hash' = [System.BitConverter]::ToString($x.data[$start .. ($start + 7)]) -replace '-', ''
										'Volume Droid ID' =  Get-ObjectIdFromHex -Hex  ([System.BitConverter]::ToString($x.data[($start + 8) .. ($start + 23)]) -replace '-', ''  )
										'File Droid ID' = Get-ObjectIdFromHex -Hex ( [System.BitConverter]::ToString($x.data[($start + 24) .. ($start + 39)]) -replace '-', ''  )
										'Birth volume Droid ID' = Get-ObjectIdFromHex -Hex ( [System.BitConverter]::ToString($x.data[($start + 40) .. ($start + 55)]) -replace '-', '') 
										'Birth file Droid ID' =  Get-ObjectIdFromHex -Hex  ([System.BitConverter]::ToString($x.data[($start + 56) .. ($start + 71)]) -replace '-', '' )
										'Hostname' = [System.Text.Encoding]::ASCII.GetString($x.data[($start + 72) .. ($start + 87)])
										'Entry ID' = [Bitconverter]::ToUInt64($x.data[($start + 88) .. ($start + 95)], 0)
										'Access Counter' = [Bitconverter]::ToInt32($x.data[($start + 96) .. ($start + 99)], 0)
										'Last Accessed' = $lastaccessed
										'Entry Pin Status' = if (([System.BitConverter]::ToString($x.data[($start + 108) .. ($start + 111)]) -replace '-', '') -eq 'FFFFFFFF') { 'Unpinned' } else { [Bitconverter]::ToUInt32($x.data[($start + 108) .. ($start + 111)], 0) }
										'String Data Length' = $stringlength
										'InQuickAccess' = $null
										'String' = [System.Text.Encoding]::Unicode.GetString($x.data[($start + 114) .. ($start + 114 + $stringlength * 2 - 1)])
									} # eND psCO
								$start = $start + $entrylength + $stringlength * 2
								}
								else
								{
									$stringlength = [Bitconverter]::ToUInt16($x.data[($start + 128) .. ($start + 129)], 0)
									
									[pscustomobject]@{
										'Hash' = [System.BitConverter]::ToString($x.data[$start .. ($start + 7)]) -replace '-', ''
										'Volume Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 8) .. ($start + 23)]) -replace '-', '')
										'File Droid ID' = Get-ObjectIdFromHex -Hex  ([System.BitConverter]::ToString($x.data[($start + 24) .. ($start + 39)]) -replace '-', '')
										'Birth volume Droid ID' = Get-ObjectIdFromHex -Hex ( [System.BitConverter]::ToString($x.data[($start + 40) .. ($start + 55)]) -replace '-', '')
										'Birth file Droid ID' = Get-ObjectIdFromHex -Hex ([System.BitConverter]::ToString($x.data[($start + 56) .. ($start + 71)]) -replace '-', '' )
										'Hostname' = [System.Text.Encoding]::ASCII.GetString($x.data[($start + 72) .. ($start + 87)])
										'Entry ID' = [Bitconverter]::ToUInt64($x.data[($start + 88) .. ($start + 95)], 0)
									    'Access Counter' = [Bitconverter]::ToInt32($x.data[($start + 96) .. ($start + 99)], 0)
										'Last Accessed' = $lastaccessed
										'Entry Pin Status' = if (([System.BitConverter]::ToString($x.data[($start + 108) .. ($start + 111)]) -replace '-', '') -eq 'FFFFFFFF') { 'Unpinned' } else { [Bitconverter]::ToUInt32($x.data[($start + 108) .. ($start + 111)], 0) }
										'String Data Length' = $stringlength
										'InQuickAccess' = if ([Bitconverter]::ToUInt64($x.data[($start + 116) .. ($start + 123)], 0) -eq 1) { $true }else{ $false }
										'String' = [System.Text.Encoding]::Unicode.GetString($x.data[($start + 130) .. ($start + 130 + $stringlength * 2 - 1)])
									} # eND psCO
								$start = $start + $entrylength + $stringlength * 2 + 4
								} # end else
							} # End entries
							
							# Add Entries
						$EntriesNodes = $DestNode.Nodes.Add("Entries", "Entries")
						$EntriesNodes.ForeColor = 'DarkTurquoise'
							$e = 0
							foreach ($entry in $entries)
							{
								$entryNode = $EntriesNodes.Nodes.Add("Entry_$($e)", "[$($streaminf.StreamName.ToString())] Entry #$($e.ToString('D3')) - $($entry.'String')")
								$entryNode.ForeColor = 'GreenYellow'
								$null = $entryNode.Nodes.Add("$($e)entry.Hash", "Hash: $($entry.'Hash')")
							
							<## test
								$null = $entryNode.Nodes.Add("$($e)Volume Droid ID", "Volume Droid ID: $([System.BitConverter]::ToString($x.data[($start + 8) .. ($start + 23)]) -replace '-', '')")
								$null = $entryNode.Nodes.Add("$($e)File Droid ID", "File Droid ID: $([System.BitConverter]::ToString($x.data[($start + 24) .. ($start + 39)]) -replace '-', '')")
								$null = $entryNode.Nodes.Add("$($e)Birth volume Droid ID", "Birth Volume Droid ID: $([System.BitConverter]::ToString($x.data[($start + 40) .. ($start + 55)]) -replace '-', '')")
								$null = $entryNode.Nodes.Add("$($e)Birth file Droid ID", "Birth File Droid ID: $([System.BitConverter]::ToString($x.data[($start + 56) .. ($start + 71)]) -replace '-', '')")
							# end test#>
							
							if (!!$entry.'Volume Droid ID')
							{
								$Guid1Node = $entryNode.Nodes.Add("$('Guid 1')", "Volume Droid ID:  $($entry.'Volume Droid ID'.ObjectID)")
								$Null = $Guid1Node.Nodes.Add("version", "GUID Version: $($entry.'Volume Droid ID'.version)")
								$Null = $Guid1Node.Nodes.Add("variant", "GUID Variant: $($entry.'Volume Droid ID'.variant)")
								$Null = $Guid1Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'Volume Droid ID'.Sequence)")
								if (!!$entry.'Volume Droid ID'.MAC)
								{
									# Add to tree
									$Null = $Guid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'Volume Droid ID'.Created)")
									$Guid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
									$Null = $Guid1Node.Nodes.Add("MAC Address", "MAC Address: $($LNKData.'Guid 1'.MAC)")
									$Guid1Node.Nodes["MAC Address"].Tag = $entry.'Volume Droid ID'.MAC
									$Guid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
								}
							}
							if (!!$entry.'File Droid ID')
							{
								$BGuid1Node = $entryNode.Nodes.Add("$('Droid Birth Guid 1')", "Droid Birth Guid 1: $($entry.'File Droid ID'.ObjectID)")
								$Null = $BGuid1Node.Nodes.Add("version", "GUID Version: $($entry.'File Droid ID'.version)")
								$Null = $BGuid1Node.Nodes.Add("variant", "GUID Variant: $($entry.'File Droid ID'.variant)")
								$Null = $BGuid1Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'File Droid ID'.Sequence)")
								if (!!$entry.'File Droid ID'.MAC)
								{
									# Add to tree
									$Null = $BGuid1Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'File Droid ID'.Created)")
									$BGuid1Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
									$Null = $BGuid1Node.Nodes.Add("MAC Address", "MAC Address: $($entry.'File Droid ID'.MAC)")
									$BGuid1Node.Nodes["MAC Address"].Tag = $entry.'File Droid ID'.MAC
									$BGuid1Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
								}
							}
							if (!!$entry.'Birth Volume Droid ID')
							{
								$Guid2Node = $entryNode.Nodes.Add("$('Guid 2')", "Droid Guid 2: $($entry.'Birth Volume Droid ID'.ObjectID)")
								$Null = $Guid2Node.Nodes.Add("version", "GUID Version: $($entry.'Birth volume Droid ID'.version)")
								$Null = $Guid2Node.Nodes.Add("variant", "GUID Variant: $($entry.'Birth volume Droid ID'.variant)")
								$Null = $Guid2Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'Birth volume Droid ID'.Sequence)")
								if (!!$entry.'Birth volume Droid ID'.MAC)
								{
									# Add to tree
									$Null = $Guid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'Birth Volume Droid ID'.Created)")
									$Guid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
									$Null = $Guid2Node.Nodes.Add("MAC Address", "MAC Address: $($entry.'Birth volume Droid ID'.MAC)")
									$Guid2Node.Nodes["MAC Address"].Tag = $entry.'Birth volume Droid ID'.MAC
									$Guid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
								}
							}
							if (!!$entry.'Birth file Droid ID')
							{
								$BGuid2Node = $entryNode.Nodes.Add("$('Birth Guid 2')", "Birth File Droid ID: $($entry.'Birth file Droid ID'.ObjectID)")
								$Null = $BGuid2Node.Nodes.Add("version", "GUID Version: $($entry.'Birth file Droid ID'.version)")
								$Null = $BGuid2Node.Nodes.Add("variant", "GUID Variant: $($entry.'Birth file Droid ID'.variant)")
								$Null = $BGuid2Node.Nodes.Add("Sequence", "GUID Sequence: $($entry.'Birth file Droid ID'.Sequence)")
								if (!!$entry.'Birth file Droid ID'.MAC)
								{
									# Add to tree
									$Null = $BGuid2Node.Nodes.Add("GUIDcreated", "GUID created at: $($entry.'Birth file Droid ID'.Created)")
									$BGuid2Node.Nodes["GUIDcreated"].ForeColor = 'Cyan'
									$Null = $BGuid2Node.Nodes.Add("MAC Address", "MAC Address: $($entry.'Birth file Droid ID'.MAC)")
									$BGuid2Node.Nodes["MAC Address"].Tag = $entry.'Birth file Droid ID'.MAC
									$BGuid2Node.Nodes["MAC Address"].ToolTipText = "The MAC address used in the ObjectID is the address of the primary network card in the computer"
								}
							}
							
							$null = $entryNode.Nodes.Add("$($e)entry.Hostname", "Hostname: $($entry.'Hostname')")
								$null = $entryNode.Nodes.Add("$($e)entry.ID", "Entry ID: $($entry.'Entry ID')")
								$LastAccessed = $entryNode.Nodes.Add("$($e)Last Accessed", "Last Accessed: $($entry.'Last Accessed')")
								$LastAccessed.ForeColor = 'Cyan'
								$null = $entryNode.Nodes.Add("$($e)Entry Pin Status", "Entry Pin Status: $($entry.'Entry Pin Status')")
								$null = $entryNode.Nodes.Add("$($e)InQuickAccess", "InQuickAccess: $($entry.'InQuickAccess')")
								$null = $entryNode.Nodes.Add("$($e)String Data Length", "String Data Length: $($entry.'String Data Length')")
								$null = $entryNode.Nodes.Add("$($e)String", "String: $($entry.'String')")
								$e = $e + 1
							}
						} # endif
					} #end try
					catch { }
				}
				elseif ($LNKData -eq $null -and ($streaminf.StreamName -eq 'DestListPropertyStore'))
				{
					$check2 = $Root2.Nodes.Find("$($streaminf.StreamName)", $true)
					if (!!$check2)
					{
						$DestNode = $check2[0]
					}
					else
					{
						$DestNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: $($streaminf.StreamName)")
					}
					$DestNode.ForeColor = 'DarkRed'
					if ($streaminf.Data -ne $null)
					{
						$sdata = [System.BitConverter]::ToString($streaminf.Data) -replace '-',''
						$null = $DestNode.Nodes.Add("DataSize", "Data Size: $($streaminf.Data.length)")
						$null = $DestNode.Nodes.Add("Data","Data: 0x$($sdata)")
					}
				}
				else
				{
					$check2 = $Root2.Nodes.Find("$($streaminf.StreamName)", $true)
					if (!!$check2)
					{
						$DestNode = $check2[0]
					}
					else
					{
						$DestNode = $Root2.Nodes.Add($streaminf.StreamName, "Stream Name: $($streaminf.StreamName)")
					}
					$DestNode.ForeColor = 'Red'
	
					if (!!$streaminf.Data)
					{
						$sdata = [System.BitConverter]::ToString($streaminf.Data) -replace '-', ''
						$null = $DestNode.Nodes.Add("DataSize", "Data Size: $($streaminf.Data.length)")
						$null = $DestNode.Nodes.Add("Data", "Data: 0x$($sdata)")
					}
					else
					{
						$sdata = $null
						$null = $DestNode.Nodes.Add("DataSize", "Stream has no Data")
					}
					
					
				}
			}
			$treeview2.EndUpdate()
			$treeview2.Nodes[0].Expand()
			if ($treeview2.Nodes[0].Nodes['DestList'])
			{
				$treeview2.Nodes[0].Nodes['DestList'].Expand()
				if ($treeview2.Nodes[0].Nodes['DestList'].Nodes['Entries'])
				{
					$treeview2.Nodes[0].Nodes['DestList'].Nodes['Entries'].Expand()
				}
			}
			
			$Status.Text = "Selected file: $($fname)"
					
		}
		else
		{
			[System.Console]::Beep(500,150)
			$Status.Text = "$($fname) has no streams"
		}
		# Close Microsoft Compound File Binary File Format, Version 4'
		$result = $storageRootType.InvokeMember("Close", [System.Reflection.BindingFlags]::Static -bor [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public -bor [System.Reflection.BindingFlags]::NonPublic -bor [System.Reflection.BindingFlags]::InvokeMethod, $null, $result, $null)
		[GC]::Collect()
	}
	
	$treeview1_NodeMouseClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
		$status.Text = $_.Node.Tag
		if ($_.Node.Level -eq 1 -and $_.Button -eq 'Left')
		{
		<#	$treeview1.Nodes[0].Collapse()#>
			$_.Node.Toggle()
			$this.SelectedNode = $_.Node
		#	$treeview1.SelectedNode.LastNode.EnsureVisible()
		}
		elseif ($_.Button -eq 'Right')
		{
			$this.SelectedNode = $_.Node
		}
		
	}
	
	$treeview1_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		$status.Text = "Selected File: $($treeview1.SelectedNode.Name)"
		$node = $treeview1.SelectedNode
		if ($node.Name.EndsWith(".automaticDestinations-ms") -and !!$node.Tag )
		{
			try
			{
				Process-Automatic -File "$($treeview1.SelectedNode.Name)"
			}
			catch
			{
				Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message
				$Error.Clear
			}
		}
		elseif (!!$node.Tag)
		{
			try
			{
				Process-Link -File "$($treeview1.SelectedNode.Name)"
			}
			catch
			{
				Show-ErrorMessage -ErrorMessage $Error[0].Exception.InnerException.Message
				$Error.Clear
			}
			
		}
	}
	$Collapse_Expand1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Toggle()
		}
	}
	
	$CopyNode1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Text | Set-Clipboard
		}
	}
	
	$CopyFullFilePath_Click = {
		if (!!$treeview1.SelectedNode -and !!$treeview1.SelectedNode.Tag)
		{
			try
			{
				$filename = $treeview1.SelectedNode.Tag.ToString()
				$file = [System.IO.FileInfo]::new($filename)
				$file.FullName | Set-Clipboard
			}
			catch { [System.Console]::Beep(500, 150) }
		}
	}
	
	$Exit1_Click={
		$Jumplist_Browser.Close()
	}
	
	$CopyNode2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.Text | Set-Clipboard
		}
	}
	
	$CopyNode2Tag_Click = {
		if (!!$treeview2.SelectedNode.Tag)
		{
			$treeview2.SelectedNode.Tag[0] | Set-Clipboard
		}
	}
	
	$CopyAll2_Click={
			$node = $treeview2.SelectedNode
			If (!!$node -and $node.GetNodeCount($false) -ge 1)
			{
				$Status.Text = 'Please wait ..'
				$Jumplist_Browser.Cursor = 'AppStarting'
				$nodes = (Get-Nodes -nodes $node).Text
				$nodes | Out-String | Set-Clipboard
				$nodes = $null
				$Jumplist_Browser.Cursor = 'Default'
				$Status.Text = 'Ready'
			}
			else { [System.Console]::Beep(500, 150) }
	}
		
	$Expand2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.Toggle()
		}
	}
	
	$Exit2_Click={
		$Jumplist_Browser.Close()
	}
	
	$Jumplist_Browser_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
		switch ([System.Windows.Forms.MessageBox]::Show($Jumplist_Browser, "Are you sure you want to Exit?", "Jumplist Browser", "YesNo", "Question", 'Button2'))
		{
			'Yes' {
				$Status.Text = "Exiting .."
				
				try
				{
					$treeview1.Nodes.Clear()
					$treeview2.Nodes.Clear()
				}
				catch { }
				[GC]::Collect()
				$Cancel = $false
			}
			'No' {
				$Cancel = $true
			}
		}
		if (!!$Cancel) { $_.Cancel = $true }
		else { $_.Cancel = $false }
		
	}
	$About_Click={
		# Check for latest release on Github
		$JumplistBrowserVersion = "v." + [System.Windows.Forms.Application]::ProductVersion
		$repo = "kacos2000/Jumplist-Browser"
		$latestR = "https://api.github.com/repos/$($repo)/releases/latest"
		$releases = "https://api.github.com/repos/$($repo)/releases"
		$aboutmessage = "Jumplist Browser $($JumplistBrowserVersion)`nCostas Katsavounidis © 2022-2023`nhttps://github.com/kacos2000"
		$downlink = "https://github.com/kacos2000/Jumplist-Browser/releases/latest"
		
		[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
		if (test-connection -ComputerName 8.8.8.8 -Count 1 -Quiet -ErrorAction SilentlyContinue)
		{
			$Status.Text = "Checking releases on GitHub"
			try
			{
				$rlist = (Invoke-RestMethod -Uri $releases -UserAgent 'https://github.com/kacos2000/Jumplist-Browser' -TimeoutSec 30).tag_name
				$latest = (Invoke-RestMethod -Uri $latestR -UserAgent 'https://github.com/kacos2000/Jumplist-Browser' -TimeoutSec 30)
				
				$tag = $latest[0].tag_name
				$published = $latest[0].published_at
			}
			catch{ $rlist = $latest = $null}
			if (!!$rlist -and !!$latest)
			{
				if ($JumplistBrowserVersion -ne $tag -and $JumplistBrowserVersion -in $rlist)
				{
					$latestmessage = "$($aboutmessage)`n`nThere is an update ($($tag)) of Jumplist Browser at:`n'$($downlink)'`nreleased on $($published). Check it out .. "
					$Status.Text = "Latest version: JumplistBrowser $($tag)"
					Show-WarningMessage -WarningMessage $latestmessage
				}
				elseif ($JumplistBrowserVersion -eq $tag)
				{
					$Status.Text = "Latest version: JumplistBrowser $($tag)"
					Show-InfoMessage -InfoMessage "$($aboutmessage)`nYou are using the latest version of Jumplist Browser."
				}
				else
				{
					$Status.Text = "Latest version: JumplistBrowser $($tag)"
					Show-InfoMessage -InfoMessage $aboutmessage
				}
			}
			else
			{
				Show-InfoMessage -InfoMessage $aboutmessage
			}
		}
		else
		{
			$Status.Text = "Session TimeOut"
			Show-InfoMessage -InfoMessage $aboutmessage
		}
		$Status.Text = "Ready"
		
	}
	
	$OpenFolder_Click = {
		
		$currentuser_recentfolder = [System.Environment]::GetFolderPath("Recent")
		$folderbrowserdialog1.SelectedPath = "$($currentuser_recentfolder)"
		
		if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
		{
			$script:recentfolder = $folderbrowserdialog1.SelectedPath
			if ($treeview1.Nodes) { $treeview1.Nodes.Clear() }	else { }
			if ($treeview2.Nodes) { $treeview2.Nodes.Clear() }	else { }
			$Status.Text = $null
			
			try
			{
				$Status.Text = "Selected Folder: $($recentfolder) "
				if (!!(get-files -Folder "$($recentfolder)"))
				{
					$toolstripRefresh.Visible = $true
				}
				else
				{
					$toolstripRefresh.Visible = $false
					[System.Console]::Beep(500, 150)
				}
			}
			catch
			{
				$toolstripRefresh.Visible = $false
				[System.Console]::Beep(500, 150)
				return
			}
		}
		else
		{
			$toolstripRefresh.Visible = $false
			[System.Console]::Beep(500, 150)
		}
	}
	
	$Open_Click={
		$openfiledialog1.Filter = "Automatic Destinations Jumplist (*.automaticDestinations-ms)|*.automaticDestinations-ms|Custom Destinations Jumplist (*.customDestinations-ms)|*.customDestinations-ms|Link files (*.lnk)|*.lnk|All files (*.*)|*.*"
		if ($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$Folder = Split-Path -Path "$($openfiledialog1.FileName)" -Parent
			if ($treeview1.Nodes) { $treeview1.Nodes.Clear() }
			else { }
			if ($treeview2.Nodes) { $treeview2.Nodes.Clear() }
			else { }
			
			$file = @([PSCustomObject][Ordered]@{
					'FileName'	      = $openfiledialog1.FileName
					'Parent'		  = $folder
					'CreationTimeUtc' = [system.IO.File]::GetCreationTimeUtc($openfiledialog1.FileName).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
					'LastAccessTimeUtc' = [system.IO.File]::GetLastAccessTimeUtc($openfiledialog1.FileName).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
					'LastWriteTimeUtc' = [system.IO.File]::GetLastWriteTimeUtc($openfiledialog1.FileName).ToString("dd/MM/yyyy HH:mm:ss.fffffff")
					'Attributes'	  = [system.IO.File]::GetAttributes($openfiledialog1.FileName)
					'Size'		      = [System.IO.FileInfo]::new($openfiledialog1.FileName).Length
				})
			$Status.Text = "Selected File: $($openfiledialog1.FileName) "
			
			Add-fileNodes -Files $file -RootFolder "$($Folder)"
			$toolstripRefresh.Visible = $true
		}
		else
		{
			$toolstripRefresh.Visible = $false
			[System.Console]::Beep(500, 150)
		}
	}
	
	$Collapse2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.Collapse()
		}
	}
	
	$ExpandAll2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.SelectedNode.ExpandAll()
		}
	}
	
	$CollapseAll2_Click={
		if (!!$treeview2.SelectedNode)
		{
			$treeview2.CollapseAll()
			$treeview2.Nodes[0].Expand()
		}
	}
	
	$Expand1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Expand()
		}
		
	}
	
	$Collapse1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.Collapse()
		}
	}
	
	$ExpandAll1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.SelectedNode.ExpandAll()
		}
		
	}
	
	$CollapseAll1_Click={
		if (!!$treeview1.SelectedNode)
		{
			$treeview1.CollapseAll()
			$treeview1.Nodes[0].Expand()
		}
		
	}
	
	$OpenFileWith_Click = {
		if (!!$treeview1.SelectedNode -and !!$treeview1.SelectedNode.Tag)
		{
			try
			{
				$filename = $treeview1.SelectedNode.Tag.ToString()
				$file = [System.IO.FileInfo]::new($filename)
				if ($file.Exists)
				{
					[ShellOpenWith]::DoOpenFileWith($file.FullName)
				}
			}
			catch{[System.Console]::Beep(500,150)}
		}
	}
	
	$SaveNodestoTxt_Click={
		$node = $treeview2.Nodes[0]
		If (!!$node -and $node.GetNodeCount($false) -ge 1)
		{
			$savefiledialog1.AddExtension = $true
			$savefiledialog1.InitialDirectory = [Environment]::GetFolderPath('Desktop')
			$savefiledialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*"
			$savefiledialog1.FilterIndex = 0
			$savefiledialog1.FileName = "Jumplist_properties"
			$savefiledialog1.DefaultExt = 'txt'
			if ($savefiledialog1.ShowDialog() -eq 'OK')
			{
				$Status.Text = 'Please wait ..'
				$Jumplist_Browser.Cursor = 'AppStarting'
				$nodes = (Get-Nodes -nodes $node).Text
				$nodes | Out-String | Out-File -FilePath $savefiledialog1.FileName -Encoding utf8 -NoClobber
				$nodes = $null
				$Jumplist_Browser.Cursor = 'Default'
				$Status.Text = 'Ready'
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$exitToolStripMenuItem_Click={
		$Jumplist_Browser.Close()
	}
	
	$Process1_Click={
		$node = $treeview1.SelectedNode
		if (!!$node)
		{
			if ($node.Name.EndsWith(".automaticDestinations-ms") -and !!$node.Tag)
			{
				Process-Automatic -File "$($treeview1.SelectedNode.Name)"
			}
			elseif (!!$node.Tag)
			{
				Process-Link -File "$($treeview1.SelectedNode.Name)"
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$treeview2_NodeMouseClick=[System.Windows.Forms.TreeNodeMouseClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TreeNodeMouseClickEventArgs]
		if ($_.Button -eq 'Right')
		{
			$treeview2.SelectedNode = $_.Node
			if (!!$_.Node.Tag)
			{
				$CopyNode2Tag.Visible = $true
			}
			else
			{
				$CopyNode2Tag.Visible = $false
			}
			if ($_.Node.Text.StartsWith("Stream Name") -and  !!$_.Node.Tag[1])
			{
				$SaveStreamToFile.Visible = $true
			}
			else
			{
				$SaveStreamToFile.Visible = $false
			}
		}
		
	}
	
	$SaveStreamToFile_Click={
		if (!!$treeview2.SelectedNode.Tag -and !!$treeview2.SelectedNode.Tag[1])
		{
			$savefiledialog1.AddExtension = $true
			$savefiledialog1.InitialDirectory = [Environment]::GetFolderPath('Desktop')
			$savefiledialog1.Filter = "LNK files (*.lnk)|*.lnk|All files (*.*)|*.*"
			$savefiledialog1.FilterIndex = 0
			$savefiledialog1.FileName = "Stream"
			$savefiledialog1.DefaultExt = 'lnk'
			
			if ($savefiledialog1.ShowDialog() -eq 'OK')
			{
				$data = $treeview2.SelectedNode.Tag[1]
				$OutputFileStream = [IO.File]::OpenWrite($savefiledialog1.FileName)
				$OutputFileStream.Write($data, 0, $data.count)
				$OutputFileStream.Dispose()
				$Status.Text = 'Ready'
			}
			else { [System.Console]::Beep(500, 150) }
		}
		else { [System.Console]::Beep(500, 150) }
	}
	
	$Status_DoubleClick = {
		if (!!$Status.Text)
		{
			$Status.Text | Set-Clipboard
			[System.Console]::Beep(2000,150)
		}
	}
	
	$toolstripRefresh_Click={
		if (!!$script:recentfolder)
		{
			if ($treeview1.Nodes) { $treeview1.Nodes.Clear() }	else {$null }
			if ($treeview2.Nodes) { $treeview2.Nodes.Clear() }	else { $null}
			$Status.Text = $null
			
			try
			{
				$Status.Text = "Selected Folder: $($script:recentfolder) "
				if (!!(get-files -Folder "$($script:recentfolder)"))
				{
					$toolstripRefresh.Visible = $true
				}
				else
				{
					$toolstripRefresh.Visible = $false
				}
			}
			catch
			{
				$toolstripRefresh.Visible = $false
				[System.Console]::Beep(500, 150)
				return
			}
		}
		else
		{
			$toolstripRefresh.Visible = $false
			[System.Console]::Beep(500, 150)
		}
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Jumplist_Browser.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		if($treeview1.SelectedNode -ne $null)
		{
			$script:MainForm_treeview1 = $treeview1.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeview1 = $null
		}
		if($treeview2.SelectedNode -ne $null)
		{
			$script:MainForm_treeview2 = $treeview2.SelectedNode.Text
		}
		else
		{
			$script:MainForm_treeview2 = $null
		}
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$Jumplist_Browser.remove_FormClosing($Jumplist_Browser_FormClosing)
			$Jumplist_Browser.remove_Load($Jumplist_Browser_Load)
			$OpenFolder.remove_Click($openfolder_Click)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$Status.remove_DoubleClick($Status_DoubleClick)
			$treeview1.remove_AfterSelect($treeview1_AfterSelect)
			$treeview1.remove_NodeMouseClick($treeview1_NodeMouseClick)
			$treeview2.remove_NodeMouseClick($treeview2_NodeMouseClick)
			$CopyNode1.remove_Click($CopyNode1_Click)
			$Exit1.remove_Click($Exit1_Click)
			$Process1.remove_Click($Process1_Click)
			$CopyNode2.remove_Click($CopyNode2_Click)
			$CopyAll2.remove_Click($CopyAll2_Click)
			$Expand2.remove_Click($Expand2_Click)
			$Exit2.remove_Click($Exit2_Click)
			$Open.remove_Click($Open_Click)
			$About.remove_Click($About_Click)
			$Expand1.remove_Click($Expand1_Click)
			$Collapse1.remove_Click($Collapse1_Click)
			$ExpandAll1.remove_Click($ExpandAll1_Click)
			$CollapseAll1.remove_Click($CollapseAll1_Click)
			$Collapse2.remove_Click($Collapse2_Click)
			$ExpandAll2.remove_Click($ExpandAll2_Click)
			$CollapseAll2.remove_Click($CollapseAll2_Click)
			$SaveNodestoTxt.remove_Click($SaveNodestoTxt_Click)
			$OpenFileWith.remove_Click($OpenFileWith_Click)
			$CopyFullFilePath.remove_Click($CopyFullFilePath_Click)
			$CopyNode2Tag.remove_Click($CopyNode2Tag_Click)
			$SaveStreamToFile.remove_Click($SaveStreamToFile_Click)
			$toolstripRefresh.remove_Click($toolstripRefresh_Click)
			$Jumplist_Browser.remove_Load($Form_StateCorrection_Load)
			$Jumplist_Browser.remove_Closing($Form_StoreValues_Closing)
			$Jumplist_Browser.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$Jumplist_Browser.SuspendLayout()
	$splitcontainer1.SuspendLayout()
	$statusstrip1.SuspendLayout()
	$menustrip1.SuspendLayout()
	$contextmenustrip1.SuspendLayout()
	$contextmenustrip2.SuspendLayout()
	#
	# Jumplist_Browser
	#
	$Jumplist_Browser.Controls.Add($splitcontainer1)
	$Jumplist_Browser.Controls.Add($statusstrip1)
	$Jumplist_Browser.Controls.Add($menustrip1)
	$Jumplist_Browser.AutoScaleDimensions = New-Object System.Drawing.SizeF(10, 20)
	$Jumplist_Browser.AutoScaleMode = 'Font'
	$Jumplist_Browser.ClientSize = New-Object System.Drawing.Size(1883, 1294)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
dAAACAgCAAAAAAAAAAAAAAAPAwAAABp7AAACAAABAAUAAAAAAAEAIACENgAAVgAAADAwAAABACAA
qCUAANo2AAAgIAAAAQAgAKgQAACCXAAAGBgAAAEAIACICQAAKm0AABAQAAABACAAaAQAALJ2AACJ
UE5HDQoaCgAAAA1JSERSAAABAAAAAQAIBgAAAFxyqGYAAAABc1JHQgCuzhzpAAAABGdBTUEAALGP
C/xhBQAAAAlwSFlzAAALEgAACxIB0t1+/AAANhlJREFUeF7tnQd4XMW1x18SkpDAe05CMQZjiikm
BAgOPaaazoMAoQRIyEvB9E5IMMXBlNjGuODesVWsZvXeVtKqWMVWL7uStsiSbFmSJW+RDSSed85q
r7l792xT3XLO9/0+y9LuvXPnzv/MmTlz5/4XGxsbGxsbGxsbGxsbGxsbGxsbGxtbgFhVl/ixumto
RonecmWx8cidJR1DT5R2WF8q7RhaAP8uKjFal8DPG5CSDuuX8G8MYv95+Pe2z1gXwc/4nZfwGGXG
I3fgMSs6h87Gc9hPx8bGNtGGAi/tsNxdZrQ+D2JdbBOxYagCOAg/iwkBzwXnLOmwRGMZsCxYJiyb
vZhsbGyjsXTtsR+W7bNeCwKbV2ocWl1qsBSC+AacxOh/HCo2WApKjEOrsOx4DXgt9stiY2OjbLf2
2P+UGo/cDqL5Z3GHNQd61COEuAITg+UbGEpUwc8rwZk9WtRtOs1+2WxsoWk4li7eZ7kXe8pSo7XF
STRBj7UZrv2Lsn2We0o7jv3IXi1sbMFr5Z1HLwKxvwaNPyuoevhRAkOGoVLDUCZEP6+W7Tt6ob26
2NgC30p0Q+dgwy7usBRTjZ9xpqTD2ohDIXSY9mpkYwscs6XiDEN/L+4Y2kM1cMZ77HMHf8MUpL16
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
AJGIbRzGspNk0r2cq9vDo9zfx6b769Ov//PZtf/127b/9dq2//LZtP/u1bH/5Myq/9jCoffSvJzZ
x7KVpq+dg2NURT0hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADAqY852MKjoeXMq+/64Lv//+XA//zhvP/43bn/9tu4//Xbt//127f/9du3
//Xat//02rf/9Nm2//PZtv/02rb/9Nq2/+rRr//Vv6DqxbCUnIh7ZToAAAAAAAAAAAAAAAEAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtqOFKuHKqKrv17P//+nD//vhvP/127f/9Nu3//Pa
tv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Tbt//127f/9Nu3//HYtP/w17P/8di0
/9rEo/rHspSgZ1tIKgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADeyKd18Ne09f/rxf/4
3rr/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Patv/z2rb/89q2//Pa
tv/z2rb/89q2//Tbt//13Lj/8tm2/+3Vsv/w2LT/2MGi7K+cg20AAAAEAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
u66TE+zVs7L/68b/++G9//Lat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z
2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Xcuf/w17X/7NSy/+jR
r//Dr5KnDAwMFQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAADhyqUi89y41f/ux//027j/89q3//Pat//z2rf/89q3//Pat//z2rf/
89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/89q3//Pat//z
2rf/89q3//Pat//027j/9Nu4/+vTsf/v17T/yraYyEtDPCIAAAAAAAAAAQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDStCL337vg/+vG//LZt//z2rj/89q4
//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/
89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//PauP/z2rj/89q4//Xcuf/s1LP/79e1/824m9NL
QzwiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8da7E/ff
vNn/68b/89q3//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4
//Xcuf/13Ln/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/
9Nu4//TbuP/23bn/7ta0//DYtv/JtJjKFxcXFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA9Nu4u//uyP/z2rf/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9Nu4//Tb
uP/027j/9Nu4//TbuP/027n/9N3A/+vVuP/t1bP/9du4//TbuP/027j/9Nu4//TbuP/027j/9Nu4
//TbuP/027j/9Nu4//TbuP/027j/9Nu4//TbuP/027j/9t25/+3Vs//x2bb/u6iNqwAAAAUAAAAB
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw2LZ+//DL//Tbuf/027n/9Nu5//Tbuf/0
27n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuv/13Lv/6seC/9u9gf/axar/79a1//fd
u//027n/9Nu5//Tbuf/23Lr/9dy6//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5
//bduv/s1LP/6tKx/5+PeHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPXui344b78
+eC9//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//bfxP/v
yn//68Fa/+u/VP/cwIv/49C7//DYuP/027n/9t27//Tdwf/r1bn/7dW0//Xbuf/027n/9Nu5//Tb
uf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/13Lr/7da0/9W/ofBYTUErAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAPLZt7z/7Mf/89q5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/
9Nu5//Tbuf/13Lr/99/B//HcyP/kul7/78x1/+3FZv/gs0v/27+O/9vFpv/fzLb/59G2/+nFgP/c
vYH/2sWq/+3VtP/13Lr/9Nu5//Tbuf/027n/9Nu5//Tbuf/027n/9Nu5//Tbuf/13Lr/8dm3//HZ
t/+5qI6mAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA89y5Qv/pxf/23bv/9Ny6//Tcuv/03Lr/9Ny6
//Tcuv/03Lr/9Ny6//Tcuv/13bz/9Ny6//ffwf/z3sX/5cqf/9OqT//Omx7/2qMg/+KqI//ipxb/
4acY/+CsMP/dtFj/37Zb/+vDYP/rv1T/3LyC/+vVu//23bv/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/0
3Lr/9Ny6//Tcuv/03Lr/9t67/+7Wtv/axKb7bmZVPAAAAAAAAAAAAAAAAAAAAAAAAAAA89q5t//s
x//z3Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny5//bevv/r1bX/4My2/+XNpf/Wr1v/zJka
/8yWDv/NmRj/y5cY/9ukGv/iqRz/4agb/+GnFv/hpA//5Kka/+7Ogf/sw13/6seC//Tewv/03Lr/
9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Pbuf/y2rn/uqeOoQAAAAAA
AAAAAAAAAAAAAADx3Lol99+9/Pjfvf/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9d7C//DN
iv/mt0r/2LFd/8yaIv/MlQ3/zpkX/86aGv/Omhr/zZka/9miG//iqRz/4agc/+GoHP/hqBv/4ake
/+OqHv/fuWn/79i7//bdvP/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/03Lr/
9Ny6//bevP/x2bj/0bug70E6MiMAAAAAAAAAAAAAAADy27l5/+/L//Pcu//03Lv/9Ny7//Tcu//0
3Lv/9Ny7//Tcu//03Lv/9d/E/+7KgP/msSz/1J4X/8yXFP/Omhr/zpoa/86aGv/Omhr/zJgZ/9ae
Fv/jqRz/4agc/+GoHP/hqBz/4agb/+CmFP/bvon/6tW9//bevP/03Lv/9Ny7//Tcu//03Lv/9Ny7
//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//XdvP/y2rr/69O0/5+OeGgAAAAAAAAAAAAAAAD03LrC
/+nG//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//fgxv/mw3z/y5YQ/86aGv/O
mhr/zpoa/86aGv/MlxL/y5YS/9imLP/iqRz/4agc/+GoHP/hqBz/4agc/+GmEf/cuG//5tK8//be
vP/03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//03Lv/9Ny7//Tcu//13bz/9dy8
/7+rkqwAAAAAAAAAAPLYvxTz27vy+uLA//TcvP/03Lz/9Ny8//TcvP/03Lz/9Ny8//TcvP/03Lz/
9Ny8//bgxf/t0aH/zZkY/86ZGP/Omhr/zpoZ/82XEP/UpDL/6MmO//DSnf/hqBr/4aca/+GoHP/h
qBz/4agc/+GmEP/dtFz/49C7//Xevf/03Lz/9Ny8//TcvP/03Lz/9Ny8//TcvP/03Lz/9Ny8//Tc
vP/03Lz/9Ny8//TcvP/23r3/9d29/825n90MDAAUAAAAAPLZvD395sP/9d69//TdvP/03bz/9N28
//TdvP/03bz/9N28//TdvP/03bz/9N28//Xev//z27f/0J8q/82YFP/Pmxr/y5cV/9KwZP/w2rz/
+eXP//PZr//iqiT/4acZ/+GoHP/hqBz/4agc/+GmEv/esUn/4M22//Tdvf/03bz/9N28//TdvP/0
3bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/13r3/9N28/9fCpvppX1AzAAAAAPTd
u2L/7cr/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TewP/z2rL/3Kw5
/8uVEP/DkRT/u4oQ/9K6kv/o1b//9N6+//Tdu//ksDP/4KYV/+GoHP/hqBz/4agc/+GmFf/frTf/
3squ//PcvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/0
3bz/9d28/+XPsf+VhXNSAAAAAPTcvH7/78z/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Td
vf/03b3/9N29//XgyP/txnP/6bEl/9GjMv+5ihj/vYsN/9q1Y//axan/69W4//fhxv/mtkb/4KUS
/+GoHP/hqBz/4agc/+GnF//gqij/3Maj//Davf/13r7/9N29//Tdvf/03b3/9N29//Tdvf/03b3/
9N29//Tdvf/03b3/9N29//Tdvf/03b3/9d6+/+/Yuf+ll39qAAAAAPTdvY//7sz/9N29//Tdvf/0
3b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tewf/x1aP/7cZz//PZsP/r06//5LlZ/+et
G//mxoX/8d3E//bhyf/ovVz/36QP/+GoHP/hqBz/4agc/+GnGv/hqB3/3MGU/+3Yvv/13r7/9N29
//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9t++//PcvP+vnod6
AAAAAPTevZX/7sz/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/1
38L/9eHI//Xfwv/34sn/9Niq/+3Gcv/02rD/9d/B//bhyv/rxXP/36QP/+GoHP/hqBz/4agc/+Go
G//hphX/3L2D/+rXvv/2377/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Tdvf/03b3/9N29
//Tdvf/03b3/9t+///bfvv+xoYmAAAAAAPTdvZH/783/9d6+//Xevv/13r7/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r3/9d/D//biyv/138H/9d69//biyf/u
zIr/4KQS/+GoHP/hqBz/4agc/+GoHP/hphH/3blx/+jVv//34MD/9d6+//Xevv/13r7/9d6+//Xe
vv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9+DA//ffv/+yoYh7AAAAAPXdvoL/8M3/9d6+
//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//bhxv/x057/4acZ/+GnGv/hqBz/4agc/+GoHP/hpRH/3bVd/+TSvf/2
37//9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7/9+DA//Xe
vv+rnYVrAAAAAPXfv2j/783/9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6/
//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///bfxP/z2bD/4qsk/+CnGP/hqBz/
4agc/+GoHP/hphL/3rFJ/+HOuf/13sD/9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///Xev//13r//+OHB/+3Xuf+fkHpTAAAAAPfhv0T/6cj/9t/A//Xev//13r//9d6///Xe
v//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6/
//Xfwf/13b3/5LA0/+CmFf/hqBz/4agc/+GoHP/hphX/3644/9/Ksf/03b//9t6///Xev//13r//
9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//+uLD/97Krf1/dWUyAAAAAPXivBv1
3b73+uPD//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xe
v//13r//9d6///Xev//13r//9d6///XewP/24cf/5rZH/+ClEv/hqBz/4agc/+GoHP/hpxj/4Ksp
/93Hpf/x3MD/9t/A//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//137//
/ubG/9bCp+MiIiIPAAAAAAAAAAD13r/N/+vK//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/1
38D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/3483/6b5d/9+k
D//hqBz/4agc/+GoHP/hqBr/4agd/9zDl//u28H/9uDB//XfwP/138D/9d/A//XfwP/138D/9d/A
//XfwP/138D/9d/A//XfwP/24MH//+vK/8u4n7IAAAAAAAAAAAAAAADz37+I//LR//XfwP/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/1
38D/9d/A//XfwP/35M//7Md6/96jDf/hqBz/4agc/+GoHP/hqBv/4aYV/9y/hf/r2MH/9+HB//Xf
wP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/34cH//ObG/7WmjmsAAAAAAAAA
AAAAAAD14cMz++bH//fhwv/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//Xfwf/24sn/68Nr/+GmFP/hqBz/4agc/+GoHP/h
qBz/4aUR/9y6cv/o1sL/+OLD//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//Xf
wP/85sb/4c2w9X9uXR4AAAAAAAAAAAAAAAAAAAAA896/yf/tzP/138H/9d/B//Xfwf/138H/9d/B
//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//biy//uyX7/
68Ng/+vCX//hpRP/4KQR/+GnGv/hqBz/4aUP/922YP/g0cX/8Nq9//bfwf/138H/9d/B//Xfwf/1
38H/9d/B//Xfwf/138H/9d/B//Xfwf//78//z72jqgAAAAAAAAAAAAAAAAAAAAAAAAAA9t7BV//x
0P/238H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B
//Xfwf/138H/9d/B//bizP/txXH/68Vn/+vEY//pu1T/5bRA/+GoHf/fow7/4KUR/+KwOf/ewpD/
28ix/+7ZvP/24cL/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//rjxf/y3b7/q5mIOgAAAAAA
AAAAAAAAAAAAAAAAAAAAqqqqA/TewdL/7s3/9N/B//Xgwf/14MH/9eDB//Xgwf/14MH/9eDB//Xg
wf/14MH/9eDB//Xgwf/14MH/9eDB//Xgwf/14MH/9eDB//XhxP/03r3/7cZx/+7Kfv/248z/9uLH
//LYqv/tyoH/5rM7/+zEYv/rv1P/3L+G/+zawv/34sL/9eDB//Xgwf/14MH/9eDB//Xgwf/14MH/
9d/B///y0f/VwqmyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPfhw0T/7s7/9+LE//Xgwv/1
4ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xg
wf/14cT/9uPN//bjzP/14MP/9eDD//biyf/46Nr/7sl8/+vFZ//rwVn/68qI//Xiy//14ML/9eDC
//Xgwv/14ML/9eDC//Xgwv/14ML//OjJ/+7bvfmsn4woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAADz3cCe//XU//Xfwf/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/1
4ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14cT/9d+9/+3G
cf/uyn//9uHE//Xhw//14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/24cP///LS/9bCqXcAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADp1L8M9uLF2P/v0P/038L/9eDD//Xgw//14MP/
9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgw//14ML/9eHF//bjzv/2483/9eDE//Xgwv/14MP/9eDD//Xgw//14MP/9eDD//Xf
wv//9NT/59K2uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8trC
KvnmyPD/7M3/9N/C//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/
9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgw//14MP/9N/C///x0v/z38LYxribEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLavj/76sr1/+zN//Xgwv/24cP/9uHD//bhw//24cP/9uHD
//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/
9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//14ML///HR//jmx+HhyrQiAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz279A++nL7v/w
0f/24MP/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE
//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP//9NX/
+ebI2fDUuCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA89y6LfvoydP/9tb/+ePG//Xgw//24cT/9uHE//bhxP/24cT/9uHE//bh
xP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE
//bhxP/14MP/++bI///21v/55sm559C5FgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANrItg7658qa/+7P///v0P/2
4cX/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bh
xP/24cT/9uHE//bhxP/24cT/9uHE//jixf//8tP/+ujL+/fjx4AAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA+OPHSfvoy8r/8tT//+/R//jjx//24cX/9uHF//bhxf/24cX/9uHF//bhxf/2
4cX/9uHF//bhxf/24cX/9uHF//bhxf/24cX/9uHF//bhxf/65Mj///HT///u0P/66Mu39eHDMwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAAAAA89i2LvnivvL/5sL/89q3//PbuP/z27j/89u4//PbuP/z27j/89q4//TcvP/13Lv/
9Nu4//PauP/z27j/89u4//PbuP/z27j/89u4//PauP/027j/9dy5//vivv/YwqPtem9aMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAP7rxA323rvc/+nF//Pat//027j/9Nu4//TbuP/027j/9Nu4//Tb
uP/13bz/7tGk/+HJpf/x2bj/9t26//Tbuf/13Lr/9ty6//TbuP/027j/9Nu4//TbuP/027j/9dy5
//3jv//MuJvUHx8fEAAAAAAAAAAAAAAAAAAAAAAAAAAA89i2mP/wy//z2rj/9Nu5//Tbuf/027n/
9Nu5//Tbuf/027n/9t7C//TYrP/sxGP/4b5y/+LOuv/w2sD/9NzA/+3WuP/r1Lb/9Nu4//Tbuf/0
27n/9Nu5//Tbuf/027n/9ty6//vhvv+0ooqQAAAAAAAAAAAAAAAAAAAAAPPdvC754sD/9968//Tb
uf/027r/9Nu6//Tbuf/03L3/9t2+//fgx//u17j/3LVh/+O1Q//lszf/3bFM/9y8ff/jxIn/58Bo
/9zBkf/x2rz/9dy6//Tbuv/027r/9Nu6//Tbuv/13Lr/+eC9/93GqPl5bl4uAAAAAAAAAAAAAAAA
8tu5pf/uyv/z27n/9Ny6//Tcuv/03Lr/9N27//DXr//lzav/3759/8+fLP/LlQ//zpkV/9+mGP/i
phH/4KUR/+OuKv/sw1//68mH//Tewv/03Lr/9Ny6//Tcuv/03Lr/9Ny6//Tcuv/23rv//eXC/7yo
kJoAAAAAAAAAAPPcuRb13Lz0+uG///Tcu//03Lv/9Ny7//TcvP/03b7/675Y/9WkLP/KlA//zZgT
/86aG//MmBX/3aQY/+KpHf/hqBv/4aYS/96wRv/s1rz/9t69//Tcu//03Lv/9Ny7//Tcu//03Lv/
9Ny7//Xcu//74sD/1L6i60U5LhYAAAAA89y6Wf/tyf/03Lv/9Ny7//Tcu//03Lv/9Ny7//Xewf/v
0Zn/0Jsa/82YF//Omhr/zJUN/8+eJf/fqyz/4agZ/+GoHP/hphP/3a4//+fSuf/23r3/9Ny7//Tc
u//03Lv/9Ny7//Tcu//03Lv/9Ny7//ffvf/v17j/not5UgAAAADz27qW/+/L//TdvP/03bz/9N28
//TdvP/03bz/9N29//Tfwv/TpDb/zZcR/82ZGf/YsFf/89u6/+rBZv/fpA//4agc/+GnF//eqi3/
5M2t//Xfv//03bz/9N28//TdvP/03bz/9N28//TdvP/03bz/9t69//7mxP+8qZCKAAAAAPTdu77/
6sj/9N28//TdvP/03bz/9N28//TdvP/03b//9d26/92uPP/CiwD/vY4b/97Ksf/149H/7cd4/9+k
D//hqBz/4acZ/9+oIP/hyJ//9N/B//TdvP/03bz/9N28//TdvP/03bz/9N28//TdvP/13r3//+jG
/8m2m7EAAAAA8ty81P/nxf/03b3/9N29//Tdvf/03b3/9N29//Tewv/y1qf/675X/9m2bP/SojD/
37hi/+3byP/wz5D/4KUT/+GoHP/hqBv/4KYX/9/Cjv/y3cT/9N29//Tdvf/03b3/9N29//Tdvf/0
3b3/9N29//Xdvf//6Mb/0Lyhx///fwL03r3a/ubF//Tdvf/03b3/9N29//Tdvf/03b3/9N29//Te
vv/13sH/+eXQ//TWof/wzYf/9uHJ//HUo//hqBv/4aca/+GoHP/hpRL/3r16//Hdxf/13r7/9N29
//Tdvf/03b3/9N29//Tdvf/03b3/9N29///ox//Uv6TOAAAAAPXevtX/6Mb/9d6+//Xevv/13r7/
9d6+//Xevv/13r7/9d6+//Xev//13r3/9uDE//bhxv/138L/89qz/+KsJ//gphj/4agc/+GlEP/e
uGX/7tvF//bfv//13r7/9d6+//Xevv/13r7/9d6+//Xevv/13r7//+rI/9TApMgAAAAA9N6+wv/r
yv/13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///XewP/13sD/5LE4
/+ClFP/hqBz/4aUR/96yUf/r2ML/9+DA//Xev//13r//9d6///Xev//13r//9d6///Xev///7Mv/
0r6jsgAAAADz3r+c//DO//Xev//13r//9d6///Xev//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///bhyf/nuEz/4KQR/+GoHP/hphP/3q4+/+jUu//34MH/9d6///Xev//13r//9d6///Xe
v//13r//9t/A///ty//Jt52LAAAAAPTfv2H/8c//9d+///XfwP/138D/9d/A//XfwP/138D/9d/A
//XfwP/138D/9d/A//XfwP/137//9+PN/+rAZf/fpA7/4agc/+GnFv/fqy3/5dCx//bhw//138D/
9d/A//XfwP/138D/9d/A//XfwP/34cH/++XF/7amjVEAAAAA9eO/HPfgwfn648P/9d/A//XfwP/1
38D/9d/A//XfwP/138D/9d/A//XfwP/138D/9d/A//XfwP/35M//68Vy/9+jDf/hqBz/4acZ/9+o
IP/iyqP/9+LG//XfwP/138D/9d/A//XfwP/138D/9d/A//3nx//k0LPvcXFUEgAAAAAAAAAA896/
sv/w0P/03sD/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9uDH//LXp//rw2T/
5bEz/9+iDP/fpA7/4KUS/97CkP/t2sf/9d/A//Xfwf/138H/9d/B//Xfwf/03sD///LR/9jCqJ0A
AAAAAAAAAAAAAAD24MI7/uzM//fhw//138H/9d/B//Xfwf/138H/9d/B//Xfwf/138H/9d/B//Xf
wf/14cX/89qv/+zFa//uzIP/7syI/+e6Uv/jrSn/5bxb/93Fmf/y3sT/9uDC//Xfwf/138H/9d/B
//rlxv/x3b/9vKmRKgAAAAAAAAAAAAAAAAAAAAD03sCr//TU//Tfwf/14ML/9eDC//Xgwv/14ML/
9eDC//Xgwv/14ML/9eDC//Xgwf/14cX/9d/A//Xhxv/25M//9+bV/+/Oif/rv1P/7MyL//Xiy//1
4ML/9eDC//Xgwv/138H///XU/97Kr5MAAAAAAAAAAAAAAAAAAAAAAAAAAPTfvxj45Mfq/+vM//Tf
wv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14MT/9eDD//Xgwv/14MT/9N+/
//HVof/24ML/9eDD//Xgwv/14ML/9N/B///w0P/v277aqpR/DAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAPPfwEH66cv9/enK//Tfwv/14MP/9eDD//Xgw//14MP/9eDD//Xgw//14MP/9eDD//Xgw//1
4MP/9eDD//Xgwv/14cX/9uLK//XgxP/14MP/9eDD//Tfwv//7M3/+OXI8uLLtS0AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLdv1T76sz8/+3O//Xgw//24cP/9uHD//bhw//24cP/9uHD
//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//24cP/9uHD//bhw//14MP///DQ//rpy/Lq1ro/
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPdv0T76Mvm//XW//jjxv/1
4MT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/24cT/9uHE//bhxP/14MP/+eTH///3
1//76MvY79u8MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AOzZvBv66Mun/+zP///y1P/75cj/9uHF//bhxf/24cX/9uHF//bhxf/24cX/9uHF//bhxf/24cX/
/ObJ///01f/76Mv/+efIl+7Muw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD348dA/OrMrPjmyfb/9NX///TV///v0f//7M7//+vN///s
zv//79H///TV///z1P/558nw+ujLovXhyTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/u7NH/npzGD558mZ
+OXJv/fkx9P24sba9+TH0vnlyLz55smU/OrNWP/pyRgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP+qqgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/4AP//4AA//4AAD/8AAAf+AAAD/AAAAfgAAAD
4AAAA8AAAAHAAAABgAAAAIAAAACAAAAAgAAAAIAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAIAAAADA
AAABwAAAAeAAAAPgAAAD8AAAB/gAAA/8AAAf/gAAP/+AAP//4AP///9//ygAAAAYAAAAMAAAAAEA
IAAAAAAAYAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ANO+nkfhyaiU48qpyeLLqePiyqjq4Mem4trDo8jRu5yTs6GIRwAAAAEAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfyKVQ7tezzf3jvf//68T//+bB//3jvf/8
4b3//eO+///mwP//6ML/8tm1/9rEo8mtnIJOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAVVVVA+7WtZj/58L//+jC//TbuP/z2rf/89q3//Pat//z2rf/89q3//Pat//z2rf/9t25
///nwf/v17T/xLGUlAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//6oD89u5s//xy//23Ln/
89q3//Pat//z2rf/89q4//Xcuv/027j/89q3//Pat//z2rf/89q3//PauP/537z//+bB/8e0lq4A
AAAFAAAAAAAAAAAAAAAAAAAAAAAAAADz2bed//LM//TbuP/027j/9Nu4//TbuP/027j/9Nu4/+vS
r//y2rr/9ty5//Xcuv/13Lr/9Nu4//TbuP/027j/9967///nwv+9qI2XAAAAAAAAAAAAAAAAAAAA
APXcuVH/7cj/9ty6//Tbuf/027n/9Nu5//Xcu//34cr/8dGT/+S+Z//jy6v/8NvE/+/Ws//r07L/
9Nu5//Tbuf/027n/9Nu5//rgvf/x2bf/opF6TQAAAAAAAAAA///MBfTaudv+58T/89u5//Tbuf/0
3Lr/8tzC//Hbv//iwob/1aY2/+KsKf/frDL/3rVb/+fAZf/kxov/89zA//Tbuv/027r/9Nu6//Tc
uv//6cX/z7qf0gAAAAUAAAAA9du7T//syf/03Lr/9Ny6//TcvP/127X/5r9q/9GlP//Llg//yZQP
/9adEf/jqBb/4aQM/+KxOP/t0qb/9d7A//Tcuv/03Lr/9Ny6//Tcuv/4373/89q5/6CPekkAAAAA
9Nu6pP/tyv/z3Lv/9Ny7//TcvP/238L/47pg/8qTB//OmRX/zZoc/9uqNP/iqBr/4acX/92oKf/n
0LH/9t6///Tcu//03Lv/9Ny7//Tcu//03bz//+rI/8ezmpj///8B9Ny81/7nxP/03bz/9N28//Td
vP/24cf/68yW/8qSBf/Hlh//5s2j//HSlv/gpRP/4acZ/9+nHf/ly57/9eDC//TdvP/03bz/9N28
//TdvP/03bz//+nG/9XBpcz/378Q89y87/riwf/03bz/9N28//TdvP/138b/8M6H/9WnOP/Imy//
5cyk//HWqf/hqBz/4acZ/+ClFf/ixIz/9N/F//TdvP/03bz/9N28//TdvP/03bz//ubE/93Iq+X0
4MEZ89y89vniwf/03b3/9N29//Tdvf/03b7/9Nu3//bgxP/y05j/8dOe//Pbuf/irCj/4KYX/+Cl
Ef/gvnf/89/H//Xdvf/03b3/9N29//Tdvf/03b3//eXE/+HMr+zw4rgS9d6+8Pvjw//13r7/9d6+
//Xevv/13r7/9d7A//Xev//24MX/9uDF//XewP/ksjn/4KUU/+GlEP/fuGL/8t7I//bfv//13r7/
9d6+//Xevv/13r7//+fG/+LNr+b///8C9d6/2v7nx//13r//9d6///Xev//13r//9d6///Xev//1
3r//9d6///bhyf/nuE3/4KQR/+GlEf/esk3/79vE//bfwP/13r//9d6///Xev//13r///+vK/9/K
rs0AAAAA9t/Aqv/wzv/13r//9d+///Xfv//137//9d+///Xfv//137//9d+///fkzv/qwWf/3qMN
/+GmFP/erTr/7Ni9//fhwv/137//9d+///Xfv//03r////HP/9jFqJoAAAAA9t+/Wf/x0P/138D/
9d/A//XfwP/138D/9d/A//XfwP/138D/9d/B//bhxv/rxG3/36MM/+CjDf/eqSf/6NO2//fixf/1
38D/9d/A//XfwP/34ML//ujJ/8a0m0gAAAAA5eXMCvTewOX96cr/9N/B//Xfwf/138H/9d/B//Xf
wf/138H/9eDE//Tbtv/sxWr/6sBh/+WzPf/iqiL/4MGC/+3Zvv/24cP/9d/B//Tfwf//7s7/59G2
1j8/PwQAAAAAAAAAAPTfwmH/9dT/9uDC//Xgwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgw//03Lf/
9uLI//bjzf/vzYX/6sFj//Dbuv/14cT/9eDC//jixP//787/2sasTQAAAAAAAAAAAAAAAAAAAAD0
38Kw//bW//Xfwv/14ML/9eDC//Xgwv/14ML/9eDC//Xgwv/14cb/9eDD//Xhxf/14ML/9N25//bh
xf/04ML/9eDC///41//r1bmbAAAAAAAAAAAAAAAAAAAAAAAAAADp1L8M+OXHxv/31//34cT/9eDD
//bhw//24cP/9uHD//bhw//24cP/9uHD//Xgw//24cX/9uHG//Xgw//44sT///jY//Xhw7SqqqoD
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6dS/DPnlyK3/9db//+vN//bhxP/24cT/9uHE//bhxP/2
4cT/9uHE//bhxP/24cT/9uHE///tz///89T/+OTHnL+/fwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAD55clk++nM3f/z1f//8tT//+rN//znyf/75sn//OfK///rzf//89T///LU
//vpzNT24cdXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
5cyyCvzqy1n66Mun9+XI2Pbjxu/24sX19+TH7fjlyNT66Mqh+OnKUsyZmQUAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPDi
xhL/6ckY/+/PEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AD8A/AAf
APAABwDgAAMA4AADAMAAAQCAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAA
gAAAAMAAAQDgAAMA4AADAPAABwD8AB8A/gA/AP/j/wAoAAAAEAAAACAAAAABACAAAAAAAEAEAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMitkRzq1LGK7tWz2e7Vsvrw17T/69Ow+ufO
rNnYwqKKg3tgHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOnQr1P337vr/+/I//7kv//43rv/9926
//jeu///5cD//+zG/+nRr+u0oodVAAAAAAAAAAAAAAAAAAAAAPLZtlH+58L//uXA//PZt//027n/
8tq7//PbvP/13Lz/9Ny6//Pat///58L/8dq3/7Kih1MAAAAAAAAAAPXZvBv337zy/eTB//Pauf/2
38T/9d2//+nEdf/lyJX/79az/+3TrP/027r/89q4///nw//kzazxiH9tHAAAAAD03buQ//HM//Pb
u//02rT/58iM/9WqSP/TmxD/36cc/+GwOv/qzJP/9N7B//Tbuv/027r//+/K/8y4nI7+2rYH89y6
4/zkwv/03b7/9dy5/9WkMP/IkQf/16g4/+KpHP/fpBP/6cyc//bfw//03Lv/89y7//7nxf/hyqzf
8ti4KPXevf/2377/89y8//bhxv/dsk//yZos/+3Vsf/kry//36MN/+XFiP/14Mf/9N28//TdvP/5
4sD/6dO0/fXevjf85MP/9t++//Tdvf/03bz/89mw/+3Pl//y2rX/5bM//9+hB//jv3L/9ODJ//Td
vf/03b3/+OHA//Lbu//438Ap9+DA//jgwP/13r7/9d6+//Xfwv/24cf/9uLL/+e5Uf/foQT/4bhc
//Tgyf/13r7/9d6+//riwv/t17j94sapCfPdvub95sb/9d6///Xev//13r//9d6///fjzv/qwWj/
3p8A/+CyR//y38j/9t/A//Xev//+6cn/6tS23wAAAAD03sCX//TT//TewP/138D/9d/A//Xfwf/1
4cb/7MVw/+KqIP/fqiz/6tOx//bgxP/03sD///XT/+XPtI0AAAAA99+/IPfkxvf86Mn/9N/B//Xg
wv/14ML/9N/B//PbtP/03r3/7sp//+zOlP/04cf//urL//TgwvHNuqYaAAAAAAAAAADx2r9c//HS
//3pyv/038L/9eDD//Xgw//14cb/9uLH//biyP/14MP//+rL///tzv/s1rlRAAAAAAAAAAAAAAAA
AAAAAPTewF776czy//bW///py//548b/+OLF//njxv//6sz///fX//vqzO3y3cJUAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA8Nq9I/vqzZT658rg9+TH/v3pzP/348f++ufL3fvpy4/u1LseAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/9+/CP/rzCj68NI0/vHQJv//1AYAAAAAAAAA
AAAAAAAAAAAAAAAAAPAHAADgAwAAwAEAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA
gAAAAMABAADgAwAA8AcAAPwfAAAL'))
	#endregion
	$Jumplist_Browser.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Jumplist_Browser.MainMenuStrip = $menustrip1
	$Jumplist_Browser.Name = 'Jumplist_Browser'
	$Jumplist_Browser.StartPosition = 'CenterScreen'
	$Jumplist_Browser.Text = 'Jumplist and LNK Browser'
	$Jumplist_Browser.add_FormClosing($Jumplist_Browser_FormClosing)
	$Jumplist_Browser.add_Load($Jumplist_Browser_Load)
	#
	# splitcontainer1
	#
	$splitcontainer1.ContextMenuStrip = $contextmenustrip2
	$splitcontainer1.Dock = 'Fill'
	$splitcontainer1.Location = New-Object System.Drawing.Point(0, 35)
	$splitcontainer1.Margin = '5, 5, 5, 5'
	$splitcontainer1.Name = 'splitcontainer1'
	[void]$splitcontainer1.Panel1.Controls.Add($treeview1)
	[void]$splitcontainer1.Panel2.Controls.Add($treeview2)
	$splitcontainer1.Size = New-Object System.Drawing.Size(1883, 1230)
	$splitcontainer1.SplitterDistance = 627
	$splitcontainer1.SplitterWidth = 7
	$splitcontainer1.TabIndex = 2
	#
	# statusstrip1
	#
	$statusstrip1.Font = [System.Drawing.Font]::new('Segoe UI', '10')
	$statusstrip1.ImageScalingSize = New-Object System.Drawing.Size(24, 24)
	[void]$statusstrip1.Items.Add($Status)
	$statusstrip1.Location = New-Object System.Drawing.Point(0, 1265)
	$statusstrip1.Name = 'statusstrip1'
	$statusstrip1.Padding = '2, 0, 23, 0'
	$statusstrip1.Size = New-Object System.Drawing.Size(1883, 29)
	$statusstrip1.TabIndex = 0
	#
	# menustrip1
	#
	$menustrip1.Font = [System.Drawing.Font]::new('Segoe UI', '9')
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolstripRefresh)
	[void]$menustrip1.Items.Add($About)
	$menustrip1.Location = New-Object System.Drawing.Point(0, 0)
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Padding = '10, 3, 0, 3'
	$menustrip1.ShowItemToolTips = $True
	$menustrip1.Size = New-Object System.Drawing.Size(1883, 35)
	$menustrip1.TabIndex = 1
	$menustrip1.Text = 'menustrip1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($Open)
	[void]$fileToolStripMenuItem.DropDownItems.Add($OpenFolder)
	[void]$fileToolStripMenuItem.DropDownItems.Add($toolStripSeparator)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAUgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB9ElEQVQ4T42T20/TYBjGm2j8A20H0YWgWYxbJGgUIWGBafCIiUa8cXiAbXSTboPJPOFh
08HGQBKT6gWFmJh4wQW60m50sEMf369kC1sW0ya/m/d5nl/yXZTzST9OnL2RGuv2vvl+anRxww7d
w29l1830NZ8vfZzr8b2/NS5tIbNVR/anaYvMZh23wxvovf5xlBMGk3Ikp2PhW5nYt0kZkawOYejV
Ktc1lFTEJQ3RtT3EvhoWc+sG2r843Ro567KNMLAgc11XX3YUmCZa6CxIkGAgocxkNEire5DWDAtW
ahdE6dbIZ6nLNsLlOAmuzCuhLxrEHFlXDItI3kC9jhbCdGvkrMs2wsUYCS5FlcDnXUwvFYmSRTBb
Qo1GRwksH2YWmSLYRuifJUG/pDxPFTBJ/NqpolrDf9ncruDxpwLYhu+LyJyj74Xy9EMBE69Vi221
hgoVO/H7T7XZYxveEyaBR1T871Tcmys2UYsmKlUaHWFHq+NunPJ53cK/qIJ3h0jgniHBrhXeiZWa
lPaBAxoydMNsycapyzb8uQAJzoc6ChjlA8AgUfu9KXBNyxzvmpKf0XseJjXcT+i2mKAu2wiuqTzn
9IhjI4/yCKT+Ipgu2IJ1hx8sw3lB9HLslzztDvqEM09WTvb41+3A907mnJ6Q1+GQjv0DAR4sggxA
S24AAAAASUVORK5CYIIL'))
	#endregion
	$fileToolStripMenuItem.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = New-Object System.Drawing.Size(66, 29)
	$fileToolStripMenuItem.Text = '&File'
	#
	# OpenFolder
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAsgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAABc1JHQgCuzhzpAAAABGdBTUEAALGPC/xhBQAAAAlw
SFlzAAAWJQAAFiUBSVIk8AAAAkdJREFUOE/FkF1I02EUxv8XXXRlkRWFUGB54c0gKKK6CCmiUBTL
LEjShJofVBgLc360qenm5ubUlS5rm66p00ozCvuQCkUi1NSRZmpWFJViZqjk16+/LtShhHcdeHjh
cJ7fec4rLLeUBjuX1FYyjQ7+tpZfETKjmylVhM284bJ8hE99b6m06Repo+XpPzeFxGYTFJ2DMDPc
1WZhbKhiVr8H7Uz0m3FYs+lofbYk5EiMjqAoAwHSPISKYh2jg6Vu5qmvBUw44yi9qaakMANzfiqm
nBSuaeXkqeLdoWUWDaPfLXPmadFMlxyc0iW1CHCrSMWvL6Y5c22lZlYPHVnU2FXcLcnAYU7DblJi
NV7mhiGJQp0coybBBSsxZTD8IXc2dm+9gqpSHVO9SuhLd9d7sdeTCJ0yeBNLa3kotut6BLMxjZ/d
aviopbosm8ZHWtfQwuivw6EphMkGf8Ye+/GuWIJMGuw6pcig4EeHkr6GZKrsWqZ7FNAe5TK2RorG
40w2BjJWd4DhB3sYqNyGMtpHPEfuAhTokhloS+C2TUPzCzFJZ5wIOA3NYUy/DGb8+SFGavcyWLWd
b2W+NF1ZzQl/7/mPNGbJaa9L4Y4tC7pToEWM++oo4/UBjDzxY6hmJ/0OCZ8tW3FqPVFIt3A2+uQ8
IDczngqrGue9GJr0wpwatSuoU63kfuoqypPWYY734uqFzYQt3D5T+vSL6BVnyEyIIPHcMc5HBnIq
dD+HD+5i324JOyQ++Hp7sWnjWtav8WCDp4c74D+XIPwBF8beaT1+/VgAAAAASUVORK5CYIIL'))
	#endregion
	$OpenFolder.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$OpenFolder.ImageTransparentColor = [System.Drawing.Color]::Magenta 
	$OpenFolder.Name = 'OpenFolder'
	$OpenFolder.ShortcutKeys = [System.Windows.Forms.Keys]::O -bor [System.Windows.Forms.Keys]::Control 
	$OpenFolder.Size = New-Object System.Drawing.Size(248, 30)
	$OpenFolder.Text = 'Open &Folder'
	$OpenFolder.add_Click($openfolder_Click)
	#
	# toolStripSeparator
	#
	$toolStripSeparator.Name = 'toolStripSeparator'
	$toolStripSeparator.Size = New-Object System.Drawing.Size(245, 6)
	#
	# exitToolStripMenuItem
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAPAEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA3klEQVQ4T62TQQrCMBBFk43iOayL4tIbKSpCTyBY1LPpSqF1oYuSU5Tsx5l0qkka2iAO
fCjT/34yAxF/KTUViyqRRTWTECX0EsO4ENh4BI19QoZxDAgZIsR4N6DeL0Gl428vHWFv5XhIjLsB
9WENpsprE4IwFBfT0vl2OEDNJwDPmwEopIXhdTf/bC/j3RGcEKoATGI8sETr2qbacTwf416ADePJ
9jh+COPeEvNNA/C17XH0cTccQNKnzJmZvvU5czwkxgM7iBTjGJDIMmToFTKMfx5TfAh6ncf0ewnx
BuWSu6CElvwDAAAAAElFTkSuQmCCCw=='))
	#endregion
	$exitToolStripMenuItem.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = New-Object System.Drawing.Size(248, 30)
	$exitToolStripMenuItem.Text = 'E&xit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# folderbrowserdialog1
	#
	$folderbrowserdialog1.Description = 'Select Folder'
	$folderbrowserdialog1.ShowNewFolderButton = $False
	#
	# Status
	#
	$Status.Font = [System.Drawing.Font]::new('Segoe UI', '10')
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAA1QEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABd0lEQVQ4T41QsUoDQRBdkoCIICqKP6Bg4QckoKCdFiFNPHeyh9HGyhP8DcFPUOwEqztj
iEUKg6VYigRR8A8iCjbK+WadMxtzah4MO7Pz3szbVYyMDvdsAmQoukZ9KeX/yNFZIUtRjOhkdfho
cx3dSnswZChsivAgS+ETBj1IazBgwA2Ex7bQ0bQ4ele64dm7v4D3Xn1tD99yJsrDxYmiWqyoEStd
22eOIe+FiGIr+AkITsX2HQ9i8fj64WpRV+srJhhlDpGOeQBilmtjzJHv+yOc9wAD2orq8TLtnm/Q
WozNEH2LbWitn+W8F5mDzeaioosdTkls/xZwMGM1aahWS2Pu5kqlsg3BFrZ+JHflcnlY6L3wDRO6
Yoh8acEVFZN7iY60usAHuQTeXpIW95bcHoe0egF7UwkBDl5xLkCcx9lJ7hEFofcjCIIhh5gaQk0H
PqyVJnIDT2sIvR/sAJYtAeS5ROR53jyeNwFxG/WkJQ+CZICUDpT6BFa396VSSYX0AAAAAElFTkSu
QmCCCw=='))
	#endregion
	$Status.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Status.Name = 'Status'
	$Status.Size = New-Object System.Drawing.Size(24, 24)
	$Status.TextAlign = 'MiddleLeft'
	$Status.add_DoubleClick($Status_DoubleClick)
	#
	# treeview1
	#
	$treeview1.BackColor = [System.Drawing.Color]::Black 
	$treeview1.ContextMenuStrip = $contextmenustrip1
	$treeview1.Dock = 'Fill'
	$treeview1.Font = [System.Drawing.Font]::new('Calibri', '10')
	$treeview1.ForeColor = [System.Drawing.SystemColors]::Window 
	$treeview1.HideSelection = $False
	$treeview1.Location = New-Object System.Drawing.Point(0, 0)
	$treeview1.Margin = '5, 5, 5, 5'
	$treeview1.Name = 'treeview1'
	$treeview1.ShowNodeToolTips = $True
	$treeview1.Size = New-Object System.Drawing.Size(627, 1230)
	$treeview1.TabIndex = 0
	$treeview1.add_AfterSelect($treeview1_AfterSelect)
	$treeview1.add_NodeMouseClick($treeview1_NodeMouseClick)
	#
	# treeview2
	#
	$treeview2.BackColor = [System.Drawing.Color]::Black 
	$treeview2.ContextMenuStrip = $contextmenustrip2
	$treeview2.Dock = 'Fill'
	$treeview2.Font = [System.Drawing.Font]::new('Consolas', '9.5')
	$treeview2.ForeColor = [System.Drawing.SystemColors]::Window 
	$treeview2.HideSelection = $False
	$treeview2.Location = New-Object System.Drawing.Point(0, 0)
	$treeview2.Margin = '5, 5, 5, 5'
	$treeview2.Name = 'treeview2'
	$treeview2.ShowNodeToolTips = $True
	$treeview2.Size = New-Object System.Drawing.Size(1249, 1230)
	$treeview2.TabIndex = 0
	$treeview2.add_NodeMouseClick($treeview2_NodeMouseClick)
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($CopyNode1)
	[void]$contextmenustrip1.Items.Add($CopyFullFilePath)
	[void]$contextmenustrip1.Items.Add($toolstripseparator6)
	[void]$contextmenustrip1.Items.Add($Process1)
	[void]$contextmenustrip1.Items.Add($OpenFileWith)
	[void]$contextmenustrip1.Items.Add($toolstripseparator8)
	[void]$contextmenustrip1.Items.Add($Expand1)
	[void]$contextmenustrip1.Items.Add($Collapse1)
	[void]$contextmenustrip1.Items.Add($toolstripseparator7)
	[void]$contextmenustrip1.Items.Add($ExpandAll1)
	[void]$contextmenustrip1.Items.Add($CollapseAll1)
	[void]$contextmenustrip1.Items.Add($toolstripseparator5)
	[void]$contextmenustrip1.Items.Add($Exit1)
	$contextmenustrip1.Name = 'contextmenustrip1'
	$contextmenustrip1.Size = New-Object System.Drawing.Size(282, 298)
	#
	# CopyNode1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAANgEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA2ElEQVQ4T6WSQQqDMBBFhV7AtotC6bVcCxN14z16gK5q7yGuXOi60GWhh4nODxF0krRK
H3wicXx8oxERXTm1jFLqVpblMfpFnue11noR7HVdB8mDc7CjfkICrH3fo809TdPYjrtMwzE1Jri2
t9bha4B9rj74wo1eWZZdzMMg1KAoikGCPT4biD4sOi8E84QEPGtWPhs0ebPo5DRA5oK9akzAJABW
8tzUoKoq50w2NZBgZlMDiRHwezi/sq+BDDCCEKsb+EiSZPdXg7ngG0EB4LNo5SeTIaJ2BBNZGvIe
WvGrAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyNode1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyNode1.Name = 'CopyNode1'
	$CopyNode1.Size = New-Object System.Drawing.Size(281, 30)
	$CopyNode1.Text = 'Copy Selected Node Text'
	$CopyNode1.add_Click($CopyNode1_Click)
	#
	# toolstripseparator6
	#
	$toolstripseparator6.Name = 'toolstripseparator6'
	$toolstripseparator6.Size = New-Object System.Drawing.Size(278, 6)
	#
	# toolstripseparator7
	#
	$toolstripseparator7.Name = 'toolstripseparator7'
	$toolstripseparator7.Size = New-Object System.Drawing.Size(278, 6)
	#
	# Exit1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAPAEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA3klEQVQ4T62TQQrCMBBFk43iOayL4tIbKSpCTyBY1LPpSqF1oYuSU5Tsx5l0qkka2iAO
fCjT/34yAxF/KTUViyqRRTWTECX0EsO4ENh4BI19QoZxDAgZIsR4N6DeL0Gl428vHWFv5XhIjLsB
9WENpsprE4IwFBfT0vl2OEDNJwDPmwEopIXhdTf/bC/j3RGcEKoATGI8sETr2qbacTwf416ADePJ
9jh+COPeEvNNA/C17XH0cTccQNKnzJmZvvU5czwkxgM7iBTjGJDIMmToFTKMfx5TfAh6ncf0ewnx
BuWSu6CElvwDAAAAAElFTkSuQmCCCw=='))
	#endregion
	$Exit1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Exit1.Name = 'Exit1'
	$Exit1.Size = New-Object System.Drawing.Size(281, 30)
	$Exit1.Text = 'Exit'
	$Exit1.add_Click($Exit1_Click)
	#
	# Process1
	#
	$Process1.BackColor = [System.Drawing.Color]::Honeydew 
	$Process1.Enabled = $False
	$Process1.Name = 'Process1'
	$Process1.Size = New-Object System.Drawing.Size(281, 30)
	$Process1.Text = 'Process '
	$Process1.Visible = $False
	$Process1.add_Click($Process1_Click)
	#
	# toolstripseparator8
	#
	$toolstripseparator8.Name = 'toolstripseparator8'
	$toolstripseparator8.Size = New-Object System.Drawing.Size(278, 6)
	#
	# contextmenustrip2
	#
	[void]$contextmenustrip2.Items.Add($CopyNode2)
	[void]$contextmenustrip2.Items.Add($CopyNode2Tag)
	[void]$contextmenustrip2.Items.Add($CopyAll2)
	[void]$contextmenustrip2.Items.Add($SaveStreamToFile)
	[void]$contextmenustrip2.Items.Add($toolstripseparator9)
	[void]$contextmenustrip2.Items.Add($Expand2)
	[void]$contextmenustrip2.Items.Add($Collapse2)
	[void]$contextmenustrip2.Items.Add($toolstripseparator4)
	[void]$contextmenustrip2.Items.Add($ExpandAll2)
	[void]$contextmenustrip2.Items.Add($CollapseAll2)
	[void]$contextmenustrip2.Items.Add($toolstripseparator10)
	[void]$contextmenustrip2.Items.Add($SaveNodestoTxt)
	[void]$contextmenustrip2.Items.Add($toolstripseparator3)
	[void]$contextmenustrip2.Items.Add($Exit2)
	$contextmenustrip2.Name = 'contextmenustrip2'
	$contextmenustrip2.Size = New-Object System.Drawing.Size(378, 328)
	#
	# CopyNode2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAUwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB9UlEQVQ4T5WTy2sTURTGb3wgRf+E/C8hkCwD2WTjIuDCuAqRvAl5k+cmkIBjEie1OOME
KajFiiUJFUsRoQvXSlssLS6KKBQkSu0cv3NjQtImUD/4uDPcud/5nZkzol6v3y+Xy08qlYrGLpVK
0oVCQYvFYivJZPK2x+O5KoSwwBeFwyumaWrzrCiKhgKa1+u94/P5ruPxiyFzAnT4KWzUajWDrznE
7Xbf9fv9NzKZzJV/R0caB3w7MbX13iddefj4EK2YMLGxT8VikdASRaPR00AgUJuhwcY0gVGtVs9o
gZrNJoGGHA5H02q1LsmQccDJ0NRevvpooOrCgE6nI1cOcTqdywi4eZ6gC2QZ8OMn0eb2AW29P6Tt
D0fyoKqOAliNRoPsdrsq8vm8DBj+MrXVFztd9LuQQNd1arXb1Gq16YGiUDAYPBO5XG6GYBwwPCVU
P5LVeZ2ncDhMAp9lQvDs+U4XRAsJzisej5NIpVIzBOOA33/wDrYOpAfvvlBvc582Bnv0ur9Lx9/l
+VEARnU6wEBL/0eQSCSWpwL0bDY7IeDK/bf7svqb/h6t93ZpbeMzfT3GJoR/hUQ6nb6HpEe4USOR
iAqiSxNgMomH0WKz2a5h5cm6BSK8/8tJfoUp8WxbQLIGIpP7Y0SuwuaH2aFQaGKXyzX4CxZw19hB
z+7oAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyNode2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyNode2.Name = 'CopyNode2'
	$CopyNode2.Size = New-Object System.Drawing.Size(377, 30)
	$CopyNode2.Text = 'Copy Selected Node Text'
	$CopyNode2.add_Click($CopyNode2_Click)
	#
	# CopyAll2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAANgEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA2ElEQVQ4T6WSQQqDMBBFhV7AtotC6bVcCxN14z16gK5q7yGuXOi60GWhh4nODxF0krRK
H3wicXx8oxERXTm1jFLqVpblMfpFnue11noR7HVdB8mDc7CjfkICrH3fo809TdPYjrtMwzE1Jri2
t9bha4B9rj74wo1eWZZdzMMg1KAoikGCPT4biD4sOi8E84QEPGtWPhs0ebPo5DRA5oK9akzAJABW
8tzUoKoq50w2NZBgZlMDiRHwezi/sq+BDDCCEKsb+EiSZPdXg7ngG0EB4LNo5SeTIaJ2BBNZGvIe
WvGrAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyAll2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyAll2.Name = 'CopyAll2'
	$CopyAll2.Size = New-Object System.Drawing.Size(377, 30)
	$CopyAll2.Text = 'Copy All Nodes'
	$CopyAll2.add_Click($CopyAll2_Click)
	#
	# toolstripseparator9
	#
	$toolstripseparator9.Name = 'toolstripseparator9'
	$toolstripseparator9.Size = New-Object System.Drawing.Size(374, 6)
	#
	# Expand2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAuQEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABW0lEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwKFDB4kzYMZ2CP/kwz3/k2e6/9cvE/ifOd/3/4KtU0Gx0YpiAC5b
0+eE/ZdpYPivu5Lhf8EZ7/+6yxn+S9cy/E+a5XoJaEgtXgOO3N3+X6qO4b/HHUawZhAA0R53GP5L
VDH8X3SifzpeAyIn2/5XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9rGMBCWz4LohkbAInLZTF8ABuA
KymHTDT7L9SK6gIYW6iF4b9rm+otnJnp0JFD/ydvaP0vkM/wX2oiwiUgWmoSw3++HIb/mYv8msAx
gQsAXdbv06VzjzeT4T8n0CCQZhAN4js2K5x27dbjhirFCSQDk9z9GtfmrjevEXkukszwzbJW7JFb
lc4EBlYGAwYGBgkA/k2qEIW0rPkAAAAASUVORK5CYIIL'))
	#endregion
	$Expand2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Expand2.Name = 'Expand2'
	$Expand2.Size = New-Object System.Drawing.Size(377, 30)
	$Expand2.Text = 'Expand'
	$Expand2.ToolTipText = 'The Selected Node'
	$Expand2.add_Click($Expand2_Click)
	#
	# toolstripseparator10
	#
	$toolstripseparator10.Name = 'toolstripseparator10'
	$toolstripseparator10.Size = New-Object System.Drawing.Size(374, 6)
	#
	# Exit2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAPAEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAA3klEQVQ4T62TQQrCMBBFk43iOayL4tIbKSpCTyBY1LPpSqF1oYuSU5Tsx5l0qkka2iAO
fCjT/34yAxF/KTUViyqRRTWTECX0EsO4ENh4BI19QoZxDAgZIsR4N6DeL0Gl428vHWFv5XhIjLsB
9WENpsprE4IwFBfT0vl2OEDNJwDPmwEopIXhdTf/bC/j3RGcEKoATGI8sETr2qbacTwf416ADePJ
9jh+COPeEvNNA/C17XH0cTccQNKnzJmZvvU5czwkxgM7iBTjGJDIMmToFTKMfx5TfAh6ncf0ewnx
BuWSu6CElvwDAAAAAElFTkSuQmCCCw=='))
	#endregion
	$Exit2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Exit2.Name = 'Exit2'
	$Exit2.Size = New-Object System.Drawing.Size(377, 30)
	$Exit2.Text = 'Exit'
	$Exit2.add_Click($Exit2_Click)
	#
	# openfiledialog1
	#
	$openfiledialog1.ReadOnlyChecked = $True
	$openfiledialog1.ShowReadOnly = $True
	#
	# Open
	#
	$Open.Enabled = $False
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAFAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABtklEQVQ4T5WS0UtTURzHv5IweqgHX0MI6o+ooN5C8EHqoRd7qAwUYxFjl1kbW6KriOHG
3VjR2FrrrmAQISx0NEgZtgb2EAiJEiNZYBROWkKG83773et9yDR29z18Hs73nvM938M9sKUhHIUC
wmvSlPlVXMABDGPVWtFSHWaIwYCM6xJyBVkJ2La+tyHj5Et4IB0oUTomMnl3IJptCPwbv6r9VLPT
t6xtpi4/Hu5Gv9S+iC2hKfyGP5r9wf8oqr3aFWrgVdMciTxaOz1+9gxuoxOjYhq6WSb978ngIhmq
kal1095XlYXPDD68u9MuoGqWvVdbwq9/MFRZqFLTVJ8Z4A8/ob7xgSX1MN/cQ1vMTBwswBtKcjHf
R35JSrbR2y51zobkNyp34ixFHGJ8lM4p6Xm/NbpcWy+zGMQyPD6Fb2OHJGCFbCiCuzXMsVkNcy7i
eIZRpZdLL0+J+Zqs9diDk6wVzxsH30DYfYz1eadUi5HLJ+3BeZbjXawkjpxAwgXy+3MJiJLfhlpT
90hAlS/c2JxSjzuQuQad/CTmmn2+asw58c58B2kXCplB6E8HwTZYL4zhHAD8Ad1Qd/Ir+3S0AAAA
AElFTkSuQmCCCw=='))
	#endregion
	$Open.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Open.Name = 'Open'
	$Open.Size = New-Object System.Drawing.Size(248, 30)
	$Open.Text = '&Open File'
	$Open.Visible = $False
	$Open.add_Click($Open_Click)
	#
	# About
	#
	$About.Alignment = 'Right'
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAugEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABXElEQVQ4T4WTO0sDQRSFRxRbd802EoiooBb+nbQWs2YLEdRSRHxXioX+BLtgI8rMxogJ
Wgl2Yu+j01JRAivjmfEOJMMVD3zs49x7ZvburggVy8ZMnOrDKNUPUao+IqnecbyPpD4oZfk0lTGq
1gdjqY5iqb8RYCxJlpuklrtzokDgvlhvDVAXCc0wLroKHUwAoU57Quz2wqLxxUvjVZ5v9ngOqXdc
c0nqKdwowoLJ5Ra1G1NZYAJS3Ynk+ajAsPYY02FDJpauWM8h1Ramru5YE/wXgMVvEKDfONPixXkW
DP5J4OQ1NDxenEc84g2oW8ZweHGeQ6oWdqB2WRN4cZ4FX+iqGJprjOGiE5oWL87DAD+Tmh5x3wJ2
sc0VWRV/B6y4ZqdqvR/bOeEKWaQ+FsL0UTcJITA2UcA+jgWLfP2uHDZ3Kc6aFRRvYMLX+Ede0PSM
6zYa14Znz8pURhLiB6He59HTFA2SAAAAAElFTkSuQmCCCw=='))
	#endregion
	$About.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$About.Name = 'About'
	$About.Size = New-Object System.Drawing.Size(90, 29)
	$About.Text = 'About'
	$About.add_Click($About_Click)
	#
	# Expand1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAuQEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABW0lEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwKFDB4kzYMZ2CP/kwz3/k2e6/9cvE/ifOd/3/4KtU0Gx0YpiAC5b
0+eE/ZdpYPivu5Lhf8EZ7/+6yxn+S9cy/E+a5XoJaEgtXgOO3N3+X6qO4b/HHUawZhAA0R53GP5L
VDH8X3SifzpeAyIn2/5XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9rGMBCWz4LohkbAInLZTF8ABuA
KymHTDT7L9SK6gIYW6iF4b9rm+otnJnp0JFD/ydvaP0vkM/wX2oiwiUgWmoSw3++HIb/mYv8msAx
gQsAXdbv06VzjzeT4T8n0CCQZhAN4js2K5x27dbjhirFCSQDk9z9GtfmrjevEXkukszwzbJW7JFb
lc4EBlYGAwYGBgkA/k2qEIW0rPkAAAAASUVORK5CYIIL'))
	#endregion
	$Expand1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Expand1.Name = 'Expand1'
	$Expand1.Size = New-Object System.Drawing.Size(281, 30)
	$Expand1.Text = 'Expand'
	$Expand1.add_Click($Expand1_Click)
	#
	# Collapse1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAApwEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABSUlEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwOmTJ4kzYNZWCP/1/v3/N/v6/p8sIv5/e0jI/4MzZoBiox/FAFy2
bgyN/j+XgeH/XTa2/+95ef/fAdJzgPxN3t6XgNIdeA14sWvX/1lAxe9YWP5/BGqEYRB/JlD8xqRJ
0/EasNbZ+f9+oMKD3Nz/P06dCscg/h6g+DIjo3tYwwAW2j3MLP9XAhViAyDxHkbGD2ADcCXl1TY2
YP/PZWT8f7enB45BYQDCi3R0buHMTGeAUbW7owMYSgz/p2HB7UC8LSSkCRwTuADQZTOWGRvfA6r6
34qEQfz5GhqngfJVUKU4gWSuj4/vkri4LbOkpZ+3MTB8my0n96hFR2caFwODPgMDgwQA5fqgNsaN
05UAAAAASUVORK5CYIIL'))
	#endregion
	$Collapse1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Collapse1.Name = 'Collapse1'
	$Collapse1.Size = New-Object System.Drawing.Size(281, 30)
	$Collapse1.Text = 'Collapse'
	$Collapse1.add_Click($Collapse1_Click)
	#
	# toolstripseparator5
	#
	$toolstripseparator5.Name = 'toolstripseparator5'
	$toolstripseparator5.Size = New-Object System.Drawing.Size(278, 6)
	#
	# ExpandAll1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAATAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB7klEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/BYqBwOLdn1FDRtkA0pK
Sv6DvCMgIPI/sPDa/9d//v9fdnrP/5CJ7v+1SwT+h03y+t+/YfP/f//+tUK1o3qhtLQU7IX//+uZ
Hr789yy0O/C/TAPDf92VDP8Lznj/113O8F+6luF/0izXS0BDasEGYAtEoGTjyjNTt0nVMfz3uMMI
1gwCINrjDsN/iSqG/4tO9E8HK8YWiEADDjo3GX1XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9sQG0t
JAyA3oUHItCA41JpEM3YAEhcLovhA9gAbIF4/eb1/7a1+v+FWlFdAGMLtTD8d21TvQU2oKGhAe4F
IIZ5oaRr7fTXAvkM/6UmIlwCoqUmMfzny2H4n7nIrwlsAC4ANKTfp0vnHm8mw39OoEEgzSAaxHds
Vjjt2q3HDVWKE0gGJrn7Na7NXW9eI/JcJJnhm2Wt2CO3Kp0JDKwMBgwMDBIAgcOxdR/eHc8AAAAA
SUVORK5CYIIL'))
	#endregion
	$ExpandAll1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$ExpandAll1.Name = 'ExpandAll1'
	$ExpandAll1.Size = New-Object System.Drawing.Size(281, 30)
	$ExpandAll1.Text = 'Expand All'
	$ExpandAll1.add_Click($ExpandAll1_Click)
	#
	# CollapseAll1
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAOwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB3UlEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/AkqBwNrD/5ADRtkA0pK
Sv6DvCMgIPI/pODa/0///v8/sXL//8XOvv/7hcT/L3H3/79h4pb///7964dqR/VCaWkp2Av/6+uZ
nr/992K+S+j/uUDuXTa2/+95ef/fAdJzgPxN3t6XgPZ1gA3AFohAG7pvz5q1bRZQ8TsWlv8fgRph
GMSfCRS/MWnSdLBibIEINOD0DH2z7/uBCg9yc///OHUqHIP4e4Diy4yM7oENqK2FhMEfIIYFItCA
8+0MzP9XAhViAyDxHkbGD2ADsAXik4eP/0/VNAH7fy4j4/+7PT1wDAoDEF6ko3MLbEBDQwPcC0AM
80L99pY5r4Gh9H8aFtwOxNtCQprABuACQENmLDM2vgdU9b8VCYP48zU0TgPlq6BKcQLJXB8f3yVx
cVtmSUs/b2Ng+DZbTu5Ri47ONC4GBn0GBgYJANEup2CwHtGOAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CollapseAll1.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CollapseAll1.Name = 'CollapseAll1'
	$CollapseAll1.Size = New-Object System.Drawing.Size(281, 30)
	$CollapseAll1.Text = 'Collapse All'
	$CollapseAll1.add_Click($CollapseAll1_Click)
	#
	# Collapse2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAApwEAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABSUlEQVQ4T2Ooqqp6VF1d/Z8UDNLDAAMggX///j36TyQAqQXpgWqHGAACmVMRGBlM3YLA
MDBIDUAG2DSBwJnr/8A02QbAwOmTJ4kzYNZWCP/1/v3/N/v6/p8sIv5/e0jI/4MzZoBiox/FAFy2
bgyN/j+XgeH/XTa2/+95ef/fAdJzgPxN3t6XgNIdeA14sWvX/1lAxe9YWP5/BGqEYRB/JlD8xqRJ
0/EasNbZ+f9+oMKD3Nz/P06dCscg/h6g+DIjo3tYwwAW2j3MLP9XAhViAyDxHkbGD2ADcCXl1TY2
YP/PZWT8f7enB45BYQDCi3R0buHMTGeAUbW7owMYSgz/p2HB7UC8LSSkCRwTuADQZTOWGRvfA6r6
34qEQfz5GhqngfJVUKU4gWSuj4/vkri4LbOkpZ+3MTB8my0n96hFR2caFwODPgMDgwQA5fqgNsaN
05UAAAAASUVORK5CYIIL'))
	#endregion
	$Collapse2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$Collapse2.Name = 'Collapse2'
	$Collapse2.Size = New-Object System.Drawing.Size(377, 30)
	$Collapse2.Text = 'Collapse'
	$Collapse2.add_Click($Collapse2_Click)
	#
	# toolstripseparator4
	#
	$toolstripseparator4.Name = 'toolstripseparator4'
	$toolstripseparator4.Size = New-Object System.Drawing.Size(374, 6)
	#
	# ExpandAll2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAATAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB7klEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/BYqBwOLdn1FDRtkA0pK
Sv6DvCMgIPI/sPDa/9d//v9fdnrP/5CJ7v+1SwT+h03y+t+/YfP/f//+tUK1o3qhtLQU7IX//+uZ
Hr789yy0O/C/TAPDf92VDP8Lznj/113O8F+6luF/0izXS0BDasEGYAtEoGTjyjNTt0nVMfz3uMMI
1gwCINrjDsN/iSqG/4tO9E8HK8YWiEADDjo3GX1XnAWxGWZA7mn3/7Zb+P7Lz2D479WhfQ9sQG0t
JAyA3oUHItCA41JpEM3YAEhcLovhA9gAbIF4/eb1/7a1+v+FWlFdAGMLtTD8d21TvQU2oKGhAe4F
IIZ5oaRr7fTXAvkM/6UmIlwCoqUmMfzny2H4n7nIrwlsAC4ANKTfp0vnHm8mw39OoEEgzSAaxHds
Vjjt2q3HDVWKE0gGJrn7Na7NXW9eI/JcJJnhm2Wt2CO3Kp0JDKwMBgwMDBIAgcOxdR/eHc8AAAAA
SUVORK5CYIIL'))
	#endregion
	$ExpandAll2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$ExpandAll2.Name = 'ExpandAll2'
	$ExpandAll2.Size = New-Object System.Drawing.Size(377, 30)
	$ExpandAll2.Text = 'Expand All'
	$ExpandAll2.add_Click($ExpandAll2_Click)
	#
	# CollapseAll2
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAOwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB3UlEQVQ4T2NwqLi9zar45n9s2LHy9hYGQsC58Ob/7ff+/z/0HBVvv/v/v0P+9f9QZbiB
V871/1P3//8/aR8qBol5ZF4jbEBg5rVtfsnX/mPDARk3CHsBBEJDQ9n4+Pj+g2ioEGmgrKxse0VF
xf/y8vK/VVVVq6HCDA4l17AGsFMFWuDW1dX9hwGgId9BYh6529hdCiAB/AkqBwNrD/5ADRtkA0pK
Sv6DvCMgIPI/pODa/0///v8/sXL//8XOvv/7hcT/L3H3/79h4pb///7964dqR/VCaWkp2Av/6+uZ
nr/992K+S+j/uUDuXTa2/+95ef/fAdJzgPxN3t6XgPZ1gA3AFohAG7pvz5q1bRZQ8TsWlv8fgRph
GMSfCRS/MWnSdLBibIEINOD0DH2z7/uBCg9yc///OHUqHIP4e4Diy4yM7oENqK2FhMEfIIYFItCA
8+0MzP9XAhViAyDxHkbGD2ADsAXik4eP/0/VNAH7fy4j4/+7PT1wDAoDEF6ko3MLbEBDQwPcC0AM
80L99pY5r4Gh9H8aFtwOxNtCQprABuACQENmLDM2vgdU9b8VCYP48zU0TgPlq6BKcQLJXB8f3yVx
cVtmSUs/b2Ng+DZbTu5Ri47ONC4GBn0GBgYJANEup2CwHtGOAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CollapseAll2.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CollapseAll2.Name = 'CollapseAll2'
	$CollapseAll2.Size = New-Object System.Drawing.Size(377, 30)
	$CollapseAll2.Text = 'Collapse All'
	$CollapseAll2.add_Click($CollapseAll2_Click)
	#
	# SaveNodestoTxt
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAkwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAACNUlEQVQ4T6WSX2iSURjGjzD8wJFs4aCLQKYY1RYNHIlDJelCSTAaJot1IQYNQ8FwiTAG
GgmDomIjWV2JnyzwIpC6kIouomBDIjFGTHZh7KYCdzVxEvj0nqObuYIFPfDwnfP++Z3zHj4m9Z9+
yfoMYEyN7cL6oWaMQdmvxYDGUKA1iZrvPVikRN9fGw6aA6Kxeag1/NAOQFKpaKPAv4gDguFoL2A+
nhQJLvvHUXjOMqSSM5iLRURMVWI4utHO8zoOGBzSdwG3orF9ANfKUgQvUn7cuWHE9LlunIvXHQDo
EaIAT+zpTeE57gbGkZo9hdo7M7xjlGs1RI7XBYLh3wBKPa5O+3sAXEE7Q/3TCLDrRqtkxZSRodXc
FnWeK9egHtJ1AW63lzYKkdxzvd5AwELQbz6CTAKfbfCcYSiursLhvESPONwF2C+4YJpw/GGum1YO
8QONy6h9sGGSHrharRJA2wWYzHboDEYKSGR1j8vlL+Imu5vXeyDrZfFPkCQdxk02aI6dgMvlFaeu
FYvYqFTEOhKJ0Dh1zNBNOCQnLyCZXICvPSpNTgDreYcAXOwA8vk8Xr1+K9aJRALxeBzNZlNAnq3k
IKeWsWaxdCDS8I7Z4oRWNyYAO01g+clTyNkcWgSQZRmZTAbpdFoAZ6mpEphCzedEqH2Lgbkjgydb
I6MTAsCbKptfUd36IRqy2ey+OaTR+In3oTDi1Hz/4ZIYQyLfVkjH6/TlgUOsRIke8NHi4++0/18x
9gu56xvVOQsp2AAAAABJRU5ErkJgggs='))
	#endregion
	$SaveNodestoTxt.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$SaveNodestoTxt.Name = 'SaveNodestoTxt'
	$SaveNodestoTxt.Size = New-Object System.Drawing.Size(377, 30)
	$SaveNodestoTxt.Text = 'Save Nodes to TXT'
	$SaveNodestoTxt.add_Click($SaveNodestoTxt_Click)
	#
	# toolstripseparator3
	#
	$toolstripseparator3.Name = 'toolstripseparator3'
	$toolstripseparator3.Size = New-Object System.Drawing.Size(374, 6)
	#
	# savefiledialog1
	#
	#
	# OpenFileWith
	#
	$OpenFileWith.BackColor = [System.Drawing.Color]::Gainsboro 
	$OpenFileWith.ForeColor = [System.Drawing.Color]::Red 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAArAIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAACTklEQVQ4T5WSTUhUcRTFj2mWjcJEE4pSIVpNfqMuNLQWFVRDhc080QozB5NkwDYR9DW6
CBRjoEUilBgKgYsiWokFbty4iCIhsSYZstQiF8aIhoOn8+ZNRB9iHfjx/tx77v/e9+7Dahq8ir29
Bt731uDtw0sojoX/TcN+JPTUYGxx4jrDL0+w24NX/v3YGEuvrQEfvE/bQLJP1HHoBlicjGbDQHzM
srqe+LGpy4Mpzjao+IFoJ6cq2XEY08mAQ5Y4y7mKes+hdeR2fLS7nLQlmZO0cSQAltnRXgKsj1n/
1P0mZASOI8ywuke6qFAU8ib5OZe3jmEhBdip2N+nCHjQ86LPoYLWaJE5QXqqecEVUc7n90DXNvTn
AImxkp+660VB50ksc6VZ5kbRxKMHHGyozdS5XlSS8/nsrMKy7GV+YJ1VGdO1gxgKPs6S8TK5VKSn
i4G2Uvbf2UeuHCIX94giBgfiWePEsEo2WJVSpxtHAtUaNXyGnKsgQ4nkbBbHBl0MjVTpvMOKfUjT
086AAWojbgNaq36QhJYyjM0NOnXBWXLSRgbjVKSOEZ/FzC4r9k6XhBycewSeysHrLUAKWl1o7G5Q
9/k67TuPHNd5XOZ5LzfbwK12czKvFTNzQTv5xsauOq0Y8KG+EMHIkLpOl6tDhkgV6Xrfiyx0JrE0
X7mlFsU0/o/c5HYuPkujOxsTOJ2HmW+jJeRXz68sndeH7BD6E83zb/mF0XIaTnxERQaMaic+1eaC
/4MnG1/0/S+YS0gQdpEp8kShKFqDArEbQNp36wSQdSmzmr4AAAAASUVORK5CYIIL'))
	#endregion
	$OpenFileWith.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$OpenFileWith.Name = 'OpenFileWith'
	$OpenFileWith.Size = New-Object System.Drawing.Size(281, 30)
	$OpenFileWith.Text = 'Open File with'
	$OpenFileWith.ToolTipText = 'Open the selected file with another tool '
	$OpenFileWith.add_Click($OpenFileWith_Click)
	#
	# CopyFullFilePath
	#
	$CopyFullFilePath.Name = 'CopyFullFilePath'
	$CopyFullFilePath.Size = New-Object System.Drawing.Size(281, 30)
	$CopyFullFilePath.Text = 'Copy Full File Path'
	$CopyFullFilePath.add_Click($CopyFullFilePath_Click)
	#
	# CopyNode2Tag
	#
	$CopyNode2Tag.BackColor = [System.Drawing.Color]::PapayaWhip 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAUwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAAB9UlEQVQ4T5WTy2sTURTGb3wgRf+E/C8hkCwD2WTjIuDCuAqRvAl5k+cmkIBjEie1OOME
KajFiiUJFUsRoQvXSlssLS6KKBQkSu0cv3NjQtImUD/4uDPcud/5nZkzol6v3y+Xy08qlYrGLpVK
0oVCQYvFYivJZPK2x+O5KoSwwBeFwyumaWrzrCiKhgKa1+u94/P5ruPxiyFzAnT4KWzUajWDrznE
7Xbf9fv9NzKZzJV/R0caB3w7MbX13iddefj4EK2YMLGxT8VikdASRaPR00AgUJuhwcY0gVGtVs9o
gZrNJoGGHA5H02q1LsmQccDJ0NRevvpooOrCgE6nI1cOcTqdywi4eZ6gC2QZ8OMn0eb2AW29P6Tt
D0fyoKqOAliNRoPsdrsq8vm8DBj+MrXVFztd9LuQQNd1arXb1Gq16YGiUDAYPBO5XG6GYBwwPCVU
P5LVeZ2ncDhMAp9lQvDs+U4XRAsJzisej5NIpVIzBOOA33/wDrYOpAfvvlBvc582Bnv0ur9Lx9/l
+VEARnU6wEBL/0eQSCSWpwL0bDY7IeDK/bf7svqb/h6t93ZpbeMzfT3GJoR/hUQ6nb6HpEe4USOR
iAqiSxNgMomH0WKz2a5h5cm6BSK8/8tJfoUp8WxbQLIGIpP7Y0SuwuaH2aFQaGKXyzX4CxZw19hB
z+7oAAAAAElFTkSuQmCCCw=='))
	#endregion
	$CopyNode2Tag.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$CopyNode2Tag.Name = 'CopyNode2Tag'
	$CopyNode2Tag.Size = New-Object System.Drawing.Size(377, 30)
	$CopyNode2Tag.Text = 'Copy Selected Node''s Tag Data (Hex)'
	$CopyNode2Tag.Visible = $False
	$CopyNode2Tag.add_Click($CopyNode2Tag_Click)
	#
	# SaveStreamToFile
	#
	$SaveStreamToFile.BackColor = [System.Drawing.Color]::Lavender 
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAGgIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAABYlAAAWJQFJ
UiTwAAABvElEQVQ4T5XSQUjCYBQH8E8KB0pDwyBIkBQjqkNQIEmK0UFJsEsJUYeogwSGhSRhKPPQ
KejQqXYS56mb0EEKuodeI5IORbeiojBqF1/v+9wmxIj14M/etvf9tvGNcNaRM9LtBUJ4eK1eGwoh
BMxWF9gc3iqhiw8Oj/Bit+6wXiiQ2c0B76APRoCzWLAxgdGiQHIr0wFywj67SOv9own1el03siyz
GRWw93nawHZmVwOM1C/AA5t4ogJf39+6T6d5eXtnM3R2I7mlAGYPrCeSGvBXtZQjnV1dSwDf524D
S8trhgC16OzC4koHiMXi2JjYDaMJR+ZxFwaxR2BmNgo+f/hfCYYiCLjagG9qBtzeCTzhMLxOfr+B
HYE56Ol1Ys+5YdIXBEf/EESjcfaNV7Ua3DYarKeVTqe1pFIphgSCkTZgQiAQCjNgTgEqlQqcX1yy
nlahUABBECCfz0M2m+0ADvYGg82p6Qi43OMMaOLPdnwiglQ+hWfcdrp1kiRBqVSCYrEIoihqAM8A
YtvrsQ+3Rsf8DKALGncPcP/4BLKy8eVyWQtFKBCajakA4TA7Js75SW8YixmsvQNAuiw3PwhUWzMK
5g6uAAAAAElFTkSuQmCCCw=='))
	#endregion
	$SaveStreamToFile.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$SaveStreamToFile.Name = 'SaveStreamToFile'
	$SaveStreamToFile.Size = New-Object System.Drawing.Size(377, 30)
	$SaveStreamToFile.Text = 'Save Stream to File'
	$SaveStreamToFile.Visible = $False
	$SaveStreamToFile.add_Click($SaveStreamToFile_Click)
	#
	# toolstripRefresh
	#
	#region Binary Data
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABVTeXN0
ZW0uRHJhd2luZy5CaXRtYXABAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAKwIAAAKJUE5HDQoaCgAA
AA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAABc1JHQgCuzhzpAAAABGdBTUEAALGPC/xhBQAAAAlw
SFlzAAAWJQAAFiUBSVIk8AAAAcBJREFUOE+NU01LAmEQfhcXyw5RB+sSRZcg6BAE/YXKDp0MRNE+
TkVCUXSJwA6RkHSRDtGxW1HXoEvUqUWXoFsRQbDgoexLSe1rmkcHC1rTB4bdd+Z5Z2dnnlF20PwJ
SwskXxxB84OfBUcgmelcSvVJuDY4p67H9aD5Ob1HFD4gqgudU2P4Zrt/7U4XSnW0zt20cAX5sZ13
ip0SNUycU/PM1aqEa0PP8m09J3lbOaJiEj2Y/OqNWC4JV0axD/5Emi2Pd+9WltY5gStkEp8L4r8X
uj2YkBmJP1L0hP7Y4MYdEj0LtQS377he8xlPclTuCUPX/EbOu5mmyCGVzRNL8WXjtX3mwiFUpbqm
TSdfzvUvXpLmO3sXt+qYNJrYnx+NP9DCPl+OWhw3XrtnL36mgQOcCIIEMi7hslAUkpaSGzl8TNxK
oQyUg7J+l4myUT5+Q6icxHjCb8qxBDQCDbFrFBqIRgrVHhgFG0ZSwIgwKoyMzxgj/BilJfTKgDgg
EogFooF4ICIJ1wbIFHJFEsgXMoacJVwdWBQsDBYHC4RFwkJhsYTyL9xsbUXrnR9Snv0s25saPvjg
Z0YN7KbK8ZIxX6lvZs4zqwCZeh4AAAAASUVORK5CYIIL'))
	#endregion
	$toolstripRefresh.Image = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$toolstripRefresh.Name = 'toolstripRefresh'
	$toolstripRefresh.Size = New-Object System.Drawing.Size(98, 29)
	$toolstripRefresh.Text = 'Refresh'
	$toolstripRefresh.ToolTipText = 'Refresh selected folder'
	$toolstripRefresh.Visible = $False
	$toolstripRefresh.add_Click($toolstripRefresh_Click)
	$contextmenustrip2.ResumeLayout()
	$contextmenustrip1.ResumeLayout()
	$menustrip1.ResumeLayout()
	$statusstrip1.ResumeLayout()
	$splitcontainer1.ResumeLayout()
	$Jumplist_Browser.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Jumplist_Browser.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Jumplist_Browser.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Jumplist_Browser.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$Jumplist_Browser.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $Jumplist_Browser.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)

# SIG # Begin signature block
# MIIviAYJKoZIhvcNAQcCoIIveTCCL3UCAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBtisjiUOGxtJ2a
# 7istEOInu5T4i1WXhffxShGsqote96CCKI0wggQyMIIDGqADAgECAgEBMA0GCSqG
# SIb3DQEBBQUAMHsxCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNo
# ZXN0ZXIxEDAOBgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1p
# dGVkMSEwHwYDVQQDDBhBQUEgQ2VydGlmaWNhdGUgU2VydmljZXMwHhcNMDQwMTAx
# MDAwMDAwWhcNMjgxMjMxMjM1OTU5WjB7MQswCQYDVQQGEwJHQjEbMBkGA1UECAwS
# R3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRowGAYDVQQKDBFD
# b21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmljYXRlIFNlcnZp
# Y2VzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvkCd9G7h6naHHE1F
# RI6+RsiDBp3BKv4YH47kAvrzq11QihYxC5oG0MVwIs1JLVRjzLZuaEYLU+rLTCTA
# vHJO6vEVrvRUmhIKw3qyM2Di2olV8yJY897cz++DhqKMlE+faPKYkEaEJ8d2v+PM
# NSyLXgdkZYLASLCokflhn3YgUKiRx2a163hiA1bwihoT6jGjHqCZ/Tj29icyWG8H
# 9Wu4+xQrr7eqzNZjX3OM2gWZqDioyxd4NlGs6Z70eDqNzw/ZQuKYDKsvnw4B3u+f
# mUnxLd+sdE0bmLVHxeUp0fmQGMdinL6DxyZ7Poolx8DdneY1aBAgnY/Y3tLDhJwN
# XugvyQIDAQABo4HAMIG9MB0GA1UdDgQWBBSgEQojPpbxB+zirynvgqV/0DCktDAO
# BgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zB7BgNVHR8EdDByMDigNqA0
# hjJodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2Vz
# LmNybDA2oDSgMoYwaHR0cDovL2NybC5jb21vZG8ubmV0L0FBQUNlcnRpZmljYXRl
# U2VydmljZXMuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQAIVvwC8Jvo/6T61nvGRIDO
# T8TF9gBYzKa2vBRJaAR26ObuXewCD2DWjVAYTyZOAePmsKXuv7x0VEG//fwSuMdP
# WvSJYAV/YLcFSvP28cK/xLl0hrYtfWvM0vNG3S/G4GrDwzQDLH2W3VrCDqcKmcEF
# i6sML/NcOs9sN1UJh95TQGxY7/y2q2VuBPYb3DzgWhXGntnxWUgwIWUDbOzpIXPs
# mwOh4DetoBUYj/q6As6nLKkQEyzU5QgmqyKXYPiQXnTUoppTvfKpaOCibsLXbLGj
# D56/62jnVvKu8uMrODoJgbVrhde+Le0/GreyY+L1YiyC1GoAQVDxOYOflek2lphu
# MIIFbzCCBFegAwIBAgIQSPyTtGBVlI02p8mKidaUFjANBgkqhkiG9w0BAQwFADB7
# MQswCQYDVQQGEwJHQjEbMBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYD
# VQQHDAdTYWxmb3JkMRowGAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UE
# AwwYQUFBIENlcnRpZmljYXRlIFNlcnZpY2VzMB4XDTIxMDUyNTAwMDAwMFoXDTI4
# MTIzMTIzNTk1OVowVjELMAkGA1UEBhMCR0IxGDAWBgNVBAoTD1NlY3RpZ28gTGlt
# aXRlZDEtMCsGA1UEAxMkU2VjdGlnbyBQdWJsaWMgQ29kZSBTaWduaW5nIFJvb3Qg
# UjQ2MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAjeeUEiIEJHQu/xYj
# ApKKtq42haxH1CORKz7cfeIxoFFvrISR41KKteKW3tCHYySJiv/vEpM7fbu2ir29
# BX8nm2tl06UMabG8STma8W1uquSggyfamg0rUOlLW7O4ZDakfko9qXGrYbNzszwL
# DO/bM1flvjQ345cbXf0fEj2CA3bm+z9m0pQxafptszSswXp43JJQ8mTHqi0Eq8Nq
# 6uAvp6fcbtfo/9ohq0C/ue4NnsbZnpnvxt4fqQx2sycgoda6/YDnAdLv64IplXCN
# /7sVz/7RDzaiLk8ykHRGa0c1E3cFM09jLrgt4b9lpwRrGNhx+swI8m2JmRCxrds+
# LOSqGLDGBwF1Z95t6WNjHjZ/aYm+qkU+blpfj6Fby50whjDoA7NAxg0POM1nqFOI
# +rgwZfpvx+cdsYN0aT6sxGg7seZnM5q2COCABUhA7vaCZEao9XOwBpXybGWfv1Vb
# HJxXGsd4RnxwqpQbghesh+m2yQ6BHEDWFhcp/FycGCvqRfXvvdVnTyheBe6QTHrn
# xvTQ/PrNPjJGEyA2igTqt6oHRpwNkzoJZplYXCmjuQymMDg80EY2NXycuu7D1fkK
# dvp+BRtAypI16dV60bV/AK6pkKrFfwGcELEW/MxuGNxvYv6mUKe4e7idFT/+IAx1
# yCJaE5UZkADpGtXChvHjjuxf9OUCAwEAAaOCARIwggEOMB8GA1UdIwQYMBaAFKAR
# CiM+lvEH7OKvKe+CpX/QMKS0MB0GA1UdDgQWBBQy65Ka/zWWSC8oQEJwIDaRXBeF
# 5jAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zATBgNVHSUEDDAKBggr
# BgEFBQcDAzAbBgNVHSAEFDASMAYGBFUdIAAwCAYGZ4EMAQQBMEMGA1UdHwQ8MDow
# OKA2oDSGMmh0dHA6Ly9jcmwuY29tb2RvY2EuY29tL0FBQUNlcnRpZmljYXRlU2Vy
# dmljZXMuY3JsMDQGCCsGAQUFBwEBBCgwJjAkBggrBgEFBQcwAYYYaHR0cDovL29j
# c3AuY29tb2RvY2EuY29tMA0GCSqGSIb3DQEBDAUAA4IBAQASv6Hvi3SamES4aUa1
# qyQKDKSKZ7g6gb9Fin1SB6iNH04hhTmja14tIIa/ELiueTtTzbT72ES+BtlcY2fU
# QBaHRIZyKtYyFfUSg8L54V0RQGf2QidyxSPiAjgaTCDi2wH3zUZPJqJ8ZsBRNraJ
# AlTH/Fj7bADu/pimLpWhDFMpH2/YGaZPnvesCepdgsaLr4CnvYFIUoQx2jLsFeSm
# TD1sOXPUC4U5IOCFGmjhp0g4qdE2JXfBjRkWxYhMZn0vY86Y6GnfrDyoXZ3JHFuu
# 2PMvdM+4fvbXg50RlmKarkUT2n/cR/vfw1Kf5gZV6Z2M8jpiUbzsJA8p1FiAhORF
# e1rYMIIFgzCCA2ugAwIBAgIORea7A4Mzw4VlSOb/RVEwDQYJKoZIhvcNAQEMBQAw
# TDEgMB4GA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjYxEzARBgNVBAoTCkds
# b2JhbFNpZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMTQxMjEwMDAwMDAwWhcN
# MzQxMjEwMDAwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBS
# NjETMBEGA1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCAiIw
# DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAJUH6HPKZvnsFMp7PPcNCPG0RQss
# grRIxutbPK6DuEGSMxSkb3/pKszGsIhrxbaJ0cay/xTOURQh7ErdG1rG1ofuTToV
# Bu1kZguSgMpE3nOUTvOniX9PeGMIyBJQbUJmL025eShNUhqKGoC3GYEOfsSKvGRM
# IRxDaNc9PIrFsmbVkJq3MQbFvuJtMgamHvm566qjuL++gmNQ0PAYid/kD3n16qIf
# KtJwLnvnvJO7bVPiSHyMEAc4/2ayd2F+4OqMPKq0pPbzlUoSB239jLKJz9CgYXfI
# WHSw1CM69106yqLbnQneXUQtkPGBzVeS+n68UARjNN9rkxi+azayOeSsJDa38O+2
# HBNXk7besvjihbdzorg1qkXy4J02oW9UivFyVm4uiMVRQkQVlO6jxTiWm05OWgtH
# 8wY2SXcwvHE35absIQh1/OZhFj931dmRl4QKbNQCTXTAFO39OfuD8l4UoQSwC+n+
# 7o/hbguyCLNhZglqsQY6ZZZZwPA1/cnaKI0aEYdwgQqomnUdnjqGBQCe24DWJfnc
# BZ4nWUx2OVvq+aWh2IMP0f/fMBH5hc8zSPXKbWQULHpYT9NLCEnFlWQaYw55PfWz
# jMpYrZxCRXluDocZXFSxZba/jJvcE+kNb7gu3GduyYsRtYQUigAZcIN5kZeR1Bon
# vzceMgfYFGM8KEyvAgMBAAGjYzBhMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
# BTADAQH/MB0GA1UdDgQWBBSubAWjkxPioufi1xzWx/B/yGdToDAfBgNVHSMEGDAW
# gBSubAWjkxPioufi1xzWx/B/yGdToDANBgkqhkiG9w0BAQwFAAOCAgEAgyXt6NH9
# lVLNnsAEoJFp5lzQhN7craJP6Ed41mWYqVuoPId8AorRbrcWc+ZfwFSY1XS+wc3i
# EZGtIxg93eFyRJa0lV7Ae46ZeBZDE1ZXs6KzO7V33EByrKPrmzU+sQghoefEQzd5
# Mr6155wsTLxDKZmOMNOsIeDjHfrYBzN2VAAiKrlNIC5waNrlU/yDXNOd8v9EDERm
# 8tLjvUYAGm0CuiVdjaExUd1URhxN25mW7xocBFymFe944Hn+Xds+qkxV/ZoVqW/h
# pvvfcDDpw+5CRu3CkwWJ+n1jez/QcYF8AOiYrg54NMMl+68KnyBr3TsTjxKM4kEa
# SHpzoHdpx7Zcf4LIHv5YGygrqGytXm3ABdJ7t+uA/iU3/gKbaKxCXcPu9czc8FB1
# 0jZpnOZ7BN9uBmm23goJSFmH63sUYHpkqmlD75HHTOwY3WzvUy2MmeFe8nI+z1TI
# vWfspA9MRf/TuTAjB0yPEL+GltmZWrSZVxykzLsViVO6LAUP5MSeGbEYNNVMnbrt
# 9x+vJJUEeKgDu+6B5dpffItKoZB0JaezPkvILFa9x8jvOOJckvB595yEunQtYQEg
# fn7R8k8HWV+LLUNS60YMlOH1Zkd5d9VUWx+tJDfLRVpOoERIyNiwmcUVhAn21klJ
# wGW45hpxbqCo8YLoRT5s1gLXCmeDBVrJpBAwggYaMIIEAqADAgECAhBiHW0MUgGe
# O5B5FSCJIRwKMA0GCSqGSIb3DQEBDAUAMFYxCzAJBgNVBAYTAkdCMRgwFgYDVQQK
# Ew9TZWN0aWdvIExpbWl0ZWQxLTArBgNVBAMTJFNlY3RpZ28gUHVibGljIENvZGUg
# U2lnbmluZyBSb290IFI0NjAeFw0yMTAzMjIwMDAwMDBaFw0zNjAzMjEyMzU5NTla
# MFQxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdvIExpbWl0ZWQxKzApBgNV
# BAMTIlNlY3RpZ28gUHVibGljIENvZGUgU2lnbmluZyBDQSBSMzYwggGiMA0GCSqG
# SIb3DQEBAQUAA4IBjwAwggGKAoIBgQCbK51T+jU/jmAGQ2rAz/V/9shTUxjIztNs
# fvxYB5UXeWUzCxEeAEZGbEN4QMgCsJLZUKhWThj/yPqy0iSZhXkZ6Pg2A2NVDgFi
# gOMYzB2OKhdqfWGVoYW3haT29PSTahYkwmMv0b/83nbeECbiMXhSOtbam+/36F09
# fy1tsB8je/RV0mIk8XL/tfCK6cPuYHE215wzrK0h1SWHTxPbPuYkRdkP05ZwmRmT
# nAO5/arnY83jeNzhP06ShdnRqtZlV59+8yv+KIhE5ILMqgOZYAENHNX9SJDm+qxp
# 4VqpB3MV/h53yl41aHU5pledi9lCBbH9JeIkNFICiVHNkRmq4TpxtwfvjsUedyz8
# rNyfQJy/aOs5b4s+ac7IH60B+Ja7TVM+EKv1WuTGwcLmoU3FpOFMbmPj8pz44MPZ
# 1f9+YEQIQty/NQd/2yGgW+ufflcZ/ZE9o1M7a5Jnqf2i2/uMSWymR8r2oQBMdlyh
# 2n5HirY4jKnFH/9gRvd+QOfdRrJZb1sCAwEAAaOCAWQwggFgMB8GA1UdIwQYMBaA
# FDLrkpr/NZZILyhAQnAgNpFcF4XmMB0GA1UdDgQWBBQPKssghyi47G9IritUpimq
# F6TNDDAOBgNVHQ8BAf8EBAMCAYYwEgYDVR0TAQH/BAgwBgEB/wIBADATBgNVHSUE
# DDAKBggrBgEFBQcDAzAbBgNVHSAEFDASMAYGBFUdIAAwCAYGZ4EMAQQBMEsGA1Ud
# HwREMEIwQKA+oDyGOmh0dHA6Ly9jcmwuc2VjdGlnby5jb20vU2VjdGlnb1B1Ymxp
# Y0NvZGVTaWduaW5nUm9vdFI0Ni5jcmwwewYIKwYBBQUHAQEEbzBtMEYGCCsGAQUF
# BzAChjpodHRwOi8vY3J0LnNlY3RpZ28uY29tL1NlY3RpZ29QdWJsaWNDb2RlU2ln
# bmluZ1Jvb3RSNDYucDdjMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5zZWN0aWdv
# LmNvbTANBgkqhkiG9w0BAQwFAAOCAgEABv+C4XdjNm57oRUgmxP/BP6YdURhw1aV
# cdGRP4Wh60BAscjW4HL9hcpkOTz5jUug2oeunbYAowbFC2AKK+cMcXIBD0ZdOaWT
# syNyBBsMLHqafvIhrCymlaS98+QpoBCyKppP0OcxYEdU0hpsaqBBIZOtBajjcw5+
# w/KeFvPYfLF/ldYpmlG+vd0xqlqd099iChnyIMvY5HexjO2AmtsbpVn0OhNcWbWD
# RF/3sBp6fWXhz7DcML4iTAWS+MVXeNLj1lJziVKEoroGs9Mlizg0bUMbOalOhOfC
# ipnx8CaLZeVme5yELg09Jlo8BMe80jO37PU8ejfkP9/uPak7VLwELKxAMcJszkye
# iaerlphwoKx1uHRzNyE6bxuSKcutisqmKL5OTunAvtONEoteSiabkPVSZ2z76mKn
# zAfZxCl/3dq3dUNw4rg3sTCggkHSRqTqlLMS7gjrhTqBmzu1L90Y1KWN/Y5JKdGv
# spbOrTfOXyXvmPL6E52z1NZJ6ctuMFBQZH3pwWvqURR8AgQdULUvrxjUYbHHj95E
# jza63zdrEcxWLDX6xWls/GDnVNueKjWUH3fTv1Y8Wdho698YADR7TNx8X8z2Bev6
# SivBBOHY+uqiirZtg0y9ShQoPzmCcn63Syatatvx157YK9hlcPmVoa1oDE5/L9Uo
# 2bC5a4CH2RwwggZZMIIEQaADAgECAg0B7BySQN79LkBdfEd0MA0GCSqGSIb3DQEB
# DAUAMEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFI2MRMwEQYDVQQK
# EwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTE4MDYyMDAwMDAw
# MFoXDTM0MTIxMDAwMDAwMFowWzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2Jh
# bFNpZ24gbnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENB
# IC0gU0hBMzg0IC0gRzQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDw
# AuIwI/rgG+GadLOvdYNfqUdSx2E6Y3w5I3ltdPwx5HQSGZb6zidiW64HiifuV6PE
# Ne2zNMeswwzrgGZt0ShKwSy7uXDycq6M95laXXauv0SofEEkjo+6xU//NkGrpy39
# eE5DiP6TGRfZ7jHPvIo7bmrEiPDul/bc8xigS5kcDoenJuGIyaDlmeKe9JxMP11b
# 7Lbv0mXPRQtUPbFUUweLmW64VJmKqDGSO/J6ffwOWN+BauGwbB5lgirUIceU/kKW
# O/ELsX9/RpgOhz16ZevRVqkuvftYPbWF+lOZTVt07XJLog2CNxkM0KvqWsHvD9WZ
# uT/0TzXxnA/TNxNS2SU07Zbv+GfqCL6PSXr/kLHU9ykV1/kNXdaHQx50xHAotIB7
# vSqbu4ThDqxvDbm19m1W/oodCT4kDmcmx/yyDaCUsLKUzHvmZ/6mWLLU2EESwVX9
# bpHFu7FMCEue1EIGbxsY1TbqZK7O/fUF5uJm0A4FIayxEQYjGeT7BTRE6giunUln
# EYuC5a1ahqdm/TMDAd6ZJflxbumcXQJMYDzPAo8B/XLukvGnEt5CEk3sqSbldwKs
# DlcMCdFhniaI/MiyTdtk8EWfusE/VKPYdgKVbGqNyiJc9gwE4yn6S7Ac0zd0hNkd
# Zqs0c48efXxeltY9GbCX6oxQkW2vV4Z+EDcdaxoU3wIDAQABo4IBKTCCASUwDgYD
# VR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFOoWxmnn
# 48tXRTkzpPBAvtDDvWWWMB8GA1UdIwQYMBaAFK5sBaOTE+Ki5+LXHNbH8H/IZ1Og
# MD4GCCsGAQUFBwEBBDIwMDAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AyLmdsb2Jh
# bHNpZ24uY29tL3Jvb3RyNjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLmds
# b2JhbHNpZ24uY29tL3Jvb3QtcjYuY3JsMEcGA1UdIARAMD4wPAYEVR0gADA0MDIG
# CCsGAQUFBwIBFiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5
# LzANBgkqhkiG9w0BAQwFAAOCAgEAf+KI2VdnK0JfgacJC7rEuygYVtZMv9sbB3DG
# +wsJrQA6YDMfOcYWaxlASSUIHuSb99akDY8elvKGohfeQb9P4byrze7AI4zGhf5L
# FST5GETsH8KkrNCyz+zCVmUdvX/23oLIt59h07VGSJiXAmd6FpVK22LG0LMCzDRI
# RVXd7OlKn14U7XIQcXZw0g+W8+o3V5SRGK/cjZk4GVjCqaF+om4VJuq0+X8q5+dI
# ZGkv0pqhcvb3JEt0Wn1yhjWzAlcfi5z8u6xM3vreU0yD/RKxtklVT3WdrG9KyC5q
# ucqIwxIwTrIIc59eodaZzul9S5YszBZrGM3kWTeGCSziRdayzW6CdaXajR63Wy+I
# Lj198fKRMAWcznt8oMWsr1EG8BHHHTDFUVZg6HyVPSLj1QokUyeXgPpIiScseeI8
# 5Zse46qEgok+wEr1If5iEO0dMPz2zOpIJ3yLdUJ/a8vzpWuVHwRYNAqJ7YJQ5NF7
# qMnmvkiqK1XZjbclIA4bUaDUY6qD6mxyYUrJ+kPExlfFnbY8sIuwuRwx773vFNgU
# QGwgHcIt6AvGjW2MtnHtUiH+PvafnzkarqzSL3ogsfSsqh3iLRSd+pZqHcY8yvPZ
# HL9TTaRHWXyVxENB+SXiLBB+gfkNlKd98rUJ9dhgckBQlSDUQ0S++qCV5yBZtnjG
# pGqqIpswggZoMIIEUKADAgECAhABSJA9woq8p6EZTQwcV7gpMA0GCSqGSIb3DQEB
# CwUAMFsxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMTEw
# LwYDVQQDEyhHbG9iYWxTaWduIFRpbWVzdGFtcGluZyBDQSAtIFNIQTM4NCAtIEc0
# MB4XDTIyMDQwNjA3NDE1OFoXDTMzMDUwODA3NDE1OFowYzELMAkGA1UEBhMCQkUx
# GTAXBgNVBAoMEEdsb2JhbFNpZ24gbnYtc2ExOTA3BgNVBAMMMEdsb2JhbHNpZ24g
# VFNBIGZvciBNUyBBdXRoZW50aWNvZGUgQWR2YW5jZWQgLSBHNDCCAaIwDQYJKoZI
# hvcNAQEBBQADggGPADCCAYoCggGBAMLJ3AO2G1D6Kg3onKQh2yinHfWAtRJ0I/5e
# L8MaXZayIBkZUF92IyY1xiHslO+1ojrFkIGbIe8LJ6TjF2Q72pPUVi8811j5bazA
# L5B4I0nA+MGPcBPUa98miFp2e0j34aSm7wsa8yVUD4CeIxISE9Gw9wLjKw3/QD4A
# QkPeGu9M9Iep8p480Abn4mPS60xb3V1YlNPlpTkoqgdediMw/Px/mA3FZW0b1XRF
# OkawohZ13qLCKnB8tna82Ruuul2c9oeVzqqo4rWjsZNuQKWbEIh2Fk40ofye8eEa
# VNHIJFeUdq3Cx+yjo5Z14sYoawIF6Eu5teBSK3gBjCoxLEzoBeVvnw+EJi5obPrL
# TRl8GMH/ahqpy76jdfjpyBiyzN0vQUAgHM+ICxfJsIpDy+Jrk1HxEb5CvPhR8toA
# Ar4IGCgFJ8TcO113KR4Z1EEqZn20UnNcQqWQ043Fo6o3znMBlCQZQkPRlI9Lft3L
# bbwbTnv5qgsiS0mASXAbLU/eNGA+vQIDAQABo4IBnjCCAZowDgYDVR0PAQH/BAQD
# AgeAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMB0GA1UdDgQWBBRba3v0cHQIwQ0q
# yO/xxLlA0krG/TBMBgNVHSAERTBDMEEGCSsGAQQBoDIBHjA0MDIGCCsGAQUFBwIB
# FiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzAMBgNVHRMB
# Af8EAjAAMIGQBggrBgEFBQcBAQSBgzCBgDA5BggrBgEFBQcwAYYtaHR0cDovL29j
# c3AuZ2xvYmFsc2lnbi5jb20vY2EvZ3N0c2FjYXNoYTM4NGc0MEMGCCsGAQUFBzAC
# hjdodHRwOi8vc2VjdXJlLmdsb2JhbHNpZ24uY29tL2NhY2VydC9nc3RzYWNhc2hh
# Mzg0ZzQuY3J0MB8GA1UdIwQYMBaAFOoWxmnn48tXRTkzpPBAvtDDvWWWMEEGA1Ud
# HwQ6MDgwNqA0oDKGMGh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vY2EvZ3N0c2Fj
# YXNoYTM4NGc0LmNybDANBgkqhkiG9w0BAQsFAAOCAgEALms+j3+wsGDZ8Z2E3JW2
# 318NvyRR4xoGqlUEy2HB72Vxrgv9lCRXAMfk9gy8GJV9LxlqYDOmvtAIVVYEtuP+
# HrvlEHZUO6tcIV4qNU1Gy6ZMugRAYGAs29P2nd7KMhAMeLC7VsUHS3C8pw+rcryN
# y+vuwUxr2fqYoXQ+6ajIeXx2d0j9z+PwDcHpw5LgBwwTLz9rfzXZ1bfub3xYwPE/
# DBmyAqNJTJwEw/C0l6fgTWolujQWYmbIeLxpc6pfcqI1WB4m678yFKoSeuv0lmt/
# cqzqpzkIMwE2PmEkfhGdER52IlTjQLsuhgx2nmnSxBw9oguMiAQDVN7pGxf+LCue
# 2dZbIjj8ZECGzRd/4amfub+SQahvJmr0DyiwQJGQL062dlC8TSPZf09rkymnbOfQ
# MD6pkx/CUCs5xbL4TSck0f122L75k/SpVArVdljRPJ7qGugkxPs28S9Z05LD7Mtg
# Uh4cRiUI/37Zk64UlaiGigcuVItzTDcVOFBWh/FPrhyPyaFsLwv8uxxvLb2qtuto
# I/DtlCcUY8us9GeKLIHTFBIYAT+Eeq7sR2A/aFiZyUrCoZkVBcKt3qLv16dVfLyE
# G02Uu45KhUTZgT2qoyVVX6RrzTZsAPn/ct5a7P/JoEGWGkBqhZEcr3VjqMtaM7WU
# M36yjQ9zvof8rzpzH3sg23IwggZyMIIE2qADAgECAhALYufvMdbwtA/sWXrOPd+k
# MA0GCSqGSIb3DQEBDAUAMFQxCzAJBgNVBAYTAkdCMRgwFgYDVQQKEw9TZWN0aWdv
# IExpbWl0ZWQxKzApBgNVBAMTIlNlY3RpZ28gUHVibGljIENvZGUgU2lnbmluZyBD
# QSBSMzYwHhcNMjIwMjA3MDAwMDAwWhcNMjUwMjA2MjM1OTU5WjB2MQswCQYDVQQG
# EwJHUjEdMBsGA1UECAwUS2VudHJpa8OtIE1ha2Vkb27DrWExIzAhBgNVBAoMGkth
# dHNhdm91bmlkaXMgS29uc3RhbnRpbm9zMSMwIQYDVQQDDBpLYXRzYXZvdW5pZGlz
# IEtvbnN0YW50aW5vczCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAIxd
# u9+Lc83wVLNDuBn9NzaXp9JzWaiQs6/uQ6fbCUHC4/2lLfKzOUus3e76lSpnmo7b
# kCLipjwZH+yqWRuvrccrfZCoyVvBAuzdE69AMR02Z3Ay5fjN6kWPfACkgLe4D9og
# SDh/ZsOfHD89+yKKbMqsDdj4w/zjIRwcYGgBR6QOGP8mLAIKH7TwvoYBauLlb6aM
# /eG/TGm3cWd4oonwjiYU2fDkhPPdGgCXFem+vhuIWoDk0A0OVwEzDFi3H9zdv6hB
# bv+d37bl4W81zrm42BMC9kWgiEuoDUQeY4OX2RdNqNtzkPMI7Q93YlnJwitLfSrg
# GmcU6fiE0vIW3mkf7mebYttI7hJVvqt0BaCPRBhOXHT+KNUvenSXwBzTVef/9h70
# POF9ZXbUhTlJJIHJE5SLZ2DvjAOLUvZuvo3bGJIIASHnTKEIVLCUwJB77NeKsgDx
# YGDFc2OQiI9MuFWdaty4B0sXQMj+KxZTb/Q0O850xkLIbQrAS6T2LKEuviE6Ua7b
# QFXi1nFZ+r9XjOwZQmQDuKx2D92AUR/qwcpIM8tIbJdlNzEqE/2wwaE10G+sKuX/
# SaJFZbKXqDMqJr1fw0M9n0saSTX1IZrlrEcppDRN+OIdnQL3cf6PTqv1PTS4pZ/9
# m7iweMcU4lLJ7L/8ZKiIb0ThD9kIddJ5coICzr/hAgMBAAGjggGcMIIBmDAfBgNV
# HSMEGDAWgBQPKssghyi47G9IritUpimqF6TNDDAdBgNVHQ4EFgQUidoax6lNhMBv
# wMAg4rCjdP30S8QwDgYDVR0PAQH/BAQDAgeAMAwGA1UdEwEB/wQCMAAwEwYDVR0l
# BAwwCgYIKwYBBQUHAwMwEQYJYIZIAYb4QgEBBAQDAgQQMEoGA1UdIARDMEEwNQYM
# KwYBBAGyMQECAQMCMCUwIwYIKwYBBQUHAgEWF2h0dHBzOi8vc2VjdGlnby5jb20v
# Q1BTMAgGBmeBDAEEATBJBgNVHR8EQjBAMD6gPKA6hjhodHRwOi8vY3JsLnNlY3Rp
# Z28uY29tL1NlY3RpZ29QdWJsaWNDb2RlU2lnbmluZ0NBUjM2LmNybDB5BggrBgEF
# BQcBAQRtMGswRAYIKwYBBQUHMAKGOGh0dHA6Ly9jcnQuc2VjdGlnby5jb20vU2Vj
# dGlnb1B1YmxpY0NvZGVTaWduaW5nQ0FSMzYuY3J0MCMGCCsGAQUFBzABhhdodHRw
# Oi8vb2NzcC5zZWN0aWdvLmNvbTANBgkqhkiG9w0BAQwFAAOCAYEAG+2x4Vn8dk+Y
# w0Khv6CZY+/QKXW+aG/siN+Wn24ijKmvbjiNEbEfCicwZ12YpkOCnuFtrXs8k9zB
# PusV1/wdH+0buzzSuCmkyx5v4wSqh8OsyWIyIsW/thnTyzYys/Gw0ep4RHFtbNTR
# K4+PowRHW1DxOjaxJUNi9sbNG1RiDSAVkGAnHo9m+wAK6WFOIFV5vAbCp8upQPwh
# aGo7u2hXP/d18mf/4BtQ+J7voX1BFwgCLhlrho0NY8MgLGuMBcu5zw07j0ZFBvyr
# axDPVwDoZw07JM018c2Nn4hg2XbYyMtUkvCi120uI6299fGs6Tmi9ttP4c6pubs4
# TY40jVxlxxnqqvIA/wRYXpWOe5Z3n80OFEatcFtzLrQTyO9Q1ptk6gso/RNpRu3r
# ug+aXqfvP3a32FNZAQ6dUGr0ae57OtgM+hlLMhSSyhugHrnbi9oNAsqa/KA6UtD7
# MxWJIwAqACTqqVjUTKjzaaE+12aS3vaO6tEqCuT+DOtu7aJRPnyyMYIGUTCCBk0C
# AQEwaDBUMQswCQYDVQQGEwJHQjEYMBYGA1UEChMPU2VjdGlnbyBMaW1pdGVkMSsw
# KQYDVQQDEyJTZWN0aWdvIFB1YmxpYyBDb2RlIFNpZ25pbmcgQ0EgUjM2AhALYufv
# MdbwtA/sWXrOPd+kMA0GCWCGSAFlAwQCAQUAoEwwGQYJKoZIhvcNAQkDMQwGCisG
# AQQBgjcCAQQwLwYJKoZIhvcNAQkEMSIEILs7NE09/M+p1BLjNBXYf1V2Gfl+hHMr
# BmliSVEuVMsHMA0GCSqGSIb3DQEBAQUABIICAFBubyuBAhuaqkCW+oi4kFGgpuqU
# gwvv+1oMa9cHf3W8s1LQiSpyBUG+vlPlzfOY+cAdFjQ+DrQdQ9FOuXUMcJhZSmGq
# klcHb+aVtIooHjkvcIa2BKZxKwM7LPBPUNyzvWnmRTDKpOyaujIwRR3aaZK3gXP/
# HbJkcMYXRfBiR/g89EL1uD5Z0Kae87UiAz/ohMXLfrbMbkff543i7NF0h2omZXTF
# FQzC4PDpnZPNBTNwOv03zmM6nZHldTR4EIWJ4bHo+ddvzTqHGDnePgtRIEaM+4Vd
# V5LNEwJfs3QqVVrKQPo9pgucAyUtZLooqf+ShQt3zeiIN0kKwHZYoG04RXUsjsBk
# Eud2MCRWP1VbzORGwE7TcntRsmwtqrxIYvZeDDWAnV2DTf+YHIBz6ZZsb11x+U03
# 2wUMLML8BQzuTNf4I3jxHSqGAtGHC1L9ht2kfRuj3yLW3/iEaxU9XXyzKeM7ZotW
# fROrwHUIybyJDa7rlgIL5lKY9y0RP6qSIGcgIN1CP7O2VugA4H77ix/qr4bS7FpM
# vwDDUgqUgS8q0uTKvMMzzzfeXiptwwb87jqeS2jGPHGsaOhDlH5n/3FOJoLzUt4M
# zrW3hYMvgXvzjPsUZZ1fartYyXulSs/TpoZGRse1PgRpqFE8ptilD0q2VIKMw9aX
# +q0+qniRA+R8fjuLoYIDbDCCA2gGCSqGSIb3DQEJBjGCA1kwggNVAgEBMG8wWzEL
# MAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExMTAvBgNVBAMT
# KEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0gRzQCEAFIkD3C
# irynoRlNDBxXuCkwCwYJYIZIAWUDBAIBoIIBPTAYBgkqhkiG9w0BCQMxCwYJKoZI
# hvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMzAyMjMxNzI1NDJaMCsGCSqGSIb3DQEJ
# NDEeMBwwCwYJYIZIAWUDBAIBoQ0GCSqGSIb3DQEBCwUAMC8GCSqGSIb3DQEJBDEi
# BCAZm7KAceWL6BODxZ8AtMajZOerPETGcMBAxps8AQJ4BjCBpAYLKoZIhvcNAQkQ
# AgwxgZQwgZEwgY4wgYsEFDEDDhdqpFkuqyyLregymfy1WF3PMHMwX6RdMFsxCzAJ
# BgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMTEwLwYDVQQDEyhH
# bG9iYWxTaWduIFRpbWVzdGFtcGluZyBDQSAtIFNIQTM4NCAtIEc0AhABSJA9woq8
# p6EZTQwcV7gpMA0GCSqGSIb3DQEBCwUABIIBgADNQWsTSs5FHNkKkebc5WOtrvn1
# Yqjh2uJ4tp9JF70MZBxzH3tCzYVeumwn+ja3W0QNKjlD0B9ZTUgKbURKpdmUDlg3
# zGNu6xDq3MHXP4MFfNvNfMroeEvHv6iAfE4MpMTgrKXc0zCtzvKfIu0Kip36izcd
# kJlZXtIH1QH3GUVoDLWZqn8mX7xjfkNrJWRx8tLq7NLTu13L+RV//r9ZydMDyOBI
# 6bcB7OMDgl+yxh5Hd14MxEozJH/pcth4grBeb90s0Yq4gz5nG06EUG8C5TfD58Qa
# 0/jayHlTACFDhwt64usf+WW/f1+iG/iFGEfWlXJARcWUUG+4aCZlTqsxPipgMqV1
# WgCHRK5rS56OPZljb82rkDRq/Pvk8dZ8cW+pgvZDFoPFDuyzhXnuLcEo1kKS5I/L
# yHbretQ05L7zETSh1/eRjsJIfI+8K4rlWBVJWVbqvyo4Q3W83OJCRd/Mn+BMPWVC
# QtPYqLF7huzkQtM2MFpdL/MO/A9MfQAHddbb7w==
# SIG # End signature block
